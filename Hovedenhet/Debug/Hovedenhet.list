
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b554  0800b554  0000c554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6c0  0800b6c0  0000c6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6c8  0800b6c8  0000c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b6cc  0800b6cc  0000c6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800b6d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000156c  24000060  0800b730  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240015cc  0800b730  0000d5cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019bec  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e67  00000000  00000000  00026c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d54  00000000  00000000  0002ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ab4  00000000  00000000  0002b97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001867d  00000000  00000000  00065430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a594  00000000  00000000  0007daad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8041  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e28  00000000  00000000  001e8084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001eceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b53c 	.word	0x0800b53c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b53c 	.word	0x0800b53c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c8:	70fb      	strb	r3, [r7, #3]
	CAM.Tx_Buffer[0] = CMD;
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	713b      	strb	r3, [r7, #4]
	CAM.Tx_Buffer[1] = CMD;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	f007 fdb2 	bl	8008242 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 80006f2:	f000 fce7 	bl	80010c4 <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d012      	beq.n	8000722 <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 80006fc:	4b67      	ldr	r3, [pc, #412]	@ (800089c <Flash_Init+0x1b4>)
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 faf3 	bl	8000cec <Read_Status_Register>
 8000706:	4603      	mov	r3, r0
 8000708:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 800070a:	7ebb      	ldrb	r3, [r7, #26]
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000712:	4b62      	ldr	r3, [pc, #392]	@ (800089c <Flash_Init+0x1b4>)
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	7eba      	ldrb	r2, [r7, #26]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb16 	bl	8000d4c <Write_Status_Register>
 8000720:	e011      	b.n	8000746 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000722:	4b5e      	ldr	r3, [pc, #376]	@ (800089c <Flash_Init+0x1b4>)
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fae0 	bl	8000cec <Read_Status_Register>
 800072c:	4603      	mov	r3, r0
 800072e:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000730:	7efb      	ldrb	r3, [r7, #27]
 8000732:	f023 0308 	bic.w	r3, r3, #8
 8000736:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000738:	4b58      	ldr	r3, [pc, #352]	@ (800089c <Flash_Init+0x1b4>)
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	7efa      	ldrb	r2, [r7, #27]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fb03 	bl	8000d4c <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 8000746:	4b55      	ldr	r3, [pc, #340]	@ (800089c <Flash_Init+0x1b4>)
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 face 	bl	8000cec <Read_Status_Register>
 8000750:	4603      	mov	r3, r0
 8000752:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000754:	7e7b      	ldrb	r3, [r7, #25]
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 800075c:	7e7b      	ldrb	r3, [r7, #25]
 800075e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000762:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 8000764:	4b4d      	ldr	r3, [pc, #308]	@ (800089c <Flash_Init+0x1b4>)
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	7e7a      	ldrb	r2, [r7, #25]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 faed 	bl	8000d4c <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 8000780:	2300      	movs	r3, #0
 8000782:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 8000784:	2300      	movs	r3, #0
 8000786:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 8000788:	e031      	b.n	80007ee <Flash_Init+0x106>
		Page_Bit = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000794:	2210      	movs	r2, #16
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f950 	bl	8000a3c <Read_Data>

		for(int i = 0; i < 16; i++){
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	e013      	b.n	80007ca <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007a2:	f107 0208 	add.w	r2, r7, #8
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2bff      	cmp	r3, #255	@ 0xff
 80007ae:	d109      	bne.n	80007c4 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007b0:	2201      	movs	r2, #1
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	3301      	adds	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	dde8      	ble.n	80007a2 <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 80007d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d003      	beq.n	80007e2 <Flash_Init+0xfa>
			Temp_Page += 64;
 80007da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007dc:	3340      	adds	r3, #64	@ 0x40
 80007de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80007e0:	e005      	b.n	80007ee <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 80007e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d008      	beq.n	80007fa <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 80007e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007ea:	3b40      	subs	r3, #64	@ 0x40
 80007ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80007ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d1c8      	bne.n	800078a <Flash_Init+0xa2>
 80007f8:	e000      	b.n	80007fc <Flash_Init+0x114>
				break;
 80007fa:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000800:	e02a      	b.n	8000858 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 8000802:	2300      	movs	r3, #0
 8000804:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000806:	f107 0108 	add.w	r1, r7, #8
 800080a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800080c:	2210      	movs	r2, #16
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f914 	bl	8000a3c <Read_Data>

		for(int i = 0; i < 16; i++){
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	e013      	b.n	8000842 <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 800081a:	f107 0208 	add.w	r2, r7, #8
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2bff      	cmp	r3, #255	@ 0xff
 8000826:	d109      	bne.n	800083c <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	b21a      	sxth	r2, r3
 8000832:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3301      	adds	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	dde8      	ble.n	800081a <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800084a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084e:	4293      	cmp	r3, r2
 8000850:	d002      	beq.n	8000858 <Flash_Init+0x170>
			Temp_Page++;
 8000852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000854:	3301      	adds	r3, #1
 8000856:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085e:	4293      	cmp	r3, r2
 8000860:	d1cf      	bne.n	8000802 <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <Flash_Init+0x1b8>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000868:	461a      	mov	r2, r3
 800086a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800086c:	8153      	strh	r3, [r2, #10]
	Flash.Block_Mem=(Flash.Page_Index/64);
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <Flash_Init+0x1b8>)
 8000870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000874:	895b      	ldrh	r3, [r3, #10]
 8000876:	099b      	lsrs	r3, r3, #6
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <Flash_Init+0x1b8>)
 800087c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000880:	811a      	strh	r2, [r3, #8]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <Flash_Init+0x1b8>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000888:	895b      	ldrh	r3, [r3, #10]
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <Flash_Init+0x1bc>)
 800088e:	f000 fbf3 	bl	8001078 <USART3_Printf>
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2400009c 	.word	0x2400009c
 80008a0:	240000a4 	.word	0x240000a4
 80008a4:	0800b554 	.word	0x0800b554

080008a8 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	463b      	mov	r3, r7
 80008b0:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fa18 	bl	8000cec <Read_Status_Register>
 80008bc:	4603      	mov	r3, r0
 80008be:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 80008c0:	2064      	movs	r0, #100	@ 0x64
 80008c2:	f000 fbaf 	bl	8001024 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fa0f 	bl	8000cec <Read_Status_Register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 80008d2:	2064      	movs	r0, #100	@ 0x64
 80008d4:	f000 fba6 	bl	8001024 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 80008d8:	797b      	ldrb	r3, [r7, #5]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fa06 	bl	8000cec <Read_Status_Register>
 80008e0:	4603      	mov	r3, r0
 80008e2:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 fb9d 	bl	8001024 <delay_ns>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 8000900:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <Write_Data+0x94>)
 8000902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000906:	895b      	ldrh	r3, [r3, #10]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d108      	bne.n	800091e <Write_Data+0x2a>
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <Write_Data+0x94>)
 800090e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <Write_Data+0x2a>
		Block_Erase(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fb4f 	bl	8000fbc <Block_Erase>
	}
	uint16_t count=0;
 800091e:	2300      	movs	r3, #0
 8000920:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000922:	e028      	b.n	8000976 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <Write_Data+0x94>)
 8000926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <Write_Data+0x94>)
 8000934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	3301      	adds	r3, #1
 800093c:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <Write_Data+0x94>)
 800093e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000942:	6053      	str	r3, [r2, #4]
		data++;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3301      	adds	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <Write_Data+0x94>)
 800094c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <Write_Data+0x94>)
 8000958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800095c:	801a      	strh	r2, [r3, #0]
		count++;
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	3301      	adds	r3, #1
 8000962:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <Write_Data+0x94>)
 8000966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000970:	d301      	bcc.n	8000976 <Write_Data+0x82>
			Write_to_page();
 8000972:	f000 f80b 	bl	800098c <Write_to_page>
	while(count<lenght){
 8000976:	89fa      	ldrh	r2, [r7, #14]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3d2      	bcc.n	8000924 <Write_Data+0x30>
		}
	}
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	240000a4 	.word	0x240000a4

0800098c <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	if(Flash.Buffer_flip==0){
 8000990:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <Write_to_page+0xa8>)
 8000992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d116      	bne.n	80009ca <Write_to_page+0x3e>
		Flash.Buffer_flip=1;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <Write_to_page+0xa8>)
 800099e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a2:	2201      	movs	r2, #1
 80009a4:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_1;
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <Write_to_page+0xa8>)
 80009a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <Write_to_page+0xac>)
 80009b0:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <Write_to_page+0xa8>)
 80009b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b8:	2200      	movs	r2, #0
 80009ba:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	491c      	ldr	r1, [pc, #112]	@ (8000a34 <Write_to_page+0xa8>)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fa24 	bl	8000e10 <Write_Data_Buffer>
 80009c8:	e015      	b.n	80009f6 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_flip=0;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <Write_to_page+0xa8>)
 80009cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d0:	2200      	movs	r2, #0
 80009d2:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <Write_to_page+0xa8>)
 80009d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <Write_to_page+0xa8>)
 80009de:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <Write_to_page+0xa8>)
 80009e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e6:	2200      	movs	r2, #0
 80009e8:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 80009ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ee:	4912      	ldr	r1, [pc, #72]	@ (8000a38 <Write_to_page+0xac>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fa0d 	bl	8000e10 <Write_Data_Buffer>
	}
	Write_Data_Flash(Flash.Page_Index);
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <Write_to_page+0xa8>)
 80009f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009fc:	895b      	ldrh	r3, [r3, #10]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fa42 	bl	8000e88 <Write_Data_Flash>
	Flash.Page_Index++;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <Write_to_page+0xa8>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0a:	895b      	ldrh	r3, [r3, #10]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <Write_to_page+0xa8>)
 8000a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a16:	815a      	strh	r2, [r3, #10]
	Flash.Buffer_Index=0;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <Write_to_page+0xa8>)
 8000a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <Write_to_page+0xa8>)
 8000a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a28:	895b      	ldrh	r3, [r3, #10]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f81c 	bl	8000a68 <Automatic_Block_Managment>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240000a4 	.word	0x240000a4
 8000a38:	240008a4 	.word	0x240008a4

08000a3c <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fa4e 	bl	8000ef0 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f000 fa7b 	bl	8000f54 <Read_Data_Buffer>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000a78:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7e:	891b      	ldrh	r3, [r3, #8]
 8000a80:	89fa      	ldrh	r2, [r7, #14]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d00a      	beq.n	8000a9c <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa97 	bl	8000fbc <Block_Erase>
		Flash.Block_Mem=Block;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a94:	461a      	mov	r2, r3
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	8113      	strh	r3, [r2, #8]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000a9a:	e005      	b.n	8000aa8 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	8113      	strh	r3, [r2, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240000a4 	.word	0x240000a4

08000ab4 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000aba:	482c      	ldr	r0, [pc, #176]	@ (8000b6c <Chip_Erase+0xb8>)
 8000abc:	f000 fadc 	bl	8001078 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	492a      	ldr	r1, [pc, #168]	@ (8000b70 <Chip_Erase+0xbc>)
 8000ac8:	482a      	ldr	r0, [pc, #168]	@ (8000b74 <Chip_Erase+0xc0>)
 8000aca:	f007 fc48 	bl	800835e <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <Chip_Erase+0xbc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b59      	cmp	r3, #89	@ 0x59
 8000ad4:	d143      	bne.n	8000b5e <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000ad6:	4828      	ldr	r0, [pc, #160]	@ (8000b78 <Chip_Erase+0xc4>)
 8000ad8:	f000 face 	bl	8001078 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	e009      	b.n	8000af6 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	019b      	lsls	r3, r3, #6
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa66 	bl	8000fbc <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000afc:	ddf1      	ble.n	8000ae2 <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
		Flash.Page_Index=0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0e:	2200      	movs	r2, #0
 8000b10:	815a      	strh	r2, [r3, #10]
		Flash.Block_Mem=0;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b18:	2200      	movs	r2, #0
 8000b1a:	811a      	strh	r2, [r3, #8]
		Flash.Buffer_flip=0;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b22:	2200      	movs	r2, #0
 8000b24:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b30:	6053      	str	r3, [r2, #4]

		Flash_Data* pointer = &Flash;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b34:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3c:	21ff      	movs	r1, #255	@ 0xff
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00a f87e 	bl	800ac40 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4e:	21ff      	movs	r1, #255	@ 0xff
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00a f875 	bl	800ac40 <memset>
		USART3_Printf("Ferdig\r\n");
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <Chip_Erase+0xcc>)
 8000b58:	f000 fa8e 	bl	8001078 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b5c:	e002      	b.n	8000b64 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b5e:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <Chip_Erase+0xd0>)
 8000b60:	f000 fa8a 	bl	8001078 <USART3_Printf>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0800b56c 	.word	0x0800b56c
 8000b70:	2400007d 	.word	0x2400007d
 8000b74:	240013e4 	.word	0x240013e4
 8000b78:	0800b5a0 	.word	0x0800b5a0
 8000b7c:	240000a4 	.word	0x240000a4
 8000b80:	0800b5b4 	.word	0x0800b5b4
 8000b84:	0800b5c0 	.word	0x0800b5c0

08000b88 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	b089      	sub	sp, #36	@ 0x24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	80fb      	strh	r3, [r7, #6]
 8000b94:	466b      	mov	r3, sp
 8000b96:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 f9a9 	bl	8000ef0 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000b9e:	88f9      	ldrh	r1, [r7, #6]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	b28b      	uxth	r3, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4698      	mov	r8, r3
 8000bac:	4691      	mov	r9, r2
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bc2:	b28b      	uxth	r3, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	4615      	mov	r5, r2
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	00eb      	lsls	r3, r5, #3
 8000bd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd8:	00e2      	lsls	r2, r4, #3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	3307      	adds	r3, #7
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	ebad 0d03 	sub.w	sp, sp, r3
 8000be6:	466b      	mov	r3, sp
 8000be8:	3300      	adds	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000bfe:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4825      	ldr	r0, [pc, #148]	@ (8000ca0 <Read_Data_Cont+0x118>)
 8000c0a:	f003 fdf7 	bl	80047fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	2204      	movs	r2, #4
 8000c12:	4922      	ldr	r1, [pc, #136]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000c14:	4823      	ldr	r0, [pc, #140]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c16:	f006 fd7b 	bl	8007710 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	4820      	ldr	r0, [pc, #128]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c24:	f006 ff62 	bl	8007aec <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3303      	adds	r3, #3
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	330b      	adds	r3, #11
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c40:	e018      	b.n	8000c74 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c42:	8bf9      	ldrh	r1, [r7, #30]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <Read_Data_Cont+0x120>)
 8000c4a:	f000 fa15 	bl	8001078 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	68f9      	ldr	r1, [r7, #12]
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c58:	f006 ff48 	bl	8007aec <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3303      	adds	r3, #3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	330b      	adds	r3, #11
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c7a:	d103      	bne.n	8000c84 <Read_Data_Cont+0xfc>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	7bdb      	ldrb	r3, [r3, #15]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d0de      	beq.n	8000c42 <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <Read_Data_Cont+0x118>)
 8000c8a:	f003 fdb7 	bl	80047fc <HAL_GPIO_WritePin>
 8000c8e:	46b5      	mov	sp, r6
}
 8000c90:	bf00      	nop
 8000c92:	3724      	adds	r7, #36	@ 0x24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24000090 	.word	0x24000090
 8000ca0:	58020000 	.word	0x58020000
 8000ca4:	240011a0 	.word	0x240011a0
 8000ca8:	0800b5d8 	.word	0x0800b5d8

08000cac <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <Write_Enable+0x34>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	480a      	ldr	r0, [pc, #40]	@ (8000ce4 <Write_Enable+0x38>)
 8000cbc:	f003 fd9e 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cc0:	2364      	movs	r3, #100	@ 0x64
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <Write_Enable+0x34>)
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <Write_Enable+0x3c>)
 8000cc8:	f006 fd22 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <Write_Enable+0x38>)
 8000cd2:	f003 fd93 	bl	80047fc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f000 f9a4 	bl	8001024 <delay_ns>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000090 	.word	0x24000090
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	240011a0 	.word	0x240011a0

08000cec <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <Read_Status_Register+0x50>)
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <Read_Status_Register+0x50>)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d02:	2200      	movs	r2, #0
 8000d04:	2110      	movs	r1, #16
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <Read_Status_Register+0x54>)
 8000d08:	f003 fd78 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d0c:	2364      	movs	r3, #100	@ 0x64
 8000d0e:	2202      	movs	r2, #2
 8000d10:	490a      	ldr	r1, [pc, #40]	@ (8000d3c <Read_Status_Register+0x50>)
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <Read_Status_Register+0x58>)
 8000d14:	f006 fcfc 	bl	8007710 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d18:	2364      	movs	r3, #100	@ 0x64
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	490a      	ldr	r1, [pc, #40]	@ (8000d48 <Read_Status_Register+0x5c>)
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <Read_Status_Register+0x58>)
 8000d20:	f006 fee4 	bl	8007aec <HAL_SPI_Receive>
	csHIGH();
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <Read_Status_Register+0x54>)
 8000d2a:	f003 fd67 	bl	80047fc <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d2e:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <Read_Status_Register+0x50>)
 8000d30:	795b      	ldrb	r3, [r3, #5]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000090 	.word	0x24000090
 8000d40:	58020000 	.word	0x58020000
 8000d44:	240011a0 	.word	0x240011a0
 8000d48:	24000095 	.word	0x24000095

08000d4c <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d5e:	221f      	movs	r2, #31
 8000d60:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <Write_Status_Register+0x54>)
 8000d74:	f003 fd42 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d7e:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <Write_Status_Register+0x58>)
 8000d80:	f006 fcc6 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <Write_Status_Register+0x54>)
 8000d8a:	f003 fd37 	bl	80047fc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d8e:	2064      	movs	r0, #100	@ 0x64
 8000d90:	f000 f948 	bl	8001024 <delay_ns>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000090 	.word	0x24000090
 8000da0:	58020000 	.word	0x58020000
 8000da4:	240011a0 	.word	0x240011a0

08000da8 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <Read_ID+0x5c>)
 8000db0:	229f      	movs	r2, #159	@ 0x9f
 8000db2:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <Read_ID+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <Read_ID+0x60>)
 8000dc0:	f003 fd1c 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	490e      	ldr	r1, [pc, #56]	@ (8000e04 <Read_ID+0x5c>)
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <Read_ID+0x64>)
 8000dcc:	f006 fca0 	bl	8007710 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000dd0:	1d39      	adds	r1, r7, #4
 8000dd2:	2364      	movs	r3, #100	@ 0x64
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <Read_ID+0x64>)
 8000dd8:	f006 fe88 	bl	8007aec <HAL_SPI_Receive>
	csHIGH();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2110      	movs	r1, #16
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <Read_ID+0x60>)
 8000de2:	f003 fd0b 	bl	80047fc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000de6:	2064      	movs	r0, #100	@ 0x64
 8000de8:	f000 f91c 	bl	8001024 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	041a      	lsls	r2, r3, #16
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	79b9      	ldrb	r1, [r7, #6]
 8000df6:	430b      	orrs	r3, r1
 8000df8:	4313      	orrs	r3, r2
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000090 	.word	0x24000090
 8000e08:	58020000 	.word	0x58020000
 8000e0c:	240011a0 	.word	0x240011a0

08000e10 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e20:	f7ff ff44 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e34:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e3c:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <Write_Data_Buffer+0x70>)
 8000e44:	f003 fcda 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e48:	2364      	movs	r3, #100	@ 0x64
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	490b      	ldr	r1, [pc, #44]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <Write_Data_Buffer+0x74>)
 8000e50:	f006 fc5e 	bl	8007710 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <Write_Data_Buffer+0x74>)
 8000e5e:	f006 fc57 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <Write_Data_Buffer+0x70>)
 8000e68:	f003 fcc8 	bl	80047fc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f000 f8d9 	bl	8001024 <delay_ns>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000090 	.word	0x24000090
 8000e80:	58020000 	.word	0x58020000
 8000e84:	240011a0 	.word	0x240011a0

08000e88 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000e92:	f7ff ff0b 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <Write_Data_Flash+0x5c>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <Write_Data_Flash+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <Write_Data_Flash+0x5c>)
 8000eac:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Write_Data_Flash+0x5c>)
 8000eb4:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <Write_Data_Flash+0x60>)
 8000ebc:	f003 fc9e 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <Write_Data_Flash+0x5c>)
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <Write_Data_Flash+0x64>)
 8000ec8:	f006 fc22 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <Write_Data_Flash+0x60>)
 8000ed2:	f003 fc93 	bl	80047fc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ed6:	f000 f8f5 	bl	80010c4 <W25N_WaitForReady>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000090 	.word	0x24000090
 8000ee8:	58020000 	.word	0x58020000
 8000eec:	240011a0 	.word	0x240011a0

08000ef0 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <Select_Page_Read+0x58>)
 8000efc:	2213      	movs	r2, #19
 8000efe:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f10:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f18:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <Select_Page_Read+0x5c>)
 8000f20:	f003 fc6c 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	2204      	movs	r2, #4
 8000f28:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f2a:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <Select_Page_Read+0x60>)
 8000f2c:	f006 fbf0 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <Select_Page_Read+0x5c>)
 8000f36:	f003 fc61 	bl	80047fc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f3a:	f000 f8c3 	bl	80010c4 <W25N_WaitForReady>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	24000090 	.word	0x24000090
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	240011a0 	.word	0x240011a0

08000f54 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <Read_Data_Buffer+0x60>)
 8000f7e:	f003 fc3d 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	2204      	movs	r2, #4
 8000f86:	490a      	ldr	r1, [pc, #40]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <Read_Data_Buffer+0x64>)
 8000f8a:	f006 fbc1 	bl	8007710 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <Read_Data_Buffer+0x64>)
 8000f98:	f006 fda8 	bl	8007aec <HAL_SPI_Receive>
	csHIGH();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <Read_Data_Buffer+0x60>)
 8000fa2:	f003 fc2b 	bl	80047fc <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000090 	.word	0x24000090
 8000fb4:	58020000 	.word	0x58020000
 8000fb8:	240011a0 	.word	0x240011a0

08000fbc <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000fc6:	f7ff fe71 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <Block_Erase+0x5c>)
 8000fcc:	22d8      	movs	r2, #216	@ 0xd8
 8000fce:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <Block_Erase+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <Block_Erase+0x5c>)
 8000fe0:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <Block_Erase+0x5c>)
 8000fe8:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	480b      	ldr	r0, [pc, #44]	@ (800101c <Block_Erase+0x60>)
 8000ff0:	f003 fc04 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000ff4:	2364      	movs	r3, #100	@ 0x64
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <Block_Erase+0x5c>)
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <Block_Erase+0x64>)
 8000ffc:	f006 fb88 	bl	8007710 <HAL_SPI_Transmit>
	csHIGH();
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <Block_Erase+0x60>)
 8001006:	f003 fbf9 	bl	80047fc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 800100a:	f000 f85b 	bl	80010c4 <W25N_WaitForReady>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000090 	.word	0x24000090
 800101c:	58020000 	.word	0x58020000
 8001020:	240011a0 	.word	0x240011a0

08001024 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <delay_ns+0x48>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0a5b      	lsrs	r3, r3, #9
 8001032:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <delay_ns+0x4c>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	09db      	lsrs	r3, r3, #7
 800103a:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <delay_ns+0x50>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 800104c:	bf00      	nop
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <delay_ns+0x50>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f8      	bhi.n	800104e <delay_ns+0x2a>
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	24000000 	.word	0x24000000
 8001070:	00044b83 	.word	0x00044b83
 8001074:	e0001000 	.word	0xe0001000

08001078 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 8001078:	b40f      	push	{r0, r1, r2, r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b0a2      	sub	sp, #136	@ 0x88
 800107e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001080:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001084:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001086:	f107 0008 	add.w	r0, r7, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	f009 fdc7 	bl	800ac24 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f920 	bl	80002e0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f107 0108 	add.w	r1, r7, #8
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <USART3_Printf+0x48>)
 80010ae:	f007 f8c8 	bl	8008242 <HAL_UART_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3788      	adds	r7, #136	@ 0x88
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010bc:	b004      	add	sp, #16
 80010be:	4770      	bx	lr
 80010c0:	240013e4 	.word	0x240013e4

080010c4 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80010c8:	2064      	movs	r0, #100	@ 0x64
 80010ca:	f7ff ffab 	bl	8001024 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 80010ce:	e002      	b.n	80010d6 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f7ff ffa7 	bl	8001024 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <W25N_WaitForReady+0x2c>)
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe06 	bl	8000cec <Read_Status_Register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f2      	bne.n	80010d0 <W25N_WaitForReady+0xc>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2400009c 	.word	0x2400009c

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010f8:	f000 fcc4 	bl	8001a84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f001 f9c4 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f8e8 	bl	80012d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 8001104:	f000 fc4a 	bl	800199c <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f000 fb70 	bl	80017ec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800110c:	f000 f95e 	bl	80013cc <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001110:	f000 f9e6 	bl	80014e0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001114:	f000 fb1e 	bl	8001754 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001118:	f000 fa38 	bl	800158c <MX_UART5_Init>
  MX_UART8_Init();
 800111c:	f000 fa82 	bl	8001624 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8001120:	f000 facc 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 8001124:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <main+0x1b4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2202      	movs	r2, #2
 800112a:	4960      	ldr	r1, [pc, #384]	@ (80012ac <main+0x1b8>)
 800112c:	4618      	mov	r0, r3
 800112e:	f007 f9df 	bl	80084f0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8001132:	4b5f      	ldr	r3, [pc, #380]	@ (80012b0 <main+0x1bc>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	495e      	ldr	r1, [pc, #376]	@ (80012b4 <main+0x1c0>)
 800113a:	4618      	mov	r0, r3
 800113c:	f007 f9d8 	bl	80084f0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 8001140:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <main+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	495d      	ldr	r1, [pc, #372]	@ (80012bc <main+0x1c8>)
 8001148:	4618      	mov	r0, r3
 800114a:	f007 f9d1 	bl	80084f0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff faca 	bl	80006e8 <Flash_Init>
  Flash.ID=Read_ID();
 8001154:	f7ff fe28 	bl	8000da8 <Read_ID>
 8001158:	4603      	mov	r3, r0
 800115a:	4a59      	ldr	r2, [pc, #356]	@ (80012c0 <main+0x1cc>)
 800115c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001160:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  Read_Register(SR);
 8001162:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <main+0x1d0>)
 8001164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001168:	f7ff fb9e 	bl	80008a8 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2201      	movs	r2, #1
 8001170:	4955      	ldr	r1, [pc, #340]	@ (80012c8 <main+0x1d4>)
 8001172:	4856      	ldr	r0, [pc, #344]	@ (80012cc <main+0x1d8>)
 8001174:	f007 f8f3 	bl	800835e <HAL_UART_Receive>

	  //CAM to IDLE
	  if(command==0x41){
 8001178:	4b53      	ldr	r3, [pc, #332]	@ (80012c8 <main+0x1d4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b41      	cmp	r3, #65	@ 0x41
 800117e:	d111      	bne.n	80011a4 <main+0xb0>
		  command_cam(CAM1, IDLE);
 8001180:	4a49      	ldr	r2, [pc, #292]	@ (80012a8 <main+0x1b4>)
 8001182:	2341      	movs	r3, #65	@ 0x41
 8001184:	ca07      	ldmia	r2, {r0, r1, r2}
 8001186:	f7ff fa99 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 800118a:	4a49      	ldr	r2, [pc, #292]	@ (80012b0 <main+0x1bc>)
 800118c:	2341      	movs	r3, #65	@ 0x41
 800118e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001190:	f7ff fa94 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 8001194:	4a48      	ldr	r2, [pc, #288]	@ (80012b8 <main+0x1c4>)
 8001196:	2341      	movs	r3, #65	@ 0x41
 8001198:	ca07      	ldmia	r2, {r0, r1, r2}
 800119a:	f7ff fa8f 	bl	80006bc <command_cam>
		  command=0;
 800119e:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <main+0x1d4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x42){
 80011a4:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <main+0x1d4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b42      	cmp	r3, #66	@ 0x42
 80011aa:	d111      	bne.n	80011d0 <main+0xdc>
		  command_cam(CAM1, REC);
 80011ac:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <main+0x1b4>)
 80011ae:	2342      	movs	r3, #66	@ 0x42
 80011b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b2:	f7ff fa83 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 80011b6:	4a3e      	ldr	r2, [pc, #248]	@ (80012b0 <main+0x1bc>)
 80011b8:	2342      	movs	r3, #66	@ 0x42
 80011ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80011bc:	f7ff fa7e 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 80011c0:	4a3d      	ldr	r2, [pc, #244]	@ (80012b8 <main+0x1c4>)
 80011c2:	2342      	movs	r3, #66	@ 0x42
 80011c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c6:	f7ff fa79 	bl	80006bc <command_cam>
		  command=0;
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <main+0x1d4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x43){
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <main+0x1d4>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b43      	cmp	r3, #67	@ 0x43
 80011d6:	d111      	bne.n	80011fc <main+0x108>
		  command_cam(CAM1, FORMAT);
 80011d8:	4a33      	ldr	r2, [pc, #204]	@ (80012a8 <main+0x1b4>)
 80011da:	2343      	movs	r3, #67	@ 0x43
 80011dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011de:	f7ff fa6d 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 80011e2:	4a33      	ldr	r2, [pc, #204]	@ (80012b0 <main+0x1bc>)
 80011e4:	2343      	movs	r3, #67	@ 0x43
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	f7ff fa68 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 80011ec:	4a32      	ldr	r2, [pc, #200]	@ (80012b8 <main+0x1c4>)
 80011ee:	2343      	movs	r3, #67	@ 0x43
 80011f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f2:	f7ff fa63 	bl	80006bc <command_cam>
		  command=0;
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <main+0x1d4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x44){
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <main+0x1d4>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b44      	cmp	r3, #68	@ 0x44
 8001202:	d111      	bne.n	8001228 <main+0x134>
		  command_cam(CAM1, REBOOT);
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <main+0x1b4>)
 8001206:	2344      	movs	r3, #68	@ 0x44
 8001208:	ca07      	ldmia	r2, {r0, r1, r2}
 800120a:	f7ff fa57 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 800120e:	4a28      	ldr	r2, [pc, #160]	@ (80012b0 <main+0x1bc>)
 8001210:	2344      	movs	r3, #68	@ 0x44
 8001212:	ca07      	ldmia	r2, {r0, r1, r2}
 8001214:	f7ff fa52 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <main+0x1c4>)
 800121a:	2344      	movs	r3, #68	@ 0x44
 800121c:	ca07      	ldmia	r2, {r0, r1, r2}
 800121e:	f7ff fa4d 	bl	80006bc <command_cam>
		  command=0;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <main+0x1d4>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x45){
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <main+0x1d4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b45      	cmp	r3, #69	@ 0x45
 800122e:	d111      	bne.n	8001254 <main+0x160>
		  command_cam(CAM1, DEB);
 8001230:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <main+0x1b4>)
 8001232:	2345      	movs	r3, #69	@ 0x45
 8001234:	ca07      	ldmia	r2, {r0, r1, r2}
 8001236:	f7ff fa41 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 800123a:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <main+0x1bc>)
 800123c:	2345      	movs	r3, #69	@ 0x45
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	f7ff fa3c 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 8001244:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <main+0x1c4>)
 8001246:	2345      	movs	r3, #69	@ 0x45
 8001248:	ca07      	ldmia	r2, {r0, r1, r2}
 800124a:	f7ff fa37 	bl	80006bc <command_cam>
		  command=0;
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <main+0x1d4>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase flight REC
	  if(command==0x4C){
 8001254:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <main+0x1d4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b4c      	cmp	r3, #76	@ 0x4c
 800125a:	d104      	bne.n	8001266 <main+0x172>
		  Chip_Erase();
 800125c:	f7ff fc2a 	bl	8000ab4 <Chip_Erase>
		  command=0;
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <main+0x1d4>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	  }

	  //Start fligt REC
	  if(command==0x4D){
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <main+0x1d4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b4d      	cmp	r3, #77	@ 0x4d
 800126c:	d105      	bne.n	800127a <main+0x186>
		  Start_Flight_Recording=1;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <main+0x1dc>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <main+0x1d4>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop flight REC
	  if(command==0x4E){
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <main+0x1d4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001280:	d105      	bne.n	800128e <main+0x19a>
		  Start_Flight_Recording=0;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0x1dc>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <main+0x1d4>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
	  }

	  //Read flight REC
	  if(command==0x52){
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <main+0x1d4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b52      	cmp	r3, #82	@ 0x52
 8001294:	f47f af65 	bne.w	8001162 <main+0x6e>
		  Read_Data_Cont(16);
 8001298:	2010      	movs	r0, #16
 800129a:	f7ff fc75 	bl	8000b88 <Read_Data_Cont>
		  command = 0;
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <main+0x1d4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 80012a4:	e75d      	b.n	8001162 <main+0x6e>
 80012a6:	bf00      	nop
 80012a8:	240010b4 	.word	0x240010b4
 80012ac:	240010bc 	.word	0x240010bc
 80012b0:	240010c0 	.word	0x240010c0
 80012b4:	240010c8 	.word	0x240010c8
 80012b8:	240010cc 	.word	0x240010cc
 80012bc:	240010d4 	.word	0x240010d4
 80012c0:	240000a4 	.word	0x240000a4
 80012c4:	2400009c 	.word	0x2400009c
 80012c8:	2400007d 	.word	0x2400007d
 80012cc:	240013e4 	.word	0x240013e4
 80012d0:	2400007c 	.word	0x2400007c

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b09c      	sub	sp, #112	@ 0x70
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	224c      	movs	r2, #76	@ 0x4c
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 fcac 	bl	800ac40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2220      	movs	r2, #32
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f009 fca6 	bl	800ac40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f003 fa9b 	bl	8004830 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <SystemClock_Config+0xf0>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <SystemClock_Config+0xf0>)
 8001304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <SystemClock_Config+0xf0>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <SystemClock_Config+0xf4>)
 8001316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001318:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <SystemClock_Config+0xf4>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <SystemClock_Config+0xf4>)
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800132c:	bf00      	nop
 800132e:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <SystemClock_Config+0xf0>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800133a:	d1f8      	bne.n	800132e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133c:	2302      	movs	r3, #2
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001340:	2301      	movs	r3, #1
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2340      	movs	r3, #64	@ 0x40
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
 800134a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001354:	233c      	movs	r3, #60	@ 0x3c
 8001356:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800135c:	230a      	movs	r3, #10
 800135e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001360:	2302      	movs	r3, #2
 8001362:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001364:	230c      	movs	r3, #12
 8001366:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001368:	2300      	movs	r3, #0
 800136a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fa95 	bl	80048a4 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001380:	f000 fbac 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	233f      	movs	r3, #63	@ 0x3f
 8001386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2303      	movs	r3, #3
 800138a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001390:	2308      	movs	r3, #8
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001394:	2340      	movs	r3, #64	@ 0x40
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001398:	2340      	movs	r3, #64	@ 0x40
 800139a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800139c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013a2:	2340      	movs	r3, #64	@ 0x40
 80013a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2104      	movs	r1, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fed4 	bl	8005158 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80013b6:	f000 fb91 	bl	8001adc <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3770      	adds	r7, #112	@ 0x70
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	58024800 	.word	0x58024800
 80013c8:	58000400 	.word	0x58000400

080013cc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80013d2:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <MX_FDCAN1_Init+0x108>)
 80013d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80013d8:	4a3e      	ldr	r2, [pc, #248]	@ (80014d4 <MX_FDCAN1_Init+0x108>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <MX_FDCAN1_Init+0x108>)
 80013e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80013e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013f0:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 80013f2:	4a3a      	ldr	r2, [pc, #232]	@ (80014dc <MX_FDCAN1_Init+0x110>)
 80013f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013fc:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001402:	4b35      	ldr	r3, [pc, #212]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001404:	2200      	movs	r2, #0
 8001406:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001408:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800140a:	2200      	movs	r2, #0
 800140c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001410:	2200      	movs	r2, #0
 8001412:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001414:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001416:	2201      	movs	r2, #1
 8001418:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800141a:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800141c:	2202      	movs	r2, #2
 800141e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001422:	2205      	movs	r2, #5
 8001424:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001426:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001428:	2202      	movs	r2, #2
 800142a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800142c:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800142e:	2201      	movs	r2, #1
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001434:	2203      	movs	r2, #3
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001438:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800143a:	2204      	movs	r2, #4
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001440:	2203      	movs	r2, #3
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001446:	2200      	movs	r2, #0
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800144c:	2200      	movs	r2, #0
 800144e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001452:	2200      	movs	r2, #0
 8001454:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001458:	2240      	movs	r2, #64	@ 0x40
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800145e:	2204      	movs	r2, #4
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001464:	2200      	movs	r2, #0
 8001466:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800146a:	2204      	movs	r2, #4
 800146c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001470:	2200      	movs	r2, #0
 8001472:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001476:	2204      	movs	r2, #4
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800147c:	2200      	movs	r2, #0
 800147e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001482:	2200      	movs	r2, #0
 8001484:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001488:	2202      	movs	r2, #2
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800148e:	2200      	movs	r2, #0
 8001490:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 8001494:	2204      	movs	r2, #4
 8001496:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 800149a:	f001 ff7f 	bl	800339c <HAL_FDCAN_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80014a4:	f000 fb1a 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 80014aa:	f002 f955 	bl	8003758 <HAL_FDCAN_Start>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80014b4:	f000 fb12 	bl	8001adc <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80014b8:	2200      	movs	r2, #0
 80014ba:	2101      	movs	r1, #1
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <MX_FDCAN1_Init+0x10c>)
 80014be:	f002 fae3 	bl	8003a88 <HAL_FDCAN_ActivateNotification>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80014c8:	f000 fb08 	bl	8001adc <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58024400 	.word	0x58024400
 80014d8:	24001100 	.word	0x24001100
 80014dc:	4000a000 	.word	0x4000a000

080014e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014e6:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <MX_SPI1_Init+0xa8>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_SPI1_Init+0xa4>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800150c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001518:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800154c:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001566:	2200      	movs	r2, #0
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_SPI1_Init+0xa4>)
 800156c:	2200      	movs	r2, #0
 800156e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_SPI1_Init+0xa4>)
 8001572:	f005 ffa9 	bl	80074c8 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800157c:	f000 faae 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	240011a0 	.word	0x240011a0
 8001588:	40013000 	.word	0x40013000

0800158c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <MX_UART5_Init+0x90>)
 8001592:	4a23      	ldr	r2, [pc, #140]	@ (8001620 <MX_UART5_Init+0x94>)
 8001594:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <MX_UART5_Init+0x90>)
 8001598:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800159c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_UART5_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_UART5_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_UART5_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_UART5_Init+0x90>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_UART5_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_UART5_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_UART5_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_UART5_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <MX_UART5_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015d4:	4811      	ldr	r0, [pc, #68]	@ (800161c <MX_UART5_Init+0x90>)
 80015d6:	f006 fde4 	bl	80081a2 <HAL_UART_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80015e0:	f000 fa7c 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_UART5_Init+0x90>)
 80015e8:	f009 fa23 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80015f2:	f000 fa73 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <MX_UART5_Init+0x90>)
 80015fa:	f009 fa58 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001604:	f000 fa6a 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_UART5_Init+0x90>)
 800160a:	f009 f9d9 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001614:	f000 fa62 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24001228 	.word	0x24001228
 8001620:	40005000 	.word	0x40005000

08001624 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_UART8_Init+0x90>)
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_UART8_Init+0x94>)
 800162c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001630:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_UART8_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_UART8_Init+0x90>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_UART8_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_UART8_Init+0x90>)
 800166e:	f006 fd98 	bl	80081a2 <HAL_UART_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 fa30 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001680:	f009 f9d7 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800168a:	f000 fa27 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <MX_UART8_Init+0x90>)
 8001692:	f009 fa0c 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 fa1e 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_UART8_Init+0x90>)
 80016a2:	f009 f98d 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f000 fa16 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	240012bc 	.word	0x240012bc
 80016b8:	40007c00 	.word	0x40007c00

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016c2:	4a23      	ldr	r2, [pc, #140]	@ (8001750 <MX_USART2_UART_Init+0x94>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_USART2_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_USART2_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001704:	4811      	ldr	r0, [pc, #68]	@ (800174c <MX_USART2_UART_Init+0x90>)
 8001706:	f006 fd4c 	bl	80081a2 <HAL_UART_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f9e4 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001714:	2100      	movs	r1, #0
 8001716:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_USART2_UART_Init+0x90>)
 8001718:	f009 f98b 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001722:	f000 f9db 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4808      	ldr	r0, [pc, #32]	@ (800174c <MX_USART2_UART_Init+0x90>)
 800172a:	f009 f9c0 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001734:	f000 f9d2 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_USART2_UART_Init+0x90>)
 800173a:	f009 f941 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 f9ca 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24001350 	.word	0x24001350
 8001750:	40004400 	.word	0x40004400

08001754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 800175a:	4a23      	ldr	r2, [pc, #140]	@ (80017e8 <MX_USART3_UART_Init+0x94>)
 800175c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001760:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179c:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 800179e:	f006 fd00 	bl	80081a2 <HAL_UART_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017a8:	f000 f998 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 80017b0:	f009 f93f 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f000 f98f 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 80017c2:	f009 f974 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017cc:	f000 f986 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_USART3_UART_Init+0x90>)
 80017d2:	f009 f8f5 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f000 f97e 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	240013e4 	.word	0x240013e4
 80017e8:	40004800 	.word	0x40004800

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	4a5d      	ldr	r2, [pc, #372]	@ (8001980 <MX_GPIO_Init+0x194>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001820:	4b57      	ldr	r3, [pc, #348]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a56      	ldr	r2, [pc, #344]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b50      	ldr	r3, [pc, #320]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184e:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b48      	ldr	r3, [pc, #288]	@ (8001980 <MX_GPIO_Init+0x194>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	4a47      	ldr	r2, [pc, #284]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186c:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <MX_GPIO_Init+0x194>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <MX_GPIO_Init+0x194>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a3f      	ldr	r2, [pc, #252]	@ (8001980 <MX_GPIO_Init+0x194>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b3d      	ldr	r3, [pc, #244]	@ (8001980 <MX_GPIO_Init+0x194>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001898:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <MX_GPIO_Init+0x194>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a38      	ldr	r2, [pc, #224]	@ (8001980 <MX_GPIO_Init+0x194>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <MX_GPIO_Init+0x194>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2110      	movs	r1, #16
 80018ba:	4832      	ldr	r0, [pc, #200]	@ (8001984 <MX_GPIO_Init+0x198>)
 80018bc:	f002 ff9e 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c6:	4830      	ldr	r0, [pc, #192]	@ (8001988 <MX_GPIO_Init+0x19c>)
 80018c8:	f002 ff98 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2118      	movs	r1, #24
 80018d0:	482e      	ldr	r0, [pc, #184]	@ (800198c <MX_GPIO_Init+0x1a0>)
 80018d2:	f002 ff93 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 80018d6:	2308      	movs	r3, #8
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4829      	ldr	r0, [pc, #164]	@ (8001990 <MX_GPIO_Init+0x1a4>)
 80018ea:	f002 fdd7 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4824      	ldr	r0, [pc, #144]	@ (8001994 <MX_GPIO_Init+0x1a8>)
 8001902:	f002 fdcb 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001906:	2310      	movs	r3, #16
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4819      	ldr	r0, [pc, #100]	@ (8001984 <MX_GPIO_Init+0x198>)
 800191e:	f002 fdbd 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 8001922:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4818      	ldr	r0, [pc, #96]	@ (8001998 <MX_GPIO_Init+0x1ac>)
 8001938:	f002 fdb0 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 800193c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <MX_GPIO_Init+0x19c>)
 8001956:	f002 fda1 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 800195a:	2318      	movs	r3, #24
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <MX_GPIO_Init+0x1a0>)
 8001972:	f002 fd93 	bl	800449c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	58024400 	.word	0x58024400
 8001984:	58020000 	.word	0x58020000
 8001988:	58020c00 	.word	0x58020c00
 800198c:	58021800 	.word	0x58021800
 8001990:	58021000 	.word	0x58021000
 8001994:	58020800 	.word	0x58020800
 8001998:	58020400 	.word	0x58020400

0800199c <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 80019a2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <init+0xc0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <init+0xc0>)
 80019aa:	22a0      	movs	r2, #160	@ 0xa0
 80019ac:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <init+0xc0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 80019b4:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <init+0xc0>)
 80019b6:	22b0      	movs	r2, #176	@ 0xb0
 80019b8:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <init+0xc0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 80019c0:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <init+0xc0>)
 80019c2:	22c0      	movs	r2, #192	@ 0xc0
 80019c4:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <init+0xc4>)
 80019c8:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019d0:	21ff      	movs	r1, #255	@ 0xff
 80019d2:	4618      	mov	r0, r3
 80019d4:	f009 f934 	bl	800ac40 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019e2:	21ff      	movs	r1, #255	@ 0xff
 80019e4:	4618      	mov	r0, r3
 80019e6:	f009 f92b 	bl	800ac40 <memset>
	Flash.Buffer_Index = 0;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <init+0xc4>)
 80019ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f0:	2200      	movs	r2, #0
 80019f2:	801a      	strh	r2, [r3, #0]
	Flash.Buffer_flip = 0;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <init+0xc4>)
 80019f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fa:	2200      	movs	r2, #0
 80019fc:	709a      	strb	r2, [r3, #2]
	Flash.Block_Mem = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <init+0xc4>)
 8001a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a04:	2200      	movs	r2, #0
 8001a06:	811a      	strh	r2, [r3, #8]
	Flash.Page_Index = 0;
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <init+0xc4>)
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0e:	2200      	movs	r2, #0
 8001a10:	815a      	strh	r2, [r3, #10]
	Flash.ID = 0;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <init+0xc4>)
 8001a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60d3      	str	r3, [r2, #12]
	Flash.Buffer_p = Flash.Buffer_0;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <init+0xc4>)
 8001a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <init+0xc4>)
 8001a28:	6053      	str	r3, [r2, #4]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <init+0xc8>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <init+0xc8>)
 8001a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a34:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <init+0xcc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <init+0xcc>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <init+0xd0>)
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <init+0xd4>)
 8001a46:	605a      	str	r2, [r3, #4]
	CAM2.huart = &huart8;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <init+0xd8>)
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <init+0xdc>)
 8001a4c:	605a      	str	r2, [r3, #4]
	CAM3.huart = &huart5;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <init+0xe0>)
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <init+0xe4>)
 8001a52:	605a      	str	r2, [r3, #4]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2400009c 	.word	0x2400009c
 8001a60:	240000a4 	.word	0x240000a4
 8001a64:	e000edf0 	.word	0xe000edf0
 8001a68:	e0001000 	.word	0xe0001000
 8001a6c:	240010b4 	.word	0x240010b4
 8001a70:	24001350 	.word	0x24001350
 8001a74:	240010c0 	.word	0x240010c0
 8001a78:	240012bc 	.word	0x240012bc
 8001a7c:	240010cc 	.word	0x240010cc
 8001a80:	24001228 	.word	0x24001228

08001a84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a96:	f000 fea5 	bl	80027e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001aa6:	231f      	movs	r3, #31
 8001aa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001aaa:	2387      	movs	r3, #135	@ 0x87
 8001aac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fec3 	bl	8002854 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f000 fea0 	bl	8002814 <HAL_MPU_Enable>

}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <Error_Handler+0x10>)
 8001ae2:	f001 fe39 	bl	8003758 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	24001100 	.word	0x24001100

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_MspInit+0x30>)
 8001af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001afc:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_MspInit+0x30>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_MspInit+0x30>)
 8001b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	58024400 	.word	0x58024400

08001b24 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ba      	sub	sp, #232	@ 0xe8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	22c0      	movs	r2, #192	@ 0xc0
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 f87b 	bl	800ac40 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a33      	ldr	r2, [pc, #204]	@ (8001c1c <HAL_FDCAN_MspInit+0xf8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d15f      	bne.n	8001c14 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001b64:	230a      	movs	r3, #10
 8001b66:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b74:	23c0      	movs	r3, #192	@ 0xc0
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001b80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fe6f 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001b98:	f7ff ffa0 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b9c:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001b9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001bae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_FDCAN_MspInit+0xfc>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <HAL_FDCAN_MspInit+0x100>)
 8001c00:	f002 fc4c 	bl	800449c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2013      	movs	r0, #19
 8001c0a:	f000 fdb6 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c0e:	2013      	movs	r0, #19
 8001c10:	f000 fdcd 	bl	80027ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001c14:	bf00      	nop
 8001c16:	37e8      	adds	r7, #232	@ 0xe8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	4000a000 	.word	0x4000a000
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58020400 	.word	0x58020400

08001c28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0ba      	sub	sp, #232	@ 0xe8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	22c0      	movs	r2, #192	@ 0xc0
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f008 fff9 	bl	800ac40 <memset>
  if(hspi->Instance==SPI1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a26      	ldr	r2, [pc, #152]	@ (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d144      	bne.n	8001ce2 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fdff 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001c78:	f7ff ff30 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c82:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb8:	23e0      	movs	r3, #224	@ 0xe0
 8001cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001cde:	f002 fbdd 	bl	800449c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ce2:	bf00      	nop
 8001ce4:	37e8      	adds	r7, #232	@ 0xe8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40013000 	.word	0x40013000
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58020000 	.word	0x58020000

08001cf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0c0      	sub	sp, #256	@ 0x100
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d14:	22c0      	movs	r2, #192	@ 0xc0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 ff91 	bl	800ac40 <memset>
  if(huart->Instance==UART5)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4aa6      	ldr	r2, [pc, #664]	@ (8001fbc <HAL_UART_MspInit+0x2c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d14f      	bne.n	8001dc8 <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d28:	f04f 0202 	mov.w	r2, #2
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fd96 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d4a:	f7ff fec7 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d54:	4a9a      	ldr	r2, [pc, #616]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d5e:	4b98      	ldr	r3, [pc, #608]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b94      	ldr	r3, [pc, #592]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	4a93      	ldr	r2, [pc, #588]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7c:	4b90      	ldr	r3, [pc, #576]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001da4:	230e      	movs	r3, #14
 8001da6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001dae:	4619      	mov	r1, r3
 8001db0:	4884      	ldr	r0, [pc, #528]	@ (8001fc4 <HAL_UART_MspInit+0x2cc>)
 8001db2:	f002 fb73 	bl	800449c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2035      	movs	r0, #53	@ 0x35
 8001dbc:	f000 fcdd 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001dc0:	2035      	movs	r0, #53	@ 0x35
 8001dc2:	f000 fcf4 	bl	80027ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dc6:	e0f3      	b.n	8001fb0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==UART8)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc8 <HAL_UART_MspInit+0x2d0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d14e      	bne.n	8001e70 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001dd2:	f04f 0202 	mov.w	r2, #2
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fd41 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001df4:	f7ff fe72 	bl	8001adc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001df8:	4b71      	ldr	r3, [pc, #452]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dfe:	4a70      	ldr	r2, [pc, #448]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001e00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e08:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e16:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1c:	4a68      	ldr	r2, [pc, #416]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e26:	4b66      	ldr	r3, [pc, #408]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e34:	2303      	movs	r3, #3
 8001e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e52:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e56:	4619      	mov	r1, r3
 8001e58:	485c      	ldr	r0, [pc, #368]	@ (8001fcc <HAL_UART_MspInit+0x2d4>)
 8001e5a:	f002 fb1f 	bl	800449c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2053      	movs	r0, #83	@ 0x53
 8001e64:	f000 fc89 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001e68:	2053      	movs	r0, #83	@ 0x53
 8001e6a:	f000 fca0 	bl	80027ae <HAL_NVIC_EnableIRQ>
}
 8001e6e:	e09f      	b.n	8001fb0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a56      	ldr	r2, [pc, #344]	@ (8001fd0 <HAL_UART_MspInit+0x2d8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d14e      	bne.n	8001f18 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e7a:	f04f 0202 	mov.w	r2, #2
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fced 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001e9c:	f7ff fe1e 	bl	8001adc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea0:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea6:	4a46      	ldr	r2, [pc, #280]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eb0:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ece:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001edc:	230c      	movs	r3, #12
 8001ede:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001efe:	4619      	mov	r1, r3
 8001f00:	4834      	ldr	r0, [pc, #208]	@ (8001fd4 <HAL_UART_MspInit+0x2dc>)
 8001f02:	f002 facb 	bl	800449c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2026      	movs	r0, #38	@ 0x26
 8001f0c:	f000 fc35 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f10:	2026      	movs	r0, #38	@ 0x26
 8001f12:	f000 fc4c 	bl	80027ae <HAL_NVIC_EnableIRQ>
}
 8001f16:	e04b      	b.n	8001fb0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <HAL_UART_MspInit+0x2e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d146      	bne.n	8001fb0 <HAL_UART_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f22:	f04f 0202 	mov.w	r2, #2
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fc99 	bl	8005870 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001f44:	f7ff fdca 	bl	8001adc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f66:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_UART_MspInit+0x2c8>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <HAL_UART_MspInit+0x2e4>)
 8001fac:	f002 fa76 	bl	800449c <HAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40005000 	.word	0x40005000
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	58020400 	.word	0x58020400
 8001fc8:	40007c00 	.word	0x40007c00
 8001fcc:	58021000 	.word	0x58021000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	58020000 	.word	0x58020000
 8001fd8:	40004800 	.word	0x40004800
 8001fdc:	58020c00 	.word	0x58020c00

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002038:	f000 fa98 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <SysTick_Handler+0x28>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <SysTick_Handler+0x2c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <SysTick_Handler+0x2c>)
 800204c:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	e002      	b.n	8002056 <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <SysTick_Handler+0x2c>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2400007c 	.word	0x2400007c
 8002060:	24001478 	.word	0x24001478

08002064 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <FDCAN1_IT0_IRQHandler+0x10>)
 800206a:	f001 fd87 	bl	8003b7c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	24001100 	.word	0x24001100

08002078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <USART2_IRQHandler+0x10>)
 800207e:	f006 fa83 	bl	8008588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	24001350 	.word	0x24001350

0800208c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <UART5_IRQHandler+0x10>)
 8002092:	f006 fa79 	bl	8008588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	24001228 	.word	0x24001228

080020a0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <UART8_IRQHandler+0x10>)
 80020a6:	f006 fa6f 	bl	8008588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	240012bc 	.word	0x240012bc

080020b4 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 80020be:	e071      	b.n	80021a4 <HAL_FDCAN_RxFifo0Callback+0xf0>
		//CAN ID = 401 is CAN message for commands to black box
		if(RxHeader.Identifier == 401){
 80020c0:	4b3f      	ldr	r3, [pc, #252]	@ (80021c0 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f240 1291 	movw	r2, #401	@ 0x191
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d109      	bne.n	80020e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
			if(CAN.Rx_Buffer[6] == CAN.Rx_Buffer[7]){
 80020cc:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80020ce:	7b9a      	ldrb	r2, [r3, #14]
 80020d0:	4b3c      	ldr	r3, [pc, #240]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80020d2:	7bdb      	ldrb	r3, [r3, #15]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d103      	bne.n	80020e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
				command = CAN.Rx_Buffer[6];
 80020d8:	4b3a      	ldr	r3, [pc, #232]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80020da:	7b9a      	ldrb	r2, [r3, #14]
 80020dc:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_FDCAN_RxFifo0Callback+0x114>)
 80020de:	701a      	strb	r2, [r3, #0]
			}

		}
		//CAN ID = 402 is CAN message for manual update of current page
		if(RxHeader.Identifier == 402){
 80020e0:	4b37      	ldr	r3, [pc, #220]	@ (80021c0 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80020e8:	d11c      	bne.n	8002124 <HAL_FDCAN_RxFifo0Callback+0x70>
			uint16_t Page = *(uint16_t*)&CAN.Rx_Buffer[6];
 80020ea:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <HAL_FDCAN_RxFifo0Callback+0x118>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	83fb      	strh	r3, [r7, #30]

			Automatic_Block_Managment(Page);
 80020f0:	8bfb      	ldrh	r3, [r7, #30]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fcb8 	bl	8000a68 <Automatic_Block_Managment>

			Flash.Buffer_Index=0;
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80020fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
			Flash.Page_Index=Page;
 8002102:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002108:	461a      	mov	r2, r3
 800210a:	8bfb      	ldrh	r3, [r7, #30]
 800210c:	8153      	strh	r3, [r2, #10]
			Flash.Buffer_flip=0;
 800210e:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002114:	2200      	movs	r2, #0
 8002116:	709a      	strb	r2, [r3, #2]
			Flash.Buffer_p=Flash.Buffer_0;
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800211a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211e:	461a      	mov	r2, r3
 8002120:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002122:	6053      	str	r3, [r2, #4]
		}

		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8002124:	23f0      	movs	r3, #240	@ 0xf0
 8002126:	733b      	strb	r3, [r7, #12]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	3301      	adds	r3, #1
 8002132:	b292      	uxth	r2, r2
 8002134:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 8002136:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002138:	7a1b      	ldrb	r3, [r3, #8]
 800213a:	73fb      	strb	r3, [r7, #15]
		Temp[4]=CAN.Rx_Buffer[1];
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800213e:	7a5b      	ldrb	r3, [r3, #9]
 8002140:	743b      	strb	r3, [r7, #16]
		Temp[5]=CAN.Rx_Buffer[2];
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002144:	7a9b      	ldrb	r3, [r3, #10]
 8002146:	747b      	strb	r3, [r7, #17]
		Temp[6]=CAN.Rx_Buffer[3];
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800214a:	7adb      	ldrb	r3, [r3, #11]
 800214c:	74bb      	strb	r3, [r7, #18]
		Temp[7]=CAN.Rx_Buffer[4];
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002150:	7b1b      	ldrb	r3, [r3, #12]
 8002152:	74fb      	strb	r3, [r7, #19]
		Temp[8]=CAN.Rx_Buffer[5];
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002156:	7b5b      	ldrb	r3, [r3, #13]
 8002158:	753b      	strb	r3, [r7, #20]
		Temp[9]=CAN.Rx_Buffer[6];
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800215c:	7b9b      	ldrb	r3, [r3, #14]
 800215e:	757b      	strb	r3, [r7, #21]
		Temp[10]=CAN.Rx_Buffer[7];
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002162:	7bdb      	ldrb	r3, [r3, #15]
 8002164:	75bb      	strb	r3, [r7, #22]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8002166:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	75fb      	strb	r3, [r7, #23]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 800216e:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	b2db      	uxtb	r3, r3
 8002176:	763b      	strb	r3, [r7, #24]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8002178:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	b2db      	uxtb	r3, r3
 8002180:	767b      	strb	r3, [r7, #25]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e1b      	lsrs	r3, r3, #24
 8002188:	b2db      	uxtb	r3, r3
 800218a:	76bb      	strb	r3, [r7, #26]

		//Stop byte
		Temp[15]=0x0F;
 800218c:	230f      	movs	r3, #15
 800218e:	76fb      	strb	r3, [r7, #27]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_FDCAN_RxFifo0Callback+0xf0>
			Write_Data(Temp, sizeof(Temp));
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2110      	movs	r1, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fba8 	bl	80008f4 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_FDCAN_RxFifo0Callback+0x128>)
 80021a6:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80021a8:	2140      	movs	r1, #64	@ 0x40
 80021aa:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 80021ac:	f001 fb00 	bl	80037b0 <HAL_FDCAN_GetRxMessage>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d084      	beq.n	80020c0 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	240010d8 	.word	0x240010d8
 80021c4:	24000080 	.word	0x24000080
 80021c8:	2400007d 	.word	0x2400007d
 80021cc:	2400008e 	.word	0x2400008e
 80021d0:	240000a4 	.word	0x240000a4
 80021d4:	24001478 	.word	0x24001478
 80021d8:	2400007c 	.word	0x2400007c
 80021dc:	24000088 	.word	0x24000088
 80021e0:	24001100 	.word	0x24001100

080021e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if(huart == CAM1.huart)HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <HAL_UART_RxCpltCallback+0x58>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d106      	bne.n	8002204 <HAL_UART_RxCpltCallback+0x20>
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_UART_RxCpltCallback+0x58>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4910      	ldr	r1, [pc, #64]	@ (8002240 <HAL_UART_RxCpltCallback+0x5c>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 f976 	bl	80084f0 <HAL_UART_Receive_IT>
	if(huart == CAM2.huart)HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8002204:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_UART_RxCpltCallback+0x60>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d106      	bne.n	800221c <HAL_UART_RxCpltCallback+0x38>
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_UART_RxCpltCallback+0x60>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	490c      	ldr	r1, [pc, #48]	@ (8002248 <HAL_UART_RxCpltCallback+0x64>)
 8002216:	4618      	mov	r0, r3
 8002218:	f006 f96a 	bl	80084f0 <HAL_UART_Receive_IT>
	if(huart == CAM3.huart)HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_UART_RxCpltCallback+0x68>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d106      	bne.n	8002234 <HAL_UART_RxCpltCallback+0x50>
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_UART_RxCpltCallback+0x68>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	4908      	ldr	r1, [pc, #32]	@ (8002250 <HAL_UART_RxCpltCallback+0x6c>)
 800222e:	4618      	mov	r0, r3
 8002230:	f006 f95e 	bl	80084f0 <HAL_UART_Receive_IT>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	240010b4 	.word	0x240010b4
 8002240:	240010bc 	.word	0x240010bc
 8002244:	240010c0 	.word	0x240010c0
 8002248:	240010c8 	.word	0x240010c8
 800224c:	240010cc 	.word	0x240010cc
 8002250:	240010d4 	.word	0x240010d4

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f008 fce4 	bl	800ac50 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	24080000 	.word	0x24080000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	2400147c 	.word	0x2400147c
 80022bc:	240015d0 	.word	0x240015d0

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022c4:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <SystemInit+0x114>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ca:	4a42      	ldr	r2, [pc, #264]	@ (80023d4 <SystemInit+0x114>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022d4:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <SystemInit+0x118>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d807      	bhi.n	80022f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022e0:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <SystemInit+0x118>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 030f 	bic.w	r3, r3, #15
 80022e8:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <SystemInit+0x118>)
 80022ea:	f043 0307 	orr.w	r3, r3, #7
 80022ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022f0:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <SystemInit+0x11c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a39      	ldr	r2, [pc, #228]	@ (80023dc <SystemInit+0x11c>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022fc:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <SystemInit+0x11c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002302:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <SystemInit+0x11c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4935      	ldr	r1, [pc, #212]	@ (80023dc <SystemInit+0x11c>)
 8002308:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <SystemInit+0x120>)
 800230a:	4013      	ands	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800230e:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <SystemInit+0x118>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800231a:	4b2f      	ldr	r3, [pc, #188]	@ (80023d8 <SystemInit+0x118>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 030f 	bic.w	r3, r3, #15
 8002322:	4a2d      	ldr	r2, [pc, #180]	@ (80023d8 <SystemInit+0x118>)
 8002324:	f043 0307 	orr.w	r3, r3, #7
 8002328:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800232a:	4b2c      	ldr	r3, [pc, #176]	@ (80023dc <SystemInit+0x11c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <SystemInit+0x11c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002336:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <SystemInit+0x11c>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <SystemInit+0x11c>)
 800233e:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <SystemInit+0x124>)
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002342:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <SystemInit+0x11c>)
 8002344:	4a28      	ldr	r2, [pc, #160]	@ (80023e8 <SystemInit+0x128>)
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002348:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <SystemInit+0x11c>)
 800234a:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <SystemInit+0x12c>)
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800234e:	4b23      	ldr	r3, [pc, #140]	@ (80023dc <SystemInit+0x11c>)
 8002350:	2200      	movs	r2, #0
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002354:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <SystemInit+0x11c>)
 8002356:	4a25      	ldr	r2, [pc, #148]	@ (80023ec <SystemInit+0x12c>)
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <SystemInit+0x11c>)
 800235c:	2200      	movs	r2, #0
 800235e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002360:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <SystemInit+0x11c>)
 8002362:	4a22      	ldr	r2, [pc, #136]	@ (80023ec <SystemInit+0x12c>)
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <SystemInit+0x11c>)
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <SystemInit+0x11c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1a      	ldr	r2, [pc, #104]	@ (80023dc <SystemInit+0x11c>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002376:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <SystemInit+0x11c>)
 800237a:	2200      	movs	r2, #0
 800237c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <SystemInit+0x130>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <SystemInit+0x134>)
 8002384:	4013      	ands	r3, r2
 8002386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800238a:	d202      	bcs.n	8002392 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <SystemInit+0x138>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <SystemInit+0x11c>)
 8002394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d113      	bne.n	80023c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <SystemInit+0x11c>)
 80023a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023a6:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <SystemInit+0x11c>)
 80023a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <SystemInit+0x13c>)
 80023b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <SystemInit+0x11c>)
 80023ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <SystemInit+0x11c>)
 80023c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	52002000 	.word	0x52002000
 80023dc:	58024400 	.word	0x58024400
 80023e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80023e4:	02020200 	.word	0x02020200
 80023e8:	01ff0000 	.word	0x01ff0000
 80023ec:	01010280 	.word	0x01010280
 80023f0:	5c001000 	.word	0x5c001000
 80023f4:	ffff0000 	.word	0xffff0000
 80023f8:	51008108 	.word	0x51008108
 80023fc:	52004000 	.word	0x52004000

08002400 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <ExitRun0Mode+0x2c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a08      	ldr	r2, [pc, #32]	@ (800242c <ExitRun0Mode+0x2c>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002410:	bf00      	nop
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <ExitRun0Mode+0x2c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f9      	beq.n	8002412 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	58024800 	.word	0x58024800

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800246c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002434:	f7ff ffe4 	bl	8002400 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002438:	f7ff ff42 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	@ (8002474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	@ (8002480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f008 fbfb 	bl	800ac5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe fe45 	bl	80010f4 <main>
  bx  lr
 800246a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002474:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002478:	0800b6d0 	.word	0x0800b6d0
  ldr r2, =_sbss
 800247c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002480:	240015cc 	.word	0x240015cc

08002484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC3_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f000 f968 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002494:	f003 f816 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_Init+0x68>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4913      	ldr	r1, [pc, #76]	@ (80024f4 <HAL_Init+0x6c>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024b2:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <HAL_Init+0x68>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <HAL_Init+0x6c>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <HAL_Init+0x70>)
 80024ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_Init+0x74>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f814 	bl	8002500 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e002      	b.n	80024e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024e2:	f7ff fb05 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	58024400 	.word	0x58024400
 80024f4:	0800b644 	.word	0x0800b644
 80024f8:	24000004 	.word	0x24000004
 80024fc:	24000000 	.word	0x24000000

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_InitTick+0x60>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e021      	b.n	8002558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_InitTick+0x64>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_InitTick+0x60>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f94d 	bl	80027ca <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f917 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <HAL_InitTick+0x68>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2400000c 	.word	0x2400000c
 8002564:	24000000 	.word	0x24000000
 8002568:	24000008 	.word	0x24000008

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	2400000c 	.word	0x2400000c
 8002590:	24001480 	.word	0x24001480

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	24001480 	.word	0x24001480

080025ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_GetREVID+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0c1b      	lsrs	r3, r3, #16
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	5c001000 	.word	0x5c001000

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <__NVIC_SetPriorityGrouping+0x40>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f2:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <__NVIC_SetPriorityGrouping+0x40>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60d3      	str	r3, [r2, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	05fa0000 	.word	0x05fa0000

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	@ (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	@ 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002788:	f7ff ff40 	bl	800260c <__NVIC_GetPriorityGrouping>
 800278c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6978      	ldr	r0, [r7, #20]
 8002794:	f7ff ff90 	bl	80026b8 <NVIC_EncodePriority>
 8002798:	4602      	mov	r2, r0
 800279a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff5f 	bl	8002664 <__NVIC_SetPriority>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff33 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffa4 	bl	8002720 <SysTick_Config>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80027e8:	f3bf 8f5f 	dmb	sy
}
 80027ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <HAL_MPU_Disable+0x28>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_MPU_Disable+0x28>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_MPU_Disable+0x2c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	e000ed90 	.word	0xe000ed90

08002814 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800281c:	4a0b      	ldr	r2, [pc, #44]	@ (800284c <HAL_MPU_Enable+0x38>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_MPU_Enable+0x3c>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_MPU_Enable+0x3c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002832:	f3bf 8f4f 	dsb	sy
}
 8002836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002838:	f3bf 8f6f 	isb	sy
}
 800283c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed90 	.word	0xe000ed90
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	785a      	ldrb	r2, [r3, #1]
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002862:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002864:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	4a19      	ldr	r2, [pc, #100]	@ (80028d0 <HAL_MPU_ConfigRegion+0x7c>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002870:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <HAL_MPU_ConfigRegion+0x7c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7b1b      	ldrb	r3, [r3, #12]
 800287c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7adb      	ldrb	r3, [r3, #11]
 8002882:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800288c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7b9b      	ldrb	r3, [r3, #14]
 800289a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800289c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7bdb      	ldrb	r3, [r3, #15]
 80028a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7a5b      	ldrb	r3, [r3, #9]
 80028aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7a1b      	ldrb	r3, [r3, #8]
 80028b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028c0:	6113      	str	r3, [r2, #16]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed90 	.word	0xe000ed90

080028d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fe5a 	bl	8002594 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e2dc      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2cd      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a76      	ldr	r2, [pc, #472]	@ (8002ae8 <HAL_DMA_Abort+0x214>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04a      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a74      	ldr	r2, [pc, #464]	@ (8002aec <HAL_DMA_Abort+0x218>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d045      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a73      	ldr	r2, [pc, #460]	@ (8002af0 <HAL_DMA_Abort+0x21c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d040      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a71      	ldr	r2, [pc, #452]	@ (8002af4 <HAL_DMA_Abort+0x220>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d03b      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a70      	ldr	r2, [pc, #448]	@ (8002af8 <HAL_DMA_Abort+0x224>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d036      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6e      	ldr	r2, [pc, #440]	@ (8002afc <HAL_DMA_Abort+0x228>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d031      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6d      	ldr	r2, [pc, #436]	@ (8002b00 <HAL_DMA_Abort+0x22c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02c      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6b      	ldr	r2, [pc, #428]	@ (8002b04 <HAL_DMA_Abort+0x230>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6a      	ldr	r2, [pc, #424]	@ (8002b08 <HAL_DMA_Abort+0x234>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <HAL_DMA_Abort+0x238>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a67      	ldr	r2, [pc, #412]	@ (8002b10 <HAL_DMA_Abort+0x23c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a65      	ldr	r2, [pc, #404]	@ (8002b14 <HAL_DMA_Abort+0x240>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a64      	ldr	r2, [pc, #400]	@ (8002b18 <HAL_DMA_Abort+0x244>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a62      	ldr	r2, [pc, #392]	@ (8002b1c <HAL_DMA_Abort+0x248>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a61      	ldr	r2, [pc, #388]	@ (8002b20 <HAL_DMA_Abort+0x24c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b24 <HAL_DMA_Abort+0x250>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Abort+0xda>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_Abort+0xdc>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 021e 	bic.w	r2, r2, #30
 80029c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e00a      	b.n	80029f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020e 	bic.w	r2, r2, #14
 80029ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae8 <HAL_DMA_Abort+0x214>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d072      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a3a      	ldr	r2, [pc, #232]	@ (8002aec <HAL_DMA_Abort+0x218>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d06d      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a39      	ldr	r2, [pc, #228]	@ (8002af0 <HAL_DMA_Abort+0x21c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d068      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a37      	ldr	r2, [pc, #220]	@ (8002af4 <HAL_DMA_Abort+0x220>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d063      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a36      	ldr	r2, [pc, #216]	@ (8002af8 <HAL_DMA_Abort+0x224>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d05e      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a34      	ldr	r2, [pc, #208]	@ (8002afc <HAL_DMA_Abort+0x228>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d059      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a33      	ldr	r2, [pc, #204]	@ (8002b00 <HAL_DMA_Abort+0x22c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d054      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a31      	ldr	r2, [pc, #196]	@ (8002b04 <HAL_DMA_Abort+0x230>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d04f      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a30      	ldr	r2, [pc, #192]	@ (8002b08 <HAL_DMA_Abort+0x234>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04a      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2e      	ldr	r2, [pc, #184]	@ (8002b0c <HAL_DMA_Abort+0x238>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d045      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_DMA_Abort+0x23c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d040      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2b      	ldr	r2, [pc, #172]	@ (8002b14 <HAL_DMA_Abort+0x240>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d03b      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_DMA_Abort+0x244>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d036      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_DMA_Abort+0x248>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d031      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_DMA_Abort+0x24c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d02c      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a25      	ldr	r2, [pc, #148]	@ (8002b24 <HAL_DMA_Abort+0x250>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d027      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <HAL_DMA_Abort+0x254>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_DMA_Abort+0x258>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a21      	ldr	r2, [pc, #132]	@ (8002b30 <HAL_DMA_Abort+0x25c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_DMA_Abort+0x260>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_DMA_Abort+0x264>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b3c <HAL_DMA_Abort+0x268>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_DMA_Abort+0x26c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_DMA_Abort+0x270>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d132      	bne.n	8002b48 <HAL_DMA_Abort+0x274>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e031      	b.n	8002b4a <HAL_DMA_Abort+0x276>
 8002ae6:	bf00      	nop
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	5802541c 	.word	0x5802541c
 8002b30:	58025430 	.word	0x58025430
 8002b34:	58025444 	.word	0x58025444
 8002b38:	58025458 	.word	0x58025458
 8002b3c:	5802546c 	.word	0x5802546c
 8002b40:	58025480 	.word	0x58025480
 8002b44:	58025494 	.word	0x58025494
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <HAL_DMA_Abort+0x444>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d04a      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d1c <HAL_DMA_Abort+0x448>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d045      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6a      	ldr	r2, [pc, #424]	@ (8002d20 <HAL_DMA_Abort+0x44c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d040      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a68      	ldr	r2, [pc, #416]	@ (8002d24 <HAL_DMA_Abort+0x450>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d03b      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a67      	ldr	r2, [pc, #412]	@ (8002d28 <HAL_DMA_Abort+0x454>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d036      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a65      	ldr	r2, [pc, #404]	@ (8002d2c <HAL_DMA_Abort+0x458>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d031      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_DMA_Abort+0x45c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d02c      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a62      	ldr	r2, [pc, #392]	@ (8002d34 <HAL_DMA_Abort+0x460>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d027      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a61      	ldr	r2, [pc, #388]	@ (8002d38 <HAL_DMA_Abort+0x464>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8002d3c <HAL_DMA_Abort+0x468>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d40 <HAL_DMA_Abort+0x46c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d44 <HAL_DMA_Abort+0x470>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5b      	ldr	r2, [pc, #364]	@ (8002d48 <HAL_DMA_Abort+0x474>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a59      	ldr	r2, [pc, #356]	@ (8002d4c <HAL_DMA_Abort+0x478>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_DMA_Abort+0x47c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_DMA_Abort+0x480>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <HAL_DMA_Abort+0x33c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e007      	b.n	8002c20 <HAL_DMA_Abort+0x34c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c20:	e013      	b.n	8002c4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c22:	f7ff fcb7 	bl	8002594 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d90c      	bls.n	8002c4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12d      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <HAL_DMA_Abort+0x444>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_DMA_Abort+0x448>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <HAL_DMA_Abort+0x44c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_DMA_Abort+0x450>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <HAL_DMA_Abort+0x454>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_DMA_Abort+0x458>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <HAL_DMA_Abort+0x45c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <HAL_DMA_Abort+0x460>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_DMA_Abort+0x464>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <HAL_DMA_Abort+0x468>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_DMA_Abort+0x46c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_DMA_Abort+0x470>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_DMA_Abort+0x474>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d4c <HAL_DMA_Abort+0x478>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <HAL_DMA_Abort+0x47c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <HAL_DMA_Abort+0x480>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Abort+0x426>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_Abort+0x428>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02b      	beq.n	8002d58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	223f      	movs	r2, #63	@ 0x3f
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	e02a      	b.n	8002d6e <HAL_DMA_Abort+0x49a>
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <HAL_DMA_Abort+0x5dc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_DMA_Abort+0x5e0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb8 <HAL_DMA_Abort+0x5e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_DMA_Abort+0x5e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a49      	ldr	r2, [pc, #292]	@ (8002ec0 <HAL_DMA_Abort+0x5ec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a47      	ldr	r2, [pc, #284]	@ (8002ec4 <HAL_DMA_Abort+0x5f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a46      	ldr	r2, [pc, #280]	@ (8002ec8 <HAL_DMA_Abort+0x5f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a44      	ldr	r2, [pc, #272]	@ (8002ecc <HAL_DMA_Abort+0x5f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a43      	ldr	r2, [pc, #268]	@ (8002ed0 <HAL_DMA_Abort+0x5fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a41      	ldr	r2, [pc, #260]	@ (8002ed4 <HAL_DMA_Abort+0x600>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a40      	ldr	r2, [pc, #256]	@ (8002ed8 <HAL_DMA_Abort+0x604>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3e      	ldr	r2, [pc, #248]	@ (8002edc <HAL_DMA_Abort+0x608>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <HAL_DMA_Abort+0x60c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_DMA_Abort+0x610>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee8 <HAL_DMA_Abort+0x614>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	@ (8002eec <HAL_DMA_Abort+0x618>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a37      	ldr	r2, [pc, #220]	@ (8002ef0 <HAL_DMA_Abort+0x61c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ef4 <HAL_DMA_Abort+0x620>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <HAL_DMA_Abort+0x624>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <HAL_DMA_Abort+0x628>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a31      	ldr	r2, [pc, #196]	@ (8002f00 <HAL_DMA_Abort+0x62c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2f      	ldr	r2, [pc, #188]	@ (8002f04 <HAL_DMA_Abort+0x630>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f08 <HAL_DMA_Abort+0x634>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <HAL_DMA_Abort+0x638>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Abort+0x58e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_Abort+0x590>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
 8002ef0:	58025408 	.word	0x58025408
 8002ef4:	5802541c 	.word	0x5802541c
 8002ef8:	58025430 	.word	0x58025430
 8002efc:	58025444 	.word	0x58025444
 8002f00:	58025458 	.word	0x58025458
 8002f04:	5802546c 	.word	0x5802546c
 8002f08:	58025480 	.word	0x58025480
 8002f0c:	58025494 	.word	0x58025494

08002f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e237      	b.n	8003392 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e22c      	b.n	8003392 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80030b0 <HAL_DMA_Abort_IT+0x1a0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5b      	ldr	r2, [pc, #364]	@ (80030b4 <HAL_DMA_Abort_IT+0x1a4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a59      	ldr	r2, [pc, #356]	@ (80030b8 <HAL_DMA_Abort_IT+0x1a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a58      	ldr	r2, [pc, #352]	@ (80030bc <HAL_DMA_Abort_IT+0x1ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a56      	ldr	r2, [pc, #344]	@ (80030c0 <HAL_DMA_Abort_IT+0x1b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a55      	ldr	r2, [pc, #340]	@ (80030c4 <HAL_DMA_Abort_IT+0x1b4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a53      	ldr	r2, [pc, #332]	@ (80030c8 <HAL_DMA_Abort_IT+0x1b8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_DMA_Abort_IT+0x1bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a50      	ldr	r2, [pc, #320]	@ (80030d0 <HAL_DMA_Abort_IT+0x1c0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a4f      	ldr	r2, [pc, #316]	@ (80030d4 <HAL_DMA_Abort_IT+0x1c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80030d8 <HAL_DMA_Abort_IT+0x1c8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_DMA_Abort_IT+0x1cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80030e0 <HAL_DMA_Abort_IT+0x1d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a49      	ldr	r2, [pc, #292]	@ (80030e4 <HAL_DMA_Abort_IT+0x1d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a47      	ldr	r2, [pc, #284]	@ (80030e8 <HAL_DMA_Abort_IT+0x1d8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <HAL_DMA_Abort_IT+0x1dc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Abort_IT+0xcc>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_DMA_Abort_IT+0xce>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8086 	beq.w	80030f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80030b0 <HAL_DMA_Abort_IT+0x1a0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04a      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80030b4 <HAL_DMA_Abort_IT+0x1a4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d045      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2c      	ldr	r2, [pc, #176]	@ (80030b8 <HAL_DMA_Abort_IT+0x1a8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d040      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_DMA_Abort_IT+0x1ac>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d03b      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a29      	ldr	r2, [pc, #164]	@ (80030c0 <HAL_DMA_Abort_IT+0x1b0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d036      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <HAL_DMA_Abort_IT+0x1b4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d031      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a26      	ldr	r2, [pc, #152]	@ (80030c8 <HAL_DMA_Abort_IT+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <HAL_DMA_Abort_IT+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d027      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_DMA_Abort_IT+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_DMA_Abort_IT+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <HAL_DMA_Abort_IT+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_DMA_Abort_IT+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <HAL_DMA_Abort_IT+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1c      	ldr	r2, [pc, #112]	@ (80030e4 <HAL_DMA_Abort_IT+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <HAL_DMA_Abort_IT+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_DMA_Abort_IT+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_DMA_Abort_IT+0x18e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e178      	b.n	8003390 <HAL_DMA_Abort_IT+0x480>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e16f      	b.n	8003390 <HAL_DMA_Abort_IT+0x480>
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6c      	ldr	r2, [pc, #432]	@ (80032b8 <HAL_DMA_Abort_IT+0x3a8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6b      	ldr	r2, [pc, #428]	@ (80032bc <HAL_DMA_Abort_IT+0x3ac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a69      	ldr	r2, [pc, #420]	@ (80032c0 <HAL_DMA_Abort_IT+0x3b0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a68      	ldr	r2, [pc, #416]	@ (80032c4 <HAL_DMA_Abort_IT+0x3b4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a66      	ldr	r2, [pc, #408]	@ (80032c8 <HAL_DMA_Abort_IT+0x3b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a65      	ldr	r2, [pc, #404]	@ (80032cc <HAL_DMA_Abort_IT+0x3bc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a63      	ldr	r2, [pc, #396]	@ (80032d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a62      	ldr	r2, [pc, #392]	@ (80032d4 <HAL_DMA_Abort_IT+0x3c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a60      	ldr	r2, [pc, #384]	@ (80032d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5f      	ldr	r2, [pc, #380]	@ (80032dc <HAL_DMA_Abort_IT+0x3cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_DMA_Abort_IT+0x3d0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5c      	ldr	r2, [pc, #368]	@ (80032e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_DMA_Abort_IT+0x3d8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a59      	ldr	r2, [pc, #356]	@ (80032ec <HAL_DMA_Abort_IT+0x3dc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a57      	ldr	r2, [pc, #348]	@ (80032f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	@ (80032f4 <HAL_DMA_Abort_IT+0x3e4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <HAL_DMA_Abort_IT+0x2a2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e007      	b.n	80031c2 <HAL_DMA_Abort_IT+0x2b2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3c      	ldr	r2, [pc, #240]	@ (80032b8 <HAL_DMA_Abort_IT+0x3a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d072      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3a      	ldr	r2, [pc, #232]	@ (80032bc <HAL_DMA_Abort_IT+0x3ac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d06d      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a39      	ldr	r2, [pc, #228]	@ (80032c0 <HAL_DMA_Abort_IT+0x3b0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d068      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	@ (80032c4 <HAL_DMA_Abort_IT+0x3b4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d063      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a36      	ldr	r2, [pc, #216]	@ (80032c8 <HAL_DMA_Abort_IT+0x3b8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d05e      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	@ (80032cc <HAL_DMA_Abort_IT+0x3bc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d059      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	@ (80032d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d054      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <HAL_DMA_Abort_IT+0x3c4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d04f      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	@ (80032d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04a      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	@ (80032dc <HAL_DMA_Abort_IT+0x3cc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d045      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	@ (80032e0 <HAL_DMA_Abort_IT+0x3d0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d040      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d03b      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	@ (80032e8 <HAL_DMA_Abort_IT+0x3d8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <HAL_DMA_Abort_IT+0x3dc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d02c      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	@ (80032f4 <HAL_DMA_Abort_IT+0x3e4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d027      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	@ (80032f8 <HAL_DMA_Abort_IT+0x3e8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_DMA_Abort_IT+0x3ec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_DMA_Abort_IT+0x3f0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <HAL_DMA_Abort_IT+0x3f4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_DMA_Abort_IT+0x3f8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_DMA_Abort_IT+0x3fc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_DMA_Abort_IT+0x400>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <HAL_DMA_Abort_IT+0x404>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d132      	bne.n	8003318 <HAL_DMA_Abort_IT+0x408>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e031      	b.n	800331a <HAL_DMA_Abort_IT+0x40a>
 80032b6:	bf00      	nop
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
 80032f8:	58025408 	.word	0x58025408
 80032fc:	5802541c 	.word	0x5802541c
 8003300:	58025430 	.word	0x58025430
 8003304:	58025444 	.word	0x58025444
 8003308:	58025458 	.word	0x58025458
 800330c:	5802546c 	.word	0x5802546c
 8003310:	58025480 	.word	0x58025480
 8003314:	58025494 	.word	0x58025494
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d028      	beq.n	8003370 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800332c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800334c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003364:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800336e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b098      	sub	sp, #96	@ 0x60
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033a4:	4a84      	ldr	r2, [pc, #528]	@ (80035b8 <HAL_FDCAN_Init+0x21c>)
 80033a6:	f107 030c 	add.w	r3, r7, #12
 80033aa:	4611      	mov	r1, r2
 80033ac:	224c      	movs	r2, #76	@ 0x4c
 80033ae:	4618      	mov	r0, r3
 80033b0:	f007 fc7a 	bl	800aca8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1c6      	b.n	800374c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7e      	ldr	r2, [pc, #504]	@ (80035bc <HAL_FDCAN_Init+0x220>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d106      	bne.n	80033d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033d0:	461a      	mov	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe fb9a 	bl	8001b24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0210 	bic.w	r2, r2, #16
 80033fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003400:	f7ff f8c8 	bl	8002594 <HAL_GetTick>
 8003404:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003406:	e014      	b.n	8003432 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003408:	f7ff f8c4 	bl	8002594 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b0a      	cmp	r3, #10
 8003414:	d90d      	bls.n	8003432 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e18c      	b.n	800374c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d0e3      	beq.n	8003408 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003450:	f7ff f8a0 	bl	8002594 <HAL_GetTick>
 8003454:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003456:	e014      	b.n	8003482 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003458:	f7ff f89c 	bl	8002594 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b0a      	cmp	r3, #10
 8003464:	d90d      	bls.n	8003482 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e164      	b.n	800374c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0e3      	beq.n	8003458 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0202 	orr.w	r2, r2, #2
 800349e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7c1b      	ldrb	r3, [r3, #16]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b6:	619a      	str	r2, [r3, #24]
 80034b8:	e007      	b.n	80034ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7c5b      	ldrb	r3, [r3, #17]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034e0:	619a      	str	r2, [r3, #24]
 80034e2:	e007      	b.n	80034f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7c9b      	ldrb	r3, [r3, #18]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d108      	bne.n	800350e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800350a:	619a      	str	r2, [r3, #24]
 800350c:	e007      	b.n	800351e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800351c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003542:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0210 	bic.w	r2, r2, #16
 8003552:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d108      	bne.n	800356e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0204 	orr.w	r2, r2, #4
 800356a:	619a      	str	r2, [r3, #24]
 800356c:	e030      	b.n	80035d0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02c      	beq.n	80035d0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d020      	beq.n	80035c0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800358c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d114      	bne.n	80035d0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	e00b      	b.n	80035d0 <HAL_FDCAN_Init+0x234>
 80035b8:	0800b5f8 	.word	0x0800b5f8
 80035bc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	3b01      	subs	r3, #1
 80035de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003604:	d115      	bne.n	8003632 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	3b01      	subs	r3, #1
 8003612:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003614:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	3b01      	subs	r3, #1
 800361c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800361e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	3b01      	subs	r3, #1
 8003628:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800362e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003630:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	4413      	add	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003666:	f023 0107 	bic.w	r1, r3, #7
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	3360      	adds	r3, #96	@ 0x60
 8003672:	443b      	add	r3, r7
 8003674:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003692:	f023 0107 	bic.w	r1, r3, #7
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	3360      	adds	r3, #96	@ 0x60
 800369e:	443b      	add	r3, r7
 80036a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80036be:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3360      	adds	r3, #96	@ 0x60
 80036ca:	443b      	add	r3, r7
 80036cc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036d0:	011a      	lsls	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80036ec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3360      	adds	r3, #96	@ 0x60
 80036f8:	443b      	add	r3, r7
 80036fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a11      	ldr	r2, [pc, #68]	@ (8003754 <HAL_FDCAN_Init+0x3b8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d107      	bne.n	8003724 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f022 0203 	bic.w	r2, r2, #3
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fd27 	bl	8004190 <FDCAN_CalcultateRamBlockAddresses>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003748:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800374c:	4618      	mov	r0, r3
 800374e:	3760      	adds	r7, #96	@ 0x60
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	4000a000 	.word	0x4000a000

08003758 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d111      	bne.n	8003790 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e008      	b.n	80037a2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b08b      	sub	sp, #44	@ 0x2c
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80037c8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80037ca:	7efb      	ldrb	r3, [r7, #27]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f040 8149 	bne.w	8003a64 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d14c      	bne.n	8003872 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e13c      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e12a      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003830:	d10a      	bne.n	8003848 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800383a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800383e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003842:	d101      	bne.n	8003848 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	69f9      	ldr	r1, [r7, #28]
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	e068      	b.n	8003944 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b41      	cmp	r3, #65	@ 0x41
 8003876:	d14c      	bne.n	8003912 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003880:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0ec      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0da      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d0:	d10a      	bne.n	80038e8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038e2:	d101      	bne.n	80038e8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80038e4:	2301      	movs	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	69f9      	ldr	r1, [r7, #28]
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003910:	e018      	b.n	8003944 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d309      	bcc.n	8003930 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0a2      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e005      	b.n	8003974 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	3304      	adds	r3, #4
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 020f 	and.w	r2, r3, #15
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0e1b      	lsrs	r3, r3, #24
 80039c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0fda      	lsrs	r2, r3, #31
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	3304      	adds	r3, #4
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	e00a      	b.n	8003a00 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	441a      	add	r2, r3
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	440b      	add	r3, r1
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	3301      	adds	r3, #1
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d3ec      	bcc.n	80039ea <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d105      	bne.n	8003a22 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003a20:	e01e      	b.n	8003a60 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b41      	cmp	r3, #65	@ 0x41
 8003a26:	d105      	bne.n	8003a34 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003a32:	e015      	b.n	8003a60 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b1f      	cmp	r3, #31
 8003a38:	d808      	bhi.n	8003a4c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003a4a:	e009      	b.n	8003a60 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 021f 	and.w	r2, r3, #31
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e008      	b.n	8003a76 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	372c      	adds	r7, #44	@ 0x2c
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	0800b654 	.word	0x0800b654

08003a88 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003a9a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <HAL_FDCAN_ActivateNotification+0x20>
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d155      	bne.n	8003b54 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d108      	bne.n	8003ac8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ac6:	e014      	b.n	8003af2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d108      	bne.n	8003aea <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0202 	orr.w	r2, r2, #2
 8003ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ae8:	e003      	b.n	8003af2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2203      	movs	r2, #3
 8003af0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HAL_FDCAN_ActivateNotification+0xec>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0f9b      	lsrs	r3, r3, #30
 8003b4a:	490b      	ldr	r1, [pc, #44]	@ (8003b78 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e008      	b.n	8003b66 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b5a:	f043 0202 	orr.w	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	3fcfffff 	.word	0x3fcfffff
 8003b78:	4000a800 	.word	0x4000a800

08003b7c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b096      	sub	sp, #88	@ 0x58
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003b84:	4b9a      	ldr	r3, [pc, #616]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	079b      	lsls	r3, r3, #30
 8003b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003b8c:	4b98      	ldr	r3, [pc, #608]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	079b      	lsls	r3, r3, #30
 8003b92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b94:	4013      	ands	r3, r2
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003ba2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003bac:	4013      	ands	r3, r2
 8003bae:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bdc:	4013      	ands	r3, r2
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003bea:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfe:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c40:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c42:	4b6b      	ldr	r3, [pc, #428]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa54 	bl	80040f6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c50:	0a9b      	lsrs	r3, r3, #10
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01d      	beq.n	8003c96 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5c:	0a9b      	lsrs	r3, r3, #10
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c86:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c88:	4b59      	ldr	r3, [pc, #356]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa07 	bl	80040a4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ca2:	4b54      	ldr	r3, [pc, #336]	@ (8003df4 <HAL_FDCAN_IRQHandler+0x278>)
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca8:	4a51      	ldr	r2, [pc, #324]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	0f9b      	lsrs	r3, r3, #30
 8003cae:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9c0 	bl	8004038 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_FDCAN_IRQHandler+0x278>)
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cca:	4a49      	ldr	r2, [pc, #292]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	0f9b      	lsrs	r3, r3, #30
 8003cd0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9ba 	bl	800404e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003ce6:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <HAL_FDCAN_IRQHandler+0x278>)
 8003ce8:	400b      	ands	r3, r1
 8003cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cec:	4a40      	ldr	r2, [pc, #256]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cf0:	0f9b      	lsrs	r3, r3, #30
 8003cf2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003cf4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe f9dc 	bl	80020b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d08:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <HAL_FDCAN_IRQHandler+0x278>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d0e:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d12:	0f9b      	lsrs	r3, r3, #30
 8003d14:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003d16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9a3 	bl	8004064 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	0adb      	lsrs	r3, r3, #11
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d010      	beq.n	8003d4c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	0adb      	lsrs	r3, r3, #11
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d40:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f997 	bl	800407a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4e:	0a5b      	lsrs	r3, r3, #9
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01d      	beq.n	8003d94 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d6c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d78:	4013      	ands	r3, r2
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f97d 	bl	800408e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d96:	0cdb      	lsrs	r3, r3, #19
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	0cdb      	lsrs	r3, r3, #19
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003db4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003db6:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f97c 	bl	80040ba <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003de2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003de4:	4b02      	ldr	r3, [pc, #8]	@ (8003df0 <HAL_FDCAN_IRQHandler+0x274>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	e004      	b.n	8003df8 <HAL_FDCAN_IRQHandler+0x27c>
 8003dee:	bf00      	nop
 8003df0:	4000a800 	.word	0x4000a800
 8003df4:	3fcfffff 	.word	0x3fcfffff
 8003df8:	f000 f969 	bl	80040ce <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfe:	0c9b      	lsrs	r3, r3, #18
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	0c9b      	lsrs	r3, r3, #18
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003e1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e1e:	4b83      	ldr	r3, [pc, #524]	@ (800402c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f95c 	bl	80040e2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	0c5b      	lsrs	r3, r3, #17
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	0c5b      	lsrs	r3, r3, #17
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00f      	beq.n	8003e62 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e4c:	4b77      	ldr	r3, [pc, #476]	@ (800402c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e6e:	4b70      	ldr	r3, [pc, #448]	@ (8004030 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003e70:	400b      	ands	r3, r1
 8003e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e74:	4a6d      	ldr	r2, [pc, #436]	@ (800402c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e78:	0f9b      	lsrs	r3, r3, #30
 8003e7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f94d 	bl	800411e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e90:	4b67      	ldr	r3, [pc, #412]	@ (8004030 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e96:	4a65      	ldr	r2, [pc, #404]	@ (800402c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9a:	0f9b      	lsrs	r3, r3, #30
 8003e9c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a60      	ldr	r2, [pc, #384]	@ (8004034 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	f040 80ac 	bne.w	8004012 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a4 	beq.w	8004012 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ede:	4013      	ands	r3, r2
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0e:	4013      	ands	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003f1c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	4013      	ands	r3, r2
 8003f28:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003f34:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8e6 	bl	8004134 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f74:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8e6 	bl	800414a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01a      	beq.n	8003fc0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d014      	beq.n	8003fc0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fac:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2240      	movs	r2, #64	@ 0x40
 8003fb4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6939      	ldr	r1, [r7, #16]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8d0 	bl	8004160 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003fce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8d1 	bl	8004178 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f874 	bl	800410a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004022:	bf00      	nop
 8004024:	3758      	adds	r7, #88	@ 0x58
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	4000a800 	.word	0x4000a800
 8004030:	3fcfffff 	.word	0x3fcfffff
 8004034:	4000a000 	.word	0x4000a000

08004038 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80041a6:	4ba7      	ldr	r3, [pc, #668]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0091      	lsls	r1, r2, #2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	430b      	orrs	r3, r1
 80041b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	041a      	lsls	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4413      	add	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041e6:	4b97      	ldr	r3, [pc, #604]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0091      	lsls	r1, r2, #2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	041a      	lsls	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4413      	add	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004228:	4b86      	ldr	r3, [pc, #536]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800422a:	4013      	ands	r3, r2
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0091      	lsls	r1, r2, #2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	430b      	orrs	r3, r1
 8004236:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004242:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004270:	4b74      	ldr	r3, [pc, #464]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	0091      	lsls	r1, r2, #2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	430b      	orrs	r3, r1
 800427e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800428a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	041a      	lsls	r2, r3, #16
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80042b8:	4b62      	ldr	r3, [pc, #392]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	0091      	lsls	r1, r2, #2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4413      	add	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80042e4:	4b57      	ldr	r3, [pc, #348]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	0091      	lsls	r1, r2, #2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fe:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	041a      	lsls	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	4413      	add	r3, r2
 800431c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004326:	4b47      	ldr	r3, [pc, #284]	@ (8004444 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0091      	lsls	r1, r2, #2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	430b      	orrs	r3, r1
 8004334:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004340:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800435c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004364:	061a      	lsls	r2, r3, #24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004374:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004376:	4413      	add	r3, r2
 8004378:	009a      	lsls	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	4a04      	ldr	r2, [pc, #16]	@ (800444c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d915      	bls.n	800446c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004440:	e006      	b.n	8004450 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004442:	bf00      	nop
 8004444:	ffff0003 	.word	0xffff0003
 8004448:	10002b00 	.word	0x10002b00
 800444c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2203      	movs	r2, #3
 8004464:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e010      	b.n	800448e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e005      	b.n	8004480 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3304      	adds	r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d3f3      	bcc.n	8004474 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044aa:	4b89      	ldr	r3, [pc, #548]	@ (80046d0 <HAL_GPIO_Init+0x234>)
 80044ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ae:	e194      	b.n	80047da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2101      	movs	r1, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8186 	beq.w	80047d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d005      	beq.n	80044e0 <HAL_GPIO_Init+0x44>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d130      	bne.n	8004542 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004516:	2201      	movs	r2, #1
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0201 	and.w	r2, r3, #1
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b03      	cmp	r3, #3
 800454c:	d017      	beq.n	800457e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	2203      	movs	r2, #3
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d123      	bne.n	80045d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	08da      	lsrs	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3208      	adds	r2, #8
 8004592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	220f      	movs	r2, #15
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4013      	ands	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	69b9      	ldr	r1, [r7, #24]
 80045ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0203 	and.w	r2, r3, #3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80e0 	beq.w	80047d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004614:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_GPIO_Init+0x238>)
 8004616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800461a:	4a2e      	ldr	r2, [pc, #184]	@ (80046d4 <HAL_GPIO_Init+0x238>)
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_GPIO_Init+0x238>)
 8004626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004632:	4a29      	ldr	r2, [pc, #164]	@ (80046d8 <HAL_GPIO_Init+0x23c>)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	3302      	adds	r3, #2
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	220f      	movs	r2, #15
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a20      	ldr	r2, [pc, #128]	@ (80046dc <HAL_GPIO_Init+0x240>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d052      	beq.n	8004704 <HAL_GPIO_Init+0x268>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <HAL_GPIO_Init+0x244>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d031      	beq.n	80046ca <HAL_GPIO_Init+0x22e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1e      	ldr	r2, [pc, #120]	@ (80046e4 <HAL_GPIO_Init+0x248>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02b      	beq.n	80046c6 <HAL_GPIO_Init+0x22a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <HAL_GPIO_Init+0x24c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d025      	beq.n	80046c2 <HAL_GPIO_Init+0x226>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1c      	ldr	r2, [pc, #112]	@ (80046ec <HAL_GPIO_Init+0x250>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01f      	beq.n	80046be <HAL_GPIO_Init+0x222>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1b      	ldr	r2, [pc, #108]	@ (80046f0 <HAL_GPIO_Init+0x254>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d019      	beq.n	80046ba <HAL_GPIO_Init+0x21e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1a      	ldr	r2, [pc, #104]	@ (80046f4 <HAL_GPIO_Init+0x258>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_GPIO_Init+0x21a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <HAL_GPIO_Init+0x25c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00d      	beq.n	80046b2 <HAL_GPIO_Init+0x216>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_GPIO_Init+0x260>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <HAL_GPIO_Init+0x212>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a17      	ldr	r2, [pc, #92]	@ (8004700 <HAL_GPIO_Init+0x264>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_GPIO_Init+0x20e>
 80046a6:	2309      	movs	r3, #9
 80046a8:	e02d      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046aa:	230a      	movs	r3, #10
 80046ac:	e02b      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046ae:	2308      	movs	r3, #8
 80046b0:	e029      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046b2:	2307      	movs	r3, #7
 80046b4:	e027      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046b6:	2306      	movs	r3, #6
 80046b8:	e025      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046ba:	2305      	movs	r3, #5
 80046bc:	e023      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046be:	2304      	movs	r3, #4
 80046c0:	e021      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e01f      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e01d      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01b      	b.n	8004706 <HAL_GPIO_Init+0x26a>
 80046ce:	bf00      	nop
 80046d0:	58000080 	.word	0x58000080
 80046d4:	58024400 	.word	0x58024400
 80046d8:	58000400 	.word	0x58000400
 80046dc:	58020000 	.word	0x58020000
 80046e0:	58020400 	.word	0x58020400
 80046e4:	58020800 	.word	0x58020800
 80046e8:	58020c00 	.word	0x58020c00
 80046ec:	58021000 	.word	0x58021000
 80046f0:	58021400 	.word	0x58021400
 80046f4:	58021800 	.word	0x58021800
 80046f8:	58021c00 	.word	0x58021c00
 80046fc:	58022000 	.word	0x58022000
 8004700:	58022400 	.word	0x58022400
 8004704:	2300      	movs	r3, #0
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	f002 0203 	and.w	r2, r2, #3
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	4093      	lsls	r3, r2
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004716:	4938      	ldr	r1, [pc, #224]	@ (80047f8 <HAL_GPIO_Init+0x35c>)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	3302      	adds	r3, #2
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800474a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004778:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3301      	adds	r3, #1
 80047d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f ae63 	bne.w	80044b0 <HAL_GPIO_Init+0x14>
  }
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3724      	adds	r7, #36	@ 0x24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	58000400 	.word	0x58000400

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004818:	e003      	b.n	8004822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004838:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_PWREx_ConfigSupply+0x70>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b04      	cmp	r3, #4
 8004842:	d00a      	beq.n	800485a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004844:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01f      	b.n	8004896 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e01d      	b.n	8004896 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800485a:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <HAL_PWREx_ConfigSupply+0x70>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f023 0207 	bic.w	r2, r3, #7
 8004862:	490f      	ldr	r1, [pc, #60]	@ (80048a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800486a:	f7fd fe93 	bl	8002594 <HAL_GetTick>
 800486e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004870:	e009      	b.n	8004886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004872:	f7fd fe8f 	bl	8002594 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e007      	b.n	8004896 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004892:	d1ee      	bne.n	8004872 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58024800 	.word	0x58024800

080048a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	@ 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f000 bc48 	b.w	8005148 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8088 	beq.w	80049d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4b99      	ldr	r3, [pc, #612]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048d0:	4b96      	ldr	r3, [pc, #600]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d007      	beq.n	80048ec <HAL_RCC_OscConfig+0x48>
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	2b18      	cmp	r3, #24
 80048e0:	d111      	bne.n	8004906 <HAL_RCC_OscConfig+0x62>
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b8f      	ldr	r3, [pc, #572]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d06d      	beq.n	80049d4 <HAL_RCC_OscConfig+0x130>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d169      	bne.n	80049d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f000 bc21 	b.w	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x7a>
 8004910:	4b86      	ldr	r3, [pc, #536]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a85      	ldr	r2, [pc, #532]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e02e      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x9c>
 8004926:	4b81      	ldr	r3, [pc, #516]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a80      	ldr	r2, [pc, #512]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b7e      	ldr	r3, [pc, #504]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7d      	ldr	r2, [pc, #500]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0xc0>
 800494a:	4b78      	ldr	r3, [pc, #480]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a77      	ldr	r2, [pc, #476]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b75      	ldr	r3, [pc, #468]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a74      	ldr	r2, [pc, #464]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 8004964:	4b71      	ldr	r3, [pc, #452]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a70      	ldr	r2, [pc, #448]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b6e      	ldr	r3, [pc, #440]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6d      	ldr	r2, [pc, #436]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd fe06 	bl	8002594 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fe02 	bl	8002594 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	@ 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e3d4      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xe8>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd fdf2 	bl	8002594 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fd fdee 	bl	8002594 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e3c0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049c6:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x110>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80ca 	beq.w	8004b78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e4:	4b51      	ldr	r3, [pc, #324]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_RCC_OscConfig+0x166>
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b18      	cmp	r3, #24
 80049fe:	d156      	bne.n	8004aae <HAL_RCC_OscConfig+0x20a>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d151      	bne.n	8004aae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a0a:	4b48      	ldr	r3, [pc, #288]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x17e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e392      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a22:	4b42      	ldr	r3, [pc, #264]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 0219 	bic.w	r2, r3, #25
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	493f      	ldr	r1, [pc, #252]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fdae 	bl	8002594 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fdaa 	bl	8002594 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e37c      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	f7fd fda7 	bl	80025ac <HAL_GetREVID>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d817      	bhi.n	8004a98 <HAL_RCC_OscConfig+0x1f4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d108      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1de>
 8004a70:	4b2e      	ldr	r3, [pc, #184]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a78:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a80:	e07a      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	031b      	lsls	r3, r3, #12
 8004a90:	4926      	ldr	r1, [pc, #152]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a96:	e06f      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	4921      	ldr	r1, [pc, #132]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aac:	e064      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d047      	beq.n	8004b46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 0219 	bic.w	r2, r3, #25
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	491a      	ldr	r1, [pc, #104]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fd64 	bl	8002594 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fd60 	bl	8002594 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e332      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	f7fd fd5d 	bl	80025ac <HAL_GetREVID>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d819      	bhi.n	8004b30 <HAL_RCC_OscConfig+0x28c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d108      	bne.n	8004b16 <HAL_RCC_OscConfig+0x272>
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b12:	6053      	str	r3, [r2, #4]
 8004b14:	e030      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	031b      	lsls	r3, r3, #12
 8004b24:	4901      	ldr	r1, [pc, #4]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
 8004b2a:	e025      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	4b9a      	ldr	r3, [pc, #616]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	4997      	ldr	r1, [pc, #604]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	e018      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b46:	4b95      	ldr	r3, [pc, #596]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a94      	ldr	r2, [pc, #592]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fd fd1f 	bl	8002594 <HAL_GetTick>
 8004b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5a:	f7fd fd1b 	bl	8002594 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e2ed      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a9 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b86:	4b85      	ldr	r3, [pc, #532]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b90:	4b82      	ldr	r3, [pc, #520]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d007      	beq.n	8004bac <HAL_RCC_OscConfig+0x308>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b18      	cmp	r3, #24
 8004ba0:	d13a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x374>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d135      	bne.n	8004c18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bac:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x320>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b80      	cmp	r3, #128	@ 0x80
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e2c1      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bc4:	f7fd fcf2 	bl	80025ac <HAL_GetREVID>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d817      	bhi.n	8004c02 <HAL_RCC_OscConfig+0x35e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d108      	bne.n	8004bec <HAL_RCC_OscConfig+0x348>
 8004bda:	4b70      	ldr	r3, [pc, #448]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004be2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bea:	e075      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bec:	4b6b      	ldr	r3, [pc, #428]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	069b      	lsls	r3, r3, #26
 8004bfa:	4968      	ldr	r1, [pc, #416]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c00:	e06a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c02:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	4962      	ldr	r1, [pc, #392]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c16:	e05f      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d042      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c20:	4b5e      	ldr	r3, [pc, #376]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fcb2 	bl	8002594 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c34:	f7fd fcae 	bl	8002594 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e280      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c46:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c52:	f7fd fcab 	bl	80025ac <HAL_GetREVID>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d817      	bhi.n	8004c90 <HAL_RCC_OscConfig+0x3ec>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d108      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3d6>
 8004c68:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c70:	4a4a      	ldr	r2, [pc, #296]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c76:	6053      	str	r3, [r2, #4]
 8004c78:	e02e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
 8004c7a:	4b48      	ldr	r3, [pc, #288]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	4944      	ldr	r1, [pc, #272]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]
 8004c8e:	e023      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
 8004c90:	4b42      	ldr	r3, [pc, #264]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	493f      	ldr	r1, [pc, #252]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3c      	ldr	r2, [pc, #240]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fc6f 	bl	8002594 <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cba:	f7fd fc6b 	bl	8002594 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e23d      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ccc:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d036      	beq.n	8004d52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d019      	beq.n	8004d20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cec:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd fc4c 	bl	8002594 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd fc48 	bl	8002594 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e21a      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x45c>
 8004d1e:	e018      	b.n	8004d52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd fc32 	bl	8002594 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fd fc2e 	bl	8002594 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e200      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d039      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d72:	f7fd fc0f 	bl	8002594 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7a:	f7fd fc0b 	bl	8002594 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1dd      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x4d6>
 8004d98:	e01b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x52e>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004da0:	4b9b      	ldr	r3, [pc, #620]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a9a      	ldr	r2, [pc, #616]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dac:	f7fd fbf2 	bl	8002594 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db4:	f7fd fbee 	bl	8002594 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e1c0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dc6:	4b92      	ldr	r3, [pc, #584]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8081 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004de0:	4b8c      	ldr	r3, [pc, #560]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a8b      	ldr	r2, [pc, #556]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dec:	f7fd fbd2 	bl	8002594 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fd fbce 	bl	8002594 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	@ 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1a0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e06:	4b83      	ldr	r3, [pc, #524]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x584>
 8004e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e26:	e02d      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5a6>
 8004e30:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	4a76      	ldr	r2, [pc, #472]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e3c:	4b74      	ldr	r3, [pc, #464]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e40:	4a73      	ldr	r2, [pc, #460]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e42:	f023 0304 	bic.w	r3, r3, #4
 8004e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c8>
 8004e52:	4b6f      	ldr	r3, [pc, #444]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	4a6e      	ldr	r2, [pc, #440]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a6b      	ldr	r2, [pc, #428]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e6c:	4b68      	ldr	r3, [pc, #416]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e70:	4a67      	ldr	r2, [pc, #412]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e78:	4b65      	ldr	r3, [pc, #404]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a64      	ldr	r2, [pc, #400]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fd fb82 	bl	8002594 <HAL_GetTick>
 8004e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fd fb7e 	bl	8002594 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e14e      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eaa:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ee      	beq.n	8004e94 <HAL_RCC_OscConfig+0x5f0>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fd fb6c 	bl	8002594 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fd fb68 	bl	8002594 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e138      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 812d 	beq.w	8005146 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eec:	4b48      	ldr	r3, [pc, #288]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef4:	2b18      	cmp	r3, #24
 8004ef6:	f000 80bd 	beq.w	8005074 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 809e 	bne.w	8005040 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b42      	ldr	r3, [pc, #264]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a41      	ldr	r2, [pc, #260]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fb40 	bl	8002594 <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fb3c 	bl	8002594 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e10e      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2a:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f3a:	4b37      	ldr	r3, [pc, #220]	@ (8005018 <HAL_RCC_OscConfig+0x774>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4931      	ldr	r1, [pc, #196]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	3b01      	subs	r3, #1
 8004f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	025b      	lsls	r3, r3, #9
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f80:	4923      	ldr	r1, [pc, #140]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f86:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	4a21      	ldr	r2, [pc, #132]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f92:	4b1f      	ldr	r3, [pc, #124]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f96:	4b21      	ldr	r3, [pc, #132]	@ (800501c <HAL_RCC_OscConfig+0x778>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f9e:	00d2      	lsls	r2, r2, #3
 8004fa0:	491b      	ldr	r1, [pc, #108]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	f023 020c 	bic.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	4917      	ldr	r1, [pc, #92]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fb8:	4b15      	ldr	r3, [pc, #84]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f023 0202 	bic.w	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc4:	4912      	ldr	r1, [pc, #72]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fca:	4b11      	ldr	r3, [pc, #68]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	4a10      	ldr	r2, [pc, #64]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	4a0d      	ldr	r2, [pc, #52]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fee:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	4a07      	ldr	r2, [pc, #28]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffa:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8005000:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fac5 	bl	8002594 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800500c:	e011      	b.n	8005032 <HAL_RCC_OscConfig+0x78e>
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400
 8005014:	58024800 	.word	0x58024800
 8005018:	fffffc0c 	.word	0xfffffc0c
 800501c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fd fab8 	bl	8002594 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e08a      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x77c>
 800503e:	e082      	b.n	8005146 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b43      	ldr	r3, [pc, #268]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a42      	ldr	r2, [pc, #264]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd faa2 	bl	8002594 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fd fa9e 	bl	8002594 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e070      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005066:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x7b0>
 8005072:	e068      	b.n	8005146 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005074:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800507a:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	2b01      	cmp	r3, #1
 8005086:	d031      	beq.n	80050ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f003 0203 	and.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d12a      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d122      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d11a      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	0a5b      	lsrs	r3, r3, #9
 80050ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d111      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d108      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e02b      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050f0:	4b17      	ldr	r3, [pc, #92]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 80050f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d01f      	beq.n	8005146 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005106:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	4a11      	ldr	r2, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005112:	f7fd fa3f 	bl	8002594 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005118:	bf00      	nop
 800511a:	f7fd fa3b 	bl	8002594 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	4293      	cmp	r3, r2
 8005124:	d0f9      	beq.n	800511a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005126:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800512a:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <HAL_RCC_OscConfig+0x8b0>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	4906      	ldr	r1, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005136:	4313      	orrs	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800513a:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	4a04      	ldr	r2, [pc, #16]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3730      	adds	r7, #48	@ 0x30
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	58024400 	.word	0x58024400
 8005154:	ffff0007 	.word	0xffff0007

08005158 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e19c      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b8a      	ldr	r3, [pc, #552]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d910      	bls.n	800519c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b87      	ldr	r3, [pc, #540]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 020f 	bic.w	r2, r3, #15
 8005182:	4985      	ldr	r1, [pc, #532]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b83      	ldr	r3, [pc, #524]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e184      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	4b7b      	ldr	r3, [pc, #492]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d908      	bls.n	80051ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b8:	4b78      	ldr	r3, [pc, #480]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	4975      	ldr	r1, [pc, #468]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	4b70      	ldr	r3, [pc, #448]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d908      	bls.n	80051f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051e6:	4b6d      	ldr	r3, [pc, #436]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	496a      	ldr	r1, [pc, #424]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	4b64      	ldr	r3, [pc, #400]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005210:	429a      	cmp	r2, r3
 8005212:	d908      	bls.n	8005226 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005214:	4b61      	ldr	r3, [pc, #388]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	495e      	ldr	r1, [pc, #376]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005222:	4313      	orrs	r3, r2
 8005224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	4b59      	ldr	r3, [pc, #356]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800523e:	429a      	cmp	r2, r3
 8005240:	d908      	bls.n	8005254 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005242:	4b56      	ldr	r3, [pc, #344]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4953      	ldr	r1, [pc, #332]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005250:	4313      	orrs	r3, r2
 8005252:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	4b4d      	ldr	r3, [pc, #308]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	429a      	cmp	r2, r3
 800526e:	d908      	bls.n	8005282 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005270:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f023 020f 	bic.w	r2, r3, #15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4947      	ldr	r1, [pc, #284]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800527e:	4313      	orrs	r3, r2
 8005280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d055      	beq.n	800533a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800528e:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4940      	ldr	r1, [pc, #256]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800529c:	4313      	orrs	r3, r2
 800529e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a8:	4b3c      	ldr	r3, [pc, #240]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d121      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0f6      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c0:	4b36      	ldr	r3, [pc, #216]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0ea      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052d8:	4b30      	ldr	r3, [pc, #192]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0de      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e8:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0d6      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f8:	4b28      	ldr	r3, [pc, #160]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f023 0207 	bic.w	r2, r3, #7
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4925      	ldr	r1, [pc, #148]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005306:	4313      	orrs	r3, r2
 8005308:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fd f943 	bl	8002594 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005310:	e00a      	b.n	8005328 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fd f93f 	bl	8002594 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0be      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005328:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	429a      	cmp	r2, r3
 8005338:	d1eb      	bne.n	8005312 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	4b14      	ldr	r3, [pc, #80]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	429a      	cmp	r2, r3
 8005354:	d208      	bcs.n	8005368 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005356:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f023 020f 	bic.w	r2, r3, #15
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	490e      	ldr	r1, [pc, #56]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005364:	4313      	orrs	r3, r2
 8005366:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d214      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	4906      	ldr	r1, [pc, #24]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e086      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
 8005398:	52002000 	.word	0x52002000
 800539c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	4b3f      	ldr	r3, [pc, #252]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d208      	bcs.n	80053ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053bc:	4b3c      	ldr	r3, [pc, #240]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4939      	ldr	r1, [pc, #228]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	4b34      	ldr	r3, [pc, #208]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d208      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ea:	4b31      	ldr	r3, [pc, #196]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	492e      	ldr	r1, [pc, #184]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005414:	429a      	cmp	r2, r3
 8005416:	d208      	bcs.n	800542a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005418:	4b25      	ldr	r3, [pc, #148]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4922      	ldr	r1, [pc, #136]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005442:	429a      	cmp	r2, r3
 8005444:	d208      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4917      	ldr	r1, [pc, #92]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005454:	4313      	orrs	r3, r2
 8005456:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005458:	f000 f834 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	4912      	ldr	r1, [pc, #72]	@ (80054b4 <HAL_RCC_ClockConfig+0x35c>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005476:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	4a0d      	ldr	r2, [pc, #52]	@ (80054b4 <HAL_RCC_ClockConfig+0x35c>)
 8005480:	5cd3      	ldrb	r3, [r2, r3]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	4a0a      	ldr	r2, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x360>)
 800548e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <HAL_RCC_ClockConfig+0x364>)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x368>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd f830 	bl	8002500 <HAL_InitTick>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
 80054b4:	0800b644 	.word	0x0800b644
 80054b8:	24000004 	.word	0x24000004
 80054bc:	24000000 	.word	0x24000000
 80054c0:	24000008 	.word	0x24000008

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	@ 0x24
 80054c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ca:	4bb3      	ldr	r3, [pc, #716]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d2:	2b18      	cmp	r3, #24
 80054d4:	f200 8155 	bhi.w	8005782 <HAL_RCC_GetSysClockFreq+0x2be>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005545 	.word	0x08005545
 80054e4:	08005783 	.word	0x08005783
 80054e8:	08005783 	.word	0x08005783
 80054ec:	08005783 	.word	0x08005783
 80054f0:	08005783 	.word	0x08005783
 80054f4:	08005783 	.word	0x08005783
 80054f8:	08005783 	.word	0x08005783
 80054fc:	08005783 	.word	0x08005783
 8005500:	0800556b 	.word	0x0800556b
 8005504:	08005783 	.word	0x08005783
 8005508:	08005783 	.word	0x08005783
 800550c:	08005783 	.word	0x08005783
 8005510:	08005783 	.word	0x08005783
 8005514:	08005783 	.word	0x08005783
 8005518:	08005783 	.word	0x08005783
 800551c:	08005783 	.word	0x08005783
 8005520:	08005571 	.word	0x08005571
 8005524:	08005783 	.word	0x08005783
 8005528:	08005783 	.word	0x08005783
 800552c:	08005783 	.word	0x08005783
 8005530:	08005783 	.word	0x08005783
 8005534:	08005783 	.word	0x08005783
 8005538:	08005783 	.word	0x08005783
 800553c:	08005783 	.word	0x08005783
 8005540:	08005577 	.word	0x08005577
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005544:	4b94      	ldr	r3, [pc, #592]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d009      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005550:	4b91      	ldr	r3, [pc, #580]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	4a90      	ldr	r2, [pc, #576]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005562:	e111      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005564:	4b8d      	ldr	r3, [pc, #564]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005566:	61bb      	str	r3, [r7, #24]
      break;
 8005568:	e10e      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800556a:	4b8d      	ldr	r3, [pc, #564]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800556c:	61bb      	str	r3, [r7, #24]
      break;
 800556e:	e10b      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005570:	4b8c      	ldr	r3, [pc, #560]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005572:	61bb      	str	r3, [r7, #24]
      break;
 8005574:	e108      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005576:	4b88      	ldr	r3, [pc, #544]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005580:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800558c:	4b82      	ldr	r3, [pc, #520]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005596:	4b80      	ldr	r3, [pc, #512]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80e1 	beq.w	800577c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f000 8083 	beq.w	80056c8 <HAL_RCC_GetSysClockFreq+0x204>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	f200 80a1 	bhi.w	800570c <HAL_RCC_GetSysClockFreq+0x248>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x114>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d056      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055d6:	e099      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02d      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	4a6b      	ldr	r2, [pc, #428]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b62      	ldr	r3, [pc, #392]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005622:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800563e:	e087      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b51      	ldr	r3, [pc, #324]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a02 	vldr	s12, [r7, #8]
 8005666:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005682:	e065      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005696:	4b40      	ldr	r3, [pc, #256]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056c6:	e043      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056da:	4b2f      	ldr	r3, [pc, #188]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800570a:	e021      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b1e      	ldr	r3, [pc, #120]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005732:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800574e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	0a5b      	lsrs	r3, r3, #9
 8005756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800575a:	3301      	adds	r3, #1
 800575c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005768:	edd7 6a07 	vldr	s13, [r7, #28]
 800576c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005774:	ee17 3a90 	vmov	r3, s15
 8005778:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800577a:	e005      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
      break;
 8005780:	e002      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005784:	61bb      	str	r3, [r7, #24]
      break;
 8005786:	bf00      	nop
  }

  return sysclockfreq;
 8005788:	69bb      	ldr	r3, [r7, #24]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3724      	adds	r7, #36	@ 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	003d0900 	.word	0x003d0900
 80057a4:	017d7840 	.word	0x017d7840
 80057a8:	46000000 	.word	0x46000000
 80057ac:	4c742400 	.word	0x4c742400
 80057b0:	4a742400 	.word	0x4a742400
 80057b4:	4bbebc20 	.word	0x4bbebc20

080057b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057be:	f7ff fe81 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x50>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	490f      	ldr	r1, [pc, #60]	@ (800580c <HAL_RCC_GetHCLKFreq+0x54>)
 80057d0:	5ccb      	ldrb	r3, [r1, r3]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	fa22 f303 	lsr.w	r3, r2, r3
 80057da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x50>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	4a09      	ldr	r2, [pc, #36]	@ (800580c <HAL_RCC_GetHCLKFreq+0x54>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	4a07      	ldr	r2, [pc, #28]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x58>)
 80057f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057f6:	4a07      	ldr	r2, [pc, #28]	@ (8005814 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x58>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58024400 	.word	0x58024400
 800580c:	0800b644 	.word	0x0800b644
 8005810:	24000004 	.word	0x24000004
 8005814:	24000000 	.word	0x24000000

08005818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800581c:	f7ff ffcc 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4904      	ldr	r1, [pc, #16]	@ (8005840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	58024400 	.word	0x58024400
 8005840:	0800b644 	.word	0x0800b644

08005844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005848:	f7ff ffb6 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	4904      	ldr	r1, [pc, #16]	@ (800586c <HAL_RCC_GetPCLK2Freq+0x28>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	58024400 	.word	0x58024400
 800586c:	0800b644 	.word	0x0800b644

08005870 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005874:	b0ca      	sub	sp, #296	@ 0x128
 8005876:	af00      	add	r7, sp, #0
 8005878:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005882:	2300      	movs	r3, #0
 8005884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005894:	2500      	movs	r5, #0
 8005896:	ea54 0305 	orrs.w	r3, r4, r5
 800589a:	d049      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058a6:	d02f      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ac:	d828      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b2:	d01a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b8:	d822      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c2:	d007      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058c4:	e01c      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	4ab7      	ldr	r2, [pc, #732]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058d2:	e01a      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	3308      	adds	r3, #8
 80058da:	2102      	movs	r1, #2
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fc8f 	bl	8007200 <RCCEx_PLL2_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058e8:	e00f      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	3328      	adds	r3, #40	@ 0x28
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fd36 	bl	8007364 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058fe:	e004      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005912:	4ba5      	ldr	r3, [pc, #660]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005916:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005920:	4aa1      	ldr	r2, [pc, #644]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005922:	430b      	orrs	r3, r1
 8005924:	6513      	str	r3, [r2, #80]	@ 0x50
 8005926:	e003      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800593c:	f04f 0900 	mov.w	r9, #0
 8005940:	ea58 0309 	orrs.w	r3, r8, r9
 8005944:	d047      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	2b04      	cmp	r3, #4
 800594e:	d82a      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005950:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800596d 	.word	0x0800596d
 800595c:	0800597b 	.word	0x0800597b
 8005960:	08005991 	.word	0x08005991
 8005964:	080059af 	.word	0x080059af
 8005968:	080059af 	.word	0x080059af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4a8d      	ldr	r2, [pc, #564]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005978:	e01a      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	3308      	adds	r3, #8
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fc3c 	bl	8007200 <RCCEx_PLL2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800598e:	e00f      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	3328      	adds	r3, #40	@ 0x28
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fce3 	bl	8007364 <RCCEx_PLL3_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a4:	e004      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059bc:	f023 0107 	bic.w	r1, r3, #7
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c6:	4a78      	ldr	r2, [pc, #480]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80059e2:	f04f 0b00 	mov.w	fp, #0
 80059e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80059ea:	d04c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	d030      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80059f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fc:	d829      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a00:	d02d      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a04:	d825      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d018      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a0a:	2b80      	cmp	r3, #128	@ 0x80
 8005a0c:	d821      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d007      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a16:	e01c      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a18:	4b63      	ldr	r3, [pc, #396]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a24:	e01c      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fbe6 	bl	8007200 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e011      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	3328      	adds	r3, #40	@ 0x28
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fc8d 	bl	8007364 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a50:	e006      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a58:	e002      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	4a4c      	ldr	r2, [pc, #304]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a7c:	e003      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005a9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d053      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab2:	d035      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ab4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab8:	d82e      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005aba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005abe:	d031      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ac4:	d828      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aca:	d01a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad0:	d822      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ada:	d007      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005adc:	e01c      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b32      	ldr	r3, [pc, #200]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	4a31      	ldr	r2, [pc, #196]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aea:	e01c      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	3308      	adds	r3, #8
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fb83 	bl	8007200 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b00:	e011      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	3328      	adds	r3, #40	@ 0x28
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 fc2a 	bl	8007364 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b16:	e006      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b1e:	e002      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d056      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b7a:	d038      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b80:	d831      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b86:	d034      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b8c:	d82b      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b92:	d01d      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b98:	d825      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ba4:	e01f      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4ba2      	ldr	r3, [pc, #648]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4aa1      	ldr	r2, [pc, #644]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e01c      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fb1c 	bl	8007200 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bce:	e011      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	3328      	adds	r3, #40	@ 0x28
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fbc3 	bl	8007364 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be4:	e006      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bec:	e002      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10b      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c0c:	4a8a      	ldr	r2, [pc, #552]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d03a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c42:	2b30      	cmp	r3, #48	@ 0x30
 8005c44:	d01f      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c46:	2b30      	cmp	r3, #48	@ 0x30
 8005c48:	d819      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d00c      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d815      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d111      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5a:	4b77      	ldr	r3, [pc, #476]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	4a76      	ldr	r2, [pc, #472]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c66:	e011      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	2102      	movs	r1, #2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fac5 	bl	8007200 <RCCEx_PLL2_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c7c:	e006      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c84:	e002      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c94:	4b68      	ldr	r3, [pc, #416]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca2:	4a65      	ldr	r2, [pc, #404]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ca8:	e003      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	d051      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cdc:	d035      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005cde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce2:	d82e      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ce4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ce8:	d031      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cee:	d828      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf4:	d01a      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfa:	d822      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d04:	d007      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d06:	e01c      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4b4b      	ldr	r3, [pc, #300]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d14:	e01c      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fa6e 	bl	8007200 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e011      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d30:	3328      	adds	r3, #40	@ 0x28
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fb15 	bl	8007364 <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d58:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d66:	4a34      	ldr	r2, [pc, #208]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d6c:	e003      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d056      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da0:	d033      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da6:	d82c      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dac:	d02f      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005db2:	d826      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005db8:	d02b      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dbe:	d820      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc4:	d012      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dca:	d81a      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd4:	d115      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	3308      	adds	r3, #8
 8005ddc:	2101      	movs	r1, #1
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fa0e 	bl	8007200 <RCCEx_PLL2_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dea:	e015      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	3328      	adds	r3, #40	@ 0x28
 8005df2:	2101      	movs	r1, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fab5 	bl	8007364 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e08:	e006      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e004      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e002      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10d      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e2e:	4a02      	ldr	r2, [pc, #8]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e34:	e006      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d055      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e70:	d033      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e76:	d82c      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7c:	d02f      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d826      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e88:	d02b      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e8e:	d820      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e94:	d012      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e9a:	d81a      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d022      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ea4:	d115      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2101      	movs	r1, #1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 f9a6 	bl	8007200 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eba:	e015      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fa4d 	bl	8007364 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e00a      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005eda:	bf00      	nop
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ef0:	4ba3      	ldr	r3, [pc, #652]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f00:	4a9f      	ldr	r2, [pc, #636]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f06:	e003      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	d037      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3a:	d00e      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f40:	d816      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d018      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4a:	d111      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f50:	4a8b      	ldr	r2, [pc, #556]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f58:	e00f      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	3308      	adds	r3, #8
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 f94c 	bl	8007200 <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f6e:	e004      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f82:	4b7f      	ldr	r3, [pc, #508]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a7b      	ldr	r2, [pc, #492]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f92:	430b      	orrs	r3, r1
 8005f94:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f96:	e003      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	d039      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d81c      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	0800600d 	.word	0x0800600d
 8005fd4:	08005fe1 	.word	0x08005fe1
 8005fd8:	08005fef 	.word	0x08005fef
 8005fdc:	0800600d 	.word	0x0800600d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe0:	4b67      	ldr	r3, [pc, #412]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	4a66      	ldr	r2, [pc, #408]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fec:	e00f      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 f902 	bl	8007200 <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006002:	e004      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800600c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006016:	4b5a      	ldr	r3, [pc, #360]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601a:	f023 0103 	bic.w	r1, r3, #3
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006024:	4a56      	ldr	r2, [pc, #344]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006026:	430b      	orrs	r3, r1
 8006028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800604a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	f000 809f 	beq.w	8006194 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006056:	4b4b      	ldr	r3, [pc, #300]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a4a      	ldr	r2, [pc, #296]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800605c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006062:	f7fc fa97 	bl	8002594 <HAL_GetTick>
 8006066:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606a:	e00b      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606c:	f7fc fa92 	bl	8002594 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	@ 0x64
 800607a:	d903      	bls.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006082:	e005      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006084:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0ed      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006094:	2b00      	cmp	r3, #0
 8006096:	d179      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006098:	4b39      	ldr	r3, [pc, #228]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060a4:	4053      	eors	r3, r2
 80060a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d015      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ae:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060ba:	4b31      	ldr	r3, [pc, #196]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060be:	4a30      	ldr	r2, [pc, #192]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e6:	d118      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fc fa54 	bl	8002594 <HAL_GetTick>
 80060ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f0:	e00d      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fc fa4f 	bl	8002594 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060fc:	1ad2      	subs	r2, r2, r3
 80060fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006102:	429a      	cmp	r2, r3
 8006104:	d903      	bls.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800610c:	e005      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610e:	4b1c      	ldr	r3, [pc, #112]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0eb      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d129      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800612a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006132:	d10e      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006134:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006144:	091a      	lsrs	r2, r3, #4
 8006146:	4b10      	ldr	r3, [pc, #64]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006148:	4013      	ands	r3, r2
 800614a:	4a0d      	ldr	r2, [pc, #52]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614c:	430b      	orrs	r3, r1
 800614e:	6113      	str	r3, [r2, #16]
 8006150:	e005      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006152:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800615c:	6113      	str	r3, [r2, #16]
 800615e:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006160:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800616a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616e:	4a04      	ldr	r2, [pc, #16]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006170:	430b      	orrs	r3, r1
 8006172:	6713      	str	r3, [r2, #112]	@ 0x70
 8006174:	e00e      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800617e:	e009      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006180:	58024400 	.word	0x58024400
 8006184:	58024800 	.word	0x58024800
 8006188:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f002 0301 	and.w	r3, r2, #1
 80061a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f000 8089 	beq.w	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061bc:	2b28      	cmp	r3, #40	@ 0x28
 80061be:	d86b      	bhi.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080062a1 	.word	0x080062a1
 80061cc:	08006299 	.word	0x08006299
 80061d0:	08006299 	.word	0x08006299
 80061d4:	08006299 	.word	0x08006299
 80061d8:	08006299 	.word	0x08006299
 80061dc:	08006299 	.word	0x08006299
 80061e0:	08006299 	.word	0x08006299
 80061e4:	08006299 	.word	0x08006299
 80061e8:	0800626d 	.word	0x0800626d
 80061ec:	08006299 	.word	0x08006299
 80061f0:	08006299 	.word	0x08006299
 80061f4:	08006299 	.word	0x08006299
 80061f8:	08006299 	.word	0x08006299
 80061fc:	08006299 	.word	0x08006299
 8006200:	08006299 	.word	0x08006299
 8006204:	08006299 	.word	0x08006299
 8006208:	08006283 	.word	0x08006283
 800620c:	08006299 	.word	0x08006299
 8006210:	08006299 	.word	0x08006299
 8006214:	08006299 	.word	0x08006299
 8006218:	08006299 	.word	0x08006299
 800621c:	08006299 	.word	0x08006299
 8006220:	08006299 	.word	0x08006299
 8006224:	08006299 	.word	0x08006299
 8006228:	080062a1 	.word	0x080062a1
 800622c:	08006299 	.word	0x08006299
 8006230:	08006299 	.word	0x08006299
 8006234:	08006299 	.word	0x08006299
 8006238:	08006299 	.word	0x08006299
 800623c:	08006299 	.word	0x08006299
 8006240:	08006299 	.word	0x08006299
 8006244:	08006299 	.word	0x08006299
 8006248:	080062a1 	.word	0x080062a1
 800624c:	08006299 	.word	0x08006299
 8006250:	08006299 	.word	0x08006299
 8006254:	08006299 	.word	0x08006299
 8006258:	08006299 	.word	0x08006299
 800625c:	08006299 	.word	0x08006299
 8006260:	08006299 	.word	0x08006299
 8006264:	08006299 	.word	0x08006299
 8006268:	080062a1 	.word	0x080062a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	3308      	adds	r3, #8
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ffc3 	bl	8007200 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006280:	e00f      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	3328      	adds	r3, #40	@ 0x28
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f86a 	bl	8007364 <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006296:	e004      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062aa:	4bbf      	ldr	r3, [pc, #764]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b8:	4abb      	ldr	r2, [pc, #748]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80062be:	e003      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f002 0302 	and.w	r3, r2, #2
 80062d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062d8:	2300      	movs	r3, #0
 80062da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d041      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062ee:	2b05      	cmp	r3, #5
 80062f0:	d824      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006345 	.word	0x08006345
 80062fc:	08006311 	.word	0x08006311
 8006300:	08006327 	.word	0x08006327
 8006304:	08006345 	.word	0x08006345
 8006308:	08006345 	.word	0x08006345
 800630c:	08006345 	.word	0x08006345
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	3308      	adds	r3, #8
 8006316:	2101      	movs	r1, #1
 8006318:	4618      	mov	r0, r3
 800631a:	f000 ff71 	bl	8007200 <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006324:	e00f      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	3328      	adds	r3, #40	@ 0x28
 800632c:	2101      	movs	r1, #1
 800632e:	4618      	mov	r0, r3
 8006330:	f001 f818 	bl	8007364 <RCCEx_PLL3_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800633a:	e004      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800634e:	4b96      	ldr	r3, [pc, #600]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	f023 0107 	bic.w	r1, r3, #7
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800635c:	4a92      	ldr	r2, [pc, #584]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800635e:	430b      	orrs	r3, r1
 8006360:	6553      	str	r3, [r2, #84]	@ 0x54
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f002 0304 	and.w	r3, r2, #4
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006382:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d044      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006394:	2b05      	cmp	r3, #5
 8006396:	d825      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006398:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063b9 	.word	0x080063b9
 80063a8:	080063cf 	.word	0x080063cf
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 ff1d 	bl	8007200 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063cc:	e00f      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3328      	adds	r3, #40	@ 0x28
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 ffc4 	bl	8007364 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f6:	4b6c      	ldr	r3, [pc, #432]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	f023 0107 	bic.w	r1, r3, #7
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006406:	4a68      	ldr	r2, [pc, #416]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6593      	str	r3, [r2, #88]	@ 0x58
 800640c:	e003      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f002 0320 	and.w	r3, r2, #32
 8006422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800642c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d055      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006442:	d033      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006448:	d82c      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800644a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644e:	d02f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006454:	d826      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800645a:	d02b      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800645c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006460:	d820      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006466:	d012      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800646c:	d81a      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d022      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006476:	d115      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	3308      	adds	r3, #8
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f000 febd 	bl	8007200 <RCCEx_PLL2_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800648c:	e015      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	3328      	adds	r3, #40	@ 0x28
 8006494:	2102      	movs	r1, #2
 8006496:	4618      	mov	r0, r3
 8006498:	f000 ff64 	bl	8007364 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064a2:	e00a      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064aa:	e006      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064ac:	bf00      	nop
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b0:	bf00      	nop
 80064b2:	e002      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c2:	4b39      	ldr	r3, [pc, #228]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	4a35      	ldr	r2, [pc, #212]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4313      	orrs	r3, r2
 8006500:	d058      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800650a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800650e:	d033      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006510:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006514:	d82c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d02f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d826      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006526:	d02b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006528:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800652c:	d820      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800652e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006532:	d012      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006538:	d81a      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006542:	d115      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	3308      	adds	r3, #8
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fe57 	bl	8007200 <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006558:	e015      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	3328      	adds	r3, #40	@ 0x28
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fefe 	bl	8007364 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800656e:	e00a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10e      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659e:	4a02      	ldr	r2, [pc, #8]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d055      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065e0:	d033      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80065e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065e6:	d82c      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ec:	d02f      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f2:	d826      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065f8:	d02b      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80065fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065fe:	d820      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006604:	d012      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660a:	d81a      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d022      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006614:	d115      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661a:	3308      	adds	r3, #8
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fdee 	bl	8007200 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800662a:	e015      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	3328      	adds	r3, #40	@ 0x28
 8006632:	2102      	movs	r1, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fe95 	bl	8007364 <RCCEx_PLL3_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006640:	e00a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006660:	4ba1      	ldr	r3, [pc, #644]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006670:	4a9d      	ldr	r2, [pc, #628]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006672:	430b      	orrs	r3, r1
 8006674:	6593      	str	r3, [r2, #88]	@ 0x58
 8006676:	e003      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f002 0308 	and.w	r3, r2, #8
 800668c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006690:	2300      	movs	r3, #0
 8006692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006696:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d01e      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b2:	3328      	adds	r3, #40	@ 0x28
 80066b4:	2102      	movs	r1, #2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fe54 	bl	8007364 <RCCEx_PLL3_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066c8:	4b87      	ldr	r3, [pc, #540]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d8:	4a83      	ldr	r2, [pc, #524]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066da:	430b      	orrs	r3, r1
 80066dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f002 0310 	and.w	r3, r2, #16
 80066ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066ee:	2300      	movs	r3, #0
 80066f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d01e      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	d10c      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	3328      	adds	r3, #40	@ 0x28
 8006712:	2102      	movs	r1, #2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fe25 	bl	8007364 <RCCEx_PLL3_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006726:	4b70      	ldr	r3, [pc, #448]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006736:	4a6c      	ldr	r2, [pc, #432]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006738:	430b      	orrs	r3, r1
 800673a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006752:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006756:	460b      	mov	r3, r1
 8006758:	4313      	orrs	r3, r2
 800675a:	d03e      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006768:	d022      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800676a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800676e:	d81b      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006778:	d00b      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800677a:	e015      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	3308      	adds	r3, #8
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fd3b 	bl	8007200 <RCCEx_PLL2_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006790:	e00f      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006796:	3328      	adds	r3, #40	@ 0x28
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fde2 	bl	8007364 <RCCEx_PLL3_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067a6:	e004      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ae:	e000      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80067b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067ba:	4b4b      	ldr	r3, [pc, #300]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067ca:	4a47      	ldr	r2, [pc, #284]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d0:	e003      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067e8:	2300      	movs	r3, #0
 80067ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d03b      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006802:	d01f      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006808:	d818      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800680a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006814:	d007      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006816:	e011      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006818:	4b33      	ldr	r3, [pc, #204]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	4a32      	ldr	r2, [pc, #200]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006824:	e00f      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	3328      	adds	r3, #40	@ 0x28
 800682c:	2101      	movs	r1, #1
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fd98 	bl	8007364 <RCCEx_PLL3_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800683a:	e004      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800684e:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	4a22      	ldr	r2, [pc, #136]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006860:	430b      	orrs	r3, r1
 8006862:	6553      	str	r3, [r2, #84]	@ 0x54
 8006864:	e003      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800687a:	673b      	str	r3, [r7, #112]	@ 0x70
 800687c:	2300      	movs	r3, #0
 800687e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006880:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d034      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006898:	d007      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800689a:	e011      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800689c:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	4a11      	ldr	r2, [pc, #68]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068a8:	e00e      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	3308      	adds	r3, #8
 80068b0:	2102      	movs	r1, #2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fca4 	bl	8007200 <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10d      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	4a02      	ldr	r2, [pc, #8]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068e4:	e006      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006902:	2300      	movs	r3, #0
 8006904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006906:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d00c      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	3328      	adds	r3, #40	@ 0x28
 8006916:	2102      	movs	r1, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fd23 	bl	8007364 <RCCEx_PLL3_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006936:	663b      	str	r3, [r7, #96]	@ 0x60
 8006938:	2300      	movs	r3, #0
 800693a:	667b      	str	r3, [r7, #100]	@ 0x64
 800693c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d038      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006952:	d018      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006958:	d811      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800695a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800695e:	d014      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006964:	d80b      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800696a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800696e:	d106      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006970:	4bc3      	ldr	r3, [pc, #780]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	4ac2      	ldr	r2, [pc, #776]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800697c:	e008      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006984:	e004      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800698e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006998:	4bb9      	ldr	r3, [pc, #740]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a8:	4ab5      	ldr	r2, [pc, #724]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069aa:	430b      	orrs	r3, r1
 80069ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ae:	e003      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069c6:	2300      	movs	r3, #0
 80069c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069ce:	460b      	mov	r3, r1
 80069d0:	4313      	orrs	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069d4:	4baa      	ldr	r3, [pc, #680]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e2:	4aa7      	ldr	r2, [pc, #668]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80069f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f6:	2300      	movs	r3, #0
 80069f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80069fe:	460b      	mov	r3, r1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a04:	4b9e      	ldr	r3, [pc, #632]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a14:	4a9a      	ldr	r2, [pc, #616]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a28:	2300      	movs	r3, #0
 8006a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a36:	4b92      	ldr	r3, [pc, #584]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a44:	4a8e      	ldr	r2, [pc, #568]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a46:	430b      	orrs	r3, r1
 8006a48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a58:	2300      	movs	r3, #0
 8006a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a60:	460b      	mov	r3, r1
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a66:	4b86      	ldr	r3, [pc, #536]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	4a85      	ldr	r2, [pc, #532]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a70:	6113      	str	r3, [r2, #16]
 8006a72:	4b83      	ldr	r3, [pc, #524]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a74:	6919      	ldr	r1, [r3, #16]
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a7e:	4a80      	ldr	r2, [pc, #512]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006aa0:	4b77      	ldr	r3, [pc, #476]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	4a74      	ldr	r2, [pc, #464]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae0:	4a67      	ldr	r2, [pc, #412]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	2100      	movs	r1, #0
 8006af0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006afc:	460b      	mov	r3, r1
 8006afe:	4313      	orrs	r3, r2
 8006b00:	d011      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	3308      	adds	r3, #8
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fb78 	bl	8007200 <RCCEx_PLL2_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	2100      	movs	r1, #0
 8006b30:	6239      	str	r1, [r7, #32]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d011      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	3308      	adds	r3, #8
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fb58 	bl	8007200 <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	61b9      	str	r1, [r7, #24]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	d011      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	3308      	adds	r3, #8
 8006b88:	2102      	movs	r1, #2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fb38 	bl	8007200 <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6139      	str	r1, [r7, #16]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	d011      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	3328      	adds	r3, #40	@ 0x28
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fbca 	bl	8007364 <RCCEx_PLL3_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d011      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	3328      	adds	r3, #40	@ 0x28
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fbaa 	bl	8007364 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	607b      	str	r3, [r7, #4]
 8006c38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d011      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	3328      	adds	r3, #40	@ 0x28
 8006c48:	2102      	movs	r1, #2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fb8a 	bl	8007364 <RCCEx_PLL3_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c80:	58024400 	.word	0x58024400

08006c84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c88:	f7fe fd96 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	091b      	lsrs	r3, r3, #4
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	4904      	ldr	r1, [pc, #16]	@ (8006cac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c9a:	5ccb      	ldrb	r3, [r1, r3]
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	58024400 	.word	0x58024400
 8006cac:	0800b644 	.word	0x0800b644

08006cb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	@ 0x24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	0b1b      	lsrs	r3, r3, #12
 8006cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ccc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cce:	4b9c      	ldr	r3, [pc, #624]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	091b      	lsrs	r3, r3, #4
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cda:	4b99      	ldr	r3, [pc, #612]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8111 	beq.w	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f000 8083 	beq.w	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	f200 80a1 	bhi.w	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d056      	beq.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d1a:	e099      	b.n	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1c:	4b88      	ldr	r3, [pc, #544]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02d      	beq.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d28:	4b85      	ldr	r3, [pc, #532]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	4a84      	ldr	r2, [pc, #528]	@ (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b7b      	ldr	r3, [pc, #492]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d82:	e087      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b6a      	ldr	r3, [pc, #424]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dc6:	e065      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b59      	ldr	r3, [pc, #356]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0a:	e043      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1e:	4b48      	ldr	r3, [pc, #288]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e4e:	e021      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b37      	ldr	r3, [pc, #220]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e94:	4b2a      	ldr	r3, [pc, #168]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	0a5b      	lsrs	r3, r3, #9
 8006e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eba:	ee17 2a90 	vmov	r2, s15
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee8:	ee17 2a90 	vmov	r2, s15
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ef0:	4b13      	ldr	r3, [pc, #76]	@ (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f16:	ee17 2a90 	vmov	r2, s15
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f1e:	e008      	b.n	8006f32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
}
 8006f32:	bf00      	nop
 8006f34:	3724      	adds	r7, #36	@ 0x24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	03d09000 	.word	0x03d09000
 8006f48:	46000000 	.word	0x46000000
 8006f4c:	4c742400 	.word	0x4c742400
 8006f50:	4a742400 	.word	0x4a742400
 8006f54:	4bbebc20 	.word	0x4bbebc20

08006f58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b089      	sub	sp, #36	@ 0x24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f60:	4ba1      	ldr	r3, [pc, #644]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f6a:	4b9f      	ldr	r3, [pc, #636]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	0d1b      	lsrs	r3, r3, #20
 8006f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f76:	4b9c      	ldr	r3, [pc, #624]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f82:	4b99      	ldr	r3, [pc, #612]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	08db      	lsrs	r3, r3, #3
 8006f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8111 	beq.w	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	f000 8083 	beq.w	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	f200 80a1 	bhi.w	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d056      	beq.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fc2:	e099      	b.n	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc4:	4b88      	ldr	r3, [pc, #544]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d02d      	beq.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd0:	4b85      	ldr	r3, [pc, #532]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	08db      	lsrs	r3, r3, #3
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	4a84      	ldr	r2, [pc, #528]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800702a:	e087      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b6a      	ldr	r3, [pc, #424]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800706e:	e065      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b59      	ldr	r3, [pc, #356]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b2:	e043      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b48      	ldr	r3, [pc, #288]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f6:	e021      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b37      	ldr	r3, [pc, #220]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800713c:	4b2a      	ldr	r3, [pc, #168]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	0a5b      	lsrs	r3, r3, #9
 8007142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007156:	edd7 6a07 	vldr	s13, [r7, #28]
 800715a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800715e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007162:	ee17 2a90 	vmov	r2, s15
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800716a:	4b1f      	ldr	r3, [pc, #124]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007184:	edd7 6a07 	vldr	s13, [r7, #28]
 8007188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007190:	ee17 2a90 	vmov	r2, s15
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007198:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071be:	ee17 2a90 	vmov	r2, s15
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
}
 80071da:	bf00      	nop
 80071dc:	3724      	adds	r7, #36	@ 0x24
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4c742400 	.word	0x4c742400
 80071f8:	4a742400 	.word	0x4a742400
 80071fc:	4bbebc20 	.word	0x4bbebc20

08007200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800720e:	4b53      	ldr	r3, [pc, #332]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d101      	bne.n	800721e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e099      	b.n	8007352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800721e:	4b4f      	ldr	r3, [pc, #316]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4e      	ldr	r2, [pc, #312]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fb f9b3 	bl	8002594 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	e008      	b.n	8007244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007232:	f7fb f9af 	bl	8002594 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e086      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007244:	4b45      	ldr	r3, [pc, #276]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007250:	4b42      	ldr	r3, [pc, #264]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	493f      	ldr	r1, [pc, #252]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007260:	4313      	orrs	r3, r2
 8007262:	628b      	str	r3, [r1, #40]	@ 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	3b01      	subs	r3, #1
 800726a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	b29b      	uxth	r3, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007294:	4931      	ldr	r1, [pc, #196]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800729a:	4b30      	ldr	r3, [pc, #192]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	492d      	ldr	r1, [pc, #180]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072ac:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	f023 0220 	bic.w	r2, r3, #32
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4928      	ldr	r1, [pc, #160]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072be:	4b27      	ldr	r3, [pc, #156]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	4a26      	ldr	r2, [pc, #152]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ca:	4b24      	ldr	r3, [pc, #144]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ce:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <RCCEx_PLL2_Config+0x160>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	69d2      	ldr	r2, [r2, #28]
 80072d6:	00d2      	lsls	r2, r2, #3
 80072d8:	4920      	ldr	r1, [pc, #128]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072de:	4b1f      	ldr	r3, [pc, #124]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f043 0310 	orr.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	4a19      	ldr	r2, [pc, #100]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072fc:	e00f      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d106      	bne.n	8007312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007304:	4b15      	ldr	r3, [pc, #84]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a14      	ldr	r2, [pc, #80]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007310:	e005      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a11      	ldr	r2, [pc, #68]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800731c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800731e:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fb f933 	bl	8002594 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007332:	f7fb f92f 	bl	8002594 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	ffff0007 	.word	0xffff0007

08007364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007372:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d101      	bne.n	8007382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007382:	4b4f      	ldr	r3, [pc, #316]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4e      	ldr	r2, [pc, #312]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fb f901 	bl	8002594 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007396:	f7fb f8fd 	bl	8002594 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e086      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a8:	4b45      	ldr	r3, [pc, #276]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073b4:	4b42      	ldr	r3, [pc, #264]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	051b      	lsls	r3, r3, #20
 80073c2:	493f      	ldr	r1, [pc, #252]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	b29b      	uxth	r3, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f8:	4931      	ldr	r1, [pc, #196]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073fe:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492d      	ldr	r1, [pc, #180]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007410:	4b2b      	ldr	r3, [pc, #172]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4928      	ldr	r1, [pc, #160]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007422:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007432:	4b24      	ldr	r3, [pc, #144]	@ (80074c4 <RCCEx_PLL3_Config+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69d2      	ldr	r2, [r2, #28]
 800743a:	00d2      	lsls	r2, r2, #3
 800743c:	4920      	ldr	r1, [pc, #128]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800745a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e00f      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a14      	ldr	r2, [pc, #80]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007474:	e005      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800747c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007482:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0e      	ldr	r2, [pc, #56]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fb f881 	bl	8002594 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007496:	f7fb f87d 	bl	8002594 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	ffff0007 	.word	0xffff0007

080074c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e10f      	b.n	80076fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a87      	ldr	r2, [pc, #540]	@ (8007704 <HAL_SPI_Init+0x23c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a86      	ldr	r2, [pc, #536]	@ (8007708 <HAL_SPI_Init+0x240>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00a      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a84      	ldr	r2, [pc, #528]	@ (800770c <HAL_SPI_Init+0x244>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d005      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d901      	bls.n	800750a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0f7      	b.n	80076fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fe2e 	bl	800816c <SPI_GetPacketSize>
 8007510:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7b      	ldr	r2, [pc, #492]	@ (8007704 <HAL_SPI_Init+0x23c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00c      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a79      	ldr	r2, [pc, #484]	@ (8007708 <HAL_SPI_Init+0x240>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d007      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a78      	ldr	r2, [pc, #480]	@ (800770c <HAL_SPI_Init+0x244>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d811      	bhi.n	800755a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800753a:	4a72      	ldr	r2, [pc, #456]	@ (8007704 <HAL_SPI_Init+0x23c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a70      	ldr	r2, [pc, #448]	@ (8007708 <HAL_SPI_Init+0x240>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_SPI_Init+0x8c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a6f      	ldr	r2, [pc, #444]	@ (800770c <HAL_SPI_Init+0x244>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d104      	bne.n	800755e <HAL_SPI_Init+0x96>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b10      	cmp	r3, #16
 8007558:	d901      	bls.n	800755e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e0cd      	b.n	80076fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fa fb58 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800759a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075a4:	d119      	bne.n	80075da <HAL_SPI_Init+0x112>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075ae:	d103      	bne.n	80075b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c8:	d107      	bne.n	80075da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00f      	beq.n	8007606 <HAL_SPI_Init+0x13e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b06      	cmp	r3, #6
 80075ec:	d90b      	bls.n	8007606 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e007      	b.n	8007616 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	431a      	orrs	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007628:	ea42 0103 	orr.w	r1, r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	ea42 0103 	orr.w	r1, r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d113      	bne.n	80076b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40013000 	.word	0x40013000
 8007708:	40003800 	.word	0x40003800
 800770c:	40003c00 	.word	0x40003c00

08007710 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3320      	adds	r3, #32
 8007726:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007728:	f7fa ff34 	bl	8002594 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b01      	cmp	r3, #1
 8007738:	d001      	beq.n	800773e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800773a:	2302      	movs	r3, #2
 800773c:	e1d1      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_SPI_Transmit+0x3a>
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e1c9      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_SPI_Transmit+0x4c>
 8007758:	2302      	movs	r3, #2
 800775a:	e1c2      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2203      	movs	r2, #3
 8007768:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	88fa      	ldrh	r2, [r7, #6]
 800777e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80077b4:	d108      	bne.n	80077c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e009      	b.n	80077dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80077da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	4b96      	ldr	r3, [pc, #600]	@ (8007a3c <HAL_SPI_Transmit+0x32c>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	88f9      	ldrh	r1, [r7, #6]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007808:	d107      	bne.n	800781a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b0f      	cmp	r3, #15
 8007820:	d947      	bls.n	80078b2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007822:	e03f      	b.n	80078a4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b02      	cmp	r3, #2
 8007830:	d114      	bne.n	800785c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800785a:	e023      	b.n	80078a4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800785c:	f7fa fe9a 	bl	8002594 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d803      	bhi.n	8007874 <HAL_SPI_Transmit+0x164>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d102      	bne.n	800787a <HAL_SPI_Transmit+0x16a>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d114      	bne.n	80078a4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fba8 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007886:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e11e      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1b9      	bne.n	8007824 <HAL_SPI_Transmit+0x114>
 80078b0:	e0f1      	b.n	8007a96 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b07      	cmp	r3, #7
 80078b8:	f240 80e6 	bls.w	8007a88 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80078bc:	e05d      	b.n	800797a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d132      	bne.n	8007932 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d918      	bls.n	800790a <HAL_SPI_Transmit+0x1fa>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d014      	beq.n	800790a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f0:	1d1a      	adds	r2, r3, #4
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b02      	subs	r3, #2
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007908:	e037      	b.n	800797a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007918:	1c9a      	adds	r2, r3, #2
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007930:	e023      	b.n	800797a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007932:	f7fa fe2f 	bl	8002594 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d803      	bhi.n	800794a <HAL_SPI_Transmit+0x23a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d102      	bne.n	8007950 <HAL_SPI_Transmit+0x240>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d114      	bne.n	800797a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb3d 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800795c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e0b3      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d19b      	bne.n	80078be <HAL_SPI_Transmit+0x1ae>
 8007986:	e086      	b.n	8007a96 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d154      	bne.n	8007a40 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d918      	bls.n	80079d4 <HAL_SPI_Transmit+0x2c4>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a6:	2b40      	cmp	r3, #64	@ 0x40
 80079a8:	d914      	bls.n	80079d4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b04      	subs	r3, #4
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079d2:	e059      	b.n	8007a88 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d917      	bls.n	8007a10 <HAL_SPI_Transmit+0x300>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d013      	beq.n	8007a10 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b02      	subs	r3, #2
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a0e:	e03b      	b.n	8007a88 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3320      	adds	r3, #32
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a3a:	e025      	b.n	8007a88 <HAL_SPI_Transmit+0x378>
 8007a3c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a40:	f7fa fda8 	bl	8002594 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d803      	bhi.n	8007a58 <HAL_SPI_Transmit+0x348>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d102      	bne.n	8007a5e <HAL_SPI_Transmit+0x34e>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d114      	bne.n	8007a88 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fab6 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e02c      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f47f af79 	bne.w	8007988 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2108      	movs	r1, #8
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fb35 	bl	8008110 <SPI_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ab2:	f043 0220 	orr.w	r2, r3, #32
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fa87 	bl	8007fd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop

08007aec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3301      	adds	r3, #1
 8007b06:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3330      	adds	r3, #48	@ 0x30
 8007b0e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b10:	f7fa fd40 	bl	8002594 <HAL_GetTick>
 8007b14:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e250      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_Receive+0x46>
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e248      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_SPI_Receive+0x58>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e241      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	88fa      	ldrh	r2, [r7, #6]
 8007b66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007b9c:	d108      	bne.n	8007bb0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e009      	b.n	8007bc4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007bc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	4b95      	ldr	r3, [pc, #596]	@ (8007e20 <HAL_SPI_Receive+0x334>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	88f9      	ldrh	r1, [r7, #6]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bf0:	d107      	bne.n	8007c02 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d96c      	bls.n	8007ce4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007c0a:	e064      	b.n	8007cd6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d114      	bne.n	8007c4c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c4a:	e044      	b.n	8007cd6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	8bfa      	ldrh	r2, [r7, #30]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d919      	bls.n	8007c8e <HAL_SPI_Receive+0x1a2>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d014      	beq.n	8007c8e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c6e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c8c:	e023      	b.n	8007cd6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8e:	f7fa fc81 	bl	8002594 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d803      	bhi.n	8007ca6 <HAL_SPI_Receive+0x1ba>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d102      	bne.n	8007cac <HAL_SPI_Receive+0x1c0>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d114      	bne.n	8007cd6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f98f 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e178      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d194      	bne.n	8007c0c <HAL_SPI_Receive+0x120>
 8007ce2:	e15e      	b.n	8007fa2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	2b07      	cmp	r3, #7
 8007cea:	f240 8153 	bls.w	8007f94 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007cee:	e08f      	b.n	8007e10 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d114      	bne.n	8007d30 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	8812      	ldrh	r2, [r2, #0]
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d2e:	e06f      	b.n	8007e10 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8bfa      	ldrh	r2, [r7, #30]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d924      	bls.n	8007d88 <HAL_SPI_Receive+0x29c>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01f      	beq.n	8007d88 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	8812      	ldrh	r2, [r2, #0]
 8007d50:	b292      	uxth	r2, r2
 8007d52:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d58:	1c9a      	adds	r2, r3, #2
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	8812      	ldrh	r2, [r2, #0]
 8007d66:	b292      	uxth	r2, r2
 8007d68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d6e:	1c9a      	adds	r2, r3, #2
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b02      	subs	r3, #2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d86:	e043      	b.n	8007e10 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d119      	bne.n	8007dc8 <HAL_SPI_Receive+0x2dc>
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d014      	beq.n	8007dc8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	b292      	uxth	r2, r2
 8007da8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dae:	1c9a      	adds	r2, r3, #2
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dc6:	e023      	b.n	8007e10 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dc8:	f7fa fbe4 	bl	8002594 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d803      	bhi.n	8007de0 <HAL_SPI_Receive+0x2f4>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d102      	bne.n	8007de6 <HAL_SPI_Receive+0x2fa>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d114      	bne.n	8007e10 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f8f2 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0db      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f af69 	bne.w	8007cf0 <HAL_SPI_Receive+0x204>
 8007e1e:	e0c0      	b.n	8007fa2 <HAL_SPI_Receive+0x4b6>
 8007e20:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d117      	bne.n	8007e6a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e68:	e094      	b.n	8007f94 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	8bfa      	ldrh	r2, [r7, #30]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d946      	bls.n	8007f06 <HAL_SPI_Receive+0x41a>
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d041      	beq.n	8007f06 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee2:	7812      	ldrb	r2, [r2, #0]
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b04      	subs	r3, #4
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f04:	e046      	b.n	8007f94 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d81c      	bhi.n	8007f4c <HAL_SPI_Receive+0x460>
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d017      	beq.n	8007f4c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f28:	7812      	ldrb	r2, [r2, #0]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f4a:	e023      	b.n	8007f94 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f4c:	f7fa fb22 	bl	8002594 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d803      	bhi.n	8007f64 <HAL_SPI_Receive+0x478>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d102      	bne.n	8007f6a <HAL_SPI_Receive+0x47e>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d114      	bne.n	8007f94 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f830 	bl	8007fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e019      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f af41 	bne.w	8007e24 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f814 	bl	8007fd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
  }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0208 	orr.w	r2, r2, #8
 8007fee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0210 	orr.w	r2, r2, #16
 8007ffe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6919      	ldr	r1, [r3, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b3c      	ldr	r3, [pc, #240]	@ (800810c <SPI_CloseTransfer+0x13c>)
 800801c:	400b      	ands	r3, r1
 800801e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800802e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b04      	cmp	r3, #4
 800803a:	d014      	beq.n	8008066 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00f      	beq.n	8008066 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0220 	orr.w	r2, r2, #32
 8008064:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d014      	beq.n	800809c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00f      	beq.n	800809c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008082:	f043 0204 	orr.w	r2, r3, #4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800809a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ac:	f043 0201 	orr.w	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00f      	beq.n	80080f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d6:	f043 0208 	orr.w	r2, r3, #8
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	fffffc90 	.word	0xfffffc90

08008110 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008120:	e010      	b.n	8008144 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008122:	f7fa fa37 	bl	8002594 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d803      	bhi.n	800813a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d102      	bne.n	8008140 <SPI_WaitOnFlagUntilTimeout+0x30>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e00f      	b.n	8008164 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	429a      	cmp	r2, r3
 8008152:	bf0c      	ite	eq
 8008154:	2301      	moveq	r3, #1
 8008156:	2300      	movne	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	429a      	cmp	r2, r3
 8008160:	d0df      	beq.n	8008122 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3307      	adds	r3, #7
 800818a:	08db      	lsrs	r3, r3, #3
 800818c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	fb02 f303 	mul.w	r3, r2, r3
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e042      	b.n	800823a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7f9 fd96 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2224      	movs	r2, #36	@ 0x24
 80081d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0201 	bic.w	r2, r2, #1
 80081e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fb29 	bl	8009844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fdbe 	bl	8008d74 <UART_SetConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e01b      	b.n	800823a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008210:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008220:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fba8 	bl	8009988 <UART_CheckIdleState>
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b08a      	sub	sp, #40	@ 0x28
 8008246:	af02      	add	r7, sp, #8
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	603b      	str	r3, [r7, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008258:	2b20      	cmp	r3, #32
 800825a:	d17b      	bne.n	8008354 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <HAL_UART_Transmit+0x26>
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e074      	b.n	8008356 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2221      	movs	r2, #33	@ 0x21
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800827c:	f7fa f98a 	bl	8002594 <HAL_GetTick>
 8008280:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	88fa      	ldrh	r2, [r7, #6]
 8008286:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800829a:	d108      	bne.n	80082ae <HAL_UART_Transmit+0x6c>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e003      	b.n	80082b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082b6:	e030      	b.n	800831a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2200      	movs	r2, #0
 80082c0:	2180      	movs	r1, #128	@ 0x80
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f001 fc0a 	bl	8009adc <UART_WaitOnFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e03d      	b.n	8008356 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10b      	bne.n	80082f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	3302      	adds	r3, #2
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	e007      	b.n	8008308 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	3301      	adds	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1c8      	bne.n	80082b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2200      	movs	r2, #0
 800832e:	2140      	movs	r1, #64	@ 0x40
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f001 fbd3 	bl	8009adc <UART_WaitOnFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e006      	b.n	8008356 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	e000      	b.n	8008356 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008354:	2302      	movs	r3, #2
  }
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b08a      	sub	sp, #40	@ 0x28
 8008362:	af02      	add	r7, sp, #8
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	603b      	str	r3, [r7, #0]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008374:	2b20      	cmp	r3, #32
 8008376:	f040 80b5 	bne.w	80084e4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <HAL_UART_Receive+0x28>
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e0ad      	b.n	80084e6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2222      	movs	r2, #34	@ 0x22
 8008396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083a0:	f7fa f8f8 	bl	8002594 <HAL_GetTick>
 80083a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	88fa      	ldrh	r2, [r7, #6]
 80083aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083be:	d10e      	bne.n	80083de <HAL_UART_Receive+0x80>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <HAL_UART_Receive+0x76>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80083ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083d2:	e02d      	b.n	8008430 <HAL_UART_Receive+0xd2>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	22ff      	movs	r2, #255	@ 0xff
 80083d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083dc:	e028      	b.n	8008430 <HAL_UART_Receive+0xd2>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <HAL_UART_Receive+0xa4>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <HAL_UART_Receive+0x9a>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	22ff      	movs	r2, #255	@ 0xff
 80083f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083f6:	e01b      	b.n	8008430 <HAL_UART_Receive+0xd2>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	227f      	movs	r2, #127	@ 0x7f
 80083fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008400:	e016      	b.n	8008430 <HAL_UART_Receive+0xd2>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800840a:	d10d      	bne.n	8008428 <HAL_UART_Receive+0xca>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <HAL_UART_Receive+0xc0>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	227f      	movs	r2, #127	@ 0x7f
 8008418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800841c:	e008      	b.n	8008430 <HAL_UART_Receive+0xd2>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	223f      	movs	r2, #63	@ 0x3f
 8008422:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008426:	e003      	b.n	8008430 <HAL_UART_Receive+0xd2>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008436:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008440:	d108      	bne.n	8008454 <HAL_UART_Receive+0xf6>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e003      	b.n	800845c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800845c:	e036      	b.n	80084cc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2200      	movs	r2, #0
 8008466:	2120      	movs	r1, #32
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fb37 	bl	8009adc <UART_WaitOnFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e032      	b.n	80084e6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10c      	bne.n	80084a0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	b29a      	uxth	r2, r3
 800848e:	8a7b      	ldrh	r3, [r7, #18]
 8008490:	4013      	ands	r3, r2
 8008492:	b29a      	uxth	r2, r3
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	3302      	adds	r3, #2
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	e00c      	b.n	80084ba <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	8a7b      	ldrh	r3, [r7, #18]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	4013      	ands	r3, r2
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1c2      	bne.n	800845e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e000      	b.n	80084e6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80084e4:	2302      	movs	r3, #2
  }
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3720      	adds	r7, #32
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	@ 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008504:	2b20      	cmp	r3, #32
 8008506:	d137      	bne.n	8008578 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <HAL_UART_Receive_IT+0x24>
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e030      	b.n	800857a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a18      	ldr	r2, [pc, #96]	@ (8008584 <HAL_UART_Receive_IT+0x94>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d01f      	beq.n	8008568 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d018      	beq.n	8008568 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	613b      	str	r3, [r7, #16]
   return(result);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	623b      	str	r3, [r7, #32]
 8008556:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69f9      	ldr	r1, [r7, #28]
 800855a:	6a3a      	ldr	r2, [r7, #32]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	61bb      	str	r3, [r7, #24]
   return(result);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e6      	bne.n	8008536 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	461a      	mov	r2, r3
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 fb22 	bl	8009bb8 <UART_Start_Receive_IT>
 8008574:	4603      	mov	r3, r0
 8008576:	e000      	b.n	800857a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3728      	adds	r7, #40	@ 0x28
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	58000c00 	.word	0x58000c00

08008588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b0ba      	sub	sp, #232	@ 0xe8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80085b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80085b6:	4013      	ands	r3, r2
 80085b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80085bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d11b      	bne.n	80085fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d015      	beq.n	80085fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8393 	beq.w	8008d18 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
      }
      return;
 80085fa:	e38d      	b.n	8008d18 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8123 	beq.w	800884c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008606:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800860a:	4b8d      	ldr	r3, [pc, #564]	@ (8008840 <HAL_UART_IRQHandler+0x2b8>)
 800860c:	4013      	ands	r3, r2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008616:	4b8b      	ldr	r3, [pc, #556]	@ (8008844 <HAL_UART_IRQHandler+0x2bc>)
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8116 	beq.w	800884c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d011      	beq.n	8008650 <HAL_UART_IRQHandler+0xc8>
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2201      	movs	r2, #1
 800863e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008646:	f043 0201 	orr.w	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d011      	beq.n	8008680 <HAL_UART_IRQHandler+0xf8>
 800865c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2202      	movs	r2, #2
 800866e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	f043 0204 	orr.w	r2, r3, #4
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d011      	beq.n	80086b0 <HAL_UART_IRQHandler+0x128>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2204      	movs	r2, #4
 800869e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a6:	f043 0202 	orr.w	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008840 <HAL_UART_IRQHandler+0x2b8>)
 80086ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2208      	movs	r2, #8
 80086da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e2:	f043 0208 	orr.w	r2, r3, #8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <HAL_UART_IRQHandler+0x196>
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800870c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008714:	f043 0220 	orr.w	r2, r3, #32
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 82f9 	beq.w	8008d1c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d013      	beq.n	800875e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008772:	2b40      	cmp	r3, #64	@ 0x40
 8008774:	d005      	beq.n	8008782 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800877a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800877e:	2b00      	cmp	r3, #0
 8008780:	d054      	beq.n	800882c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fb3a 	bl	8009dfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008792:	2b40      	cmp	r3, #64	@ 0x40
 8008794:	d146      	bne.n	8008824 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1d9      	bne.n	8008796 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d017      	beq.n	800881c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f2:	4a15      	ldr	r2, [pc, #84]	@ (8008848 <HAL_UART_IRQHandler+0x2c0>)
 80087f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fa fb87 	bl	8002f10 <HAL_DMA_Abort_IT>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d019      	beq.n	800883c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008816:	4610      	mov	r0, r2
 8008818:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881a:	e00f      	b.n	800883c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa93 	bl	8008d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008822:	e00b      	b.n	800883c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa8f 	bl	8008d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882a:	e007      	b.n	800883c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa8b 	bl	8008d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800883a:	e26f      	b.n	8008d1c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	bf00      	nop
    return;
 800883e:	e26d      	b.n	8008d1c <HAL_UART_IRQHandler+0x794>
 8008840:	10000001 	.word	0x10000001
 8008844:	04000120 	.word	0x04000120
 8008848:	08009ec9 	.word	0x08009ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008850:	2b01      	cmp	r3, #1
 8008852:	f040 8203 	bne.w	8008c5c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 81fc 	beq.w	8008c5c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 81f5 	beq.w	8008c5c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2210      	movs	r2, #16
 8008878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008884:	2b40      	cmp	r3, #64	@ 0x40
 8008886:	f040 816d 	bne.w	8008b64 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4aa4      	ldr	r2, [pc, #656]	@ (8008b24 <HAL_UART_IRQHandler+0x59c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d068      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4aa1      	ldr	r2, [pc, #644]	@ (8008b28 <HAL_UART_IRQHandler+0x5a0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d061      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a9f      	ldr	r2, [pc, #636]	@ (8008b2c <HAL_UART_IRQHandler+0x5a4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d05a      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a9c      	ldr	r2, [pc, #624]	@ (8008b30 <HAL_UART_IRQHandler+0x5a8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d053      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a9a      	ldr	r2, [pc, #616]	@ (8008b34 <HAL_UART_IRQHandler+0x5ac>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d04c      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a97      	ldr	r2, [pc, #604]	@ (8008b38 <HAL_UART_IRQHandler+0x5b0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d045      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a95      	ldr	r2, [pc, #596]	@ (8008b3c <HAL_UART_IRQHandler+0x5b4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d03e      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a92      	ldr	r2, [pc, #584]	@ (8008b40 <HAL_UART_IRQHandler+0x5b8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d037      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a90      	ldr	r2, [pc, #576]	@ (8008b44 <HAL_UART_IRQHandler+0x5bc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d030      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a8d      	ldr	r2, [pc, #564]	@ (8008b48 <HAL_UART_IRQHandler+0x5c0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d029      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a8b      	ldr	r2, [pc, #556]	@ (8008b4c <HAL_UART_IRQHandler+0x5c4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d022      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a88      	ldr	r2, [pc, #544]	@ (8008b50 <HAL_UART_IRQHandler+0x5c8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d01b      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a86      	ldr	r2, [pc, #536]	@ (8008b54 <HAL_UART_IRQHandler+0x5cc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d014      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a83      	ldr	r2, [pc, #524]	@ (8008b58 <HAL_UART_IRQHandler+0x5d0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00d      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a81      	ldr	r2, [pc, #516]	@ (8008b5c <HAL_UART_IRQHandler+0x5d4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d006      	beq.n	800896a <HAL_UART_IRQHandler+0x3e2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a7e      	ldr	r2, [pc, #504]	@ (8008b60 <HAL_UART_IRQHandler+0x5d8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d106      	bne.n	8008978 <HAL_UART_IRQHandler+0x3f0>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	b29b      	uxth	r3, r3
 8008976:	e005      	b.n	8008984 <HAL_UART_IRQHandler+0x3fc>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80ad 	beq.w	8008aec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008998:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800899c:	429a      	cmp	r2, r3
 800899e:	f080 80a5 	bcs.w	8008aec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	f000 8087 	beq.w	8008aca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1da      	bne.n	80089bc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e1      	bne.n	8008a06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e3      	bne.n	8008a42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	f023 0310 	bic.w	r3, r3, #16
 8008a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008aac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e4      	bne.n	8008a88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f9 ff05 	bl	80028d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2202      	movs	r2, #2
 8008ace:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f939 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008aea:	e119      	b.n	8008d20 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008af6:	429a      	cmp	r2, r3
 8008af8:	f040 8112 	bne.w	8008d20 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b08:	f040 810a 	bne.w	8008d20 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f91e 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
      return;
 8008b20:	e0fe      	b.n	8008d20 <HAL_UART_IRQHandler+0x798>
 8008b22:	bf00      	nop
 8008b24:	40020010 	.word	0x40020010
 8008b28:	40020028 	.word	0x40020028
 8008b2c:	40020040 	.word	0x40020040
 8008b30:	40020058 	.word	0x40020058
 8008b34:	40020070 	.word	0x40020070
 8008b38:	40020088 	.word	0x40020088
 8008b3c:	400200a0 	.word	0x400200a0
 8008b40:	400200b8 	.word	0x400200b8
 8008b44:	40020410 	.word	0x40020410
 8008b48:	40020428 	.word	0x40020428
 8008b4c:	40020440 	.word	0x40020440
 8008b50:	40020458 	.word	0x40020458
 8008b54:	40020470 	.word	0x40020470
 8008b58:	40020488 	.word	0x40020488
 8008b5c:	400204a0 	.word	0x400204a0
 8008b60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80cf 	beq.w	8008d24 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80ca 	beq.w	8008d24 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e4      	bne.n	8008b90 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd6:	6a3a      	ldr	r2, [r7, #32]
 8008bd8:	4b55      	ldr	r3, [pc, #340]	@ (8008d30 <HAL_UART_IRQHandler+0x7a8>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bea:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e3      	bne.n	8008bc6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0310 	bic.w	r3, r3, #16
 8008c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	617b      	str	r3, [r7, #20]
   return(result);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e4      	bne.n	8008c12 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f881 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c5a:	e063      	b.n	8008d24 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00e      	beq.n	8008c86 <HAL_UART_IRQHandler+0x6fe>
 8008c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fe80 	bl	800a984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c84:	e051      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d014      	beq.n	8008cbc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d03a      	beq.n	8008d28 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3
    }
    return;
 8008cba:	e035      	b.n	8008d28 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <HAL_UART_IRQHandler+0x754>
 8008cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 f909 	bl	8009eec <UART_EndTransmit_IT>
    return;
 8008cda:	e026      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <HAL_UART_IRQHandler+0x774>
 8008ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fe59 	bl	800a9ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cfa:	e016      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d010      	beq.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da0c      	bge.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fe41 	bl	800a998 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d16:	e008      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008d18:	bf00      	nop
 8008d1a:	e006      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
    return;
 8008d1c:	bf00      	nop
 8008d1e:	e004      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008d20:	bf00      	nop
 8008d22:	e002      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008d24:	bf00      	nop
 8008d26:	e000      	b.n	8008d2a <HAL_UART_IRQHandler+0x7a2>
    return;
 8008d28:	bf00      	nop
  }
}
 8008d2a:	37e8      	adds	r7, #232	@ 0xe8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	effffffe 	.word	0xeffffffe

08008d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d78:	b092      	sub	sp, #72	@ 0x48
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4bbe      	ldr	r3, [pc, #760]	@ (800909c <UART_SetConfig+0x328>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4ab3      	ldr	r2, [pc, #716]	@ (80090a0 <UART_SetConfig+0x32c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d004      	beq.n	8008de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	4baf      	ldr	r3, [pc, #700]	@ (80090a4 <UART_SetConfig+0x330>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008df0:	430b      	orrs	r3, r1
 8008df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfa:	f023 010f 	bic.w	r1, r3, #15
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80090a8 <UART_SetConfig+0x334>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d177      	bne.n	8008f04 <UART_SetConfig+0x190>
 8008e14:	4ba5      	ldr	r3, [pc, #660]	@ (80090ac <UART_SetConfig+0x338>)
 8008e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e1c:	2b28      	cmp	r3, #40	@ 0x28
 8008e1e:	d86d      	bhi.n	8008efc <UART_SetConfig+0x188>
 8008e20:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <UART_SetConfig+0xb4>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008ecd 	.word	0x08008ecd
 8008e2c:	08008efd 	.word	0x08008efd
 8008e30:	08008efd 	.word	0x08008efd
 8008e34:	08008efd 	.word	0x08008efd
 8008e38:	08008efd 	.word	0x08008efd
 8008e3c:	08008efd 	.word	0x08008efd
 8008e40:	08008efd 	.word	0x08008efd
 8008e44:	08008efd 	.word	0x08008efd
 8008e48:	08008ed5 	.word	0x08008ed5
 8008e4c:	08008efd 	.word	0x08008efd
 8008e50:	08008efd 	.word	0x08008efd
 8008e54:	08008efd 	.word	0x08008efd
 8008e58:	08008efd 	.word	0x08008efd
 8008e5c:	08008efd 	.word	0x08008efd
 8008e60:	08008efd 	.word	0x08008efd
 8008e64:	08008efd 	.word	0x08008efd
 8008e68:	08008edd 	.word	0x08008edd
 8008e6c:	08008efd 	.word	0x08008efd
 8008e70:	08008efd 	.word	0x08008efd
 8008e74:	08008efd 	.word	0x08008efd
 8008e78:	08008efd 	.word	0x08008efd
 8008e7c:	08008efd 	.word	0x08008efd
 8008e80:	08008efd 	.word	0x08008efd
 8008e84:	08008efd 	.word	0x08008efd
 8008e88:	08008ee5 	.word	0x08008ee5
 8008e8c:	08008efd 	.word	0x08008efd
 8008e90:	08008efd 	.word	0x08008efd
 8008e94:	08008efd 	.word	0x08008efd
 8008e98:	08008efd 	.word	0x08008efd
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	08008efd 	.word	0x08008efd
 8008ea4:	08008efd 	.word	0x08008efd
 8008ea8:	08008eed 	.word	0x08008eed
 8008eac:	08008efd 	.word	0x08008efd
 8008eb0:	08008efd 	.word	0x08008efd
 8008eb4:	08008efd 	.word	0x08008efd
 8008eb8:	08008efd 	.word	0x08008efd
 8008ebc:	08008efd 	.word	0x08008efd
 8008ec0:	08008efd 	.word	0x08008efd
 8008ec4:	08008efd 	.word	0x08008efd
 8008ec8:	08008ef5 	.word	0x08008ef5
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e222      	b.n	800931a <UART_SetConfig+0x5a6>
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e21e      	b.n	800931a <UART_SetConfig+0x5a6>
 8008edc:	2308      	movs	r3, #8
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e21a      	b.n	800931a <UART_SetConfig+0x5a6>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e216      	b.n	800931a <UART_SetConfig+0x5a6>
 8008eec:	2320      	movs	r3, #32
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e212      	b.n	800931a <UART_SetConfig+0x5a6>
 8008ef4:	2340      	movs	r3, #64	@ 0x40
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e20e      	b.n	800931a <UART_SetConfig+0x5a6>
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e20a      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a69      	ldr	r2, [pc, #420]	@ (80090b0 <UART_SetConfig+0x33c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d130      	bne.n	8008f70 <UART_SetConfig+0x1fc>
 8008f0e:	4b67      	ldr	r3, [pc, #412]	@ (80090ac <UART_SetConfig+0x338>)
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d826      	bhi.n	8008f68 <UART_SetConfig+0x1f4>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x1ac>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f39 	.word	0x08008f39
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e1ec      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e1e8      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e1e4      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e1e0      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e1dc      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e1d8      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f68:	2380      	movs	r3, #128	@ 0x80
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e1d4      	b.n	800931a <UART_SetConfig+0x5a6>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a4f      	ldr	r2, [pc, #316]	@ (80090b4 <UART_SetConfig+0x340>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d130      	bne.n	8008fdc <UART_SetConfig+0x268>
 8008f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80090ac <UART_SetConfig+0x338>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d826      	bhi.n	8008fd4 <UART_SetConfig+0x260>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <UART_SetConfig+0x218>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fc5 	.word	0x08008fc5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e1b6      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e1b2      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e1ae      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e1aa      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e1a6      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fcc:	2340      	movs	r3, #64	@ 0x40
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e1a2      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e19e      	b.n	800931a <UART_SetConfig+0x5a6>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a35      	ldr	r2, [pc, #212]	@ (80090b8 <UART_SetConfig+0x344>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d130      	bne.n	8009048 <UART_SetConfig+0x2d4>
 8008fe6:	4b31      	ldr	r3, [pc, #196]	@ (80090ac <UART_SetConfig+0x338>)
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	d826      	bhi.n	8009040 <UART_SetConfig+0x2cc>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <UART_SetConfig+0x284>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009021 	.word	0x08009021
 8009004:	08009029 	.word	0x08009029
 8009008:	08009031 	.word	0x08009031
 800900c:	08009039 	.word	0x08009039
 8009010:	2300      	movs	r3, #0
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e180      	b.n	800931a <UART_SetConfig+0x5a6>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e17c      	b.n	800931a <UART_SetConfig+0x5a6>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e178      	b.n	800931a <UART_SetConfig+0x5a6>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e174      	b.n	800931a <UART_SetConfig+0x5a6>
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e170      	b.n	800931a <UART_SetConfig+0x5a6>
 8009038:	2340      	movs	r3, #64	@ 0x40
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e16c      	b.n	800931a <UART_SetConfig+0x5a6>
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e168      	b.n	800931a <UART_SetConfig+0x5a6>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1b      	ldr	r2, [pc, #108]	@ (80090bc <UART_SetConfig+0x348>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d142      	bne.n	80090d8 <UART_SetConfig+0x364>
 8009052:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <UART_SetConfig+0x338>)
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b05      	cmp	r3, #5
 800905c:	d838      	bhi.n	80090d0 <UART_SetConfig+0x35c>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <UART_SetConfig+0x2f0>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	0800907d 	.word	0x0800907d
 8009068:	08009085 	.word	0x08009085
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009095 	.word	0x08009095
 8009074:	080090c1 	.word	0x080090c1
 8009078:	080090c9 	.word	0x080090c9
 800907c:	2300      	movs	r3, #0
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e14a      	b.n	800931a <UART_SetConfig+0x5a6>
 8009084:	2304      	movs	r3, #4
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e146      	b.n	800931a <UART_SetConfig+0x5a6>
 800908c:	2308      	movs	r3, #8
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e142      	b.n	800931a <UART_SetConfig+0x5a6>
 8009094:	2310      	movs	r3, #16
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e13e      	b.n	800931a <UART_SetConfig+0x5a6>
 800909c:	cfff69f3 	.word	0xcfff69f3
 80090a0:	58000c00 	.word	0x58000c00
 80090a4:	11fff4ff 	.word	0x11fff4ff
 80090a8:	40011000 	.word	0x40011000
 80090ac:	58024400 	.word	0x58024400
 80090b0:	40004400 	.word	0x40004400
 80090b4:	40004800 	.word	0x40004800
 80090b8:	40004c00 	.word	0x40004c00
 80090bc:	40005000 	.word	0x40005000
 80090c0:	2320      	movs	r3, #32
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e128      	b.n	800931a <UART_SetConfig+0x5a6>
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e124      	b.n	800931a <UART_SetConfig+0x5a6>
 80090d0:	2380      	movs	r3, #128	@ 0x80
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e120      	b.n	800931a <UART_SetConfig+0x5a6>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4acb      	ldr	r2, [pc, #812]	@ (800940c <UART_SetConfig+0x698>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d176      	bne.n	80091d0 <UART_SetConfig+0x45c>
 80090e2:	4bcb      	ldr	r3, [pc, #812]	@ (8009410 <UART_SetConfig+0x69c>)
 80090e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090ea:	2b28      	cmp	r3, #40	@ 0x28
 80090ec:	d86c      	bhi.n	80091c8 <UART_SetConfig+0x454>
 80090ee:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <UART_SetConfig+0x380>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	08009199 	.word	0x08009199
 80090f8:	080091c9 	.word	0x080091c9
 80090fc:	080091c9 	.word	0x080091c9
 8009100:	080091c9 	.word	0x080091c9
 8009104:	080091c9 	.word	0x080091c9
 8009108:	080091c9 	.word	0x080091c9
 800910c:	080091c9 	.word	0x080091c9
 8009110:	080091c9 	.word	0x080091c9
 8009114:	080091a1 	.word	0x080091a1
 8009118:	080091c9 	.word	0x080091c9
 800911c:	080091c9 	.word	0x080091c9
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091c9 	.word	0x080091c9
 8009128:	080091c9 	.word	0x080091c9
 800912c:	080091c9 	.word	0x080091c9
 8009130:	080091c9 	.word	0x080091c9
 8009134:	080091a9 	.word	0x080091a9
 8009138:	080091c9 	.word	0x080091c9
 800913c:	080091c9 	.word	0x080091c9
 8009140:	080091c9 	.word	0x080091c9
 8009144:	080091c9 	.word	0x080091c9
 8009148:	080091c9 	.word	0x080091c9
 800914c:	080091c9 	.word	0x080091c9
 8009150:	080091c9 	.word	0x080091c9
 8009154:	080091b1 	.word	0x080091b1
 8009158:	080091c9 	.word	0x080091c9
 800915c:	080091c9 	.word	0x080091c9
 8009160:	080091c9 	.word	0x080091c9
 8009164:	080091c9 	.word	0x080091c9
 8009168:	080091c9 	.word	0x080091c9
 800916c:	080091c9 	.word	0x080091c9
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091b9 	.word	0x080091b9
 8009178:	080091c9 	.word	0x080091c9
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091c9 	.word	0x080091c9
 8009184:	080091c9 	.word	0x080091c9
 8009188:	080091c9 	.word	0x080091c9
 800918c:	080091c9 	.word	0x080091c9
 8009190:	080091c9 	.word	0x080091c9
 8009194:	080091c1 	.word	0x080091c1
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e0bc      	b.n	800931a <UART_SetConfig+0x5a6>
 80091a0:	2304      	movs	r3, #4
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e0b8      	b.n	800931a <UART_SetConfig+0x5a6>
 80091a8:	2308      	movs	r3, #8
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e0b4      	b.n	800931a <UART_SetConfig+0x5a6>
 80091b0:	2310      	movs	r3, #16
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e0b0      	b.n	800931a <UART_SetConfig+0x5a6>
 80091b8:	2320      	movs	r3, #32
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e0ac      	b.n	800931a <UART_SetConfig+0x5a6>
 80091c0:	2340      	movs	r3, #64	@ 0x40
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e0a8      	b.n	800931a <UART_SetConfig+0x5a6>
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e0a4      	b.n	800931a <UART_SetConfig+0x5a6>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a8f      	ldr	r2, [pc, #572]	@ (8009414 <UART_SetConfig+0x6a0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d130      	bne.n	800923c <UART_SetConfig+0x4c8>
 80091da:	4b8d      	ldr	r3, [pc, #564]	@ (8009410 <UART_SetConfig+0x69c>)
 80091dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d826      	bhi.n	8009234 <UART_SetConfig+0x4c0>
 80091e6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <UART_SetConfig+0x478>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009205 	.word	0x08009205
 80091f0:	0800920d 	.word	0x0800920d
 80091f4:	08009215 	.word	0x08009215
 80091f8:	0800921d 	.word	0x0800921d
 80091fc:	08009225 	.word	0x08009225
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2300      	movs	r3, #0
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e086      	b.n	800931a <UART_SetConfig+0x5a6>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e082      	b.n	800931a <UART_SetConfig+0x5a6>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e07e      	b.n	800931a <UART_SetConfig+0x5a6>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e07a      	b.n	800931a <UART_SetConfig+0x5a6>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e076      	b.n	800931a <UART_SetConfig+0x5a6>
 800922c:	2340      	movs	r3, #64	@ 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e072      	b.n	800931a <UART_SetConfig+0x5a6>
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e06e      	b.n	800931a <UART_SetConfig+0x5a6>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a75      	ldr	r2, [pc, #468]	@ (8009418 <UART_SetConfig+0x6a4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d130      	bne.n	80092a8 <UART_SetConfig+0x534>
 8009246:	4b72      	ldr	r3, [pc, #456]	@ (8009410 <UART_SetConfig+0x69c>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d826      	bhi.n	80092a0 <UART_SetConfig+0x52c>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0x4e4>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e050      	b.n	800931a <UART_SetConfig+0x5a6>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e04c      	b.n	800931a <UART_SetConfig+0x5a6>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e048      	b.n	800931a <UART_SetConfig+0x5a6>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e044      	b.n	800931a <UART_SetConfig+0x5a6>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e040      	b.n	800931a <UART_SetConfig+0x5a6>
 8009298:	2340      	movs	r3, #64	@ 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e03c      	b.n	800931a <UART_SetConfig+0x5a6>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e038      	b.n	800931a <UART_SetConfig+0x5a6>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a5b      	ldr	r2, [pc, #364]	@ (800941c <UART_SetConfig+0x6a8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x5a0>
 80092b2:	4b57      	ldr	r3, [pc, #348]	@ (8009410 <UART_SetConfig+0x69c>)
 80092b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x598>
 80092be:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <UART_SetConfig+0x550>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2302      	movs	r3, #2
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e01a      	b.n	800931a <UART_SetConfig+0x5a6>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e016      	b.n	800931a <UART_SetConfig+0x5a6>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e012      	b.n	800931a <UART_SetConfig+0x5a6>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e00e      	b.n	800931a <UART_SetConfig+0x5a6>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e00a      	b.n	800931a <UART_SetConfig+0x5a6>
 8009304:	2340      	movs	r3, #64	@ 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e006      	b.n	800931a <UART_SetConfig+0x5a6>
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e002      	b.n	800931a <UART_SetConfig+0x5a6>
 8009314:	2380      	movs	r3, #128	@ 0x80
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a3f      	ldr	r2, [pc, #252]	@ (800941c <UART_SetConfig+0x6a8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	f040 80f8 	bne.w	8009516 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800932a:	2b20      	cmp	r3, #32
 800932c:	dc46      	bgt.n	80093bc <UART_SetConfig+0x648>
 800932e:	2b02      	cmp	r3, #2
 8009330:	f2c0 8082 	blt.w	8009438 <UART_SetConfig+0x6c4>
 8009334:	3b02      	subs	r3, #2
 8009336:	2b1e      	cmp	r3, #30
 8009338:	d87e      	bhi.n	8009438 <UART_SetConfig+0x6c4>
 800933a:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <UART_SetConfig+0x5cc>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	080093c3 	.word	0x080093c3
 8009344:	08009439 	.word	0x08009439
 8009348:	080093cb 	.word	0x080093cb
 800934c:	08009439 	.word	0x08009439
 8009350:	08009439 	.word	0x08009439
 8009354:	08009439 	.word	0x08009439
 8009358:	080093db 	.word	0x080093db
 800935c:	08009439 	.word	0x08009439
 8009360:	08009439 	.word	0x08009439
 8009364:	08009439 	.word	0x08009439
 8009368:	08009439 	.word	0x08009439
 800936c:	08009439 	.word	0x08009439
 8009370:	08009439 	.word	0x08009439
 8009374:	08009439 	.word	0x08009439
 8009378:	080093eb 	.word	0x080093eb
 800937c:	08009439 	.word	0x08009439
 8009380:	08009439 	.word	0x08009439
 8009384:	08009439 	.word	0x08009439
 8009388:	08009439 	.word	0x08009439
 800938c:	08009439 	.word	0x08009439
 8009390:	08009439 	.word	0x08009439
 8009394:	08009439 	.word	0x08009439
 8009398:	08009439 	.word	0x08009439
 800939c:	08009439 	.word	0x08009439
 80093a0:	08009439 	.word	0x08009439
 80093a4:	08009439 	.word	0x08009439
 80093a8:	08009439 	.word	0x08009439
 80093ac:	08009439 	.word	0x08009439
 80093b0:	08009439 	.word	0x08009439
 80093b4:	08009439 	.word	0x08009439
 80093b8:	0800942b 	.word	0x0800942b
 80093bc:	2b40      	cmp	r3, #64	@ 0x40
 80093be:	d037      	beq.n	8009430 <UART_SetConfig+0x6bc>
 80093c0:	e03a      	b.n	8009438 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093c2:	f7fd fc5f 	bl	8006c84 <HAL_RCCEx_GetD3PCLK1Freq>
 80093c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093c8:	e03c      	b.n	8009444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fc6e 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d8:	e034      	b.n	8009444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093da:	f107 0318 	add.w	r3, r7, #24
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd fdba 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e8:	e02c      	b.n	8009444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ea:	4b09      	ldr	r3, [pc, #36]	@ (8009410 <UART_SetConfig+0x69c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d016      	beq.n	8009424 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093f6:	4b06      	ldr	r3, [pc, #24]	@ (8009410 <UART_SetConfig+0x69c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	4a07      	ldr	r2, [pc, #28]	@ (8009420 <UART_SetConfig+0x6ac>)
 8009402:	fa22 f303 	lsr.w	r3, r2, r3
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009408:	e01c      	b.n	8009444 <UART_SetConfig+0x6d0>
 800940a:	bf00      	nop
 800940c:	40011400 	.word	0x40011400
 8009410:	58024400 	.word	0x58024400
 8009414:	40007800 	.word	0x40007800
 8009418:	40007c00 	.word	0x40007c00
 800941c:	58000c00 	.word	0x58000c00
 8009420:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009424:	4b9d      	ldr	r3, [pc, #628]	@ (800969c <UART_SetConfig+0x928>)
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	e00c      	b.n	8009444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800942a:	4b9d      	ldr	r3, [pc, #628]	@ (80096a0 <UART_SetConfig+0x92c>)
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942e:	e009      	b.n	8009444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009436:	e005      	b.n	8009444 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 81de 	beq.w	8009808 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	4a94      	ldr	r2, [pc, #592]	@ (80096a4 <UART_SetConfig+0x930>)
 8009452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009456:	461a      	mov	r2, r3
 8009458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945a:	fbb3 f3f2 	udiv	r3, r3, r2
 800945e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	4413      	add	r3, r2
 800946a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946c:	429a      	cmp	r2, r3
 800946e:	d305      	bcc.n	800947c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009478:	429a      	cmp	r2, r3
 800947a:	d903      	bls.n	8009484 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009482:	e1c1      	b.n	8009808 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009486:	2200      	movs	r2, #0
 8009488:	60bb      	str	r3, [r7, #8]
 800948a:	60fa      	str	r2, [r7, #12]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009490:	4a84      	ldr	r2, [pc, #528]	@ (80096a4 <UART_SetConfig+0x930>)
 8009492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009496:	b29b      	uxth	r3, r3
 8009498:	2200      	movs	r2, #0
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	607a      	str	r2, [r7, #4]
 800949e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094a6:	f7f6 ff73 	bl	8000390 <__aeabi_uldivmod>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4610      	mov	r0, r2
 80094b0:	4619      	mov	r1, r3
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	020b      	lsls	r3, r1, #8
 80094bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094c0:	0202      	lsls	r2, r0, #8
 80094c2:	6979      	ldr	r1, [r7, #20]
 80094c4:	6849      	ldr	r1, [r1, #4]
 80094c6:	0849      	lsrs	r1, r1, #1
 80094c8:	2000      	movs	r0, #0
 80094ca:	460c      	mov	r4, r1
 80094cc:	4605      	mov	r5, r0
 80094ce:	eb12 0804 	adds.w	r8, r2, r4
 80094d2:	eb43 0905 	adc.w	r9, r3, r5
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	469a      	mov	sl, r3
 80094de:	4693      	mov	fp, r2
 80094e0:	4652      	mov	r2, sl
 80094e2:	465b      	mov	r3, fp
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	f7f6 ff52 	bl	8000390 <__aeabi_uldivmod>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4613      	mov	r3, r2
 80094f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094fa:	d308      	bcc.n	800950e <UART_SetConfig+0x79a>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009502:	d204      	bcs.n	800950e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800950a:	60da      	str	r2, [r3, #12]
 800950c:	e17c      	b.n	8009808 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009514:	e178      	b.n	8009808 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800951e:	f040 80c5 	bne.w	80096ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009526:	2b20      	cmp	r3, #32
 8009528:	dc48      	bgt.n	80095bc <UART_SetConfig+0x848>
 800952a:	2b00      	cmp	r3, #0
 800952c:	db7b      	blt.n	8009626 <UART_SetConfig+0x8b2>
 800952e:	2b20      	cmp	r3, #32
 8009530:	d879      	bhi.n	8009626 <UART_SetConfig+0x8b2>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <UART_SetConfig+0x7c4>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095c3 	.word	0x080095c3
 800953c:	080095cb 	.word	0x080095cb
 8009540:	08009627 	.word	0x08009627
 8009544:	08009627 	.word	0x08009627
 8009548:	080095d3 	.word	0x080095d3
 800954c:	08009627 	.word	0x08009627
 8009550:	08009627 	.word	0x08009627
 8009554:	08009627 	.word	0x08009627
 8009558:	080095e3 	.word	0x080095e3
 800955c:	08009627 	.word	0x08009627
 8009560:	08009627 	.word	0x08009627
 8009564:	08009627 	.word	0x08009627
 8009568:	08009627 	.word	0x08009627
 800956c:	08009627 	.word	0x08009627
 8009570:	08009627 	.word	0x08009627
 8009574:	08009627 	.word	0x08009627
 8009578:	080095f3 	.word	0x080095f3
 800957c:	08009627 	.word	0x08009627
 8009580:	08009627 	.word	0x08009627
 8009584:	08009627 	.word	0x08009627
 8009588:	08009627 	.word	0x08009627
 800958c:	08009627 	.word	0x08009627
 8009590:	08009627 	.word	0x08009627
 8009594:	08009627 	.word	0x08009627
 8009598:	08009627 	.word	0x08009627
 800959c:	08009627 	.word	0x08009627
 80095a0:	08009627 	.word	0x08009627
 80095a4:	08009627 	.word	0x08009627
 80095a8:	08009627 	.word	0x08009627
 80095ac:	08009627 	.word	0x08009627
 80095b0:	08009627 	.word	0x08009627
 80095b4:	08009627 	.word	0x08009627
 80095b8:	08009619 	.word	0x08009619
 80095bc:	2b40      	cmp	r3, #64	@ 0x40
 80095be:	d02e      	beq.n	800961e <UART_SetConfig+0x8aa>
 80095c0:	e031      	b.n	8009626 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c2:	f7fc f929 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c8:	e033      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095ca:	f7fc f93b 	bl	8005844 <HAL_RCC_GetPCLK2Freq>
 80095ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095d0:	e02f      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd fb6a 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e0:	e027      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e2:	f107 0318 	add.w	r3, r7, #24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd fcb6 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f0:	e01f      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f2:	4b2d      	ldr	r3, [pc, #180]	@ (80096a8 <UART_SetConfig+0x934>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095fe:	4b2a      	ldr	r3, [pc, #168]	@ (80096a8 <UART_SetConfig+0x934>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	4a24      	ldr	r2, [pc, #144]	@ (800969c <UART_SetConfig+0x928>)
 800960a:	fa22 f303 	lsr.w	r3, r2, r3
 800960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009610:	e00f      	b.n	8009632 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009612:	4b22      	ldr	r3, [pc, #136]	@ (800969c <UART_SetConfig+0x928>)
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009616:	e00c      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009618:	4b21      	ldr	r3, [pc, #132]	@ (80096a0 <UART_SetConfig+0x92c>)
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e009      	b.n	8009632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800961e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009624:	e005      	b.n	8009632 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80e7 	beq.w	8009808 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963e:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <UART_SetConfig+0x930>)
 8009640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009644:	461a      	mov	r2, r3
 8009646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009648:	fbb3 f3f2 	udiv	r3, r3, r2
 800964c:	005a      	lsls	r2, r3, #1
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	441a      	add	r2, r3
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	fbb2 f3f3 	udiv	r3, r2, r3
 800965e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	2b0f      	cmp	r3, #15
 8009664:	d916      	bls.n	8009694 <UART_SetConfig+0x920>
 8009666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800966c:	d212      	bcs.n	8009694 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	b29b      	uxth	r3, r3
 8009672:	f023 030f 	bic.w	r3, r3, #15
 8009676:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	085b      	lsrs	r3, r3, #1
 800967c:	b29b      	uxth	r3, r3
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	b29a      	uxth	r2, r3
 8009684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009686:	4313      	orrs	r3, r2
 8009688:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009690:	60da      	str	r2, [r3, #12]
 8009692:	e0b9      	b.n	8009808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800969a:	e0b5      	b.n	8009808 <UART_SetConfig+0xa94>
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	003d0900 	.word	0x003d0900
 80096a4:	0800b664 	.word	0x0800b664
 80096a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	dc49      	bgt.n	8009748 <UART_SetConfig+0x9d4>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	db7c      	blt.n	80097b2 <UART_SetConfig+0xa3e>
 80096b8:	2b20      	cmp	r3, #32
 80096ba:	d87a      	bhi.n	80097b2 <UART_SetConfig+0xa3e>
 80096bc:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <UART_SetConfig+0x950>)
 80096be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c2:	bf00      	nop
 80096c4:	0800974f 	.word	0x0800974f
 80096c8:	08009757 	.word	0x08009757
 80096cc:	080097b3 	.word	0x080097b3
 80096d0:	080097b3 	.word	0x080097b3
 80096d4:	0800975f 	.word	0x0800975f
 80096d8:	080097b3 	.word	0x080097b3
 80096dc:	080097b3 	.word	0x080097b3
 80096e0:	080097b3 	.word	0x080097b3
 80096e4:	0800976f 	.word	0x0800976f
 80096e8:	080097b3 	.word	0x080097b3
 80096ec:	080097b3 	.word	0x080097b3
 80096f0:	080097b3 	.word	0x080097b3
 80096f4:	080097b3 	.word	0x080097b3
 80096f8:	080097b3 	.word	0x080097b3
 80096fc:	080097b3 	.word	0x080097b3
 8009700:	080097b3 	.word	0x080097b3
 8009704:	0800977f 	.word	0x0800977f
 8009708:	080097b3 	.word	0x080097b3
 800970c:	080097b3 	.word	0x080097b3
 8009710:	080097b3 	.word	0x080097b3
 8009714:	080097b3 	.word	0x080097b3
 8009718:	080097b3 	.word	0x080097b3
 800971c:	080097b3 	.word	0x080097b3
 8009720:	080097b3 	.word	0x080097b3
 8009724:	080097b3 	.word	0x080097b3
 8009728:	080097b3 	.word	0x080097b3
 800972c:	080097b3 	.word	0x080097b3
 8009730:	080097b3 	.word	0x080097b3
 8009734:	080097b3 	.word	0x080097b3
 8009738:	080097b3 	.word	0x080097b3
 800973c:	080097b3 	.word	0x080097b3
 8009740:	080097b3 	.word	0x080097b3
 8009744:	080097a5 	.word	0x080097a5
 8009748:	2b40      	cmp	r3, #64	@ 0x40
 800974a:	d02e      	beq.n	80097aa <UART_SetConfig+0xa36>
 800974c:	e031      	b.n	80097b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800974e:	f7fc f863 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 8009752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009754:	e033      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009756:	f7fc f875 	bl	8005844 <HAL_RCC_GetPCLK2Freq>
 800975a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800975c:	e02f      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800975e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009762:	4618      	mov	r0, r3
 8009764:	f7fd faa4 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976c:	e027      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800976e:	f107 0318 	add.w	r3, r7, #24
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd fbf0 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977c:	e01f      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800977e:	4b2d      	ldr	r3, [pc, #180]	@ (8009834 <UART_SetConfig+0xac0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0320 	and.w	r3, r3, #32
 8009786:	2b00      	cmp	r3, #0
 8009788:	d009      	beq.n	800979e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800978a:	4b2a      	ldr	r3, [pc, #168]	@ (8009834 <UART_SetConfig+0xac0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	08db      	lsrs	r3, r3, #3
 8009790:	f003 0303 	and.w	r3, r3, #3
 8009794:	4a28      	ldr	r2, [pc, #160]	@ (8009838 <UART_SetConfig+0xac4>)
 8009796:	fa22 f303 	lsr.w	r3, r2, r3
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800979c:	e00f      	b.n	80097be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800979e:	4b26      	ldr	r3, [pc, #152]	@ (8009838 <UART_SetConfig+0xac4>)
 80097a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a2:	e00c      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097a4:	4b25      	ldr	r3, [pc, #148]	@ (800983c <UART_SetConfig+0xac8>)
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a8:	e009      	b.n	80097be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b0:	e005      	b.n	80097be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097bc:	bf00      	nop
    }

    if (pclk != 0U)
 80097be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d021      	beq.n	8009808 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009840 <UART_SetConfig+0xacc>)
 80097ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ce:	461a      	mov	r2, r3
 80097d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	441a      	add	r2, r3
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	2b0f      	cmp	r3, #15
 80097ec:	d909      	bls.n	8009802 <UART_SetConfig+0xa8e>
 80097ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f4:	d205      	bcs.n	8009802 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60da      	str	r2, [r3, #12]
 8009800:	e002      	b.n	8009808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2201      	movs	r2, #1
 8009814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	2200      	movs	r2, #0
 800981c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2200      	movs	r2, #0
 8009822:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009824:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009828:	4618      	mov	r0, r3
 800982a:	3748      	adds	r7, #72	@ 0x48
 800982c:	46bd      	mov	sp, r7
 800982e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	003d0900 	.word	0x003d0900
 8009840:	0800b664 	.word	0x0800b664

08009844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	f003 0308 	and.w	r3, r3, #8
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d8:	f003 0310 	and.w	r3, r3, #16
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01a      	beq.n	800995a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800993e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009942:	d10a      	bne.n	800995a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]
  }
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b098      	sub	sp, #96	@ 0x60
 800998c:	af02      	add	r7, sp, #8
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009998:	f7f8 fdfc 	bl	8002594 <HAL_GetTick>
 800999c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d12f      	bne.n	8009a0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099b4:	2200      	movs	r2, #0
 80099b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f88e 	bl	8009adc <UART_WaitOnFlagUntilTimeout>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d022      	beq.n	8009a0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099da:	653b      	str	r3, [r7, #80]	@ 0x50
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e6      	bne.n	80099c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e063      	b.n	8009ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d149      	bne.n	8009aae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a22:	2200      	movs	r2, #0
 8009a24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f857 	bl	8009adc <UART_WaitOnFlagUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d03c      	beq.n	8009aae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	623b      	str	r3, [r7, #32]
   return(result);
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e6      	bne.n	8009a34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a86:	61fa      	str	r2, [r7, #28]
 8009a88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	69b9      	ldr	r1, [r7, #24]
 8009a8c:	69fa      	ldr	r2, [r7, #28]
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	617b      	str	r3, [r7, #20]
   return(result);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e012      	b.n	8009ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3758      	adds	r7, #88	@ 0x58
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aec:	e04f      	b.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af4:	d04b      	beq.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af6:	f7f8 fd4d 	bl	8002594 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d302      	bcc.n	8009b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e04e      	b.n	8009bae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d037      	beq.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b80      	cmp	r3, #128	@ 0x80
 8009b22:	d034      	beq.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b40      	cmp	r3, #64	@ 0x40
 8009b28:	d031      	beq.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d110      	bne.n	8009b5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f95b 	bl	8009dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e029      	b.n	8009bae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b68:	d111      	bne.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f941 	bl	8009dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e00f      	b.n	8009bae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4013      	ands	r3, r2
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	2300      	movne	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d0a0      	beq.n	8009aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b0a3      	sub	sp, #140	@ 0x8c
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	88fa      	ldrh	r2, [r7, #6]
 8009bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	88fa      	ldrh	r2, [r7, #6]
 8009bd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bea:	d10e      	bne.n	8009c0a <UART_Start_Receive_IT+0x52>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d105      	bne.n	8009c00 <UART_Start_Receive_IT+0x48>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009bfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bfe:	e02d      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	22ff      	movs	r2, #255	@ 0xff
 8009c04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c08:	e028      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10d      	bne.n	8009c2e <UART_Start_Receive_IT+0x76>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <UART_Start_Receive_IT+0x6c>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	22ff      	movs	r2, #255	@ 0xff
 8009c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c22:	e01b      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	227f      	movs	r2, #127	@ 0x7f
 8009c28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c2c:	e016      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c36:	d10d      	bne.n	8009c54 <UART_Start_Receive_IT+0x9c>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <UART_Start_Receive_IT+0x92>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	227f      	movs	r2, #127	@ 0x7f
 8009c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c48:	e008      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	223f      	movs	r2, #63	@ 0x3f
 8009c4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c52:	e003      	b.n	8009c5c <UART_Start_Receive_IT+0xa4>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2222      	movs	r2, #34	@ 0x22
 8009c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c7e:	f043 0301 	orr.w	r3, r3, #1
 8009c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c90:	673a      	str	r2, [r7, #112]	@ 0x70
 8009c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009c96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e3      	bne.n	8009c6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cac:	d14f      	bne.n	8009d4e <UART_Start_Receive_IT+0x196>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cb4:	88fa      	ldrh	r2, [r7, #6]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d349      	bcc.n	8009d4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cc2:	d107      	bne.n	8009cd4 <UART_Start_Receive_IT+0x11c>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4a47      	ldr	r2, [pc, #284]	@ (8009dec <UART_Start_Receive_IT+0x234>)
 8009cd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8009cd2:	e002      	b.n	8009cda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4a46      	ldr	r2, [pc, #280]	@ (8009df0 <UART_Start_Receive_IT+0x238>)
 8009cd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01a      	beq.n	8009d18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009d0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e4      	bne.n	8009ce2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3308      	adds	r3, #8
 8009d36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009d3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e5      	bne.n	8009d18 <UART_Start_Receive_IT+0x160>
 8009d4c:	e046      	b.n	8009ddc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d56:	d107      	bne.n	8009d68 <UART_Start_Receive_IT+0x1b0>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d103      	bne.n	8009d68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a24      	ldr	r2, [pc, #144]	@ (8009df4 <UART_Start_Receive_IT+0x23c>)
 8009d64:	675a      	str	r2, [r3, #116]	@ 0x74
 8009d66:	e002      	b.n	8009d6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a23      	ldr	r2, [pc, #140]	@ (8009df8 <UART_Start_Receive_IT+0x240>)
 8009d6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d019      	beq.n	8009daa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009d8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <UART_Start_Receive_IT+0x1be>
 8009da8:	e018      	b.n	8009ddc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	613b      	str	r3, [r7, #16]
   return(result);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f043 0320 	orr.w	r3, r3, #32
 8009dbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	69f9      	ldr	r1, [r7, #28]
 8009dce:	6a3a      	ldr	r2, [r7, #32]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e6      	bne.n	8009daa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	378c      	adds	r7, #140	@ 0x8c
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	0800a619 	.word	0x0800a619
 8009df0:	0800a2b5 	.word	0x0800a2b5
 8009df4:	0800a0fd 	.word	0x0800a0fd
 8009df8:	08009f45 	.word	0x08009f45

08009dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b095      	sub	sp, #84	@ 0x54
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e6      	bne.n	8009e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	4b1e      	ldr	r3, [pc, #120]	@ (8009ec4 <UART_EndRxTransfer+0xc8>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3308      	adds	r3, #8
 8009e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e5      	bne.n	8009e36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d118      	bne.n	8009ea4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6979      	ldr	r1, [r7, #20]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e6      	bne.n	8009e72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009eb8:	bf00      	nop
 8009eba:	3754      	adds	r7, #84	@ 0x54
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	effffffe 	.word	0xeffffffe

08009ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7fe ff32 	bl	8008d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f08:	61fb      	str	r3, [r7, #28]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	61bb      	str	r3, [r7, #24]
 8009f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6979      	ldr	r1, [r7, #20]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e6      	bne.n	8009ef4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7fe fefd 	bl	8008d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f3a:	bf00      	nop
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b09c      	sub	sp, #112	@ 0x70
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f5c:	2b22      	cmp	r3, #34	@ 0x22
 8009f5e:	f040 80be 	bne.w	800a0de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009f70:	b2d9      	uxtb	r1, r3
 8009f72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7c:	400a      	ands	r2, r1
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f86:	1c5a      	adds	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f040 80a1 	bne.w	800a0ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fd2:	e841 2300 	strex	r3, r2, [r1]
 8009fd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e6      	bne.n	8009fac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff0:	f023 0301 	bic.w	r3, r3, #1
 8009ff4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 800a000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e5      	bne.n	8009fde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a33      	ldr	r2, [pc, #204]	@ (800a0f8 <UART_RxISR_8BIT+0x1b4>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d01f      	beq.n	800a070 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d018      	beq.n	800a070 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	623b      	str	r3, [r7, #32]
   return(result);
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a052:	663b      	str	r3, [r7, #96]	@ 0x60
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a05c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a05e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a074:	2b01      	cmp	r3, #1
 800a076:	d12e      	bne.n	800a0d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0310 	bic.w	r3, r3, #16
 800a092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e6      	bne.n	800a07e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	f003 0310 	and.w	r3, r3, #16
 800a0ba:	2b10      	cmp	r3, #16
 800a0bc:	d103      	bne.n	800a0c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2210      	movs	r2, #16
 800a0c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7fe fe44 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0d4:	e00b      	b.n	800a0ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7f8 f884 	bl	80021e4 <HAL_UART_RxCpltCallback>
}
 800a0dc:	e007      	b.n	800a0ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0208 	orr.w	r2, r2, #8
 800a0ec:	619a      	str	r2, [r3, #24]
}
 800a0ee:	bf00      	nop
 800a0f0:	3770      	adds	r7, #112	@ 0x70
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	58000c00 	.word	0x58000c00

0800a0fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b09c      	sub	sp, #112	@ 0x70
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a10a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a114:	2b22      	cmp	r3, #34	@ 0x22
 800a116:	f040 80be 	bne.w	800a296 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a128:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a12a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a12e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a132:	4013      	ands	r3, r2
 800a134:	b29a      	uxth	r2, r3
 800a136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a138:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13e:	1c9a      	adds	r2, r3, #2
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	3b01      	subs	r3, #1
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f040 80a1 	bne.w	800a2a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a178:	667b      	str	r3, [r7, #100]	@ 0x64
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a182:	657b      	str	r3, [r7, #84]	@ 0x54
 800a184:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a188:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e6      	bne.n	800a164 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a0:	e853 3f00 	ldrex	r3, [r3]
 800a1a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1b6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1be:	e841 2300 	strex	r3, r2, [r1]
 800a1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e5      	bne.n	800a196 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a33      	ldr	r2, [pc, #204]	@ (800a2b0 <UART_RxISR_16BIT+0x1b4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d01f      	beq.n	800a228 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d018      	beq.n	800a228 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	61fb      	str	r3, [r7, #28]
   return(result);
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a20a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a216:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e6      	bne.n	800a1f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d12e      	bne.n	800a28e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60bb      	str	r3, [r7, #8]
   return(result);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f023 0310 	bic.w	r3, r3, #16
 800a24a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6979      	ldr	r1, [r7, #20]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	613b      	str	r3, [r7, #16]
   return(result);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e6      	bne.n	800a236 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f003 0310 	and.w	r3, r3, #16
 800a272:	2b10      	cmp	r3, #16
 800a274:	d103      	bne.n	800a27e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2210      	movs	r2, #16
 800a27c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fe fd68 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a28c:	e00b      	b.n	800a2a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7f7 ffa8 	bl	80021e4 <HAL_UART_RxCpltCallback>
}
 800a294:	e007      	b.n	800a2a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699a      	ldr	r2, [r3, #24]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f042 0208 	orr.w	r2, r2, #8
 800a2a4:	619a      	str	r2, [r3, #24]
}
 800a2a6:	bf00      	nop
 800a2a8:	3770      	adds	r7, #112	@ 0x70
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	58000c00 	.word	0x58000c00

0800a2b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b0ac      	sub	sp, #176	@ 0xb0
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a2c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ea:	2b22      	cmp	r3, #34	@ 0x22
 800a2ec:	f040 8181 	bne.w	800a5f2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2fa:	e124      	b.n	800a546 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a306:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a30a:	b2d9      	uxtb	r1, r3
 800a30c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a316:	400a      	ands	r2, r1
 800a318:	b2d2      	uxtb	r2, r2
 800a31a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d053      	beq.n	800a3f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a34e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d011      	beq.n	800a37e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a35a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2201      	movs	r2, #1
 800a36c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a374:	f043 0201 	orr.w	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d011      	beq.n	800a3ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a38a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00b      	beq.n	800a3ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2202      	movs	r2, #2
 800a39c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a4:	f043 0204 	orr.w	r2, r3, #4
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d011      	beq.n	800a3de <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a3ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d4:	f043 0202 	orr.w	r2, r3, #2
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fe fcad 	bl	8008d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 80a1 	bne.w	800a546 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a40c:	e853 3f00 	ldrex	r3, [r3]
 800a410:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a428:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a42c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e4      	bne.n	800a404 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a44a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a44c:	4b6f      	ldr	r3, [pc, #444]	@ (800a60c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a44e:	4013      	ands	r3, r2
 800a450:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3308      	adds	r3, #8
 800a45a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a45e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a460:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a464:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a46c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e3      	bne.n	800a43a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2220      	movs	r2, #32
 800a476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a61      	ldr	r2, [pc, #388]	@ (800a610 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d021      	beq.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01a      	beq.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4c2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d130      	bne.n	800a53e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	f023 0310 	bic.w	r3, r3, #16
 800a4f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a504:	643b      	str	r3, [r7, #64]	@ 0x40
 800a506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a50a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a50c:	e841 2300 	strex	r3, r2, [r1]
 800a510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e4      	bne.n	800a4e2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f003 0310 	and.w	r3, r3, #16
 800a522:	2b10      	cmp	r3, #16
 800a524:	d103      	bne.n	800a52e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2210      	movs	r2, #16
 800a52c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fe fc10 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a53c:	e00e      	b.n	800a55c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7f7 fe50 	bl	80021e4 <HAL_UART_RxCpltCallback>
        break;
 800a544:	e00a      	b.n	800a55c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a546:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	f47f aed0 	bne.w	800a2fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a562:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a566:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d049      	beq.n	800a602 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a574:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a578:	429a      	cmp	r2, r3
 800a57a:	d242      	bcs.n	800a602 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3308      	adds	r3, #8
 800a582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a5a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e3      	bne.n	800a57c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a17      	ldr	r2, [pc, #92]	@ (800a614 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a5b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f043 0320 	orr.w	r3, r3, #32
 800a5ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6979      	ldr	r1, [r7, #20]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e4      	bne.n	800a5ba <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5f0:	e007      	b.n	800a602 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	699a      	ldr	r2, [r3, #24]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 0208 	orr.w	r2, r2, #8
 800a600:	619a      	str	r2, [r3, #24]
}
 800a602:	bf00      	nop
 800a604:	37b0      	adds	r7, #176	@ 0xb0
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	effffffe 	.word	0xeffffffe
 800a610:	58000c00 	.word	0x58000c00
 800a614:	08009f45 	.word	0x08009f45

0800a618 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b0ae      	sub	sp, #184	@ 0xb8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a626:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a64e:	2b22      	cmp	r3, #34	@ 0x22
 800a650:	f040 8185 	bne.w	800a95e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a65a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a65e:	e128      	b.n	800a8b2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a666:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a66e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a672:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a676:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a67a:	4013      	ands	r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a682:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a688:	1c9a      	adds	r2, r3, #2
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a694:	b29b      	uxth	r3, r3
 800a696:	3b01      	subs	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a6aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d053      	beq.n	800a75e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d011      	beq.n	800a6e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6dc:	f043 0201 	orr.w	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d011      	beq.n	800a716 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a6f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00b      	beq.n	800a716 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2202      	movs	r2, #2
 800a704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a70c:	f043 0204 	orr.w	r2, r3, #4
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d011      	beq.n	800a746 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2204      	movs	r2, #4
 800a734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a73c:	f043 0202 	orr.w	r2, r3, #2
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d006      	beq.n	800a75e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7fe faf9 	bl	8008d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a764:	b29b      	uxth	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 80a3 	bne.w	800a8b2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a77a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a77c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a78e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a792:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a796:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e2      	bne.n	800a76c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a7b8:	4b6f      	ldr	r3, [pc, #444]	@ (800a978 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a7ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e3      	bne.n	800a7a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a61      	ldr	r2, [pc, #388]	@ (800a97c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d021      	beq.n	800a840 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d01a      	beq.n	800a840 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a812:	e853 3f00 	ldrex	r3, [r3]
 800a816:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a81a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a81e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a82c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a82e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a830:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a832:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a834:	e841 2300 	strex	r3, r2, [r1]
 800a838:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a83a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e4      	bne.n	800a80a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a844:	2b01      	cmp	r3, #1
 800a846:	d130      	bne.n	800a8aa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85e:	f023 0310 	bic.w	r3, r3, #16
 800a862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a870:	647b      	str	r3, [r7, #68]	@ 0x44
 800a872:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e4      	bne.n	800a84e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	f003 0310 	and.w	r3, r3, #16
 800a88e:	2b10      	cmp	r3, #16
 800a890:	d103      	bne.n	800a89a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2210      	movs	r2, #16
 800a898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fe fa5a 	bl	8008d5c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a8a8:	e00e      	b.n	800a8c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7f7 fc9a 	bl	80021e4 <HAL_UART_RxCpltCallback>
        break;
 800a8b0:	e00a      	b.n	800a8c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8b2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d006      	beq.n	800a8c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a8ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f47f aecc 	bne.w	800a660 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a8d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d049      	beq.n	800a96e <UART_RxISR_16BIT_FIFOEN+0x356>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a8e0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d242      	bcs.n	800a96e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3308      	adds	r3, #8
 800a908:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a90c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e3      	bne.n	800a8e8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a924:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	60fb      	str	r3, [r7, #12]
   return(result);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f043 0320 	orr.w	r3, r3, #32
 800a93a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a948:	61fb      	str	r3, [r7, #28]
 800a94a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	69b9      	ldr	r1, [r7, #24]
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	617b      	str	r3, [r7, #20]
   return(result);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e4      	bne.n	800a926 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a95c:	e007      	b.n	800a96e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699a      	ldr	r2, [r3, #24]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0208 	orr.w	r2, r2, #8
 800a96c:	619a      	str	r2, [r3, #24]
}
 800a96e:	bf00      	nop
 800a970:	37b8      	adds	r7, #184	@ 0xb8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	effffffe 	.word	0xeffffffe
 800a97c:	58000c00 	.word	0x58000c00
 800a980:	0800a0fd 	.word	0x0800a0fd

0800a984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e027      	b.n	800aa26 <HAL_UARTEx_DisableFifoMode+0x66>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	@ 0x24
 800a9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e02d      	b.n	800aaa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	@ 0x24
 800aa56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0201 	bic.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f850 	bl	800ab2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e02d      	b.n	800ab22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2224      	movs	r2, #36	@ 0x24
 800aad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 0201 	bic.w	r2, r2, #1
 800aaec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f812 	bl	800ab2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d108      	bne.n	800ab4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab4c:	e031      	b.n	800abb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab4e:	2310      	movs	r3, #16
 800ab50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab52:	2310      	movs	r3, #16
 800ab54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	0e5b      	lsrs	r3, r3, #25
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	0f5b      	lsrs	r3, r3, #29
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0307 	and.w	r3, r3, #7
 800ab74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	7b3a      	ldrb	r2, [r7, #12]
 800ab7a:	4911      	ldr	r1, [pc, #68]	@ (800abc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab7c:	5c8a      	ldrb	r2, [r1, r2]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab82:	7b3a      	ldrb	r2, [r7, #12]
 800ab84:	490f      	ldr	r1, [pc, #60]	@ (800abc4 <UARTEx_SetNbDataToProcess+0x98>)
 800ab86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	7b7a      	ldrb	r2, [r7, #13]
 800ab98:	4909      	ldr	r1, [pc, #36]	@ (800abc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab9a:	5c8a      	ldrb	r2, [r1, r2]
 800ab9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aba0:	7b7a      	ldrb	r2, [r7, #13]
 800aba2:	4908      	ldr	r1, [pc, #32]	@ (800abc4 <UARTEx_SetNbDataToProcess+0x98>)
 800aba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aba6:	fb93 f3f2 	sdiv	r3, r3, r2
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	0800b67c 	.word	0x0800b67c
 800abc4:	0800b684 	.word	0x0800b684

0800abc8 <_vsniprintf_r>:
 800abc8:	b530      	push	{r4, r5, lr}
 800abca:	4614      	mov	r4, r2
 800abcc:	2c00      	cmp	r4, #0
 800abce:	b09b      	sub	sp, #108	@ 0x6c
 800abd0:	4605      	mov	r5, r0
 800abd2:	461a      	mov	r2, r3
 800abd4:	da05      	bge.n	800abe2 <_vsniprintf_r+0x1a>
 800abd6:	238b      	movs	r3, #139	@ 0x8b
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	b01b      	add	sp, #108	@ 0x6c
 800abe0:	bd30      	pop	{r4, r5, pc}
 800abe2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800abe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	9319      	str	r3, [sp, #100]	@ 0x64
 800abf0:	bf14      	ite	ne
 800abf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800abf6:	4623      	moveq	r3, r4
 800abf8:	9302      	str	r3, [sp, #8]
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac00:	9100      	str	r1, [sp, #0]
 800ac02:	9104      	str	r1, [sp, #16]
 800ac04:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac08:	4669      	mov	r1, sp
 800ac0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ac0c:	f000 f9ae 	bl	800af6c <_svfiprintf_r>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	bfbc      	itt	lt
 800ac14:	238b      	movlt	r3, #139	@ 0x8b
 800ac16:	602b      	strlt	r3, [r5, #0]
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d0e0      	beq.n	800abde <_vsniprintf_r+0x16>
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
 800ac22:	e7dc      	b.n	800abde <_vsniprintf_r+0x16>

0800ac24 <vsniprintf>:
 800ac24:	b507      	push	{r0, r1, r2, lr}
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	460a      	mov	r2, r1
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4803      	ldr	r0, [pc, #12]	@ (800ac3c <vsniprintf+0x18>)
 800ac30:	6800      	ldr	r0, [r0, #0]
 800ac32:	f7ff ffc9 	bl	800abc8 <_vsniprintf_r>
 800ac36:	b003      	add	sp, #12
 800ac38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac3c:	24000010 	.word	0x24000010

0800ac40 <memset>:
 800ac40:	4402      	add	r2, r0
 800ac42:	4603      	mov	r3, r0
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d100      	bne.n	800ac4a <memset+0xa>
 800ac48:	4770      	bx	lr
 800ac4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4e:	e7f9      	b.n	800ac44 <memset+0x4>

0800ac50 <__errno>:
 800ac50:	4b01      	ldr	r3, [pc, #4]	@ (800ac58 <__errno+0x8>)
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	24000010 	.word	0x24000010

0800ac5c <__libc_init_array>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ac94 <__libc_init_array+0x38>)
 800ac60:	4c0d      	ldr	r4, [pc, #52]	@ (800ac98 <__libc_init_array+0x3c>)
 800ac62:	1b64      	subs	r4, r4, r5
 800ac64:	10a4      	asrs	r4, r4, #2
 800ac66:	2600      	movs	r6, #0
 800ac68:	42a6      	cmp	r6, r4
 800ac6a:	d109      	bne.n	800ac80 <__libc_init_array+0x24>
 800ac6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ac9c <__libc_init_array+0x40>)
 800ac6e:	4c0c      	ldr	r4, [pc, #48]	@ (800aca0 <__libc_init_array+0x44>)
 800ac70:	f000 fc64 	bl	800b53c <_init>
 800ac74:	1b64      	subs	r4, r4, r5
 800ac76:	10a4      	asrs	r4, r4, #2
 800ac78:	2600      	movs	r6, #0
 800ac7a:	42a6      	cmp	r6, r4
 800ac7c:	d105      	bne.n	800ac8a <__libc_init_array+0x2e>
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac84:	4798      	blx	r3
 800ac86:	3601      	adds	r6, #1
 800ac88:	e7ee      	b.n	800ac68 <__libc_init_array+0xc>
 800ac8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac8e:	4798      	blx	r3
 800ac90:	3601      	adds	r6, #1
 800ac92:	e7f2      	b.n	800ac7a <__libc_init_array+0x1e>
 800ac94:	0800b6c8 	.word	0x0800b6c8
 800ac98:	0800b6c8 	.word	0x0800b6c8
 800ac9c:	0800b6c8 	.word	0x0800b6c8
 800aca0:	0800b6cc 	.word	0x0800b6cc

0800aca4 <__retarget_lock_acquire_recursive>:
 800aca4:	4770      	bx	lr

0800aca6 <__retarget_lock_release_recursive>:
 800aca6:	4770      	bx	lr

0800aca8 <memcpy>:
 800aca8:	440a      	add	r2, r1
 800acaa:	4291      	cmp	r1, r2
 800acac:	f100 33ff 	add.w	r3, r0, #4294967295
 800acb0:	d100      	bne.n	800acb4 <memcpy+0xc>
 800acb2:	4770      	bx	lr
 800acb4:	b510      	push	{r4, lr}
 800acb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acbe:	4291      	cmp	r1, r2
 800acc0:	d1f9      	bne.n	800acb6 <memcpy+0xe>
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <_free_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4605      	mov	r5, r0
 800acc8:	2900      	cmp	r1, #0
 800acca:	d041      	beq.n	800ad50 <_free_r+0x8c>
 800accc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd0:	1f0c      	subs	r4, r1, #4
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	bfb8      	it	lt
 800acd6:	18e4      	addlt	r4, r4, r3
 800acd8:	f000 f8e0 	bl	800ae9c <__malloc_lock>
 800acdc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad54 <_free_r+0x90>)
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	b933      	cbnz	r3, 800acf0 <_free_r+0x2c>
 800ace2:	6063      	str	r3, [r4, #4]
 800ace4:	6014      	str	r4, [r2, #0]
 800ace6:	4628      	mov	r0, r5
 800ace8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acec:	f000 b8dc 	b.w	800aea8 <__malloc_unlock>
 800acf0:	42a3      	cmp	r3, r4
 800acf2:	d908      	bls.n	800ad06 <_free_r+0x42>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	1821      	adds	r1, r4, r0
 800acf8:	428b      	cmp	r3, r1
 800acfa:	bf01      	itttt	eq
 800acfc:	6819      	ldreq	r1, [r3, #0]
 800acfe:	685b      	ldreq	r3, [r3, #4]
 800ad00:	1809      	addeq	r1, r1, r0
 800ad02:	6021      	streq	r1, [r4, #0]
 800ad04:	e7ed      	b.n	800ace2 <_free_r+0x1e>
 800ad06:	461a      	mov	r2, r3
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	b10b      	cbz	r3, 800ad10 <_free_r+0x4c>
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d9fa      	bls.n	800ad06 <_free_r+0x42>
 800ad10:	6811      	ldr	r1, [r2, #0]
 800ad12:	1850      	adds	r0, r2, r1
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d10b      	bne.n	800ad30 <_free_r+0x6c>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	4401      	add	r1, r0
 800ad1c:	1850      	adds	r0, r2, r1
 800ad1e:	4283      	cmp	r3, r0
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	d1e0      	bne.n	800ace6 <_free_r+0x22>
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	6053      	str	r3, [r2, #4]
 800ad2a:	4408      	add	r0, r1
 800ad2c:	6010      	str	r0, [r2, #0]
 800ad2e:	e7da      	b.n	800ace6 <_free_r+0x22>
 800ad30:	d902      	bls.n	800ad38 <_free_r+0x74>
 800ad32:	230c      	movs	r3, #12
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	e7d6      	b.n	800ace6 <_free_r+0x22>
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	1821      	adds	r1, r4, r0
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	bf04      	itt	eq
 800ad40:	6819      	ldreq	r1, [r3, #0]
 800ad42:	685b      	ldreq	r3, [r3, #4]
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	bf04      	itt	eq
 800ad48:	1809      	addeq	r1, r1, r0
 800ad4a:	6021      	streq	r1, [r4, #0]
 800ad4c:	6054      	str	r4, [r2, #4]
 800ad4e:	e7ca      	b.n	800ace6 <_free_r+0x22>
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	bf00      	nop
 800ad54:	240015c8 	.word	0x240015c8

0800ad58 <sbrk_aligned>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	4e0f      	ldr	r6, [pc, #60]	@ (800ad98 <sbrk_aligned+0x40>)
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	6831      	ldr	r1, [r6, #0]
 800ad60:	4605      	mov	r5, r0
 800ad62:	b911      	cbnz	r1, 800ad6a <sbrk_aligned+0x12>
 800ad64:	f000 fba4 	bl	800b4b0 <_sbrk_r>
 800ad68:	6030      	str	r0, [r6, #0]
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f000 fb9f 	bl	800b4b0 <_sbrk_r>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d103      	bne.n	800ad7e <sbrk_aligned+0x26>
 800ad76:	f04f 34ff 	mov.w	r4, #4294967295
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	1cc4      	adds	r4, r0, #3
 800ad80:	f024 0403 	bic.w	r4, r4, #3
 800ad84:	42a0      	cmp	r0, r4
 800ad86:	d0f8      	beq.n	800ad7a <sbrk_aligned+0x22>
 800ad88:	1a21      	subs	r1, r4, r0
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 fb90 	bl	800b4b0 <_sbrk_r>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d1f2      	bne.n	800ad7a <sbrk_aligned+0x22>
 800ad94:	e7ef      	b.n	800ad76 <sbrk_aligned+0x1e>
 800ad96:	bf00      	nop
 800ad98:	240015c4 	.word	0x240015c4

0800ad9c <_malloc_r>:
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	1ccd      	adds	r5, r1, #3
 800ada2:	f025 0503 	bic.w	r5, r5, #3
 800ada6:	3508      	adds	r5, #8
 800ada8:	2d0c      	cmp	r5, #12
 800adaa:	bf38      	it	cc
 800adac:	250c      	movcc	r5, #12
 800adae:	2d00      	cmp	r5, #0
 800adb0:	4606      	mov	r6, r0
 800adb2:	db01      	blt.n	800adb8 <_malloc_r+0x1c>
 800adb4:	42a9      	cmp	r1, r5
 800adb6:	d904      	bls.n	800adc2 <_malloc_r+0x26>
 800adb8:	230c      	movs	r3, #12
 800adba:	6033      	str	r3, [r6, #0]
 800adbc:	2000      	movs	r0, #0
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae98 <_malloc_r+0xfc>
 800adc6:	f000 f869 	bl	800ae9c <__malloc_lock>
 800adca:	f8d8 3000 	ldr.w	r3, [r8]
 800adce:	461c      	mov	r4, r3
 800add0:	bb44      	cbnz	r4, 800ae24 <_malloc_r+0x88>
 800add2:	4629      	mov	r1, r5
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ffbf 	bl	800ad58 <sbrk_aligned>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	4604      	mov	r4, r0
 800adde:	d158      	bne.n	800ae92 <_malloc_r+0xf6>
 800ade0:	f8d8 4000 	ldr.w	r4, [r8]
 800ade4:	4627      	mov	r7, r4
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	d143      	bne.n	800ae72 <_malloc_r+0xd6>
 800adea:	2c00      	cmp	r4, #0
 800adec:	d04b      	beq.n	800ae86 <_malloc_r+0xea>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	4639      	mov	r1, r7
 800adf2:	4630      	mov	r0, r6
 800adf4:	eb04 0903 	add.w	r9, r4, r3
 800adf8:	f000 fb5a 	bl	800b4b0 <_sbrk_r>
 800adfc:	4581      	cmp	r9, r0
 800adfe:	d142      	bne.n	800ae86 <_malloc_r+0xea>
 800ae00:	6821      	ldr	r1, [r4, #0]
 800ae02:	1a6d      	subs	r5, r5, r1
 800ae04:	4629      	mov	r1, r5
 800ae06:	4630      	mov	r0, r6
 800ae08:	f7ff ffa6 	bl	800ad58 <sbrk_aligned>
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	d03a      	beq.n	800ae86 <_malloc_r+0xea>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	442b      	add	r3, r5
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	bb62      	cbnz	r2, 800ae78 <_malloc_r+0xdc>
 800ae1e:	f8c8 7000 	str.w	r7, [r8]
 800ae22:	e00f      	b.n	800ae44 <_malloc_r+0xa8>
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	1b52      	subs	r2, r2, r5
 800ae28:	d420      	bmi.n	800ae6c <_malloc_r+0xd0>
 800ae2a:	2a0b      	cmp	r2, #11
 800ae2c:	d917      	bls.n	800ae5e <_malloc_r+0xc2>
 800ae2e:	1961      	adds	r1, r4, r5
 800ae30:	42a3      	cmp	r3, r4
 800ae32:	6025      	str	r5, [r4, #0]
 800ae34:	bf18      	it	ne
 800ae36:	6059      	strne	r1, [r3, #4]
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	bf08      	it	eq
 800ae3c:	f8c8 1000 	streq.w	r1, [r8]
 800ae40:	5162      	str	r2, [r4, r5]
 800ae42:	604b      	str	r3, [r1, #4]
 800ae44:	4630      	mov	r0, r6
 800ae46:	f000 f82f 	bl	800aea8 <__malloc_unlock>
 800ae4a:	f104 000b 	add.w	r0, r4, #11
 800ae4e:	1d23      	adds	r3, r4, #4
 800ae50:	f020 0007 	bic.w	r0, r0, #7
 800ae54:	1ac2      	subs	r2, r0, r3
 800ae56:	bf1c      	itt	ne
 800ae58:	1a1b      	subne	r3, r3, r0
 800ae5a:	50a3      	strne	r3, [r4, r2]
 800ae5c:	e7af      	b.n	800adbe <_malloc_r+0x22>
 800ae5e:	6862      	ldr	r2, [r4, #4]
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	bf0c      	ite	eq
 800ae64:	f8c8 2000 	streq.w	r2, [r8]
 800ae68:	605a      	strne	r2, [r3, #4]
 800ae6a:	e7eb      	b.n	800ae44 <_malloc_r+0xa8>
 800ae6c:	4623      	mov	r3, r4
 800ae6e:	6864      	ldr	r4, [r4, #4]
 800ae70:	e7ae      	b.n	800add0 <_malloc_r+0x34>
 800ae72:	463c      	mov	r4, r7
 800ae74:	687f      	ldr	r7, [r7, #4]
 800ae76:	e7b6      	b.n	800ade6 <_malloc_r+0x4a>
 800ae78:	461a      	mov	r2, r3
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	d1fb      	bne.n	800ae78 <_malloc_r+0xdc>
 800ae80:	2300      	movs	r3, #0
 800ae82:	6053      	str	r3, [r2, #4]
 800ae84:	e7de      	b.n	800ae44 <_malloc_r+0xa8>
 800ae86:	230c      	movs	r3, #12
 800ae88:	6033      	str	r3, [r6, #0]
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f000 f80c 	bl	800aea8 <__malloc_unlock>
 800ae90:	e794      	b.n	800adbc <_malloc_r+0x20>
 800ae92:	6005      	str	r5, [r0, #0]
 800ae94:	e7d6      	b.n	800ae44 <_malloc_r+0xa8>
 800ae96:	bf00      	nop
 800ae98:	240015c8 	.word	0x240015c8

0800ae9c <__malloc_lock>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	@ (800aea4 <__malloc_lock+0x8>)
 800ae9e:	f7ff bf01 	b.w	800aca4 <__retarget_lock_acquire_recursive>
 800aea2:	bf00      	nop
 800aea4:	240015c0 	.word	0x240015c0

0800aea8 <__malloc_unlock>:
 800aea8:	4801      	ldr	r0, [pc, #4]	@ (800aeb0 <__malloc_unlock+0x8>)
 800aeaa:	f7ff befc 	b.w	800aca6 <__retarget_lock_release_recursive>
 800aeae:	bf00      	nop
 800aeb0:	240015c0 	.word	0x240015c0

0800aeb4 <__ssputs_r>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	688e      	ldr	r6, [r1, #8]
 800aeba:	461f      	mov	r7, r3
 800aebc:	42be      	cmp	r6, r7
 800aebe:	680b      	ldr	r3, [r1, #0]
 800aec0:	4682      	mov	sl, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	4690      	mov	r8, r2
 800aec6:	d82d      	bhi.n	800af24 <__ssputs_r+0x70>
 800aec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aecc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aed0:	d026      	beq.n	800af20 <__ssputs_r+0x6c>
 800aed2:	6965      	ldr	r5, [r4, #20]
 800aed4:	6909      	ldr	r1, [r1, #16]
 800aed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeda:	eba3 0901 	sub.w	r9, r3, r1
 800aede:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aee2:	1c7b      	adds	r3, r7, #1
 800aee4:	444b      	add	r3, r9
 800aee6:	106d      	asrs	r5, r5, #1
 800aee8:	429d      	cmp	r5, r3
 800aeea:	bf38      	it	cc
 800aeec:	461d      	movcc	r5, r3
 800aeee:	0553      	lsls	r3, r2, #21
 800aef0:	d527      	bpl.n	800af42 <__ssputs_r+0x8e>
 800aef2:	4629      	mov	r1, r5
 800aef4:	f7ff ff52 	bl	800ad9c <_malloc_r>
 800aef8:	4606      	mov	r6, r0
 800aefa:	b360      	cbz	r0, 800af56 <__ssputs_r+0xa2>
 800aefc:	6921      	ldr	r1, [r4, #16]
 800aefe:	464a      	mov	r2, r9
 800af00:	f7ff fed2 	bl	800aca8 <memcpy>
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0e:	81a3      	strh	r3, [r4, #12]
 800af10:	6126      	str	r6, [r4, #16]
 800af12:	6165      	str	r5, [r4, #20]
 800af14:	444e      	add	r6, r9
 800af16:	eba5 0509 	sub.w	r5, r5, r9
 800af1a:	6026      	str	r6, [r4, #0]
 800af1c:	60a5      	str	r5, [r4, #8]
 800af1e:	463e      	mov	r6, r7
 800af20:	42be      	cmp	r6, r7
 800af22:	d900      	bls.n	800af26 <__ssputs_r+0x72>
 800af24:	463e      	mov	r6, r7
 800af26:	6820      	ldr	r0, [r4, #0]
 800af28:	4632      	mov	r2, r6
 800af2a:	4641      	mov	r1, r8
 800af2c:	f000 faa6 	bl	800b47c <memmove>
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	1b9b      	subs	r3, r3, r6
 800af34:	60a3      	str	r3, [r4, #8]
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	4433      	add	r3, r6
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	2000      	movs	r0, #0
 800af3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af42:	462a      	mov	r2, r5
 800af44:	f000 fac4 	bl	800b4d0 <_realloc_r>
 800af48:	4606      	mov	r6, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d1e0      	bne.n	800af10 <__ssputs_r+0x5c>
 800af4e:	6921      	ldr	r1, [r4, #16]
 800af50:	4650      	mov	r0, sl
 800af52:	f7ff feb7 	bl	800acc4 <_free_r>
 800af56:	230c      	movs	r3, #12
 800af58:	f8ca 3000 	str.w	r3, [sl]
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	e7e9      	b.n	800af3e <__ssputs_r+0x8a>
	...

0800af6c <_svfiprintf_r>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	4698      	mov	r8, r3
 800af72:	898b      	ldrh	r3, [r1, #12]
 800af74:	061b      	lsls	r3, r3, #24
 800af76:	b09d      	sub	sp, #116	@ 0x74
 800af78:	4607      	mov	r7, r0
 800af7a:	460d      	mov	r5, r1
 800af7c:	4614      	mov	r4, r2
 800af7e:	d510      	bpl.n	800afa2 <_svfiprintf_r+0x36>
 800af80:	690b      	ldr	r3, [r1, #16]
 800af82:	b973      	cbnz	r3, 800afa2 <_svfiprintf_r+0x36>
 800af84:	2140      	movs	r1, #64	@ 0x40
 800af86:	f7ff ff09 	bl	800ad9c <_malloc_r>
 800af8a:	6028      	str	r0, [r5, #0]
 800af8c:	6128      	str	r0, [r5, #16]
 800af8e:	b930      	cbnz	r0, 800af9e <_svfiprintf_r+0x32>
 800af90:	230c      	movs	r3, #12
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	f04f 30ff 	mov.w	r0, #4294967295
 800af98:	b01d      	add	sp, #116	@ 0x74
 800af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9e:	2340      	movs	r3, #64	@ 0x40
 800afa0:	616b      	str	r3, [r5, #20]
 800afa2:	2300      	movs	r3, #0
 800afa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afa6:	2320      	movs	r3, #32
 800afa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afac:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb0:	2330      	movs	r3, #48	@ 0x30
 800afb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b150 <_svfiprintf_r+0x1e4>
 800afb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afba:	f04f 0901 	mov.w	r9, #1
 800afbe:	4623      	mov	r3, r4
 800afc0:	469a      	mov	sl, r3
 800afc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc6:	b10a      	cbz	r2, 800afcc <_svfiprintf_r+0x60>
 800afc8:	2a25      	cmp	r2, #37	@ 0x25
 800afca:	d1f9      	bne.n	800afc0 <_svfiprintf_r+0x54>
 800afcc:	ebba 0b04 	subs.w	fp, sl, r4
 800afd0:	d00b      	beq.n	800afea <_svfiprintf_r+0x7e>
 800afd2:	465b      	mov	r3, fp
 800afd4:	4622      	mov	r2, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff ff6b 	bl	800aeb4 <__ssputs_r>
 800afde:	3001      	adds	r0, #1
 800afe0:	f000 80a7 	beq.w	800b132 <_svfiprintf_r+0x1c6>
 800afe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afe6:	445a      	add	r2, fp
 800afe8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afea:	f89a 3000 	ldrb.w	r3, [sl]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 809f 	beq.w	800b132 <_svfiprintf_r+0x1c6>
 800aff4:	2300      	movs	r3, #0
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800affe:	f10a 0a01 	add.w	sl, sl, #1
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	9307      	str	r3, [sp, #28]
 800b006:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b00a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b00c:	4654      	mov	r4, sl
 800b00e:	2205      	movs	r2, #5
 800b010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b014:	484e      	ldr	r0, [pc, #312]	@ (800b150 <_svfiprintf_r+0x1e4>)
 800b016:	f7f5 f96b 	bl	80002f0 <memchr>
 800b01a:	9a04      	ldr	r2, [sp, #16]
 800b01c:	b9d8      	cbnz	r0, 800b056 <_svfiprintf_r+0xea>
 800b01e:	06d0      	lsls	r0, r2, #27
 800b020:	bf44      	itt	mi
 800b022:	2320      	movmi	r3, #32
 800b024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b028:	0711      	lsls	r1, r2, #28
 800b02a:	bf44      	itt	mi
 800b02c:	232b      	movmi	r3, #43	@ 0x2b
 800b02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b032:	f89a 3000 	ldrb.w	r3, [sl]
 800b036:	2b2a      	cmp	r3, #42	@ 0x2a
 800b038:	d015      	beq.n	800b066 <_svfiprintf_r+0xfa>
 800b03a:	9a07      	ldr	r2, [sp, #28]
 800b03c:	4654      	mov	r4, sl
 800b03e:	2000      	movs	r0, #0
 800b040:	f04f 0c0a 	mov.w	ip, #10
 800b044:	4621      	mov	r1, r4
 800b046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04a:	3b30      	subs	r3, #48	@ 0x30
 800b04c:	2b09      	cmp	r3, #9
 800b04e:	d94b      	bls.n	800b0e8 <_svfiprintf_r+0x17c>
 800b050:	b1b0      	cbz	r0, 800b080 <_svfiprintf_r+0x114>
 800b052:	9207      	str	r2, [sp, #28]
 800b054:	e014      	b.n	800b080 <_svfiprintf_r+0x114>
 800b056:	eba0 0308 	sub.w	r3, r0, r8
 800b05a:	fa09 f303 	lsl.w	r3, r9, r3
 800b05e:	4313      	orrs	r3, r2
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	46a2      	mov	sl, r4
 800b064:	e7d2      	b.n	800b00c <_svfiprintf_r+0xa0>
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	1d19      	adds	r1, r3, #4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	9103      	str	r1, [sp, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	bfbb      	ittet	lt
 800b072:	425b      	neglt	r3, r3
 800b074:	f042 0202 	orrlt.w	r2, r2, #2
 800b078:	9307      	strge	r3, [sp, #28]
 800b07a:	9307      	strlt	r3, [sp, #28]
 800b07c:	bfb8      	it	lt
 800b07e:	9204      	strlt	r2, [sp, #16]
 800b080:	7823      	ldrb	r3, [r4, #0]
 800b082:	2b2e      	cmp	r3, #46	@ 0x2e
 800b084:	d10a      	bne.n	800b09c <_svfiprintf_r+0x130>
 800b086:	7863      	ldrb	r3, [r4, #1]
 800b088:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08a:	d132      	bne.n	800b0f2 <_svfiprintf_r+0x186>
 800b08c:	9b03      	ldr	r3, [sp, #12]
 800b08e:	1d1a      	adds	r2, r3, #4
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	9203      	str	r2, [sp, #12]
 800b094:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b098:	3402      	adds	r4, #2
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b160 <_svfiprintf_r+0x1f4>
 800b0a0:	7821      	ldrb	r1, [r4, #0]
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	f7f5 f923 	bl	80002f0 <memchr>
 800b0aa:	b138      	cbz	r0, 800b0bc <_svfiprintf_r+0x150>
 800b0ac:	9b04      	ldr	r3, [sp, #16]
 800b0ae:	eba0 000a 	sub.w	r0, r0, sl
 800b0b2:	2240      	movs	r2, #64	@ 0x40
 800b0b4:	4082      	lsls	r2, r0
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	3401      	adds	r4, #1
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c0:	4824      	ldr	r0, [pc, #144]	@ (800b154 <_svfiprintf_r+0x1e8>)
 800b0c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0c6:	2206      	movs	r2, #6
 800b0c8:	f7f5 f912 	bl	80002f0 <memchr>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d036      	beq.n	800b13e <_svfiprintf_r+0x1d2>
 800b0d0:	4b21      	ldr	r3, [pc, #132]	@ (800b158 <_svfiprintf_r+0x1ec>)
 800b0d2:	bb1b      	cbnz	r3, 800b11c <_svfiprintf_r+0x1b0>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	3307      	adds	r3, #7
 800b0d8:	f023 0307 	bic.w	r3, r3, #7
 800b0dc:	3308      	adds	r3, #8
 800b0de:	9303      	str	r3, [sp, #12]
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	4433      	add	r3, r6
 800b0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0e6:	e76a      	b.n	800afbe <_svfiprintf_r+0x52>
 800b0e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	2001      	movs	r0, #1
 800b0f0:	e7a8      	b.n	800b044 <_svfiprintf_r+0xd8>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	9305      	str	r3, [sp, #20]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	f04f 0c0a 	mov.w	ip, #10
 800b0fe:	4620      	mov	r0, r4
 800b100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b104:	3a30      	subs	r2, #48	@ 0x30
 800b106:	2a09      	cmp	r2, #9
 800b108:	d903      	bls.n	800b112 <_svfiprintf_r+0x1a6>
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0c6      	beq.n	800b09c <_svfiprintf_r+0x130>
 800b10e:	9105      	str	r1, [sp, #20]
 800b110:	e7c4      	b.n	800b09c <_svfiprintf_r+0x130>
 800b112:	fb0c 2101 	mla	r1, ip, r1, r2
 800b116:	4604      	mov	r4, r0
 800b118:	2301      	movs	r3, #1
 800b11a:	e7f0      	b.n	800b0fe <_svfiprintf_r+0x192>
 800b11c:	ab03      	add	r3, sp, #12
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	462a      	mov	r2, r5
 800b122:	4b0e      	ldr	r3, [pc, #56]	@ (800b15c <_svfiprintf_r+0x1f0>)
 800b124:	a904      	add	r1, sp, #16
 800b126:	4638      	mov	r0, r7
 800b128:	f3af 8000 	nop.w
 800b12c:	1c42      	adds	r2, r0, #1
 800b12e:	4606      	mov	r6, r0
 800b130:	d1d6      	bne.n	800b0e0 <_svfiprintf_r+0x174>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	065b      	lsls	r3, r3, #25
 800b136:	f53f af2d 	bmi.w	800af94 <_svfiprintf_r+0x28>
 800b13a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b13c:	e72c      	b.n	800af98 <_svfiprintf_r+0x2c>
 800b13e:	ab03      	add	r3, sp, #12
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	462a      	mov	r2, r5
 800b144:	4b05      	ldr	r3, [pc, #20]	@ (800b15c <_svfiprintf_r+0x1f0>)
 800b146:	a904      	add	r1, sp, #16
 800b148:	4638      	mov	r0, r7
 800b14a:	f000 f879 	bl	800b240 <_printf_i>
 800b14e:	e7ed      	b.n	800b12c <_svfiprintf_r+0x1c0>
 800b150:	0800b68c 	.word	0x0800b68c
 800b154:	0800b696 	.word	0x0800b696
 800b158:	00000000 	.word	0x00000000
 800b15c:	0800aeb5 	.word	0x0800aeb5
 800b160:	0800b692 	.word	0x0800b692

0800b164 <_printf_common>:
 800b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	4616      	mov	r6, r2
 800b16a:	4698      	mov	r8, r3
 800b16c:	688a      	ldr	r2, [r1, #8]
 800b16e:	690b      	ldr	r3, [r1, #16]
 800b170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b174:	4293      	cmp	r3, r2
 800b176:	bfb8      	it	lt
 800b178:	4613      	movlt	r3, r2
 800b17a:	6033      	str	r3, [r6, #0]
 800b17c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b180:	4607      	mov	r7, r0
 800b182:	460c      	mov	r4, r1
 800b184:	b10a      	cbz	r2, 800b18a <_printf_common+0x26>
 800b186:	3301      	adds	r3, #1
 800b188:	6033      	str	r3, [r6, #0]
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	0699      	lsls	r1, r3, #26
 800b18e:	bf42      	ittt	mi
 800b190:	6833      	ldrmi	r3, [r6, #0]
 800b192:	3302      	addmi	r3, #2
 800b194:	6033      	strmi	r3, [r6, #0]
 800b196:	6825      	ldr	r5, [r4, #0]
 800b198:	f015 0506 	ands.w	r5, r5, #6
 800b19c:	d106      	bne.n	800b1ac <_printf_common+0x48>
 800b19e:	f104 0a19 	add.w	sl, r4, #25
 800b1a2:	68e3      	ldr	r3, [r4, #12]
 800b1a4:	6832      	ldr	r2, [r6, #0]
 800b1a6:	1a9b      	subs	r3, r3, r2
 800b1a8:	42ab      	cmp	r3, r5
 800b1aa:	dc26      	bgt.n	800b1fa <_printf_common+0x96>
 800b1ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	3b00      	subs	r3, #0
 800b1b4:	bf18      	it	ne
 800b1b6:	2301      	movne	r3, #1
 800b1b8:	0692      	lsls	r2, r2, #26
 800b1ba:	d42b      	bmi.n	800b214 <_printf_common+0xb0>
 800b1bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	47c8      	blx	r9
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d01e      	beq.n	800b208 <_printf_common+0xa4>
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	6922      	ldr	r2, [r4, #16]
 800b1ce:	f003 0306 	and.w	r3, r3, #6
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	bf02      	ittt	eq
 800b1d6:	68e5      	ldreq	r5, [r4, #12]
 800b1d8:	6833      	ldreq	r3, [r6, #0]
 800b1da:	1aed      	subeq	r5, r5, r3
 800b1dc:	68a3      	ldr	r3, [r4, #8]
 800b1de:	bf0c      	ite	eq
 800b1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1e4:	2500      	movne	r5, #0
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	bfc4      	itt	gt
 800b1ea:	1a9b      	subgt	r3, r3, r2
 800b1ec:	18ed      	addgt	r5, r5, r3
 800b1ee:	2600      	movs	r6, #0
 800b1f0:	341a      	adds	r4, #26
 800b1f2:	42b5      	cmp	r5, r6
 800b1f4:	d11a      	bne.n	800b22c <_printf_common+0xc8>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e008      	b.n	800b20c <_printf_common+0xa8>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4652      	mov	r2, sl
 800b1fe:	4641      	mov	r1, r8
 800b200:	4638      	mov	r0, r7
 800b202:	47c8      	blx	r9
 800b204:	3001      	adds	r0, #1
 800b206:	d103      	bne.n	800b210 <_printf_common+0xac>
 800b208:	f04f 30ff 	mov.w	r0, #4294967295
 800b20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b210:	3501      	adds	r5, #1
 800b212:	e7c6      	b.n	800b1a2 <_printf_common+0x3e>
 800b214:	18e1      	adds	r1, r4, r3
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	2030      	movs	r0, #48	@ 0x30
 800b21a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b21e:	4422      	add	r2, r4
 800b220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b228:	3302      	adds	r3, #2
 800b22a:	e7c7      	b.n	800b1bc <_printf_common+0x58>
 800b22c:	2301      	movs	r3, #1
 800b22e:	4622      	mov	r2, r4
 800b230:	4641      	mov	r1, r8
 800b232:	4638      	mov	r0, r7
 800b234:	47c8      	blx	r9
 800b236:	3001      	adds	r0, #1
 800b238:	d0e6      	beq.n	800b208 <_printf_common+0xa4>
 800b23a:	3601      	adds	r6, #1
 800b23c:	e7d9      	b.n	800b1f2 <_printf_common+0x8e>
	...

0800b240 <_printf_i>:
 800b240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	7e0f      	ldrb	r7, [r1, #24]
 800b246:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b248:	2f78      	cmp	r7, #120	@ 0x78
 800b24a:	4691      	mov	r9, r2
 800b24c:	4680      	mov	r8, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	469a      	mov	sl, r3
 800b252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b256:	d807      	bhi.n	800b268 <_printf_i+0x28>
 800b258:	2f62      	cmp	r7, #98	@ 0x62
 800b25a:	d80a      	bhi.n	800b272 <_printf_i+0x32>
 800b25c:	2f00      	cmp	r7, #0
 800b25e:	f000 80d1 	beq.w	800b404 <_printf_i+0x1c4>
 800b262:	2f58      	cmp	r7, #88	@ 0x58
 800b264:	f000 80b8 	beq.w	800b3d8 <_printf_i+0x198>
 800b268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b26c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b270:	e03a      	b.n	800b2e8 <_printf_i+0xa8>
 800b272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b276:	2b15      	cmp	r3, #21
 800b278:	d8f6      	bhi.n	800b268 <_printf_i+0x28>
 800b27a:	a101      	add	r1, pc, #4	@ (adr r1, 800b280 <_printf_i+0x40>)
 800b27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b280:	0800b2d9 	.word	0x0800b2d9
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b269 	.word	0x0800b269
 800b28c:	0800b269 	.word	0x0800b269
 800b290:	0800b269 	.word	0x0800b269
 800b294:	0800b269 	.word	0x0800b269
 800b298:	0800b2ed 	.word	0x0800b2ed
 800b29c:	0800b269 	.word	0x0800b269
 800b2a0:	0800b269 	.word	0x0800b269
 800b2a4:	0800b269 	.word	0x0800b269
 800b2a8:	0800b269 	.word	0x0800b269
 800b2ac:	0800b3eb 	.word	0x0800b3eb
 800b2b0:	0800b317 	.word	0x0800b317
 800b2b4:	0800b3a5 	.word	0x0800b3a5
 800b2b8:	0800b269 	.word	0x0800b269
 800b2bc:	0800b269 	.word	0x0800b269
 800b2c0:	0800b40d 	.word	0x0800b40d
 800b2c4:	0800b269 	.word	0x0800b269
 800b2c8:	0800b317 	.word	0x0800b317
 800b2cc:	0800b269 	.word	0x0800b269
 800b2d0:	0800b269 	.word	0x0800b269
 800b2d4:	0800b3ad 	.word	0x0800b3ad
 800b2d8:	6833      	ldr	r3, [r6, #0]
 800b2da:	1d1a      	adds	r2, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6032      	str	r2, [r6, #0]
 800b2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e09c      	b.n	800b426 <_printf_i+0x1e6>
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	6031      	str	r1, [r6, #0]
 800b2f4:	0606      	lsls	r6, r0, #24
 800b2f6:	d501      	bpl.n	800b2fc <_printf_i+0xbc>
 800b2f8:	681d      	ldr	r5, [r3, #0]
 800b2fa:	e003      	b.n	800b304 <_printf_i+0xc4>
 800b2fc:	0645      	lsls	r5, r0, #25
 800b2fe:	d5fb      	bpl.n	800b2f8 <_printf_i+0xb8>
 800b300:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b304:	2d00      	cmp	r5, #0
 800b306:	da03      	bge.n	800b310 <_printf_i+0xd0>
 800b308:	232d      	movs	r3, #45	@ 0x2d
 800b30a:	426d      	negs	r5, r5
 800b30c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b310:	4858      	ldr	r0, [pc, #352]	@ (800b474 <_printf_i+0x234>)
 800b312:	230a      	movs	r3, #10
 800b314:	e011      	b.n	800b33a <_printf_i+0xfa>
 800b316:	6821      	ldr	r1, [r4, #0]
 800b318:	6833      	ldr	r3, [r6, #0]
 800b31a:	0608      	lsls	r0, r1, #24
 800b31c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b320:	d402      	bmi.n	800b328 <_printf_i+0xe8>
 800b322:	0649      	lsls	r1, r1, #25
 800b324:	bf48      	it	mi
 800b326:	b2ad      	uxthmi	r5, r5
 800b328:	2f6f      	cmp	r7, #111	@ 0x6f
 800b32a:	4852      	ldr	r0, [pc, #328]	@ (800b474 <_printf_i+0x234>)
 800b32c:	6033      	str	r3, [r6, #0]
 800b32e:	bf14      	ite	ne
 800b330:	230a      	movne	r3, #10
 800b332:	2308      	moveq	r3, #8
 800b334:	2100      	movs	r1, #0
 800b336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b33a:	6866      	ldr	r6, [r4, #4]
 800b33c:	60a6      	str	r6, [r4, #8]
 800b33e:	2e00      	cmp	r6, #0
 800b340:	db05      	blt.n	800b34e <_printf_i+0x10e>
 800b342:	6821      	ldr	r1, [r4, #0]
 800b344:	432e      	orrs	r6, r5
 800b346:	f021 0104 	bic.w	r1, r1, #4
 800b34a:	6021      	str	r1, [r4, #0]
 800b34c:	d04b      	beq.n	800b3e6 <_printf_i+0x1a6>
 800b34e:	4616      	mov	r6, r2
 800b350:	fbb5 f1f3 	udiv	r1, r5, r3
 800b354:	fb03 5711 	mls	r7, r3, r1, r5
 800b358:	5dc7      	ldrb	r7, [r0, r7]
 800b35a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b35e:	462f      	mov	r7, r5
 800b360:	42bb      	cmp	r3, r7
 800b362:	460d      	mov	r5, r1
 800b364:	d9f4      	bls.n	800b350 <_printf_i+0x110>
 800b366:	2b08      	cmp	r3, #8
 800b368:	d10b      	bne.n	800b382 <_printf_i+0x142>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	07df      	lsls	r7, r3, #31
 800b36e:	d508      	bpl.n	800b382 <_printf_i+0x142>
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	6861      	ldr	r1, [r4, #4]
 800b374:	4299      	cmp	r1, r3
 800b376:	bfde      	ittt	le
 800b378:	2330      	movle	r3, #48	@ 0x30
 800b37a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b37e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b382:	1b92      	subs	r2, r2, r6
 800b384:	6122      	str	r2, [r4, #16]
 800b386:	f8cd a000 	str.w	sl, [sp]
 800b38a:	464b      	mov	r3, r9
 800b38c:	aa03      	add	r2, sp, #12
 800b38e:	4621      	mov	r1, r4
 800b390:	4640      	mov	r0, r8
 800b392:	f7ff fee7 	bl	800b164 <_printf_common>
 800b396:	3001      	adds	r0, #1
 800b398:	d14a      	bne.n	800b430 <_printf_i+0x1f0>
 800b39a:	f04f 30ff 	mov.w	r0, #4294967295
 800b39e:	b004      	add	sp, #16
 800b3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	f043 0320 	orr.w	r3, r3, #32
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	4832      	ldr	r0, [pc, #200]	@ (800b478 <_printf_i+0x238>)
 800b3ae:	2778      	movs	r7, #120	@ 0x78
 800b3b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	6831      	ldr	r1, [r6, #0]
 800b3b8:	061f      	lsls	r7, r3, #24
 800b3ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3be:	d402      	bmi.n	800b3c6 <_printf_i+0x186>
 800b3c0:	065f      	lsls	r7, r3, #25
 800b3c2:	bf48      	it	mi
 800b3c4:	b2ad      	uxthmi	r5, r5
 800b3c6:	6031      	str	r1, [r6, #0]
 800b3c8:	07d9      	lsls	r1, r3, #31
 800b3ca:	bf44      	itt	mi
 800b3cc:	f043 0320 	orrmi.w	r3, r3, #32
 800b3d0:	6023      	strmi	r3, [r4, #0]
 800b3d2:	b11d      	cbz	r5, 800b3dc <_printf_i+0x19c>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	e7ad      	b.n	800b334 <_printf_i+0xf4>
 800b3d8:	4826      	ldr	r0, [pc, #152]	@ (800b474 <_printf_i+0x234>)
 800b3da:	e7e9      	b.n	800b3b0 <_printf_i+0x170>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	f023 0320 	bic.w	r3, r3, #32
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	e7f6      	b.n	800b3d4 <_printf_i+0x194>
 800b3e6:	4616      	mov	r6, r2
 800b3e8:	e7bd      	b.n	800b366 <_printf_i+0x126>
 800b3ea:	6833      	ldr	r3, [r6, #0]
 800b3ec:	6825      	ldr	r5, [r4, #0]
 800b3ee:	6961      	ldr	r1, [r4, #20]
 800b3f0:	1d18      	adds	r0, r3, #4
 800b3f2:	6030      	str	r0, [r6, #0]
 800b3f4:	062e      	lsls	r6, r5, #24
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	d501      	bpl.n	800b3fe <_printf_i+0x1be>
 800b3fa:	6019      	str	r1, [r3, #0]
 800b3fc:	e002      	b.n	800b404 <_printf_i+0x1c4>
 800b3fe:	0668      	lsls	r0, r5, #25
 800b400:	d5fb      	bpl.n	800b3fa <_printf_i+0x1ba>
 800b402:	8019      	strh	r1, [r3, #0]
 800b404:	2300      	movs	r3, #0
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	4616      	mov	r6, r2
 800b40a:	e7bc      	b.n	800b386 <_printf_i+0x146>
 800b40c:	6833      	ldr	r3, [r6, #0]
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	6032      	str	r2, [r6, #0]
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	6862      	ldr	r2, [r4, #4]
 800b416:	2100      	movs	r1, #0
 800b418:	4630      	mov	r0, r6
 800b41a:	f7f4 ff69 	bl	80002f0 <memchr>
 800b41e:	b108      	cbz	r0, 800b424 <_printf_i+0x1e4>
 800b420:	1b80      	subs	r0, r0, r6
 800b422:	6060      	str	r0, [r4, #4]
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	2300      	movs	r3, #0
 800b42a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b42e:	e7aa      	b.n	800b386 <_printf_i+0x146>
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	4632      	mov	r2, r6
 800b434:	4649      	mov	r1, r9
 800b436:	4640      	mov	r0, r8
 800b438:	47d0      	blx	sl
 800b43a:	3001      	adds	r0, #1
 800b43c:	d0ad      	beq.n	800b39a <_printf_i+0x15a>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	079b      	lsls	r3, r3, #30
 800b442:	d413      	bmi.n	800b46c <_printf_i+0x22c>
 800b444:	68e0      	ldr	r0, [r4, #12]
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	4298      	cmp	r0, r3
 800b44a:	bfb8      	it	lt
 800b44c:	4618      	movlt	r0, r3
 800b44e:	e7a6      	b.n	800b39e <_printf_i+0x15e>
 800b450:	2301      	movs	r3, #1
 800b452:	4632      	mov	r2, r6
 800b454:	4649      	mov	r1, r9
 800b456:	4640      	mov	r0, r8
 800b458:	47d0      	blx	sl
 800b45a:	3001      	adds	r0, #1
 800b45c:	d09d      	beq.n	800b39a <_printf_i+0x15a>
 800b45e:	3501      	adds	r5, #1
 800b460:	68e3      	ldr	r3, [r4, #12]
 800b462:	9903      	ldr	r1, [sp, #12]
 800b464:	1a5b      	subs	r3, r3, r1
 800b466:	42ab      	cmp	r3, r5
 800b468:	dcf2      	bgt.n	800b450 <_printf_i+0x210>
 800b46a:	e7eb      	b.n	800b444 <_printf_i+0x204>
 800b46c:	2500      	movs	r5, #0
 800b46e:	f104 0619 	add.w	r6, r4, #25
 800b472:	e7f5      	b.n	800b460 <_printf_i+0x220>
 800b474:	0800b69d 	.word	0x0800b69d
 800b478:	0800b6ae 	.word	0x0800b6ae

0800b47c <memmove>:
 800b47c:	4288      	cmp	r0, r1
 800b47e:	b510      	push	{r4, lr}
 800b480:	eb01 0402 	add.w	r4, r1, r2
 800b484:	d902      	bls.n	800b48c <memmove+0x10>
 800b486:	4284      	cmp	r4, r0
 800b488:	4623      	mov	r3, r4
 800b48a:	d807      	bhi.n	800b49c <memmove+0x20>
 800b48c:	1e43      	subs	r3, r0, #1
 800b48e:	42a1      	cmp	r1, r4
 800b490:	d008      	beq.n	800b4a4 <memmove+0x28>
 800b492:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b49a:	e7f8      	b.n	800b48e <memmove+0x12>
 800b49c:	4402      	add	r2, r0
 800b49e:	4601      	mov	r1, r0
 800b4a0:	428a      	cmp	r2, r1
 800b4a2:	d100      	bne.n	800b4a6 <memmove+0x2a>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ae:	e7f7      	b.n	800b4a0 <memmove+0x24>

0800b4b0 <_sbrk_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d06      	ldr	r5, [pc, #24]	@ (800b4cc <_sbrk_r+0x1c>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	602b      	str	r3, [r5, #0]
 800b4bc:	f7f6 feca 	bl	8002254 <_sbrk>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_sbrk_r+0x1a>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_sbrk_r+0x1a>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	240015bc 	.word	0x240015bc

0800b4d0 <_realloc_r>:
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	460d      	mov	r5, r1
 800b4da:	b921      	cbnz	r1, 800b4e6 <_realloc_r+0x16>
 800b4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	f7ff bc5b 	b.w	800ad9c <_malloc_r>
 800b4e6:	b92a      	cbnz	r2, 800b4f4 <_realloc_r+0x24>
 800b4e8:	f7ff fbec 	bl	800acc4 <_free_r>
 800b4ec:	4625      	mov	r5, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f4:	f000 f81a 	bl	800b52c <_malloc_usable_size_r>
 800b4f8:	4284      	cmp	r4, r0
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	d802      	bhi.n	800b504 <_realloc_r+0x34>
 800b4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b502:	d8f4      	bhi.n	800b4ee <_realloc_r+0x1e>
 800b504:	4621      	mov	r1, r4
 800b506:	4638      	mov	r0, r7
 800b508:	f7ff fc48 	bl	800ad9c <_malloc_r>
 800b50c:	4680      	mov	r8, r0
 800b50e:	b908      	cbnz	r0, 800b514 <_realloc_r+0x44>
 800b510:	4645      	mov	r5, r8
 800b512:	e7ec      	b.n	800b4ee <_realloc_r+0x1e>
 800b514:	42b4      	cmp	r4, r6
 800b516:	4622      	mov	r2, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	bf28      	it	cs
 800b51c:	4632      	movcs	r2, r6
 800b51e:	f7ff fbc3 	bl	800aca8 <memcpy>
 800b522:	4629      	mov	r1, r5
 800b524:	4638      	mov	r0, r7
 800b526:	f7ff fbcd 	bl	800acc4 <_free_r>
 800b52a:	e7f1      	b.n	800b510 <_realloc_r+0x40>

0800b52c <_malloc_usable_size_r>:
 800b52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b530:	1f18      	subs	r0, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	bfbc      	itt	lt
 800b536:	580b      	ldrlt	r3, [r1, r0]
 800b538:	18c0      	addlt	r0, r0, r3
 800b53a:	4770      	bx	lr

0800b53c <_init>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr

0800b548 <_fini>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	bf00      	nop
 800b54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b54e:	bc08      	pop	{r3}
 800b550:	469e      	mov	lr, r3
 800b552:	4770      	bx	lr
