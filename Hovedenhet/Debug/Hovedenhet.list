
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800ae50  0800ae50  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afbc  0800afbc  0000bfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afc4  0800afc4  0000bfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000106c  24000000  0800afcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  2400106c  0800c038  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001414  0800c038  0000d414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000194b8  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e46  00000000  00000000  00026552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  00029398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d31  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a78  00000000  00000000  0002b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018316  00000000  00000000  00064c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a43a  00000000  00000000  0007cf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e73a9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d90  00000000  00000000  001e73ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ec17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400106c 	.word	0x2400106c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae38 	.word	0x0800ae38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001070 	.word	0x24001070
 80002dc:	0800ae38 	.word	0x0800ae38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f002 fcc2 	bl	800308a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 ffa0 	bl	8001650 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010e0 	.word	0x240010e0
 800071c:	24001098 	.word	0x24001098
 8000720:	24001104 	.word	0x24001104

08000724 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f001 fb85 	bl	8001e40 <HAL_Delay>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d012      	beq.n	8000762 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800073c:	4b62      	ldr	r3, [pc, #392]	@ (80008c8 <Flash_Init+0x1a4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 facd 	bl	8000ce0 <Read_Status_Register>
 8000746:	4603      	mov	r3, r0
 8000748:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 800074a:	7ebb      	ldrb	r3, [r7, #26]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR_2_Addr, data);
 8000752:	4b5d      	ldr	r3, [pc, #372]	@ (80008c8 <Flash_Init+0x1a4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	7eba      	ldrb	r2, [r7, #26]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 faf0 	bl	8000d40 <Write_Status_Register>
 8000760:	e011      	b.n	8000786 <Flash_Init+0x62>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000762:	4b59      	ldr	r3, [pc, #356]	@ (80008c8 <Flash_Init+0x1a4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 faba 	bl	8000ce0 <Read_Status_Register>
 800076c:	4603      	mov	r3, r0
 800076e:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000770:	7efb      	ldrb	r3, [r7, #27]
 8000772:	f023 0308 	bic.w	r3, r3, #8
 8000776:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR_2_Addr, data);
 8000778:	4b53      	ldr	r3, [pc, #332]	@ (80008c8 <Flash_Init+0x1a4>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7efa      	ldrb	r2, [r7, #27]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fadd 	bl	8000d40 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000786:	4b51      	ldr	r3, [pc, #324]	@ (80008cc <Flash_Init+0x1a8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 faa8 	bl	8000ce0 <Read_Status_Register>
 8000790:	4603      	mov	r3, r0
 8000792:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000794:	7e7b      	ldrb	r3, [r7, #25]
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 800079c:	7e7b      	ldrb	r3, [r7, #25]
 800079e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007a2:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR_1_Addr, data);
 80007a4:	4b49      	ldr	r3, [pc, #292]	@ (80008cc <Flash_Init+0x1a8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7e7a      	ldrb	r2, [r7, #25]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fac7 	bl	8000d40 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007c8:	e031      	b.n	800082e <Flash_Init+0x10a>
		Page_Bit = 0x0000;
 80007ca:	2300      	movs	r3, #0
 80007cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007ce:	f107 0108 	add.w	r1, r7, #8
 80007d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d4:	2210      	movs	r2, #16
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f93a 	bl	8000a50 <Read_Data>

		for(int i = 0; i < 16; i++){
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	e013      	b.n	800080a <Flash_Init+0xe6>
			if(Page_Data[i]==0xFF){
 80007e2:	f107 0208 	add.w	r2, r7, #8
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2bff      	cmp	r3, #255	@ 0xff
 80007ee:	d109      	bne.n	8000804 <Flash_Init+0xe0>
				Page_Bit |= 0x01 << i;
 80007f0:	2201      	movs	r2, #1
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21b      	sxth	r3, r3
 8000802:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	3301      	adds	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	dde8      	ble.n	80007e2 <Flash_Init+0xbe>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 8000810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000816:	4293      	cmp	r3, r2
 8000818:	d003      	beq.n	8000822 <Flash_Init+0xfe>
			Temp_Page += 64;
 800081a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800081c:	3340      	adds	r3, #64	@ 0x40
 800081e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000820:	e005      	b.n	800082e <Flash_Init+0x10a>
		}

		else{
			if(Temp_Page == 0){
 8000822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000824:	2b00      	cmp	r3, #0
 8000826:	d008      	beq.n	800083a <Flash_Init+0x116>
				break;
			}
			else{
				Temp_Page -= 64;
 8000828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800082a:	3b40      	subs	r3, #64	@ 0x40
 800082c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800082e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000834:	4293      	cmp	r3, r2
 8000836:	d1c8      	bne.n	80007ca <Flash_Init+0xa6>
 8000838:	e000      	b.n	800083c <Flash_Init+0x118>
				break;
 800083a:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 800083c:	2300      	movs	r3, #0
 800083e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000840:	e02a      	b.n	8000898 <Flash_Init+0x174>
		Page_Bit = 0x0000;
 8000842:	2300      	movs	r3, #0
 8000844:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000846:	f107 0108 	add.w	r1, r7, #8
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	2210      	movs	r2, #16
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f8fe 	bl	8000a50 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	e013      	b.n	8000882 <Flash_Init+0x15e>
			if(Page_Data[i]==0xFF){
 800085a:	f107 0208 	add.w	r2, r7, #8
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2bff      	cmp	r3, #255	@ 0xff
 8000866:	d109      	bne.n	800087c <Flash_Init+0x158>
				Page_Bit |= 0x01 << i;
 8000868:	2201      	movs	r2, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	b21a      	sxth	r2, r3
 8000872:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000876:	4313      	orrs	r3, r2
 8000878:	b21b      	sxth	r3, r3
 800087a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	3301      	adds	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	dde8      	ble.n	800085a <Flash_Init+0x136>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000888:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800088a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088e:	4293      	cmp	r3, r2
 8000890:	d002      	beq.n	8000898 <Flash_Init+0x174>
			Temp_Page++;
 8000892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000894:	3301      	adds	r3, #1
 8000896:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000898:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	4293      	cmp	r3, r2
 80008a0:	d1cf      	bne.n	8000842 <Flash_Init+0x11e>
		}

	}
	//Update global variables
	Page_Index=Temp_Page;
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <Flash_Init+0x1ac>)
 80008a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008a6:	8013      	strh	r3, [r2, #0]
	Block_Mem=(Page_Index/64);
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <Flash_Init+0x1ac>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	099b      	lsrs	r3, r3, #6
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <Flash_Init+0x1b0>)
 80008b2:	801a      	strh	r2, [r3, #0]
	USART3_Printf("Current page is: %u\r\n", Page_Index);
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <Flash_Init+0x1ac>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <Flash_Init+0x1b4>)
 80008bc:	f000 fbd6 	bl	800106c <USART3_Printf>
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24001009 	.word	0x24001009
 80008cc:	24001008 	.word	0x24001008
 80008d0:	24001096 	.word	0x24001096
 80008d4:	240010b2 	.word	0x240010b2
 80008d8:	0800ae50 	.word	0x0800ae50

080008dc <Read_Register>:

//Read all status registers
void Read_Register(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <Read_Register+0x50>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f9fb 	bl	8000ce0 <Read_Status_Register>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <Read_Register+0x54>)
 80008f0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80008f2:	2064      	movs	r0, #100	@ 0x64
 80008f4:	f000 fb90 	bl	8001018 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <Read_Register+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f9ef 	bl	8000ce0 <Read_Status_Register>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <Read_Register+0x5c>)
 8000908:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f000 fb84 	bl	8001018 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <Read_Register+0x60>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f9e3 	bl	8000ce0 <Read_Status_Register>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <Read_Register+0x64>)
 8000920:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000922:	2064      	movs	r0, #100	@ 0x64
 8000924:	f000 fb78 	bl	8001018 <delay_ns>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24001008 	.word	0x24001008
 8000930:	240010b5 	.word	0x240010b5
 8000934:	24001009 	.word	0x24001009
 8000938:	240010b6 	.word	0x240010b6
 800093c:	2400100a 	.word	0x2400100a
 8000940:	240010b7 	.word	0x240010b7

08000944 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <Write_Data+0x74>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d106      	bne.n	8000966 <Write_Data+0x22>
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <Write_Data+0x78>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <Write_Data+0x22>
		Block_Erase(0);
 8000960:	2000      	movs	r0, #0
 8000962:	f000 fb25 	bl	8000fb0 <Block_Erase>
	}
	uint16_t count=0;
 8000966:	2300      	movs	r3, #0
 8000968:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800096a:	e01c      	b.n	80009a6 <Write_Data+0x62>
		*Buffer_p=*data;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <Write_Data+0x7c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <Write_Data+0x7c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <Write_Data+0x7c>)
 800097e:	6013      	str	r3, [r2, #0]
		data++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <Write_Data+0x78>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <Write_Data+0x78>)
 8000990:	801a      	strh	r2, [r3, #0]
		count++;
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	3301      	adds	r3, #1
 8000996:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <Write_Data+0x78>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009a0:	d301      	bcc.n	80009a6 <Write_Data+0x62>
			Write_to_page();
 80009a2:	f000 f80f 	bl	80009c4 <Write_to_page>
	while(count<lenght){
 80009a6:	89fa      	ldrh	r2, [r7, #14]
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3de      	bcc.n	800096c <Write_Data+0x28>
		}
	}
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24001096 	.word	0x24001096
 80009bc:	240010b0 	.word	0x240010b0
 80009c0:	24000000 	.word	0x24000000

080009c4 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <Write_to_page+0x74>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <Write_to_page+0x2c>
		Buffer_flip=1;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <Write_to_page+0x74>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_1[0];
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <Write_to_page+0x78>)
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <Write_to_page+0x7c>)
 80009da:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <Write_to_page+0x80>)
 80009de:	2200      	movs	r2, #0
 80009e0:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 80009e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009e6:	4918      	ldr	r1, [pc, #96]	@ (8000a48 <Write_to_page+0x84>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fa0b 	bl	8000e04 <Write_Data_Buffer>
 80009ee:	e00e      	b.n	8000a0e <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <Write_to_page+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <Write_to_page+0x78>)
 80009f8:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <Write_to_page+0x84>)
 80009fa:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <Write_to_page+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 8000a02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a06:	490e      	ldr	r1, [pc, #56]	@ (8000a40 <Write_to_page+0x7c>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f9fb 	bl	8000e04 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <Write_to_page+0x88>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fa32 	bl	8000e7c <Write_Data_Flash>
	Page_Index++;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <Write_to_page+0x88>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <Write_to_page+0x88>)
 8000a22:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <Write_to_page+0x80>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <Write_to_page+0x88>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f824 	bl	8000a7c <Automatic_Block_Managment>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	240010b4 	.word	0x240010b4
 8000a3c:	24000000 	.word	0x24000000
 8000a40:	24000808 	.word	0x24000808
 8000a44:	240010b0 	.word	0x240010b0
 8000a48:	24000008 	.word	0x24000008
 8000a4c:	24001096 	.word	0x24001096

08000a50 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	80fb      	strh	r3, [r7, #6]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fa3e 	bl	8000ee4 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6838      	ldr	r0, [r7, #0]
 8000a6e:	f000 fa6b 	bl	8000f48 <Read_Data_Buffer>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	099b      	lsrs	r3, r3, #6
 8000a8a:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <Automatic_Block_Managment+0x38>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	89fa      	ldrh	r2, [r7, #14]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d007      	beq.n	8000aa6 <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa89 	bl	8000fb0 <Block_Erase>
		Block_Mem=Block;
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <Automatic_Block_Managment+0x38>)
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000aa4:	e002      	b.n	8000aac <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000aa6:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <Automatic_Block_Managment+0x38>)
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	8013      	strh	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	240010b2 	.word	0x240010b2

08000ab8 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000abe:	4824      	ldr	r0, [pc, #144]	@ (8000b50 <Chip_Erase+0x98>)
 8000ac0:	f000 fad4 	bl	800106c <USART3_Printf>
	while(command==0x00)
 8000ac4:	bf00      	nop
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <Chip_Erase+0x9c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0fb      	beq.n	8000ac6 <Chip_Erase+0xe>
	{

	}

	//ASCII for Y
	if(command == 0x59){
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <Chip_Erase+0x9c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b59      	cmp	r3, #89	@ 0x59
 8000ad4:	d135      	bne.n	8000b42 <Chip_Erase+0x8a>
		command = 0x00;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <Chip_Erase+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		USART3_Printf("Sletter minne ...\r\n");
 8000adc:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <Chip_Erase+0xa0>)
 8000ade:	f000 fac5 	bl	800106c <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	e009      	b.n	8000afc <Chip_Erase+0x44>
			Block_Erase(i*64);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa5d 	bl	8000fb0 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3301      	adds	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b02:	ddf1      	ble.n	8000ae8 <Chip_Erase+0x30>
		}
		Buffer_Index=0;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <Chip_Erase+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <Chip_Erase+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <Chip_Erase+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <Chip_Erase+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <Chip_Erase+0xb4>)
 8000b1e:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <Chip_Erase+0xb8>)
 8000b20:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 8000b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b26:	21ff      	movs	r1, #255	@ 0xff
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <Chip_Erase+0xb8>)
 8000b2a:	f009 fd07 	bl	800a53c <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 8000b2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b32:	21ff      	movs	r1, #255	@ 0xff
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <Chip_Erase+0xbc>)
 8000b36:	f009 fd01 	bl	800a53c <memset>
		USART3_Printf("Ferdig\r\n");
 8000b3a:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <Chip_Erase+0xc0>)
 8000b3c:	f000 fa96 	bl	800106c <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b40:	e002      	b.n	8000b48 <Chip_Erase+0x90>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <Chip_Erase+0xc4>)
 8000b44:	f000 fa92 	bl	800106c <USART3_Printf>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	0800ae68 	.word	0x0800ae68
 8000b54:	240010a8 	.word	0x240010a8
 8000b58:	0800ae9c 	.word	0x0800ae9c
 8000b5c:	240010b0 	.word	0x240010b0
 8000b60:	24001096 	.word	0x24001096
 8000b64:	240010b2 	.word	0x240010b2
 8000b68:	240010b4 	.word	0x240010b4
 8000b6c:	24000000 	.word	0x24000000
 8000b70:	24000008 	.word	0x24000008
 8000b74:	24000808 	.word	0x24000808
 8000b78:	0800aeb0 	.word	0x0800aeb0
 8000b7c:	0800aebc 	.word	0x0800aebc

08000b80 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b84:	b089      	sub	sp, #36	@ 0x24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	466b      	mov	r3, sp
 8000b8e:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f9a7 	bl	8000ee4 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000b96:	88f9      	ldrh	r1, [r7, #6]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	b28b      	uxth	r3, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	4691      	mov	r9, r2
 8000ba6:	f04f 0200 	mov.w	r2, #0
 8000baa:	f04f 0300 	mov.w	r3, #0
 8000bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bba:	b28b      	uxth	r3, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	f04f 0200 	mov.w	r2, #0
 8000bc6:	f04f 0300 	mov.w	r3, #0
 8000bca:	00eb      	lsls	r3, r5, #3
 8000bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd0:	00e2      	lsls	r2, r4, #3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	ebad 0d03 	sub.w	sp, sp, r3
 8000bde:	466b      	mov	r3, sp
 8000be0:	3300      	adds	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4825      	ldr	r0, [pc, #148]	@ (8000c98 <Read_Data_Cont+0x118>)
 8000c02:	f003 fb41 	bl	8004288 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4922      	ldr	r1, [pc, #136]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000c0c:	4823      	ldr	r0, [pc, #140]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c0e:	f006 fac5 	bl	800719c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	68f9      	ldr	r1, [r7, #12]
 8000c1a:	4820      	ldr	r0, [pc, #128]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c1c:	f006 fcac 	bl	8007578 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3303      	adds	r3, #3
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	330b      	adds	r3, #11
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c38:	e018      	b.n	8000c6c <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c3a:	8bf9      	ldrh	r1, [r7, #30]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <Read_Data_Cont+0x120>)
 8000c42:	f000 fa13 	bl	800106c <USART3_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	4813      	ldr	r0, [pc, #76]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c50:	f006 fc92 	bl	8007578 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	330b      	adds	r3, #11
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c72:	d103      	bne.n	8000c7c <Read_Data_Cont+0xfc>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	7bdb      	ldrb	r3, [r3, #15]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d0de      	beq.n	8000c3a <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <Read_Data_Cont+0x118>)
 8000c82:	f003 fb01 	bl	8004288 <HAL_GPIO_WritePin>
 8000c86:	46b5      	mov	sp, r6
}
 8000c88:	bf00      	nop
 8000c8a:	3724      	adds	r7, #36	@ 0x24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c92:	bf00      	nop
 8000c94:	24001088 	.word	0x24001088
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	240011a4 	.word	0x240011a4
 8000ca0:	0800aed4 	.word	0x0800aed4

08000ca4 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	csLOW();
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	4809      	ldr	r0, [pc, #36]	@ (8000cd4 <Write_Enable+0x30>)
 8000cae:	f003 faeb 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000cb2:	2364      	movs	r3, #100	@ 0x64
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <Write_Enable+0x34>)
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <Write_Enable+0x38>)
 8000cba:	f006 fa6f 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <Write_Enable+0x30>)
 8000cc4:	f003 fae0 	bl	8004288 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cc8:	2064      	movs	r0, #100	@ 0x64
 8000cca:	f000 f9a5 	bl	8001018 <delay_ns>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	24000006 	.word	0x24000006
 8000cdc:	240011a4 	.word	0x240011a4

08000ce0 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <Read_Status_Register+0x50>)
 8000cec:	220f      	movs	r2, #15
 8000cee:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <Read_Status_Register+0x50>)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <Read_Status_Register+0x54>)
 8000cfc:	f003 fac4 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000d00:	2364      	movs	r3, #100	@ 0x64
 8000d02:	2202      	movs	r2, #2
 8000d04:	490a      	ldr	r1, [pc, #40]	@ (8000d30 <Read_Status_Register+0x50>)
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <Read_Status_Register+0x58>)
 8000d08:	f006 fa48 	bl	800719c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000d0c:	2364      	movs	r3, #100	@ 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	490a      	ldr	r1, [pc, #40]	@ (8000d3c <Read_Status_Register+0x5c>)
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <Read_Status_Register+0x58>)
 8000d14:	f006 fc30 	bl	8007578 <HAL_SPI_Receive>
	csHIGH();
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <Read_Status_Register+0x54>)
 8000d1e:	f003 fab3 	bl	8004288 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <Read_Status_Register+0x5c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	24001088 	.word	0x24001088
 8000d34:	58020000 	.word	0x58020000
 8000d38:	240011a4 	.word	0x240011a4
 8000d3c:	24001090 	.word	0x24001090

08000d40 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <Write_Status_Register+0x50>)
 8000d52:	221f      	movs	r2, #31
 8000d54:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <Write_Status_Register+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <Write_Status_Register+0x50>)
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000d62:	2200      	movs	r2, #0
 8000d64:	2110      	movs	r1, #16
 8000d66:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <Write_Status_Register+0x54>)
 8000d68:	f003 fa8e 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000d6c:	2364      	movs	r3, #100	@ 0x64
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4907      	ldr	r1, [pc, #28]	@ (8000d90 <Write_Status_Register+0x50>)
 8000d72:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <Write_Status_Register+0x58>)
 8000d74:	f006 fa12 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <Write_Status_Register+0x54>)
 8000d7e:	f003 fa83 	bl	8004288 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d82:	2064      	movs	r0, #100	@ 0x64
 8000d84:	f000 f948 	bl	8001018 <delay_ns>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24001088 	.word	0x24001088
 8000d94:	58020000 	.word	0x58020000
 8000d98:	240011a4 	.word	0x240011a4

08000d9c <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2100      	movs	r1, #0
 8000da6:	460a      	mov	r2, r1
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	460a      	mov	r2, r1
 8000dac:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000dae:	2200      	movs	r2, #0
 8000db0:	2110      	movs	r1, #16
 8000db2:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <Read_ID+0x5c>)
 8000db4:	f003 fa68 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	2202      	movs	r2, #2
 8000dbc:	490f      	ldr	r1, [pc, #60]	@ (8000dfc <Read_ID+0x60>)
 8000dbe:	4810      	ldr	r0, [pc, #64]	@ (8000e00 <Read_ID+0x64>)
 8000dc0:	f006 f9ec 	bl	800719c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	2364      	movs	r3, #100	@ 0x64
 8000dc8:	2203      	movs	r2, #3
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <Read_ID+0x64>)
 8000dcc:	f006 fbd4 	bl	8007578 <HAL_SPI_Receive>
	csHIGH();
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <Read_ID+0x5c>)
 8000dd6:	f003 fa57 	bl	8004288 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dda:	2064      	movs	r0, #100	@ 0x64
 8000ddc:	f000 f91c 	bl	8001018 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	041a      	lsls	r2, r3, #16
 8000de4:	797b      	ldrb	r3, [r7, #5]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	79b9      	ldrb	r1, [r7, #6]
 8000dea:	430b      	orrs	r3, r1
 8000dec:	4313      	orrs	r3, r2
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58020000 	.word	0x58020000
 8000dfc:	24000004 	.word	0x24000004
 8000e00:	240011a4 	.word	0x240011a4

08000e04 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	80fb      	strh	r3, [r7, #6]
 8000e10:	4613      	mov	r3, r2
 8000e12:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e14:	f7ff ff46 	bl	8000ca4 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <Write_Data_Buffer+0x6c>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <Write_Data_Buffer+0x6c>)
 8000e28:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <Write_Data_Buffer+0x6c>)
 8000e30:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e32:	2200      	movs	r2, #0
 8000e34:	2110      	movs	r1, #16
 8000e36:	480f      	ldr	r0, [pc, #60]	@ (8000e74 <Write_Data_Buffer+0x70>)
 8000e38:	f003 fa26 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000e3c:	2364      	movs	r3, #100	@ 0x64
 8000e3e:	2203      	movs	r2, #3
 8000e40:	490b      	ldr	r1, [pc, #44]	@ (8000e70 <Write_Data_Buffer+0x6c>)
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <Write_Data_Buffer+0x74>)
 8000e44:	f006 f9aa 	bl	800719c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000e48:	88ba      	ldrh	r2, [r7, #4]
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <Write_Data_Buffer+0x74>)
 8000e52:	f006 f9a3 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <Write_Data_Buffer+0x70>)
 8000e5c:	f003 fa14 	bl	8004288 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e60:	2064      	movs	r0, #100	@ 0x64
 8000e62:	f000 f8d9 	bl	8001018 <delay_ns>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24001088 	.word	0x24001088
 8000e74:	58020000 	.word	0x58020000
 8000e78:	240011a4 	.word	0x240011a4

08000e7c <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000e86:	f7ff ff0d 	bl	8000ca4 <Write_Enable>
	Tx_Buffer[0]=OP_Program_Ex;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <Write_Data_Flash+0x5c>)
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <Write_Data_Flash+0x5c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <Write_Data_Flash+0x5c>)
 8000ea0:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <Write_Data_Flash+0x5c>)
 8000ea8:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <Write_Data_Flash+0x60>)
 8000eb0:	f003 f9ea 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000eb4:	2364      	movs	r3, #100	@ 0x64
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <Write_Data_Flash+0x5c>)
 8000eba:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <Write_Data_Flash+0x64>)
 8000ebc:	f006 f96e 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <Write_Data_Flash+0x60>)
 8000ec6:	f003 f9df 	bl	8004288 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000eca:	f000 f8f5 	bl	80010b8 <W25N_WaitForReady>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	24001088 	.word	0x24001088
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	240011a4 	.word	0x240011a4

08000ee4 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <Select_Page_Read+0x58>)
 8000ef0:	2213      	movs	r2, #19
 8000ef2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <Select_Page_Read+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <Select_Page_Read+0x58>)
 8000f04:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <Select_Page_Read+0x58>)
 8000f0c:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2110      	movs	r1, #16
 8000f12:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <Select_Page_Read+0x5c>)
 8000f14:	f003 f9b8 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <Select_Page_Read+0x58>)
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <Select_Page_Read+0x60>)
 8000f20:	f006 f93c 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <Select_Page_Read+0x5c>)
 8000f2a:	f003 f9ad 	bl	8004288 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f2e:	f000 f8c3 	bl	80010b8 <W25N_WaitForReady>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24001088 	.word	0x24001088
 8000f40:	58020000 	.word	0x58020000
 8000f44:	240011a4 	.word	0x240011a4

08000f48 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <Read_Data_Buffer+0x5c>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <Read_Data_Buffer+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <Read_Data_Buffer+0x5c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <Read_Data_Buffer+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <Read_Data_Buffer+0x60>)
 8000f72:	f003 f989 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	2204      	movs	r2, #4
 8000f7a:	490a      	ldr	r1, [pc, #40]	@ (8000fa4 <Read_Data_Buffer+0x5c>)
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <Read_Data_Buffer+0x64>)
 8000f7e:	f006 f90d 	bl	800719c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4808      	ldr	r0, [pc, #32]	@ (8000fac <Read_Data_Buffer+0x64>)
 8000f8c:	f006 faf4 	bl	8007578 <HAL_SPI_Receive>
	csHIGH();
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <Read_Data_Buffer+0x60>)
 8000f96:	f003 f977 	bl	8004288 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24001088 	.word	0x24001088
 8000fa8:	58020000 	.word	0x58020000
 8000fac:	240011a4 	.word	0x240011a4

08000fb0 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000fba:	f7ff fe73 	bl	8000ca4 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <Block_Erase+0x5c>)
 8000fc0:	22d8      	movs	r2, #216	@ 0xd8
 8000fc2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <Block_Erase+0x5c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <Block_Erase+0x5c>)
 8000fd4:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <Block_Erase+0x5c>)
 8000fdc:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	480b      	ldr	r0, [pc, #44]	@ (8001010 <Block_Erase+0x60>)
 8000fe4:	f003 f950 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	2204      	movs	r2, #4
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <Block_Erase+0x5c>)
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <Block_Erase+0x64>)
 8000ff0:	f006 f8d4 	bl	800719c <HAL_SPI_Transmit>
	csHIGH();
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <Block_Erase+0x60>)
 8000ffa:	f003 f945 	bl	8004288 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ffe:	f000 f85b 	bl	80010b8 <W25N_WaitForReady>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	24001088 	.word	0x24001088
 8001010:	58020000 	.word	0x58020000
 8001014:	240011a4 	.word	0x240011a4

08001018 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <delay_ns+0x48>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0a5b      	lsrs	r3, r3, #9
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <delay_ns+0x4c>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	09db      	lsrs	r3, r3, #7
 800102e:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <delay_ns+0x50>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001040:	bf00      	nop
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <delay_ns+0x50>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f8      	bhi.n	8001042 <delay_ns+0x2a>
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2400100c 	.word	0x2400100c
 8001064:	00044b83 	.word	0x00044b83
 8001068:	e0001000 	.word	0xe0001000

0800106c <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 800106c:	b40f      	push	{r0, r1, r2, r3}
 800106e:	b580      	push	{r7, lr}
 8001070:	b0a2      	sub	sp, #136	@ 0x88
 8001072:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001074:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001078:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800107a:	f107 0008 	add.w	r0, r7, #8
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	f009 fa4b 	bl	800a520 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f926 	bl	80002e0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <USART3_Printf+0x48>)
 80010a2:	f006 fe14 	bl	8007cce <HAL_UART_Transmit>
}
 80010a6:	bf00      	nop
 80010a8:	3788      	adds	r7, #136	@ 0x88
 80010aa:	46bd      	mov	sp, r7
 80010ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr
 80010b4:	2400122c 	.word	0x2400122c

080010b8 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80010bc:	2064      	movs	r0, #100	@ 0x64
 80010be:	f7ff ffab 	bl	8001018 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80010c2:	e002      	b.n	80010ca <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80010c4:	2064      	movs	r0, #100	@ 0x64
 80010c6:	f7ff ffa7 	bl	8001018 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <W25N_WaitForReady+0x2c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe06 	bl	8000ce0 <Read_Status_Register>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f2      	bne.n	80010c4 <W25N_WaitForReady+0xc>
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2400100a 	.word	0x2400100a

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010ec:	f000 fa84 	bl	80015f8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fe14 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f860 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fa06 	bl	8001508 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80010fc:	f000 f8d8 	bl	80012b0 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001100:	f000 f960 	bl	80013c4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001104:	f000 f9b4 	bl	8001470 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &command,1);
 8001108:	2201      	movs	r2, #1
 800110a:	4925      	ldr	r1, [pc, #148]	@ (80011a0 <main+0xb8>)
 800110c:	4825      	ldr	r0, [pc, #148]	@ (80011a4 <main+0xbc>)
 800110e:	f006 fe6d 	bl	8007dec <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <main+0xc0>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <main+0xc0>)
 8001118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800111c:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 800111e:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <main+0xc4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <main+0xc4>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fafa 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8001130:	f7ff fe34 	bl	8000d9c <Read_ID>
 8001134:	4603      	mov	r3, r0
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <main+0xc8>)
 8001138:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  Read_Register();
 800113a:	f7ff fbcf 	bl	80008dc <Read_Register>

	  //Read
	  if(command==0x31){
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <main+0xb8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b31      	cmp	r3, #49	@ 0x31
 8001144:	d105      	bne.n	8001152 <main+0x6a>
		  command = 0;
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <main+0xb8>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		  Read_Data_Cont(16);
 800114c:	2010      	movs	r0, #16
 800114e:	f7ff fd17 	bl	8000b80 <Read_Data_Cont>
	  }

	  //Start
	  if(command==0x32){
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <main+0xb8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b32      	cmp	r3, #50	@ 0x32
 8001158:	d109      	bne.n	800116e <main+0x86>
		  command=0;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <main+0xb8>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
		  Start_Flight_Recording=1;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <main+0xcc>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8001166:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800116a:	f7ff faa7 	bl	80006bc <CAN_SendMessage>
	  }

	  //Stop
	  if(command==0x33){
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <main+0xb8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b33      	cmp	r3, #51	@ 0x33
 8001174:	d109      	bne.n	800118a <main+0xa2>
		  Start_Flight_Recording=0;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <main+0xcc>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		  command=0;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <main+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8001182:	f240 1001 	movw	r0, #257	@ 0x101
 8001186:	f7ff fa99 	bl	80006bc <CAN_SendMessage>
	  }

	  if(command==0x34){
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <main+0xb8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b34      	cmp	r3, #52	@ 0x34
 8001190:	d1d3      	bne.n	800113a <main+0x52>
		  command=0;
 8001192:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <main+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		  Chip_Erase();
 8001198:	f7ff fc8e 	bl	8000ab8 <Chip_Erase>
	  Read_Register();
 800119c:	e7cd      	b.n	800113a <main+0x52>
 800119e:	bf00      	nop
 80011a0:	240010a8 	.word	0x240010a8
 80011a4:	2400122c 	.word	0x2400122c
 80011a8:	e000edf0 	.word	0xe000edf0
 80011ac:	e0001000 	.word	0xe0001000
 80011b0:	240010ac 	.word	0x240010ac
 80011b4:	24001095 	.word	0x24001095

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	@ 0x70
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	224c      	movs	r2, #76	@ 0x4c
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 f9b8 	bl	800a53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2220      	movs	r2, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 f9b2 	bl	800a53c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011d8:	2002      	movs	r0, #2
 80011da:	f003 f86f 	bl	80042bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <SystemClock_Config+0xf4>)
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <SystemClock_Config+0xf4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <SystemClock_Config+0xf4>)
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001210:	bf00      	nop
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemClock_Config+0xf0>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800121e:	d1f8      	bne.n	8001212 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001224:	2301      	movs	r3, #1
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2340      	movs	r3, #64	@ 0x40
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001238:	233c      	movs	r3, #60	@ 0x3c
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001240:	230a      	movs	r3, #10
 8001242:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001248:	230c      	movs	r3, #12
 800124a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800124c:	2300      	movs	r3, #0
 800124e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f869 	bl	8004330 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001264:	f000 f9f4 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	233f      	movs	r3, #63	@ 0x3f
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2303      	movs	r3, #3
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001274:	2308      	movs	r3, #8
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001284:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001286:	2340      	movs	r3, #64	@ 0x40
 8001288:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fca8 	bl	8004be4 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800129a:	f000 f9d9 	bl	8001650 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3770      	adds	r7, #112	@ 0x70
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	58024800 	.word	0x58024800
 80012ac:	58000400 	.word	0x58000400

080012b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80012b6:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012bc:	4a3e      	ldr	r2, [pc, #248]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80012c6:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012d6:	4a3a      	ldr	r2, [pc, #232]	@ (80013c0 <MX_FDCAN1_Init+0x110>)
 80012d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012f2:	4b32      	ldr	r3, [pc, #200]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001300:	2202      	movs	r2, #2
 8001302:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001304:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001306:	2205      	movs	r2, #5
 8001308:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800130c:	2202      	movs	r2, #2
 800130e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001312:	2201      	movs	r2, #1
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001318:	2203      	movs	r2, #3
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800131e:	2204      	movs	r2, #4
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001324:	2203      	movs	r2, #3
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001330:	2200      	movs	r2, #0
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001334:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001336:	2200      	movs	r2, #0
 8001338:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800133c:	2240      	movs	r2, #64	@ 0x40
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001342:	2204      	movs	r2, #4
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001348:	2200      	movs	r2, #0
 800134a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800134e:	2204      	movs	r2, #4
 8001350:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001354:	2200      	movs	r2, #0
 8001356:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800135a:	2204      	movs	r2, #4
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001360:	2200      	movs	r2, #0
 8001362:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001366:	2200      	movs	r2, #0
 8001368:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800136c:	2202      	movs	r2, #2
 800136e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001372:	2200      	movs	r2, #0
 8001374:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001378:	2204      	movs	r2, #4
 800137a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800137c:	480f      	ldr	r0, [pc, #60]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800137e:	f001 fc7b 	bl	8002c78 <HAL_FDCAN_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001388:	f000 f962 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800138c:	480b      	ldr	r0, [pc, #44]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800138e:	f001 fe51 	bl	8003034 <HAL_FDCAN_Start>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001398:	f000 f95a 	bl	8001650 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80013a2:	f002 f839 	bl	8003418 <HAL_FDCAN_ActivateNotification>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80013ac:	f000 f950 	bl	8001650 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	24001104 	.word	0x24001104
 80013c0:	4000a000 	.word	0x4000a000

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013ca:	4a28      	ldr	r2, [pc, #160]	@ (800146c <MX_SPI1_Init+0xa8>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013de:	2207      	movs	r2, #7
 80013e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001456:	f005 fd7d 	bl	8006f54 <HAL_SPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001460:	f000 f8f6 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	240011a4 	.word	0x240011a4
 800146c:	40013000 	.word	0x40013000

08001470 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001476:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <MX_USART3_UART_Init+0x94>)
 8001478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b8:	4811      	ldr	r0, [pc, #68]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ba:	f006 fbb8 	bl	8007c2e <HAL_UART_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c4:	f000 f8c4 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014cc:	f008 ff2f 	bl	800a32e <HAL_UARTEx_SetTxFifoThreshold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f000 f8bb 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014de:	f008 ff64 	bl	800a3aa <HAL_UARTEx_SetRxFifoThreshold>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f000 f8b2 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ee:	f008 fee5 	bl	800a2bc <HAL_UARTEx_DisableFifoMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 f8aa 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2400122c 	.word	0x2400122c
 8001504:	40004800 	.word	0x40004800

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	4a31      	ldr	r2, [pc, #196]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a2a      	ldr	r2, [pc, #168]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001560:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <MX_GPIO_Init+0xe4>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_GPIO_Init+0xe4>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2110      	movs	r1, #16
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <MX_GPIO_Init+0xe8>)
 800159c:	f002 fe74 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <MX_GPIO_Init+0xec>)
 80015a6:	f002 fe6f 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80015aa:	2310      	movs	r3, #16
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <MX_GPIO_Init+0xe8>)
 80015c2:	f002 fcb1 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80015c6:	2310      	movs	r3, #16
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_GPIO_Init+0xec>)
 80015de:	f002 fca3 	bl	8003f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58020000 	.word	0x58020000
 80015f4:	58021800 	.word	0x58021800

080015f8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800160a:	f000 fd59 	bl	80020c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800160e:	2301      	movs	r3, #1
 8001610:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001612:	2300      	movs	r3, #0
 8001614:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800161a:	231f      	movs	r3, #31
 800161c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800161e:	2387      	movs	r3, #135	@ 0x87
 8001620:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001622:	2300      	movs	r3, #0
 8001624:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001626:	2300      	movs	r3, #0
 8001628:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800163a:	463b      	mov	r3, r7
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fd77 	bl	8002130 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001642:	2004      	movs	r0, #4
 8001644:	f000 fd54 	bl	80020f0 <HAL_MPU_Enable>

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <Error_Handler+0x10>)
 8001656:	f001 fced 	bl	8003034 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24001104 	.word	0x24001104

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_MspInit+0x30>)
 800166c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001670:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_MspInit+0x30>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_MspInit+0x30>)
 800167c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	58024400 	.word	0x58024400

08001698 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ba      	sub	sp, #232	@ 0xe8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	22c0      	movs	r2, #192	@ 0xc0
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 ff3f 	bl	800a53c <memset>
  if(hfdcan->Instance==FDCAN1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a33      	ldr	r2, [pc, #204]	@ (8001790 <HAL_FDCAN_MspInit+0xf8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d15f      	bne.n	8001788 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80016d4:	2304      	movs	r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80016d8:	230a      	movs	r3, #10
 80016da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80016e0:	2314      	movs	r3, #20
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016e8:	23c0      	movs	r3, #192	@ 0xc0
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80016ec:	2320      	movs	r3, #32
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80016f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fdfb 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800170c:	f7ff ffa0 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001712:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001716:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001722:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_FDCAN_MspInit+0xfc>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001750:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001766:	2309      	movs	r3, #9
 8001768:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001770:	4619      	mov	r1, r3
 8001772:	4809      	ldr	r0, [pc, #36]	@ (8001798 <HAL_FDCAN_MspInit+0x100>)
 8001774:	f002 fbd8 	bl	8003f28 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2013      	movs	r0, #19
 800177e:	f000 fc6a 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001782:	2013      	movs	r0, #19
 8001784:	f000 fc81 	bl	800208a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	37e8      	adds	r7, #232	@ 0xe8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	4000a000 	.word	0x4000a000
 8001794:	58024400 	.word	0x58024400
 8001798:	58020400 	.word	0x58020400

0800179c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ba      	sub	sp, #232	@ 0xe8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	22c0      	movs	r2, #192	@ 0xc0
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 febd 	bl	800a53c <memset>
  if(hspi->Instance==SPI1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_SPI_MspInit+0xc4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d144      	bne.n	8001856 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017d8:	2300      	movs	r3, #0
 80017da:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fd8b 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017ec:	f7ff ff30 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 80017f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 8001802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001814:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_SPI_MspInit+0xc8>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800182c:	23e0      	movs	r3, #224	@ 0xe0
 800182e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001844:	2305      	movs	r3, #5
 8001846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_SPI_MspInit+0xcc>)
 8001852:	f002 fb69 	bl	8003f28 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001856:	bf00      	nop
 8001858:	37e8      	adds	r7, #232	@ 0xe8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	58024400 	.word	0x58024400
 8001868:	58020000 	.word	0x58020000

0800186c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ba      	sub	sp, #232	@ 0xe8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	22c0      	movs	r2, #192	@ 0xc0
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f008 fe55 	bl	800a53c <memset>
  if(huart->Instance==USART3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <HAL_UART_MspInit+0xd8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d14e      	bne.n	800193a <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800189c:	f04f 0202 	mov.w	r2, #2
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fd22 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018be:	f7ff fec7 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_UART_MspInit+0xdc>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001918:	2307      	movs	r3, #7
 800191a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001922:	4619      	mov	r1, r3
 8001924:	4809      	ldr	r0, [pc, #36]	@ (800194c <HAL_UART_MspInit+0xe0>)
 8001926:	f002 faff 	bl	8003f28 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2027      	movs	r0, #39	@ 0x27
 8001930:	f000 fb91 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001934:	2027      	movs	r0, #39	@ 0x27
 8001936:	f000 fba8 	bl	800208a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800193a:	bf00      	nop
 800193c:	37e8      	adds	r7, #232	@ 0xe8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40004800 	.word	0x40004800
 8001948:	58024400 	.word	0x58024400
 800194c:	58020c00 	.word	0x58020c00

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 fa2a 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <SysTick_Handler+0x28>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <SysTick_Handler+0x2c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <SysTick_Handler+0x2c>)
 80019bc:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	e002      	b.n	80019c6 <SysTick_Handler+0x22>
	  CLK_SIM=0;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <SysTick_Handler+0x2c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24001095 	.word	0x24001095
 80019d0:	240012c0 	.word	0x240012c0

080019d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80019da:	f001 fd97 	bl	800350c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24001104 	.word	0x24001104

080019e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <USART3_IRQHandler+0x10>)
 80019ee:	f006 fa49 	bl	8007e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2400122c 	.word	0x2400122c

080019fc <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001a06:	e03f      	b.n	8001a88 <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8001a08:	23f0      	movs	r3, #240	@ 0xf0
 8001a0a:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	3301      	adds	r3, #1
 8001a16:	b292      	uxth	r2, r2
 8001a18:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a28:	789b      	ldrb	r3, [r3, #2]
 8001a2a:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a2e:	78db      	ldrb	r3, [r3, #3]
 8001a30:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a40:	799b      	ldrb	r3, [r3, #6]
 8001a42:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e1b      	lsrs	r3, r3, #24
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8001a70:	230f      	movs	r3, #15
 8001a72:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	2110      	movs	r1, #16
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe ff5e 	bl	8000944 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a8a:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001a8c:	2140      	movs	r1, #64	@ 0x40
 8001a8e:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001a90:	f001 fb56 	bl	8003140 <HAL_FDCAN_GetRxMessage>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0b6      	beq.n	8001a08 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	240010b8 	.word	0x240010b8
 8001aa8:	240010a0 	.word	0x240010a0
 8001aac:	240012c0 	.word	0x240012c0
 8001ab0:	24001095 	.word	0x24001095
 8001ab4:	24001104 	.word	0x24001104

08001ab8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <HAL_UART_RxCpltCallback+0x24>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d104      	bne.n	8001ad4 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart3, &command,1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	4904      	ldr	r1, [pc, #16]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x28>)
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x2c>)
 8001ad0:	f006 f98c 	bl	8007dec <HAL_UART_Receive_IT>
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	240010a8 	.word	0x240010a8
 8001ae4:	2400122c 	.word	0x2400122c

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f008 fd18 	bl	800a54c <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24080000 	.word	0x24080000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	240012c4 	.word	0x240012c4
 8001b50:	24001418 	.word	0x24001418

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b58:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <SystemInit+0x114>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a42      	ldr	r2, [pc, #264]	@ (8001c68 <SystemInit+0x114>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b68:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <SystemInit+0x118>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	2b06      	cmp	r3, #6
 8001b72:	d807      	bhi.n	8001b84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b74:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <SystemInit+0x118>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 030f 	bic.w	r3, r3, #15
 8001b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c6c <SystemInit+0x118>)
 8001b7e:	f043 0307 	orr.w	r3, r3, #7
 8001b82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b84:	4b3a      	ldr	r3, [pc, #232]	@ (8001c70 <SystemInit+0x11c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a39      	ldr	r2, [pc, #228]	@ (8001c70 <SystemInit+0x11c>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b90:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <SystemInit+0x11c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b96:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <SystemInit+0x11c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <SystemInit+0x11c>)
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <SystemInit+0x120>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba2:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <SystemInit+0x118>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bae:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <SystemInit+0x118>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c6c <SystemInit+0x118>)
 8001bb8:	f043 0307 	orr.w	r3, r3, #7
 8001bbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <SystemInit+0x11c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <SystemInit+0x11c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bca:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <SystemInit+0x11c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <SystemInit+0x11c>)
 8001bd2:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <SystemInit+0x124>)
 8001bd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <SystemInit+0x11c>)
 8001bd8:	4a28      	ldr	r2, [pc, #160]	@ (8001c7c <SystemInit+0x128>)
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <SystemInit+0x11c>)
 8001bde:	4a28      	ldr	r2, [pc, #160]	@ (8001c80 <SystemInit+0x12c>)
 8001be0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001be2:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <SystemInit+0x11c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <SystemInit+0x11c>)
 8001bea:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <SystemInit+0x12c>)
 8001bec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <SystemInit+0x11c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <SystemInit+0x11c>)
 8001bf6:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <SystemInit+0x12c>)
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <SystemInit+0x11c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <SystemInit+0x11c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <SystemInit+0x11c>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <SystemInit+0x11c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <SystemInit+0x130>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <SystemInit+0x134>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c1e:	d202      	bcs.n	8001c26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <SystemInit+0x138>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <SystemInit+0x11c>)
 8001c28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d113      	bne.n	8001c5c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <SystemInit+0x11c>)
 8001c36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <SystemInit+0x11c>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <SystemInit+0x13c>)
 8001c46:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <SystemInit+0x11c>)
 8001c4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <SystemInit+0x11c>)
 8001c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00
 8001c6c:	52002000 	.word	0x52002000
 8001c70:	58024400 	.word	0x58024400
 8001c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c78:	02020200 	.word	0x02020200
 8001c7c:	01ff0000 	.word	0x01ff0000
 8001c80:	01010280 	.word	0x01010280
 8001c84:	5c001000 	.word	0x5c001000
 8001c88:	ffff0000 	.word	0xffff0000
 8001c8c:	51008108 	.word	0x51008108
 8001c90:	52004000 	.word	0x52004000

08001c94 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <ExitRun0Mode+0x2c>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <ExitRun0Mode+0x2c>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ca4:	bf00      	nop
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <ExitRun0Mode+0x2c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f9      	beq.n	8001ca6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	58024800 	.word	0x58024800

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001cc8:	f7ff ffe4 	bl	8001c94 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ccc:	f7ff ff42 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f008 fc2f 	bl	800a558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f9f5 	bl	80010e8 <main>
  bx  lr
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d08:	2400106c 	.word	0x2400106c
  ldr r2, =_sidata
 8001d0c:	0800afcc 	.word	0x0800afcc
  ldr r2, =_sbss
 8001d10:	2400106c 	.word	0x2400106c
  ldr r4, =_ebss
 8001d14:	24001414 	.word	0x24001414

08001d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC3_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f000 f98c 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d28:	f003 f912 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_Init+0x68>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4913      	ldr	r1, [pc, #76]	@ (8001d88 <HAL_Init+0x6c>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_Init+0x68>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <HAL_Init+0x6c>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d8c <HAL_Init+0x70>)
 8001d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d60:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_Init+0x74>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f814 	bl	8001d94 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e002      	b.n	8001d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d76:	f7ff fc75 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024400 	.word	0x58024400
 8001d88:	0800af40 	.word	0x0800af40
 8001d8c:	24001010 	.word	0x24001010
 8001d90:	2400100c 	.word	0x2400100c

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d9c:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_InitTick+0x60>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e021      	b.n	8001dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <HAL_InitTick+0x64>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_InitTick+0x60>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f971 	bl	80020a6 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 f93b 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x68>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	24001018 	.word	0x24001018
 8001df8:	2400100c 	.word	0x2400100c
 8001dfc:	24001014 	.word	0x24001014

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	24001018 	.word	0x24001018
 8001e24:	240012c8 	.word	0x240012c8

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	240012c8 	.word	0x240012c8

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	24001018 	.word	0x24001018

08001e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_GetREVID+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	5c001000 	.word	0x5c001000

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	05fa0000 	.word	0x05fa0000

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff40 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff90 	bl	8001f94 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5f 	bl	8001f40 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff33 	bl	8001f04 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa4 	bl	8001ffc <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020c4:	f3bf 8f5f 	dmb	sy
}
 80020c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_MPU_Disable+0x28>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	4a06      	ldr	r2, [pc, #24]	@ (80020e8 <HAL_MPU_Disable+0x28>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <HAL_MPU_Disable+0x2c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	e000ed90 	.word	0xe000ed90

080020f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <HAL_MPU_Enable+0x38>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_MPU_Enable+0x3c>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_MPU_Enable+0x3c>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800210e:	f3bf 8f4f 	dsb	sy
}
 8002112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002114:	f3bf 8f6f 	isb	sy
}
 8002118:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed90 	.word	0xe000ed90
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	785a      	ldrb	r2, [r3, #1]
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_MPU_ConfigRegion+0x7c>)
 800213e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <HAL_MPU_ConfigRegion+0x7c>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <HAL_MPU_ConfigRegion+0x7c>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_MPU_ConfigRegion+0x7c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7b1b      	ldrb	r3, [r3, #12]
 8002158:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7adb      	ldrb	r3, [r3, #11]
 800215e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7a9b      	ldrb	r3, [r3, #10]
 8002166:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7b5b      	ldrb	r3, [r3, #13]
 800216e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002170:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7b9b      	ldrb	r3, [r3, #14]
 8002176:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002178:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7bdb      	ldrb	r3, [r3, #15]
 800217e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002180:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7a5b      	ldrb	r3, [r3, #9]
 8002186:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7a1b      	ldrb	r3, [r3, #8]
 800218e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002190:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800219a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800219c:	6113      	str	r3, [r2, #16]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed90 	.word	0xe000ed90

080021b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff fe36 	bl	8001e28 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e2dc      	b.n	8002782 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e2cd      	b.n	8002782 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a76      	ldr	r2, [pc, #472]	@ (80023c4 <HAL_DMA_Abort+0x214>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04a      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a74      	ldr	r2, [pc, #464]	@ (80023c8 <HAL_DMA_Abort+0x218>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d045      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a73      	ldr	r2, [pc, #460]	@ (80023cc <HAL_DMA_Abort+0x21c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d040      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a71      	ldr	r2, [pc, #452]	@ (80023d0 <HAL_DMA_Abort+0x220>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d03b      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a70      	ldr	r2, [pc, #448]	@ (80023d4 <HAL_DMA_Abort+0x224>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d036      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6e      	ldr	r2, [pc, #440]	@ (80023d8 <HAL_DMA_Abort+0x228>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d031      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6d      	ldr	r2, [pc, #436]	@ (80023dc <HAL_DMA_Abort+0x22c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d02c      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6b      	ldr	r2, [pc, #428]	@ (80023e0 <HAL_DMA_Abort+0x230>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d027      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6a      	ldr	r2, [pc, #424]	@ (80023e4 <HAL_DMA_Abort+0x234>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a68      	ldr	r2, [pc, #416]	@ (80023e8 <HAL_DMA_Abort+0x238>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01d      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a67      	ldr	r2, [pc, #412]	@ (80023ec <HAL_DMA_Abort+0x23c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d018      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a65      	ldr	r2, [pc, #404]	@ (80023f0 <HAL_DMA_Abort+0x240>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a64      	ldr	r2, [pc, #400]	@ (80023f4 <HAL_DMA_Abort+0x244>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a62      	ldr	r2, [pc, #392]	@ (80023f8 <HAL_DMA_Abort+0x248>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a61      	ldr	r2, [pc, #388]	@ (80023fc <HAL_DMA_Abort+0x24c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort+0xd6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5f      	ldr	r2, [pc, #380]	@ (8002400 <HAL_DMA_Abort+0x250>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_DMA_Abort+0xda>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_DMA_Abort+0xdc>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 021e 	bic.w	r2, r2, #30
 800229e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e00a      	b.n	80022ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 020e 	bic.w	r2, r2, #14
 80022c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a3c      	ldr	r2, [pc, #240]	@ (80023c4 <HAL_DMA_Abort+0x214>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d072      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3a      	ldr	r2, [pc, #232]	@ (80023c8 <HAL_DMA_Abort+0x218>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d06d      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a39      	ldr	r2, [pc, #228]	@ (80023cc <HAL_DMA_Abort+0x21c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d068      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a37      	ldr	r2, [pc, #220]	@ (80023d0 <HAL_DMA_Abort+0x220>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d063      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a36      	ldr	r2, [pc, #216]	@ (80023d4 <HAL_DMA_Abort+0x224>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d05e      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a34      	ldr	r2, [pc, #208]	@ (80023d8 <HAL_DMA_Abort+0x228>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d059      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a33      	ldr	r2, [pc, #204]	@ (80023dc <HAL_DMA_Abort+0x22c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d054      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <HAL_DMA_Abort+0x230>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04f      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a30      	ldr	r2, [pc, #192]	@ (80023e4 <HAL_DMA_Abort+0x234>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d04a      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <HAL_DMA_Abort+0x238>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d045      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <HAL_DMA_Abort+0x23c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d040      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <HAL_DMA_Abort+0x240>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d03b      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <HAL_DMA_Abort+0x244>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d036      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <HAL_DMA_Abort+0x248>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d031      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a27      	ldr	r2, [pc, #156]	@ (80023fc <HAL_DMA_Abort+0x24c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d02c      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <HAL_DMA_Abort+0x250>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d027      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <HAL_DMA_Abort+0x254>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a22      	ldr	r2, [pc, #136]	@ (8002408 <HAL_DMA_Abort+0x258>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01d      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a21      	ldr	r2, [pc, #132]	@ (800240c <HAL_DMA_Abort+0x25c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d018      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <HAL_DMA_Abort+0x260>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1e      	ldr	r2, [pc, #120]	@ (8002414 <HAL_DMA_Abort+0x264>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <HAL_DMA_Abort+0x268>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <HAL_DMA_Abort+0x26c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_DMA_Abort+0x20e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	@ (8002420 <HAL_DMA_Abort+0x270>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d132      	bne.n	8002424 <HAL_DMA_Abort+0x274>
 80023be:	2301      	movs	r3, #1
 80023c0:	e031      	b.n	8002426 <HAL_DMA_Abort+0x276>
 80023c2:	bf00      	nop
 80023c4:	40020010 	.word	0x40020010
 80023c8:	40020028 	.word	0x40020028
 80023cc:	40020040 	.word	0x40020040
 80023d0:	40020058 	.word	0x40020058
 80023d4:	40020070 	.word	0x40020070
 80023d8:	40020088 	.word	0x40020088
 80023dc:	400200a0 	.word	0x400200a0
 80023e0:	400200b8 	.word	0x400200b8
 80023e4:	40020410 	.word	0x40020410
 80023e8:	40020428 	.word	0x40020428
 80023ec:	40020440 	.word	0x40020440
 80023f0:	40020458 	.word	0x40020458
 80023f4:	40020470 	.word	0x40020470
 80023f8:	40020488 	.word	0x40020488
 80023fc:	400204a0 	.word	0x400204a0
 8002400:	400204b8 	.word	0x400204b8
 8002404:	58025408 	.word	0x58025408
 8002408:	5802541c 	.word	0x5802541c
 800240c:	58025430 	.word	0x58025430
 8002410:	58025444 	.word	0x58025444
 8002414:	58025458 	.word	0x58025458
 8002418:	5802546c 	.word	0x5802546c
 800241c:	58025480 	.word	0x58025480
 8002420:	58025494 	.word	0x58025494
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6d      	ldr	r2, [pc, #436]	@ (80025f4 <HAL_DMA_Abort+0x444>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d04a      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6b      	ldr	r2, [pc, #428]	@ (80025f8 <HAL_DMA_Abort+0x448>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d045      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6a      	ldr	r2, [pc, #424]	@ (80025fc <HAL_DMA_Abort+0x44c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d040      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a68      	ldr	r2, [pc, #416]	@ (8002600 <HAL_DMA_Abort+0x450>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d03b      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a67      	ldr	r2, [pc, #412]	@ (8002604 <HAL_DMA_Abort+0x454>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d036      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_DMA_Abort+0x458>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a64      	ldr	r2, [pc, #400]	@ (800260c <HAL_DMA_Abort+0x45c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d02c      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a62      	ldr	r2, [pc, #392]	@ (8002610 <HAL_DMA_Abort+0x460>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d027      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a61      	ldr	r2, [pc, #388]	@ (8002614 <HAL_DMA_Abort+0x464>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5f      	ldr	r2, [pc, #380]	@ (8002618 <HAL_DMA_Abort+0x468>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5e      	ldr	r2, [pc, #376]	@ (800261c <HAL_DMA_Abort+0x46c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002620 <HAL_DMA_Abort+0x470>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002624 <HAL_DMA_Abort+0x474>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a59      	ldr	r2, [pc, #356]	@ (8002628 <HAL_DMA_Abort+0x478>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a58      	ldr	r2, [pc, #352]	@ (800262c <HAL_DMA_Abort+0x47c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_DMA_Abort+0x32a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a56      	ldr	r2, [pc, #344]	@ (8002630 <HAL_DMA_Abort+0x480>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <HAL_DMA_Abort+0x33c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e007      	b.n	80024fc <HAL_DMA_Abort+0x34c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024fc:	e013      	b.n	8002526 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024fe:	f7ff fc93 	bl	8001e28 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b05      	cmp	r3, #5
 800250a:	d90c      	bls.n	8002526 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e12d      	b.n	8002782 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e5      	bne.n	80024fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2f      	ldr	r2, [pc, #188]	@ (80025f4 <HAL_DMA_Abort+0x444>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04a      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_DMA_Abort+0x448>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d045      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <HAL_DMA_Abort+0x44c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d040      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_DMA_Abort+0x450>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d03b      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_DMA_Abort+0x454>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d036      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_DMA_Abort+0x458>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d031      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a26      	ldr	r2, [pc, #152]	@ (800260c <HAL_DMA_Abort+0x45c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d02c      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <HAL_DMA_Abort+0x460>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d027      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <HAL_DMA_Abort+0x464>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <HAL_DMA_Abort+0x468>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01d      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_DMA_Abort+0x46c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <HAL_DMA_Abort+0x470>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <HAL_DMA_Abort+0x474>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_DMA_Abort+0x478>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <HAL_DMA_Abort+0x47c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort+0x422>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <HAL_DMA_Abort+0x480>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_DMA_Abort+0x426>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_DMA_Abort+0x428>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02b      	beq.n	8002634 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	223f      	movs	r2, #63	@ 0x3f
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	e02a      	b.n	800264a <HAL_DMA_Abort+0x49a>
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <HAL_DMA_Abort+0x5dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d072      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4d      	ldr	r2, [pc, #308]	@ (8002790 <HAL_DMA_Abort+0x5e0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d06d      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4c      	ldr	r2, [pc, #304]	@ (8002794 <HAL_DMA_Abort+0x5e4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d068      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_DMA_Abort+0x5e8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d063      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a49      	ldr	r2, [pc, #292]	@ (800279c <HAL_DMA_Abort+0x5ec>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d05e      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <HAL_DMA_Abort+0x5f0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d059      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a46      	ldr	r2, [pc, #280]	@ (80027a4 <HAL_DMA_Abort+0x5f4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d054      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a44      	ldr	r2, [pc, #272]	@ (80027a8 <HAL_DMA_Abort+0x5f8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d04f      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a43      	ldr	r2, [pc, #268]	@ (80027ac <HAL_DMA_Abort+0x5fc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04a      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a41      	ldr	r2, [pc, #260]	@ (80027b0 <HAL_DMA_Abort+0x600>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d045      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a40      	ldr	r2, [pc, #256]	@ (80027b4 <HAL_DMA_Abort+0x604>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d040      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3e      	ldr	r2, [pc, #248]	@ (80027b8 <HAL_DMA_Abort+0x608>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d03b      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <HAL_DMA_Abort+0x60c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d036      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3b      	ldr	r2, [pc, #236]	@ (80027c0 <HAL_DMA_Abort+0x610>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3a      	ldr	r2, [pc, #232]	@ (80027c4 <HAL_DMA_Abort+0x614>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d02c      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	@ (80027c8 <HAL_DMA_Abort+0x618>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d027      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a37      	ldr	r2, [pc, #220]	@ (80027cc <HAL_DMA_Abort+0x61c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a35      	ldr	r2, [pc, #212]	@ (80027d0 <HAL_DMA_Abort+0x620>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01d      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <HAL_DMA_Abort+0x624>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <HAL_DMA_Abort+0x628>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a31      	ldr	r2, [pc, #196]	@ (80027dc <HAL_DMA_Abort+0x62c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2f      	ldr	r2, [pc, #188]	@ (80027e0 <HAL_DMA_Abort+0x630>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2e      	ldr	r2, [pc, #184]	@ (80027e4 <HAL_DMA_Abort+0x634>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_DMA_Abort+0x58a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <HAL_DMA_Abort+0x638>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_DMA_Abort+0x58e>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_DMA_Abort+0x590>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800274c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002764:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800276e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
 80027cc:	58025408 	.word	0x58025408
 80027d0:	5802541c 	.word	0x5802541c
 80027d4:	58025430 	.word	0x58025430
 80027d8:	58025444 	.word	0x58025444
 80027dc:	58025458 	.word	0x58025458
 80027e0:	5802546c 	.word	0x5802546c
 80027e4:	58025480 	.word	0x58025480
 80027e8:	58025494 	.word	0x58025494

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e237      	b.n	8002c6e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2280      	movs	r2, #128	@ 0x80
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e22c      	b.n	8002c6e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <HAL_DMA_Abort_IT+0x1a0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5b      	ldr	r2, [pc, #364]	@ (8002990 <HAL_DMA_Abort_IT+0x1a4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a59      	ldr	r2, [pc, #356]	@ (8002994 <HAL_DMA_Abort_IT+0x1a8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_DMA_Abort_IT+0x1ac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a56      	ldr	r2, [pc, #344]	@ (800299c <HAL_DMA_Abort_IT+0x1b0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a55      	ldr	r2, [pc, #340]	@ (80029a0 <HAL_DMA_Abort_IT+0x1b4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a53      	ldr	r2, [pc, #332]	@ (80029a4 <HAL_DMA_Abort_IT+0x1b8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_DMA_Abort_IT+0x1c0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_DMA_Abort_IT+0x1c8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a4c      	ldr	r2, [pc, #304]	@ (80029b8 <HAL_DMA_Abort_IT+0x1cc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a4a      	ldr	r2, [pc, #296]	@ (80029bc <HAL_DMA_Abort_IT+0x1d0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_DMA_Abort_IT+0x1d4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a47      	ldr	r2, [pc, #284]	@ (80029c4 <HAL_DMA_Abort_IT+0x1d8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <HAL_DMA_Abort_IT+0x1dc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Abort_IT+0xcc>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_DMA_Abort_IT+0xce>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8086 	beq.w	80029cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2204      	movs	r2, #4
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2f      	ldr	r2, [pc, #188]	@ (800298c <HAL_DMA_Abort_IT+0x1a0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d04a      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002990 <HAL_DMA_Abort_IT+0x1a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d045      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002994 <HAL_DMA_Abort_IT+0x1a8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d040      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002998 <HAL_DMA_Abort_IT+0x1ac>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d03b      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a29      	ldr	r2, [pc, #164]	@ (800299c <HAL_DMA_Abort_IT+0x1b0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d036      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a28      	ldr	r2, [pc, #160]	@ (80029a0 <HAL_DMA_Abort_IT+0x1b4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d031      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	@ (80029a4 <HAL_DMA_Abort_IT+0x1b8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02c      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a25      	ldr	r2, [pc, #148]	@ (80029a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d027      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a23      	ldr	r2, [pc, #140]	@ (80029ac <HAL_DMA_Abort_IT+0x1c0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d022      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a22      	ldr	r2, [pc, #136]	@ (80029b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01d      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a20      	ldr	r2, [pc, #128]	@ (80029b4 <HAL_DMA_Abort_IT+0x1c8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d018      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_DMA_Abort_IT+0x1cc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1d      	ldr	r2, [pc, #116]	@ (80029bc <HAL_DMA_Abort_IT+0x1d0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1c      	ldr	r2, [pc, #112]	@ (80029c0 <HAL_DMA_Abort_IT+0x1d4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1a      	ldr	r2, [pc, #104]	@ (80029c4 <HAL_DMA_Abort_IT+0x1d8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_DMA_Abort_IT+0x17c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a19      	ldr	r2, [pc, #100]	@ (80029c8 <HAL_DMA_Abort_IT+0x1dc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <HAL_DMA_Abort_IT+0x18e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e178      	b.n	8002c6c <HAL_DMA_Abort_IT+0x480>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e16f      	b.n	8002c6c <HAL_DMA_Abort_IT+0x480>
 800298c:	40020010 	.word	0x40020010
 8002990:	40020028 	.word	0x40020028
 8002994:	40020040 	.word	0x40020040
 8002998:	40020058 	.word	0x40020058
 800299c:	40020070 	.word	0x40020070
 80029a0:	40020088 	.word	0x40020088
 80029a4:	400200a0 	.word	0x400200a0
 80029a8:	400200b8 	.word	0x400200b8
 80029ac:	40020410 	.word	0x40020410
 80029b0:	40020428 	.word	0x40020428
 80029b4:	40020440 	.word	0x40020440
 80029b8:	40020458 	.word	0x40020458
 80029bc:	40020470 	.word	0x40020470
 80029c0:	40020488 	.word	0x40020488
 80029c4:	400204a0 	.word	0x400204a0
 80029c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6c      	ldr	r2, [pc, #432]	@ (8002b94 <HAL_DMA_Abort_IT+0x3a8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04a      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002b98 <HAL_DMA_Abort_IT+0x3ac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d045      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a69      	ldr	r2, [pc, #420]	@ (8002b9c <HAL_DMA_Abort_IT+0x3b0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d040      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3b4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d03b      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a66      	ldr	r2, [pc, #408]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3b8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d036      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a65      	ldr	r2, [pc, #404]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3bc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d031      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a63      	ldr	r2, [pc, #396]	@ (8002bac <HAL_DMA_Abort_IT+0x3c0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02c      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a62      	ldr	r2, [pc, #392]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3c4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d027      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a60      	ldr	r2, [pc, #384]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3c8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d022      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3cc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01d      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5d      	ldr	r2, [pc, #372]	@ (8002bbc <HAL_DMA_Abort_IT+0x3d0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d018      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc0 <HAL_DMA_Abort_IT+0x3d4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc4 <HAL_DMA_Abort_IT+0x3d8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a59      	ldr	r2, [pc, #356]	@ (8002bc8 <HAL_DMA_Abort_IT+0x3dc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a57      	ldr	r2, [pc, #348]	@ (8002bcc <HAL_DMA_Abort_IT+0x3e0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x290>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a56      	ldr	r2, [pc, #344]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3e4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d108      	bne.n	8002a8e <HAL_DMA_Abort_IT+0x2a2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_DMA_Abort_IT+0x2b2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8002b94 <HAL_DMA_Abort_IT+0x3a8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d072      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_DMA_Abort_IT+0x3ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d06d      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a39      	ldr	r2, [pc, #228]	@ (8002b9c <HAL_DMA_Abort_IT+0x3b0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d068      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a37      	ldr	r2, [pc, #220]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3b4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d063      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3b8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d05e      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3bc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d059      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <HAL_DMA_Abort_IT+0x3c0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d054      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3c4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04f      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3c8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d04a      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3cc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d045      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_DMA_Abort_IT+0x3d0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d040      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc0 <HAL_DMA_Abort_IT+0x3d4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d03b      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_DMA_Abort_IT+0x3d8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d036      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	@ (8002bc8 <HAL_DMA_Abort_IT+0x3dc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d031      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <HAL_DMA_Abort_IT+0x3e0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d02c      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d027      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	@ (8002bd4 <HAL_DMA_Abort_IT+0x3e8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_DMA_Abort_IT+0x3ec>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <HAL_DMA_Abort_IT+0x3f0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d018      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	@ (8002be0 <HAL_DMA_Abort_IT+0x3f4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002be4 <HAL_DMA_Abort_IT+0x3f8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00e      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_DMA_Abort_IT+0x3fc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bec <HAL_DMA_Abort_IT+0x400>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_DMA_Abort_IT+0x3a2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_DMA_Abort_IT+0x404>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d132      	bne.n	8002bf4 <HAL_DMA_Abort_IT+0x408>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e031      	b.n	8002bf6 <HAL_DMA_Abort_IT+0x40a>
 8002b92:	bf00      	nop
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	58025408 	.word	0x58025408
 8002bd8:	5802541c 	.word	0x5802541c
 8002bdc:	58025430 	.word	0x58025430
 8002be0:	58025444 	.word	0x58025444
 8002be4:	58025458 	.word	0x58025458
 8002be8:	5802546c 	.word	0x5802546c
 8002bec:	58025480 	.word	0x58025480
 8002bf0:	58025494 	.word	0x58025494
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d028      	beq.n	8002c4c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c08:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c28:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c40:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop

08002c78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b098      	sub	sp, #96	@ 0x60
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002c80:	4a84      	ldr	r2, [pc, #528]	@ (8002e94 <HAL_FDCAN_Init+0x21c>)
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4611      	mov	r1, r2
 8002c88:	224c      	movs	r2, #76	@ 0x4c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f007 fc8a 	bl	800a5a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1c6      	b.n	8003028 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e98 <HAL_FDCAN_Init+0x220>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d106      	bne.n	8002cb2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fce6 	bl	8001698 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0210 	bic.w	r2, r2, #16
 8002cda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cdc:	f7ff f8a4 	bl	8001e28 <HAL_GetTick>
 8002ce0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ce2:	e014      	b.n	8002d0e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ce4:	f7ff f8a0 	bl	8001e28 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b0a      	cmp	r3, #10
 8002cf0:	d90d      	bls.n	8002d0e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e18c      	b.n	8003028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d0e3      	beq.n	8002ce4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d2c:	f7ff f87c 	bl	8001e28 <HAL_GetTick>
 8002d30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d32:	e014      	b.n	8002d5e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d34:	f7ff f878 	bl	8001e28 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b0a      	cmp	r3, #10
 8002d40:	d90d      	bls.n	8002d5e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e164      	b.n	8003028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0e3      	beq.n	8002d34 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0202 	orr.w	r2, r2, #2
 8002d7a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7c1b      	ldrb	r3, [r3, #16]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d108      	bne.n	8002d96 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d92:	619a      	str	r2, [r3, #24]
 8002d94:	e007      	b.n	8002da6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7c5b      	ldrb	r3, [r3, #17]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dbc:	619a      	str	r2, [r3, #24]
 8002dbe:	e007      	b.n	8002dd0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7c9b      	ldrb	r3, [r3, #18]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002de6:	619a      	str	r2, [r3, #24]
 8002de8:	e007      	b.n	8002dfa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002df8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002e1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d108      	bne.n	8002e4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0204 	orr.w	r2, r2, #4
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e030      	b.n	8002eac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02c      	beq.n	8002eac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d020      	beq.n	8002e9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0210 	orr.w	r2, r2, #16
 8002e78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d114      	bne.n	8002eac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0220 	orr.w	r2, r2, #32
 8002e90:	619a      	str	r2, [r3, #24]
 8002e92:	e00b      	b.n	8002eac <HAL_FDCAN_Init+0x234>
 8002e94:	0800aef4 	.word	0x0800aef4
 8002e98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ebc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ed4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ed6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ee0:	d115      	bne.n	8002f0e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	3b01      	subs	r3, #1
 8002eee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ef0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	3b01      	subs	r3, #1
 8002f04:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f0a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f0c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	4413      	add	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002f42:	f023 0107 	bic.w	r1, r3, #7
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	3360      	adds	r3, #96	@ 0x60
 8002f4e:	443b      	add	r3, r7
 8002f50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002f6e:	f023 0107 	bic.w	r1, r3, #7
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	3360      	adds	r3, #96	@ 0x60
 8002f7a:	443b      	add	r3, r7
 8002f7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002f9a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3360      	adds	r3, #96	@ 0x60
 8002fa6:	443b      	add	r3, r7
 8002fa8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002fc8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	3360      	adds	r3, #96	@ 0x60
 8002fd4:	443b      	add	r3, r7
 8002fd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a11      	ldr	r2, [pc, #68]	@ (8003030 <HAL_FDCAN_Init+0x3b8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d107      	bne.n	8003000 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f022 0203 	bic.w	r2, r2, #3
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fd81 	bl	8003b20 <FDCAN_CalcultateRamBlockAddresses>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003024:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003028:	4618      	mov	r0, r3
 800302a:	3760      	adds	r7, #96	@ 0x60
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	4000a000 	.word	0x4000a000

08003034 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d111      	bne.n	800306c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e008      	b.n	800307e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030aa:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e038      	b.n	8003138 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e026      	b.n	8003138 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fe93 	bl	8003e2c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	fa01 f202 	lsl.w	r2, r1, r2
 8003112:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003116:	2201      	movs	r2, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e008      	b.n	8003138 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312c:	f043 0208 	orr.w	r2, r3, #8
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003140:	b480      	push	{r7}
 8003142:	b08b      	sub	sp, #44	@ 0x2c
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003158:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800315a:	7efb      	ldrb	r3, [r7, #27]
 800315c:	2b02      	cmp	r3, #2
 800315e:	f040 8149 	bne.w	80033f4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d14c      	bne.n	8003202 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003170:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e13c      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e12a      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c0:	d10a      	bne.n	80031d8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d2:	d101      	bne.n	80031d8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80031d4:	2301      	movs	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f4:	69f9      	ldr	r1, [r7, #28]
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003200:	e068      	b.n	80032d4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b41      	cmp	r3, #65	@ 0x41
 8003206:	d14c      	bne.n	80032a2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003210:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0ec      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003242:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0da      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003260:	d10a      	bne.n	8003278 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800326a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003272:	d101      	bne.n	8003278 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003274:	2301      	movs	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a0:	e018      	b.n	80032d4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d309      	bcc.n	80032c0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0a2      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e005      	b.n	8003304 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	3304      	adds	r3, #4
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e1b      	lsrs	r3, r3, #24
 8003358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0fda      	lsrs	r2, r3, #31
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	3304      	adds	r3, #4
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	e00a      	b.n	8003390 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	441a      	add	r2, r3
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	440b      	add	r3, r1
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	3301      	adds	r3, #1
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	461a      	mov	r2, r3
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	4293      	cmp	r3, r2
 800339e:	d3ec      	bcc.n	800337a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b40      	cmp	r3, #64	@ 0x40
 80033a4:	d105      	bne.n	80033b2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80033b0:	e01e      	b.n	80033f0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b41      	cmp	r3, #65	@ 0x41
 80033b6:	d105      	bne.n	80033c4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80033c2:	e015      	b.n	80033f0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b1f      	cmp	r3, #31
 80033c8:	d808      	bhi.n	80033dc <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80033da:	e009      	b.n	80033f0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 021f 	and.w	r2, r3, #31
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e008      	b.n	8003406 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	372c      	adds	r7, #44	@ 0x2c
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	0800af50 	.word	0x0800af50

08003418 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800342a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d002      	beq.n	8003438 <HAL_FDCAN_ActivateNotification+0x20>
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d155      	bne.n	80034e4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003456:	e014      	b.n	8003482 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d108      	bne.n	800347a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003478:	e003      	b.n	8003482 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2203      	movs	r2, #3
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	430a      	orrs	r2, r1
 800349c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <HAL_FDCAN_ActivateNotification+0xec>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80034d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <HAL_FDCAN_ActivateNotification+0xf0>)
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0f9b      	lsrs	r3, r3, #30
 80034da:	490b      	ldr	r1, [pc, #44]	@ (8003508 <HAL_FDCAN_ActivateNotification+0xf0>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e008      	b.n	80034f6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	3fcfffff 	.word	0x3fcfffff
 8003508:	4000a800 	.word	0x4000a800

0800350c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b096      	sub	sp, #88	@ 0x58
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003514:	4b9a      	ldr	r3, [pc, #616]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	079b      	lsls	r3, r3, #30
 800351a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800351c:	4b98      	ldr	r3, [pc, #608]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	079b      	lsls	r3, r3, #30
 8003522:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003524:	4013      	ands	r3, r2
 8003526:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003532:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800353c:	4013      	ands	r3, r2
 800353e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003554:	4013      	ands	r3, r2
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800356c:	4013      	ands	r3, r2
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003576:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800357a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003584:	4013      	ands	r3, r2
 8003586:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003592:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800359c:	4013      	ands	r3, r2
 800359e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80035b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80035d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fa54 	bl	8003a86 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80035de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e0:	0a9b      	lsrs	r3, r3, #10
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01d      	beq.n	8003626 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	0a9b      	lsrs	r3, r3, #10
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d017      	beq.n	8003626 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800360a:	4013      	ands	r3, r2
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003616:	651a      	str	r2, [r3, #80]	@ 0x50
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800361e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa07 	bl	8003a34 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003632:	4b54      	ldr	r3, [pc, #336]	@ (8003784 <HAL_FDCAN_IRQHandler+0x278>)
 8003634:	400b      	ands	r3, r1
 8003636:	6513      	str	r3, [r2, #80]	@ 0x50
 8003638:	4a51      	ldr	r2, [pc, #324]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	0f9b      	lsrs	r3, r3, #30
 800363e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9c0 	bl	80039c8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003654:	4b4b      	ldr	r3, [pc, #300]	@ (8003784 <HAL_FDCAN_IRQHandler+0x278>)
 8003656:	400b      	ands	r3, r1
 8003658:	6513      	str	r3, [r2, #80]	@ 0x50
 800365a:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 800365c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365e:	0f9b      	lsrs	r3, r3, #30
 8003660:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f9ba 	bl	80039de <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800366a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003676:	4b43      	ldr	r3, [pc, #268]	@ (8003784 <HAL_FDCAN_IRQHandler+0x278>)
 8003678:	400b      	ands	r3, r1
 800367a:	6513      	str	r3, [r2, #80]	@ 0x50
 800367c:	4a40      	ldr	r2, [pc, #256]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 800367e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003680:	0f9b      	lsrs	r3, r3, #30
 8003682:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003684:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f9b8 	bl	80019fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800368c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003698:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <HAL_FDCAN_IRQHandler+0x278>)
 800369a:	400b      	ands	r3, r1
 800369c:	6513      	str	r3, [r2, #80]	@ 0x50
 800369e:	4a38      	ldr	r2, [pc, #224]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 80036a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a2:	0f9b      	lsrs	r3, r3, #30
 80036a4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80036a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f9a3 	bl	80039f4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80036ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b0:	0adb      	lsrs	r3, r3, #11
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	0adb      	lsrs	r3, r3, #11
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f997 	bl	8003a0a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	0a5b      	lsrs	r3, r3, #9
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01d      	beq.n	8003724 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	0a5b      	lsrs	r3, r3, #9
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d017      	beq.n	8003724 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003708:	4013      	ands	r3, r2
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003714:	651a      	str	r2, [r3, #80]	@ 0x50
 8003716:	4b1a      	ldr	r3, [pc, #104]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800371c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f97d 	bl	8003a1e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003726:	0cdb      	lsrs	r3, r3, #19
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003732:	0cdb      	lsrs	r3, r3, #19
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003744:	651a      	str	r2, [r3, #80]	@ 0x50
 8003746:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f97c 	bl	8003a4a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003772:	651a      	str	r2, [r3, #80]	@ 0x50
 8003774:	4b02      	ldr	r3, [pc, #8]	@ (8003780 <HAL_FDCAN_IRQHandler+0x274>)
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	e004      	b.n	8003788 <HAL_FDCAN_IRQHandler+0x27c>
 800377e:	bf00      	nop
 8003780:	4000a800 	.word	0x4000a800
 8003784:	3fcfffff 	.word	0x3fcfffff
 8003788:	f000 f969 	bl	8003a5e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800378c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378e:	0c9b      	lsrs	r3, r3, #18
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80037ae:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <HAL_FDCAN_IRQHandler+0x4b0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f95c 	bl	8003a72 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037bc:	0c5b      	lsrs	r3, r3, #17
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	0c5b      	lsrs	r3, r3, #17
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037da:	651a      	str	r2, [r3, #80]	@ 0x50
 80037dc:	4b77      	ldr	r3, [pc, #476]	@ (80039bc <HAL_FDCAN_IRQHandler+0x4b0>)
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80037f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037fe:	4b70      	ldr	r3, [pc, #448]	@ (80039c0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003800:	400b      	ands	r3, r1
 8003802:	6513      	str	r3, [r2, #80]	@ 0x50
 8003804:	4a6d      	ldr	r2, [pc, #436]	@ (80039bc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003808:	0f9b      	lsrs	r3, r3, #30
 800380a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800380c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f94d 	bl	8003aae <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003820:	4b67      	ldr	r3, [pc, #412]	@ (80039c0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003822:	400b      	ands	r3, r1
 8003824:	6513      	str	r3, [r2, #80]	@ 0x50
 8003826:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	0f9b      	lsrs	r3, r3, #30
 800382c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a60      	ldr	r2, [pc, #384]	@ (80039c4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	f040 80ac 	bne.w	80039a2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a4 	beq.w	80039a2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800386e:	4013      	ands	r3, r2
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003886:	4013      	ands	r3, r2
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	4013      	ands	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80038ac:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	4013      	ands	r3, r2
 80038b8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80038c4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80038f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8e6 	bl	8003ac4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003904:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8e6 	bl	8003ada <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01a      	beq.n	8003950 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d014      	beq.n	8003950 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b29b      	uxth	r3, r3
 8003930:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800393c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2240      	movs	r2, #64	@ 0x40
 8003944:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6939      	ldr	r1, [r7, #16]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8d0 	bl	8003af0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800395e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8d1 	bl	8003b08 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f874 	bl	8003a9a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80039b2:	bf00      	nop
 80039b4:	3758      	adds	r7, #88	@ 0x58
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	4000a800 	.word	0x4000a800
 80039c0:	3fcfffff 	.word	0x3fcfffff
 80039c4:	4000a000 	.word	0x4000a000

080039c8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003b36:	4ba7      	ldr	r3, [pc, #668]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	0091      	lsls	r1, r2, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b50:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b76:	4b97      	ldr	r3, [pc, #604]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	0091      	lsls	r1, r2, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	041a      	lsls	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003bb8:	4b86      	ldr	r3, [pc, #536]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	0091      	lsls	r1, r2, #2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bd2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c00:	4b74      	ldr	r3, [pc, #464]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	0091      	lsls	r1, r2, #2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c1a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003c48:	4b62      	ldr	r3, [pc, #392]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	0091      	lsls	r1, r2, #2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4413      	add	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003c74:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	0091      	lsls	r1, r2, #2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	041a      	lsls	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4413      	add	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003cb6:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0091      	lsls	r1, r2, #2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cd0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cec:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d04:	4b34      	ldr	r3, [pc, #208]	@ (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003d06:	4413      	add	r3, r2
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d915      	bls.n	8003dfc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003dd0:	e006      	b.n	8003de0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003dd2:	bf00      	nop
 8003dd4:	ffff0003 	.word	0xffff0003
 8003dd8:	10002b00 	.word	0x10002b00
 8003ddc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e010      	b.n	8003e1e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e005      	b.n	8003e10 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3f3      	bcc.n	8003e04 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	@ 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003e4a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e00a      	b.n	8003e6e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e60:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e66:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e6c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e78:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e7e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e84:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e020      	b.n	8003f06 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3303      	adds	r3, #3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003edc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	440b      	add	r3, r1
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003eea:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ef4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3304      	adds	r3, #4
 8003efe:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3304      	adds	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a06      	ldr	r2, [pc, #24]	@ (8003f24 <FDCAN_CopyMessageToRAM+0xf8>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d3d6      	bcc.n	8003ec4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	3724      	adds	r7, #36	@ 0x24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	0800af50 	.word	0x0800af50

08003f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	@ 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f36:	4b89      	ldr	r3, [pc, #548]	@ (800415c <HAL_GPIO_Init+0x234>)
 8003f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f3a:	e194      	b.n	8004266 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8186 	beq.w	8004260 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d005      	beq.n	8003f6c <HAL_GPIO_Init+0x44>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d130      	bne.n	8003fce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0201 	and.w	r2, r3, #1
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d017      	beq.n	800400a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d123      	bne.n	800405e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	08da      	lsrs	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3208      	adds	r2, #8
 800401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	2203      	movs	r2, #3
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0203 	and.w	r2, r3, #3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80e0 	beq.w	8004260 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004160 <HAL_GPIO_Init+0x238>)
 80040a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004160 <HAL_GPIO_Init+0x238>)
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80040b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_GPIO_Init+0x238>)
 80040b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040be:	4a29      	ldr	r2, [pc, #164]	@ (8004164 <HAL_GPIO_Init+0x23c>)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	3302      	adds	r3, #2
 80040c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	220f      	movs	r2, #15
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a20      	ldr	r2, [pc, #128]	@ (8004168 <HAL_GPIO_Init+0x240>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d052      	beq.n	8004190 <HAL_GPIO_Init+0x268>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <HAL_GPIO_Init+0x244>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d031      	beq.n	8004156 <HAL_GPIO_Init+0x22e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <HAL_GPIO_Init+0x248>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02b      	beq.n	8004152 <HAL_GPIO_Init+0x22a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <HAL_GPIO_Init+0x24c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d025      	beq.n	800414e <HAL_GPIO_Init+0x226>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <HAL_GPIO_Init+0x250>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01f      	beq.n	800414a <HAL_GPIO_Init+0x222>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <HAL_GPIO_Init+0x254>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d019      	beq.n	8004146 <HAL_GPIO_Init+0x21e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <HAL_GPIO_Init+0x258>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_GPIO_Init+0x21a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <HAL_GPIO_Init+0x25c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00d      	beq.n	800413e <HAL_GPIO_Init+0x216>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a18      	ldr	r2, [pc, #96]	@ (8004188 <HAL_GPIO_Init+0x260>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <HAL_GPIO_Init+0x212>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a17      	ldr	r2, [pc, #92]	@ (800418c <HAL_GPIO_Init+0x264>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_GPIO_Init+0x20e>
 8004132:	2309      	movs	r3, #9
 8004134:	e02d      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 8004136:	230a      	movs	r3, #10
 8004138:	e02b      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 800413a:	2308      	movs	r3, #8
 800413c:	e029      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 800413e:	2307      	movs	r3, #7
 8004140:	e027      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 8004142:	2306      	movs	r3, #6
 8004144:	e025      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 8004146:	2305      	movs	r3, #5
 8004148:	e023      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 800414a:	2304      	movs	r3, #4
 800414c:	e021      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 800414e:	2303      	movs	r3, #3
 8004150:	e01f      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 8004152:	2302      	movs	r3, #2
 8004154:	e01d      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 8004156:	2301      	movs	r3, #1
 8004158:	e01b      	b.n	8004192 <HAL_GPIO_Init+0x26a>
 800415a:	bf00      	nop
 800415c:	58000080 	.word	0x58000080
 8004160:	58024400 	.word	0x58024400
 8004164:	58000400 	.word	0x58000400
 8004168:	58020000 	.word	0x58020000
 800416c:	58020400 	.word	0x58020400
 8004170:	58020800 	.word	0x58020800
 8004174:	58020c00 	.word	0x58020c00
 8004178:	58021000 	.word	0x58021000
 800417c:	58021400 	.word	0x58021400
 8004180:	58021800 	.word	0x58021800
 8004184:	58021c00 	.word	0x58021c00
 8004188:	58022000 	.word	0x58022000
 800418c:	58022400 	.word	0x58022400
 8004190:	2300      	movs	r3, #0
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	f002 0203 	and.w	r2, r2, #3
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	4093      	lsls	r3, r2
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a2:	4938      	ldr	r1, [pc, #224]	@ (8004284 <HAL_GPIO_Init+0x35c>)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f ae63 	bne.w	8003f3c <HAL_GPIO_Init+0x14>
  }
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	3724      	adds	r7, #36	@ 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	58000400 	.word	0x58000400

08004288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042a4:	e003      	b.n	80042ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	041a      	lsls	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00a      	beq.n	80042e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042d0:	4b16      	ldr	r3, [pc, #88]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01f      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e01d      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042e6:	4b11      	ldr	r3, [pc, #68]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	490f      	ldr	r1, [pc, #60]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042f6:	f7fd fd97 	bl	8001e28 <HAL_GetTick>
 80042fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042fc:	e009      	b.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042fe:	f7fd fd93 	bl	8001e28 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800430c:	d901      	bls.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431e:	d1ee      	bne.n	80042fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024800 	.word	0x58024800

08004330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f000 bc48 	b.w	8004bd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8088 	beq.w	8004462 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	4b99      	ldr	r3, [pc, #612]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800435c:	4b96      	ldr	r3, [pc, #600]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	2b10      	cmp	r3, #16
 8004366:	d007      	beq.n	8004378 <HAL_RCC_OscConfig+0x48>
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	2b18      	cmp	r3, #24
 800436c:	d111      	bne.n	8004392 <HAL_RCC_OscConfig+0x62>
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4b8f      	ldr	r3, [pc, #572]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d06d      	beq.n	8004460 <HAL_RCC_OscConfig+0x130>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d169      	bne.n	8004460 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f000 bc21 	b.w	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x7a>
 800439c:	4b86      	ldr	r3, [pc, #536]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a85      	ldr	r2, [pc, #532]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e02e      	b.n	8004408 <HAL_RCC_OscConfig+0xd8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x9c>
 80043b2:	4b81      	ldr	r3, [pc, #516]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a80      	ldr	r2, [pc, #512]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b7e      	ldr	r3, [pc, #504]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a7d      	ldr	r2, [pc, #500]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xd8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0xc0>
 80043d6:	4b78      	ldr	r3, [pc, #480]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a77      	ldr	r2, [pc, #476]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b75      	ldr	r3, [pc, #468]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a74      	ldr	r2, [pc, #464]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xd8>
 80043f0:	4b71      	ldr	r3, [pc, #452]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b6e      	ldr	r3, [pc, #440]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6d      	ldr	r2, [pc, #436]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fd0a 	bl	8001e28 <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd fd06 	bl	8001e28 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e3d4      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800442a:	4b63      	ldr	r3, [pc, #396]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xe8>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fcf6 	bl	8001e28 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fcf2 	bl	8001e28 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e3c0      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004452:	4b59      	ldr	r3, [pc, #356]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x110>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80ca 	beq.w	8004604 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004470:	4b51      	ldr	r3, [pc, #324]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004478:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800447a:	4b4f      	ldr	r3, [pc, #316]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_RCC_OscConfig+0x166>
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2b18      	cmp	r3, #24
 800448a:	d156      	bne.n	800453a <HAL_RCC_OscConfig+0x20a>
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d151      	bne.n	800453a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004496:	4b48      	ldr	r3, [pc, #288]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x17e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e392      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ae:	4b42      	ldr	r3, [pc, #264]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 0219 	bic.w	r2, r3, #25
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	493f      	ldr	r1, [pc, #252]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fd fcb2 	bl	8001e28 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fd fcae 	bl	8001e28 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e37c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044da:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	f7fd fccf 	bl	8001e88 <HAL_GetREVID>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d817      	bhi.n	8004524 <HAL_RCC_OscConfig+0x1f4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d108      	bne.n	800450e <HAL_RCC_OscConfig+0x1de>
 80044fc:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004504:	4a2c      	ldr	r2, [pc, #176]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800450a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800450c:	e07a      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450e:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	4926      	ldr	r1, [pc, #152]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004522:	e06f      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	4921      	ldr	r1, [pc, #132]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004538:	e064      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d047      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004542:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0219 	bic.w	r2, r3, #25
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	491a      	ldr	r1, [pc, #104]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fc68 	bl	8001e28 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455c:	f7fd fc64 	bl	8001e28 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e332      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800456e:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	f7fd fc85 	bl	8001e88 <HAL_GetREVID>
 800457e:	4603      	mov	r3, r0
 8004580:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004584:	4293      	cmp	r3, r2
 8004586:	d819      	bhi.n	80045bc <HAL_RCC_OscConfig+0x28c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b40      	cmp	r3, #64	@ 0x40
 800458e:	d108      	bne.n	80045a2 <HAL_RCC_OscConfig+0x272>
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004598:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 800459a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800459e:	6053      	str	r3, [r2, #4]
 80045a0:	e030      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	031b      	lsls	r3, r3, #12
 80045b0:	4901      	ldr	r1, [pc, #4]	@ (80045b8 <HAL_RCC_OscConfig+0x288>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	e025      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
 80045b8:	58024400 	.word	0x58024400
 80045bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	4997      	ldr	r1, [pc, #604]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	e018      	b.n	8004604 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d2:	4b95      	ldr	r3, [pc, #596]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a94      	ldr	r2, [pc, #592]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fd fc23 	bl	8001e28 <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fd fc1f 	bl	8001e28 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e2ed      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f0      	bne.n	80045e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a9 	beq.w	8004764 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004612:	4b85      	ldr	r3, [pc, #532]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800461c:	4b82      	ldr	r3, [pc, #520]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d007      	beq.n	8004638 <HAL_RCC_OscConfig+0x308>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b18      	cmp	r3, #24
 800462c:	d13a      	bne.n	80046a4 <HAL_RCC_OscConfig+0x374>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d135      	bne.n	80046a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004638:	4b7b      	ldr	r3, [pc, #492]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x320>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b80      	cmp	r3, #128	@ 0x80
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e2c1      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004650:	f7fd fc1a 	bl	8001e88 <HAL_GetREVID>
 8004654:	4603      	mov	r3, r0
 8004656:	f241 0203 	movw	r2, #4099	@ 0x1003
 800465a:	4293      	cmp	r3, r2
 800465c:	d817      	bhi.n	800468e <HAL_RCC_OscConfig+0x35e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	2b20      	cmp	r3, #32
 8004664:	d108      	bne.n	8004678 <HAL_RCC_OscConfig+0x348>
 8004666:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800466e:	4a6e      	ldr	r2, [pc, #440]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004674:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004676:	e075      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004678:	4b6b      	ldr	r3, [pc, #428]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	069b      	lsls	r3, r3, #26
 8004686:	4968      	ldr	r1, [pc, #416]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800468c:	e06a      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800468e:	4b66      	ldr	r3, [pc, #408]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	4962      	ldr	r1, [pc, #392]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a2:	e05f      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d042      	beq.n	8004732 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80046b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fbb6 	bl	8001e28 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046c0:	f7fd fbb2 	bl	8001e28 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e280      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d2:	4b55      	ldr	r3, [pc, #340]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046de:	f7fd fbd3 	bl	8001e88 <HAL_GetREVID>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d817      	bhi.n	800471c <HAL_RCC_OscConfig+0x3ec>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d108      	bne.n	8004706 <HAL_RCC_OscConfig+0x3d6>
 80046f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80046fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004702:	6053      	str	r3, [r2, #4]
 8004704:	e02e      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
 8004706:	4b48      	ldr	r3, [pc, #288]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	069b      	lsls	r3, r3, #26
 8004714:	4944      	ldr	r1, [pc, #272]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
 800471a:	e023      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
 800471c:	4b42      	ldr	r3, [pc, #264]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	493f      	ldr	r1, [pc, #252]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	60cb      	str	r3, [r1, #12]
 8004730:	e018      	b.n	8004764 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004732:	4b3d      	ldr	r3, [pc, #244]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a3c      	ldr	r2, [pc, #240]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 8004738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fd fb73 	bl	8001e28 <HAL_GetTick>
 8004742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004746:	f7fd fb6f 	bl	8001e28 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e23d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004758:	4b33      	ldr	r3, [pc, #204]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d036      	beq.n	80047de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d019      	beq.n	80047ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004778:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477c:	4a2a      	ldr	r2, [pc, #168]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd fb50 	bl	8001e28 <HAL_GetTick>
 8004788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7fd fb4c 	bl	8001e28 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e21a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800479e:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x45c>
 80047aa:	e018      	b.n	80047de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fd fb36 	bl	8001e28 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fd fb32 	bl	8001e28 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e200      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d039      	beq.n	800485e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01c      	beq.n	800482c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047fe:	f7fd fb13 	bl	8001e28 <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004806:	f7fd fb0f 	bl	8001e28 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e1dd      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004818:	4b03      	ldr	r3, [pc, #12]	@ (8004828 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x4d6>
 8004824:	e01b      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800482c:	4b9b      	ldr	r3, [pc, #620]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a9a      	ldr	r2, [pc, #616]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004838:	f7fd faf6 	bl	8001e28 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004840:	f7fd faf2 	bl	8001e28 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1c0      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004852:	4b92      	ldr	r3, [pc, #584]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8081 	beq.w	800496e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800486c:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa0 <HAL_RCC_OscConfig+0x770>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a8b      	ldr	r2, [pc, #556]	@ (8004aa0 <HAL_RCC_OscConfig+0x770>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004878:	f7fd fad6 	bl	8001e28 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004880:	f7fd fad2 	bl	8001e28 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	@ 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e1a0      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004892:	4b83      	ldr	r3, [pc, #524]	@ (8004aa0 <HAL_RCC_OscConfig+0x770>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_OscConfig+0x584>
 80048a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b2:	e02d      	b.n	8004910 <HAL_RCC_OscConfig+0x5e0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCC_OscConfig+0x5a6>
 80048bc:	4b77      	ldr	r3, [pc, #476]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a76      	ldr	r2, [pc, #472]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	4b74      	ldr	r3, [pc, #464]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a73      	ldr	r2, [pc, #460]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d4:	e01c      	b.n	8004910 <HAL_RCC_OscConfig+0x5e0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c8>
 80048de:	4b6f      	ldr	r3, [pc, #444]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ea:	4b6c      	ldr	r3, [pc, #432]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ee:	4a6b      	ldr	r2, [pc, #428]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0x5e0>
 80048f8:	4b68      	ldr	r3, [pc, #416]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	4a67      	ldr	r2, [pc, #412]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70
 8004904:	4b65      	ldr	r3, [pc, #404]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004908:	4a64      	ldr	r2, [pc, #400]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7fd fa86 	bl	8001e28 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7fd fa82 	bl	8001e28 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e14e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004936:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0ee      	beq.n	8004920 <HAL_RCC_OscConfig+0x5f0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd fa70 	bl	8001e28 <HAL_GetTick>
 8004948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fd fa6c 	bl	8001e28 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e138      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004962:	4b4e      	ldr	r3, [pc, #312]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ee      	bne.n	800494c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 812d 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004978:	4b48      	ldr	r3, [pc, #288]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004980:	2b18      	cmp	r3, #24
 8004982:	f000 80bd 	beq.w	8004b00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	2b02      	cmp	r3, #2
 800498c:	f040 809e 	bne.w	8004acc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004990:	4b42      	ldr	r3, [pc, #264]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a41      	ldr	r2, [pc, #260]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd fa44 	bl	8001e28 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fd fa40 	bl	8001e28 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e10e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b6:	4b39      	ldr	r3, [pc, #228]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c2:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80049c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049c6:	4b37      	ldr	r3, [pc, #220]	@ (8004aa4 <HAL_RCC_OscConfig+0x774>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	430a      	orrs	r2, r1
 80049d6:	4931      	ldr	r1, [pc, #196]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	628b      	str	r3, [r1, #40]	@ 0x28
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	3b01      	subs	r3, #1
 80049e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ea:	3b01      	subs	r3, #1
 80049ec:	025b      	lsls	r3, r3, #9
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	3b01      	subs	r3, #1
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a0c:	4923      	ldr	r1, [pc, #140]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a12:	4b22      	ldr	r3, [pc, #136]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	4a21      	ldr	r2, [pc, #132]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a22:	4b21      	ldr	r3, [pc, #132]	@ (8004aa8 <HAL_RCC_OscConfig+0x778>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a2a:	00d2      	lsls	r2, r2, #3
 8004a2c:	491b      	ldr	r1, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a32:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	f023 020c 	bic.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	4917      	ldr	r1, [pc, #92]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a44:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	f023 0202 	bic.w	r2, r3, #2
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a50:	4912      	ldr	r1, [pc, #72]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a7a:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd f9c9 	bl	8001e28 <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a98:	e011      	b.n	8004abe <HAL_RCC_OscConfig+0x78e>
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	58024800 	.word	0x58024800
 8004aa4:	fffffc0c 	.word	0xfffffc0c
 8004aa8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd f9bc 	bl	8001e28 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e08a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004abe:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x77c>
 8004aca:	e082      	b.n	8004bd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a42      	ldr	r2, [pc, #264]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd f9a6 	bl	8001e28 <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd f9a2 	bl	8001e28 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e070      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004af2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x7b0>
 8004afe:	e068      	b.n	8004bd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b00:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b06:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d031      	beq.n	8004b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0203 	and.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d12a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d122      	bne.n	8004b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d11a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	0a5b      	lsrs	r3, r3, #9
 8004b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d111      	bne.n	8004b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d108      	bne.n	8004b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e02b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d01f      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b9e:	f7fd f943 	bl	8001e28 <HAL_GetTick>
 8004ba2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ba4:	bf00      	nop
 8004ba6:	f7fd f93f 	bl	8001e28 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d0f9      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <HAL_RCC_OscConfig+0x8b0>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bbe:	00d2      	lsls	r2, r2, #3
 8004bc0:	4906      	ldr	r1, [pc, #24]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bc6:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <HAL_RCC_OscConfig+0x8ac>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3730      	adds	r7, #48	@ 0x30
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	ffff0007 	.word	0xffff0007

08004be4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e19c      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d910      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b87      	ldr	r3, [pc, #540]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 020f 	bic.w	r2, r3, #15
 8004c0e:	4985      	ldr	r1, [pc, #532]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b83      	ldr	r3, [pc, #524]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e184      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	4b7b      	ldr	r3, [pc, #492]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d908      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c44:	4b78      	ldr	r3, [pc, #480]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	4975      	ldr	r1, [pc, #468]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	4b70      	ldr	r3, [pc, #448]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d908      	bls.n	8004c84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c72:	4b6d      	ldr	r3, [pc, #436]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	496a      	ldr	r1, [pc, #424]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d010      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	4b64      	ldr	r3, [pc, #400]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d908      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ca0:	4b61      	ldr	r3, [pc, #388]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	495e      	ldr	r1, [pc, #376]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d010      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	4b59      	ldr	r3, [pc, #356]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d908      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cce:	4b56      	ldr	r3, [pc, #344]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4953      	ldr	r1, [pc, #332]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d908      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f023 020f 	bic.w	r2, r3, #15
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4947      	ldr	r1, [pc, #284]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d055      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d1a:	4b43      	ldr	r3, [pc, #268]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4940      	ldr	r1, [pc, #256]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d34:	4b3c      	ldr	r3, [pc, #240]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d121      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0f6      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d115      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0ea      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d64:	4b30      	ldr	r3, [pc, #192]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0de      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d74:	4b2c      	ldr	r3, [pc, #176]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0d6      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d84:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f023 0207 	bic.w	r2, r3, #7
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4925      	ldr	r1, [pc, #148]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fd f847 	bl	8001e28 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9e:	f7fd f843 	bl	8001e28 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0be      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d1eb      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d208      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de2:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	490e      	ldr	r1, [pc, #56]	@ (8004e28 <HAL_RCC_ClockConfig+0x244>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d214      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b08      	ldr	r3, [pc, #32]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4906      	ldr	r1, [pc, #24]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e086      	b.n	8004f32 <HAL_RCC_ClockConfig+0x34e>
 8004e24:	52002000 	.word	0x52002000
 8004e28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d208      	bcs.n	8004e5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e48:	4b3c      	ldr	r3, [pc, #240]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4939      	ldr	r1, [pc, #228]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d208      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e76:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	492e      	ldr	r1, [pc, #184]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d208      	bcs.n	8004eb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ea4:	4b25      	ldr	r3, [pc, #148]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	4922      	ldr	r1, [pc, #136]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d208      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4917      	ldr	r1, [pc, #92]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ee4:	f000 f834 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	4912      	ldr	r1, [pc, #72]	@ (8004f40 <HAL_RCC_ClockConfig+0x35c>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
 8004f00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f02:	4b0e      	ldr	r3, [pc, #56]	@ (8004f3c <HAL_RCC_ClockConfig+0x358>)
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <HAL_RCC_ClockConfig+0x35c>)
 8004f0c:	5cd3      	ldrb	r3, [r2, r3]
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <HAL_RCC_ClockConfig+0x360>)
 8004f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <HAL_RCC_ClockConfig+0x364>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <HAL_RCC_ClockConfig+0x368>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fc ff34 	bl	8001d94 <HAL_InitTick>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	0800af40 	.word	0x0800af40
 8004f44:	24001010 	.word	0x24001010
 8004f48:	2400100c 	.word	0x2400100c
 8004f4c:	24001014 	.word	0x24001014

08004f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	@ 0x24
 8004f54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f56:	4bb3      	ldr	r3, [pc, #716]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f5e:	2b18      	cmp	r3, #24
 8004f60:	f200 8155 	bhi.w	800520e <HAL_RCC_GetSysClockFreq+0x2be>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fd1 	.word	0x08004fd1
 8004f70:	0800520f 	.word	0x0800520f
 8004f74:	0800520f 	.word	0x0800520f
 8004f78:	0800520f 	.word	0x0800520f
 8004f7c:	0800520f 	.word	0x0800520f
 8004f80:	0800520f 	.word	0x0800520f
 8004f84:	0800520f 	.word	0x0800520f
 8004f88:	0800520f 	.word	0x0800520f
 8004f8c:	08004ff7 	.word	0x08004ff7
 8004f90:	0800520f 	.word	0x0800520f
 8004f94:	0800520f 	.word	0x0800520f
 8004f98:	0800520f 	.word	0x0800520f
 8004f9c:	0800520f 	.word	0x0800520f
 8004fa0:	0800520f 	.word	0x0800520f
 8004fa4:	0800520f 	.word	0x0800520f
 8004fa8:	0800520f 	.word	0x0800520f
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	0800520f 	.word	0x0800520f
 8004fb4:	0800520f 	.word	0x0800520f
 8004fb8:	0800520f 	.word	0x0800520f
 8004fbc:	0800520f 	.word	0x0800520f
 8004fc0:	0800520f 	.word	0x0800520f
 8004fc4:	0800520f 	.word	0x0800520f
 8004fc8:	0800520f 	.word	0x0800520f
 8004fcc:	08005003 	.word	0x08005003
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd0:	4b94      	ldr	r3, [pc, #592]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fdc:	4b91      	ldr	r3, [pc, #580]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	4a90      	ldr	r2, [pc, #576]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004fee:	e111      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ff0:	4b8d      	ldr	r3, [pc, #564]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff2:	61bb      	str	r3, [r7, #24]
      break;
 8004ff4:	e10e      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ff8:	61bb      	str	r3, [r7, #24]
      break;
 8004ffa:	e10b      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ffe:	61bb      	str	r3, [r7, #24]
      break;
 8005000:	e108      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005002:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800500c:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005016:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005018:	4b82      	ldr	r3, [pc, #520]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005022:	4b80      	ldr	r3, [pc, #512]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80e1 	beq.w	8005208 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b02      	cmp	r3, #2
 800504a:	f000 8083 	beq.w	8005154 <HAL_RCC_GetSysClockFreq+0x204>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b02      	cmp	r3, #2
 8005052:	f200 80a1 	bhi.w	8005198 <HAL_RCC_GetSysClockFreq+0x248>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x114>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d056      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005062:	e099      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005064:	4b6f      	ldr	r3, [pc, #444]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005070:	4b6c      	ldr	r3, [pc, #432]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	4a6b      	ldr	r2, [pc, #428]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b62      	ldr	r3, [pc, #392]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050ca:	e087      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b51      	ldr	r3, [pc, #324]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800510e:	e065      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800523c <HAL_RCC_GetSysClockFreq+0x2ec>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b40      	ldr	r3, [pc, #256]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005152:	e043      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005240 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b2f      	ldr	r3, [pc, #188]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005196:	e021      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800523c <HAL_RCC_GetSysClockFreq+0x2ec>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80051be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e6:	3301      	adds	r3, #1
 80051e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005200:	ee17 3a90 	vmov	r3, s15
 8005204:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005206:	e005      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
      break;
 800520c:	e002      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800520e:	4b07      	ldr	r3, [pc, #28]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005210:	61bb      	str	r3, [r7, #24]
      break;
 8005212:	bf00      	nop
  }

  return sysclockfreq;
 8005214:	69bb      	ldr	r3, [r7, #24]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3724      	adds	r7, #36	@ 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
 8005228:	03d09000 	.word	0x03d09000
 800522c:	003d0900 	.word	0x003d0900
 8005230:	017d7840 	.word	0x017d7840
 8005234:	46000000 	.word	0x46000000
 8005238:	4c742400 	.word	0x4c742400
 800523c:	4a742400 	.word	0x4a742400
 8005240:	4bbebc20 	.word	0x4bbebc20

08005244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800524a:	f7ff fe81 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 800524e:	4602      	mov	r2, r0
 8005250:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <HAL_RCC_GetHCLKFreq+0x50>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	490f      	ldr	r1, [pc, #60]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x54>)
 800525c:	5ccb      	ldrb	r3, [r1, r3]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005268:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <HAL_RCC_GetHCLKFreq+0x50>)
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x54>)
 8005272:	5cd3      	ldrb	r3, [r2, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	4a07      	ldr	r2, [pc, #28]	@ (800529c <HAL_RCC_GetHCLKFreq+0x58>)
 8005280:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005282:	4a07      	ldr	r2, [pc, #28]	@ (80052a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <HAL_RCC_GetHCLKFreq+0x58>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	58024400 	.word	0x58024400
 8005298:	0800af40 	.word	0x0800af40
 800529c:	24001010 	.word	0x24001010
 80052a0:	2400100c 	.word	0x2400100c

080052a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052a8:	f7ff ffcc 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4904      	ldr	r1, [pc, #16]	@ (80052cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	58024400 	.word	0x58024400
 80052cc:	0800af40 	.word	0x0800af40

080052d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052d4:	f7ff ffb6 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4904      	ldr	r1, [pc, #16]	@ (80052f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	58024400 	.word	0x58024400
 80052f8:	0800af40 	.word	0x0800af40

080052fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b0ca      	sub	sp, #296	@ 0x128
 8005302:	af00      	add	r7, sp, #0
 8005304:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800530e:	2300      	movs	r3, #0
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005320:	2500      	movs	r5, #0
 8005322:	ea54 0305 	orrs.w	r3, r4, r5
 8005326:	d049      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800532e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005332:	d02f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005338:	d828      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800533a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800533e:	d01a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005344:	d822      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800534e:	d007      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005350:	e01c      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005352:	4bb8      	ldr	r3, [pc, #736]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	4ab7      	ldr	r2, [pc, #732]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800535e:	e01a      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	3308      	adds	r3, #8
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fc8f 	bl	8006c8c <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fd36 	bl	8006df0 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800539e:	4ba5      	ldr	r3, [pc, #660]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ac:	4aa1      	ldr	r2, [pc, #644]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053c8:	f04f 0900 	mov.w	r9, #0
 80053cc:	ea58 0309 	orrs.w	r3, r8, r9
 80053d0:	d047      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d82a      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	08005407 	.word	0x08005407
 80053ec:	0800541d 	.word	0x0800541d
 80053f0:	0800543b 	.word	0x0800543b
 80053f4:	0800543b 	.word	0x0800543b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4a8d      	ldr	r2, [pc, #564]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005404:	e01a      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	3308      	adds	r3, #8
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fc3c 	bl	8006c8c <RCCEx_PLL2_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800541a:	e00f      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005420:	3328      	adds	r3, #40	@ 0x28
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fce3 	bl	8006df0 <RCCEx_PLL3_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005430:	e004      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005444:	4b7b      	ldr	r3, [pc, #492]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005448:	f023 0107 	bic.w	r1, r3, #7
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	4a78      	ldr	r2, [pc, #480]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005454:	430b      	orrs	r3, r1
 8005456:	6513      	str	r3, [r2, #80]	@ 0x50
 8005458:	e003      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800546e:	f04f 0b00 	mov.w	fp, #0
 8005472:	ea5a 030b 	orrs.w	r3, sl, fp
 8005476:	d04c      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005482:	d030      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005488:	d829      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800548a:	2bc0      	cmp	r3, #192	@ 0xc0
 800548c:	d02d      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800548e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005490:	d825      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005492:	2b80      	cmp	r3, #128	@ 0x80
 8005494:	d018      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d821      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d007      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054a2:	e01c      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b63      	ldr	r3, [pc, #396]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	4a62      	ldr	r2, [pc, #392]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054b0:	e01c      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	3308      	adds	r3, #8
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fbe6 	bl	8006c8c <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054c6:	e011      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	3328      	adds	r3, #40	@ 0x28
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fc8d 	bl	8006df0 <RCCEx_PLL3_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005502:	4a4c      	ldr	r2, [pc, #304]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005504:	430b      	orrs	r3, r1
 8005506:	6513      	str	r3, [r2, #80]	@ 0x50
 8005508:	e003      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800551e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005528:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800552c:	460b      	mov	r3, r1
 800552e:	4313      	orrs	r3, r2
 8005530:	d053      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800553a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800553e:	d035      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005544:	d82e      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800554a:	d031      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800554c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005550:	d828      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005556:	d01a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555c:	d822      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005566:	d007      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005568:	e01c      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556a:	4b32      	ldr	r3, [pc, #200]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a31      	ldr	r2, [pc, #196]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005576:	e01c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557c:	3308      	adds	r3, #8
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fb83 	bl	8006c8c <RCCEx_PLL2_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800558c:	e011      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	3328      	adds	r3, #40	@ 0x28
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f001 fc2a 	bl	8006df0 <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a2:	e006      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055aa:	e002      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d0:	e003      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d056      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005606:	d038      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800560c:	d831      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800560e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005612:	d034      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005614:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005618:	d82b      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800561a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800561e:	d01d      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005624:	d825      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800562a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005630:	e01f      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005638:	4ba2      	ldr	r3, [pc, #648]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	4aa1      	ldr	r2, [pc, #644]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005644:	e01c      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	3308      	adds	r3, #8
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fb1c 	bl	8006c8c <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800565a:	e011      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fbc3 	bl	8006df0 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005670:	e006      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800567e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005688:	4b8e      	ldr	r3, [pc, #568]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005698:	4a8a      	ldr	r2, [pc, #552]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569a:	430b      	orrs	r3, r1
 800569c:	6593      	str	r3, [r2, #88]	@ 0x58
 800569e:	e003      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80056b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056b8:	2300      	movs	r3, #0
 80056ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d03a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	2b30      	cmp	r3, #48	@ 0x30
 80056d0:	d01f      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056d2:	2b30      	cmp	r3, #48	@ 0x30
 80056d4:	d819      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d00c      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d815      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d019      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d111      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e6:	4b77      	ldr	r3, [pc, #476]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	4a76      	ldr	r2, [pc, #472]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056f2:	e011      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f8:	3308      	adds	r3, #8
 80056fa:	2102      	movs	r1, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 fac5 	bl	8006c8c <RCCEx_PLL2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005708:	e006      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005710:	e002      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005720:	4b68      	ldr	r3, [pc, #416]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005724:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572e:	4a65      	ldr	r2, [pc, #404]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005730:	430b      	orrs	r3, r1
 8005732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005734:	e003      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800574a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800574e:	2300      	movs	r3, #0
 8005750:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005754:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005758:	460b      	mov	r3, r1
 800575a:	4313      	orrs	r3, r2
 800575c:	d051      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005768:	d035      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800576a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576e:	d82e      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005774:	d031      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005776:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800577a:	d828      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005780:	d01a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005786:	d822      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005790:	d007      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005792:	e01c      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b4b      	ldr	r3, [pc, #300]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a4a      	ldr	r2, [pc, #296]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a0:	e01c      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	3308      	adds	r3, #8
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fa6e 	bl	8006c8c <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057b6:	e011      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	3328      	adds	r3, #40	@ 0x28
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fb15 	bl	8006df0 <RCCEx_PLL3_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057cc:	e006      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057e4:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f2:	4a34      	ldr	r2, [pc, #208]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800580e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d056      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800582c:	d033      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800582e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005832:	d82c      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005838:	d02f      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800583a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800583e:	d826      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005844:	d02b      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800584a:	d820      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800584c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005850:	d012      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005856:	d81a      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d022      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d115      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	3308      	adds	r3, #8
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fa0e 	bl	8006c8c <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005876:	e015      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	3328      	adds	r3, #40	@ 0x28
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fab5 	bl	8006df0 <RCCEx_PLL3_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800588c:	e00a      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005894:	e006      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058ac:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ba:	4a02      	ldr	r2, [pc, #8]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058bc:	430b      	orrs	r3, r1
 80058be:	6513      	str	r3, [r2, #80]	@ 0x50
 80058c0:	e006      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d055      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058fc:	d033      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80058fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005902:	d82c      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d02f      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590e:	d826      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005914:	d02b      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800591a:	d820      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800591c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005920:	d012      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005926:	d81a      	bhi.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d022      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800592c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005930:	d115      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	3308      	adds	r3, #8
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f001 f9a6 	bl	8006c8c <RCCEx_PLL2_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005946:	e015      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	3328      	adds	r3, #40	@ 0x28
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f001 fa4d 	bl	8006df0 <RCCEx_PLL3_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800595c:	e00a      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005964:	e006      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005966:	bf00      	nop
 8005968:	e004      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800597c:	4ba3      	ldr	r3, [pc, #652]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005980:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800598c:	4a9f      	ldr	r2, [pc, #636]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598e:	430b      	orrs	r3, r1
 8005990:	6593      	str	r3, [r2, #88]	@ 0x58
 8005992:	e003      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	d037      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c6:	d00e      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059cc:	d816      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d018      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d6:	d111      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d8:	4b8c      	ldr	r3, [pc, #560]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	4a8b      	ldr	r2, [pc, #556]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e4:	e00f      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	3308      	adds	r3, #8
 80059ec:	2101      	movs	r1, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 f94c 	bl	8006c8c <RCCEx_PLL2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d039      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d81c      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a56:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a99 	.word	0x08005a99
 8005a60:	08005a6d 	.word	0x08005a6d
 8005a64:	08005a7b 	.word	0x08005a7b
 8005a68:	08005a99 	.word	0x08005a99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b67      	ldr	r3, [pc, #412]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a66      	ldr	r2, [pc, #408]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f902 	bl	8006c8c <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa6:	f023 0103 	bic.w	r1, r3, #3
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab0:	4a56      	ldr	r2, [pc, #344]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ab6:	e003      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ad6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f000 809f 	beq.w	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aee:	f7fc f99b 	bl	8001e28 <HAL_GetTick>
 8005af2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af6:	e00b      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fc f996 	bl	8001e28 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	@ 0x64
 8005b06:	d903      	bls.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b0e:	e005      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b10:	4b3f      	ldr	r3, [pc, #252]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0ed      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d179      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b24:	4b39      	ldr	r3, [pc, #228]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b30:	4053      	eors	r3, r2
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d015      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3a:	4b34      	ldr	r3, [pc, #208]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b46:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	4a30      	ldr	r2, [pc, #192]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b52:	4b2e      	ldr	r3, [pc, #184]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	4a2d      	ldr	r2, [pc, #180]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b72:	d118      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fc f958 	bl	8001e28 <HAL_GetTick>
 8005b78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b7c:	e00d      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fc f953 	bl	8001e28 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d903      	bls.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005b98:	e005      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0eb      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d129      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bbe:	d10e      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bc0:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bd0:	091a      	lsrs	r2, r3, #4
 8005bd2:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6113      	str	r3, [r2, #16]
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005bde:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005be8:	6113      	str	r3, [r2, #16]
 8005bea:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfa:	4a04      	ldr	r2, [pc, #16]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c00:	e00e      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005c0a:	e009      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	58024800 	.word	0x58024800
 8005c14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f002 0301 	and.w	r3, r2, #1
 8005c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f000 8089 	beq.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c48:	2b28      	cmp	r3, #40	@ 0x28
 8005c4a:	d86b      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005d2d 	.word	0x08005d2d
 8005c58:	08005d25 	.word	0x08005d25
 8005c5c:	08005d25 	.word	0x08005d25
 8005c60:	08005d25 	.word	0x08005d25
 8005c64:	08005d25 	.word	0x08005d25
 8005c68:	08005d25 	.word	0x08005d25
 8005c6c:	08005d25 	.word	0x08005d25
 8005c70:	08005d25 	.word	0x08005d25
 8005c74:	08005cf9 	.word	0x08005cf9
 8005c78:	08005d25 	.word	0x08005d25
 8005c7c:	08005d25 	.word	0x08005d25
 8005c80:	08005d25 	.word	0x08005d25
 8005c84:	08005d25 	.word	0x08005d25
 8005c88:	08005d25 	.word	0x08005d25
 8005c8c:	08005d25 	.word	0x08005d25
 8005c90:	08005d25 	.word	0x08005d25
 8005c94:	08005d0f 	.word	0x08005d0f
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	08005d25 	.word	0x08005d25
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005d25 	.word	0x08005d25
 8005ca8:	08005d25 	.word	0x08005d25
 8005cac:	08005d25 	.word	0x08005d25
 8005cb0:	08005d25 	.word	0x08005d25
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d25 	.word	0x08005d25
 8005cbc:	08005d25 	.word	0x08005d25
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005d25 	.word	0x08005d25
 8005cc8:	08005d25 	.word	0x08005d25
 8005ccc:	08005d25 	.word	0x08005d25
 8005cd0:	08005d25 	.word	0x08005d25
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d25 	.word	0x08005d25
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d25 	.word	0x08005d25
 8005ce4:	08005d25 	.word	0x08005d25
 8005ce8:	08005d25 	.word	0x08005d25
 8005cec:	08005d25 	.word	0x08005d25
 8005cf0:	08005d25 	.word	0x08005d25
 8005cf4:	08005d2d 	.word	0x08005d2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ffc3 	bl	8006c8c <RCCEx_PLL2_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	3328      	adds	r3, #40	@ 0x28
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f86a 	bl	8006df0 <RCCEx_PLL3_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d22:	e004      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d36:	4bbf      	ldr	r3, [pc, #764]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d44:	4abb      	ldr	r2, [pc, #748]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 0302 	and.w	r3, r2, #2
 8005d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	d041      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d7a:	2b05      	cmp	r3, #5
 8005d7c:	d824      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005dd1 	.word	0x08005dd1
 8005d88:	08005d9d 	.word	0x08005d9d
 8005d8c:	08005db3 	.word	0x08005db3
 8005d90:	08005dd1 	.word	0x08005dd1
 8005d94:	08005dd1 	.word	0x08005dd1
 8005d98:	08005dd1 	.word	0x08005dd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	3308      	adds	r3, #8
 8005da2:	2101      	movs	r1, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff71 	bl	8006c8c <RCCEx_PLL2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005db0:	e00f      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	3328      	adds	r3, #40	@ 0x28
 8005db8:	2101      	movs	r1, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 f818 	bl	8006df0 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dda:	4b96      	ldr	r3, [pc, #600]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	f023 0107 	bic.w	r1, r3, #7
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005de8:	4a92      	ldr	r2, [pc, #584]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f002 0304 	and.w	r3, r2, #4
 8005e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	d044      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d825      	bhi.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e45 	.word	0x08005e45
 8005e34:	08005e5b 	.word	0x08005e5b
 8005e38:	08005e79 	.word	0x08005e79
 8005e3c:	08005e79 	.word	0x08005e79
 8005e40:	08005e79 	.word	0x08005e79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	3308      	adds	r3, #8
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 ff1d 	bl	8006c8c <RCCEx_PLL2_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e58:	e00f      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	3328      	adds	r3, #40	@ 0x28
 8005e60:	2101      	movs	r1, #1
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 ffc4 	bl	8006df0 <RCCEx_PLL3_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e6e:	e004      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e82:	4b6c      	ldr	r3, [pc, #432]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	f023 0107 	bic.w	r1, r3, #7
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e92:	4a68      	ldr	r2, [pc, #416]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e98:	e003      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f002 0320 	and.w	r3, r2, #32
 8005eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	d055      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ece:	d033      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed4:	d82c      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d02f      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee0:	d826      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ee2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ee6:	d02b      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ee8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eec:	d820      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef2:	d012      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef8:	d81a      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d022      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f02:	d115      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	3308      	adds	r3, #8
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 febd 	bl	8006c8c <RCCEx_PLL2_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f18:	e015      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	3328      	adds	r3, #40	@ 0x28
 8005f20:	2102      	movs	r1, #2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 ff64 	bl	8006df0 <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f38:	bf00      	nop
 8005f3a:	e004      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f4e:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5e:	4a35      	ldr	r2, [pc, #212]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d058      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f9a:	d033      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005f9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fa0:	d82c      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	d02f      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fac:	d826      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb2:	d02b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb8:	d820      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fbe:	d012      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc4:	d81a      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fce:	d115      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fe57 	bl	8006c8c <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e015      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	3328      	adds	r3, #40	@ 0x28
 8005fec:	2102      	movs	r1, #2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fefe 	bl	8006df0 <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e00a      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006002:	e006      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006004:	bf00      	nop
 8006006:	e004      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602a:	4a02      	ldr	r2, [pc, #8]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800602c:	430b      	orrs	r3, r1
 800602e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800604c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006056:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800605a:	460b      	mov	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	d055      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006068:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800606c:	d033      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800606e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006072:	d82c      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006078:	d02f      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800607e:	d826      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006080:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006084:	d02b      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006086:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800608a:	d820      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800608c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006090:	d012      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006096:	d81a      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d022      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800609c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a0:	d115      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	3308      	adds	r3, #8
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fdee 	bl	8006c8c <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060b6:	e015      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060bc:	3328      	adds	r3, #40	@ 0x28
 80060be:	2102      	movs	r1, #2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fe95 	bl	8006df0 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060cc:	e00a      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d4:	e006      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060d6:	bf00      	nop
 80060d8:	e004      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060ec:	4ba1      	ldr	r3, [pc, #644]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060fc:	4a9d      	ldr	r2, [pc, #628]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6593      	str	r3, [r2, #88]	@ 0x58
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f002 0308 	and.w	r3, r2, #8
 8006118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006122:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d01e      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	3328      	adds	r3, #40	@ 0x28
 8006140:	2102      	movs	r1, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fe54 	bl	8006df0 <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006154:	4b87      	ldr	r3, [pc, #540]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006164:	4a83      	ldr	r2, [pc, #524]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006166:	430b      	orrs	r3, r1
 8006168:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f002 0310 	and.w	r3, r2, #16
 8006176:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006180:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d01e      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006196:	d10c      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fe25 	bl	8006df0 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b2:	4b70      	ldr	r3, [pc, #448]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d03e      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f4:	d022      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80061f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fa:	d81b      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d00b      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006206:	e015      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	3308      	adds	r3, #8
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fd3b 	bl	8006c8c <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fde2 	bl	8006df0 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006246:	4b4b      	ldr	r3, [pc, #300]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006256:	4a47      	ldr	r2, [pc, #284]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6593      	str	r3, [r2, #88]	@ 0x58
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006272:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006274:	2300      	movs	r3, #0
 8006276:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006278:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800627c:	460b      	mov	r3, r1
 800627e:	4313      	orrs	r3, r2
 8006280:	d03b      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800628e:	d01f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006290:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006294:	d818      	bhi.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629a:	d003      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800629c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062a0:	d007      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062a2:	e011      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b33      	ldr	r3, [pc, #204]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4a32      	ldr	r2, [pc, #200]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062b0:	e00f      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b6:	3328      	adds	r3, #40	@ 0x28
 80062b8:	2101      	movs	r1, #1
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fd98 	bl	8006df0 <RCCEx_PLL3_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062c6:	e004      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062da:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ea:	4a22      	ldr	r2, [pc, #136]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006306:	673b      	str	r3, [r7, #112]	@ 0x70
 8006308:	2300      	movs	r3, #0
 800630a:	677b      	str	r3, [r7, #116]	@ 0x74
 800630c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006310:	460b      	mov	r3, r1
 8006312:	4313      	orrs	r3, r2
 8006314:	d034      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006324:	d007      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006326:	e011      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006334:	e00e      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fca4 	bl	8006c8c <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800634a:	e003      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10d      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006360:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636a:	4a02      	ldr	r2, [pc, #8]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636c:	430b      	orrs	r3, r1
 800636e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800638c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800638e:	2300      	movs	r3, #0
 8006390:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006392:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d00c      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a0:	3328      	adds	r3, #40	@ 0x28
 80063a2:	2102      	movs	r1, #2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fd23 	bl	8006df0 <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80063c4:	2300      	movs	r3, #0
 80063c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d038      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063de:	d018      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e4:	d811      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ea:	d014      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f0:	d80b      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d011      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fa:	d106      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fc:	4bc3      	ldr	r3, [pc, #780]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	4ac2      	ldr	r2, [pc, #776]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800641a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006424:	4bb9      	ldr	r3, [pc, #740]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006428:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006434:	4ab5      	ldr	r2, [pc, #724]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6553      	str	r3, [r2, #84]	@ 0x54
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006450:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006452:	2300      	movs	r3, #0
 8006454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006460:	4baa      	ldr	r3, [pc, #680]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006464:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646e:	4aa7      	ldr	r2, [pc, #668]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006470:	430b      	orrs	r3, r1
 8006472:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006480:	653b      	str	r3, [r7, #80]	@ 0x50
 8006482:	2300      	movs	r3, #0
 8006484:	657b      	str	r3, [r7, #84]	@ 0x54
 8006486:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800648a:	460b      	mov	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006490:	4b9e      	ldr	r3, [pc, #632]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064a0:	4a9a      	ldr	r2, [pc, #616]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b4:	2300      	movs	r3, #0
 80064b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064c2:	4b92      	ldr	r3, [pc, #584]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d0:	4a8e      	ldr	r2, [pc, #568]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064e4:	2300      	movs	r3, #0
 80064e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064f2:	4b86      	ldr	r3, [pc, #536]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	4a85      	ldr	r2, [pc, #532]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064fc:	6113      	str	r3, [r2, #16]
 80064fe:	4b83      	ldr	r3, [pc, #524]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006500:	6919      	ldr	r1, [r3, #16]
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800650a:	4a80      	ldr	r2, [pc, #512]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800651c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800651e:	2300      	movs	r3, #0
 8006520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006522:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800652c:	4b77      	ldr	r3, [pc, #476]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800652e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006530:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	4a74      	ldr	r2, [pc, #464]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653c:	430b      	orrs	r3, r1
 800653e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800654c:	633b      	str	r3, [r7, #48]	@ 0x30
 800654e:	2300      	movs	r3, #0
 8006550:	637b      	str	r3, [r7, #52]	@ 0x34
 8006552:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d00a      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800655c:	4b6b      	ldr	r3, [pc, #428]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006560:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800656c:	4a67      	ldr	r2, [pc, #412]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656e:	430b      	orrs	r3, r1
 8006570:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	2100      	movs	r1, #0
 800657c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006584:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006588:	460b      	mov	r3, r1
 800658a:	4313      	orrs	r3, r2
 800658c:	d011      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	3308      	adds	r3, #8
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fb78 	bl	8006c8c <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	2100      	movs	r1, #0
 80065bc:	6239      	str	r1, [r7, #32]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d011      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d2:	3308      	adds	r3, #8
 80065d4:	2101      	movs	r1, #1
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fb58 	bl	8006c8c <RCCEx_PLL2_Config>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	2100      	movs	r1, #0
 80065fc:	61b9      	str	r1, [r7, #24]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d011      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006612:	3308      	adds	r3, #8
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fb38 	bl	8006c8c <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	2100      	movs	r1, #0
 800663c:	6139      	str	r1, [r7, #16]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d011      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006652:	3328      	adds	r3, #40	@ 0x28
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fbca 	bl	8006df0 <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	2100      	movs	r1, #0
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006688:	460b      	mov	r3, r1
 800668a:	4313      	orrs	r3, r2
 800668c:	d011      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006692:	3328      	adds	r3, #40	@ 0x28
 8006694:	2101      	movs	r1, #1
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fbaa 	bl	8006df0 <RCCEx_PLL3_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	2100      	movs	r1, #0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066c8:	460b      	mov	r3, r1
 80066ca:	4313      	orrs	r3, r2
 80066cc:	d011      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	3328      	adds	r3, #40	@ 0x28
 80066d4:	2102      	movs	r1, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fb8a 	bl	8006df0 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80066f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
}
 8006700:	4618      	mov	r0, r3
 8006702:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006706:	46bd      	mov	sp, r7
 8006708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800670c:	58024400 	.word	0x58024400

08006710 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006714:	f7fe fd96 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4904      	ldr	r1, [pc, #16]	@ (8006738 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58024400 	.word	0x58024400
 8006738:	0800af40 	.word	0x0800af40

0800673c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800673c:	b480      	push	{r7}
 800673e:	b089      	sub	sp, #36	@ 0x24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006744:	4ba1      	ldr	r3, [pc, #644]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800674e:	4b9f      	ldr	r3, [pc, #636]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006752:	0b1b      	lsrs	r3, r3, #12
 8006754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006758:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800675a:	4b9c      	ldr	r3, [pc, #624]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006766:	4b99      	ldr	r3, [pc, #612]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8111 	beq.w	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	f000 8083 	beq.w	8006898 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b02      	cmp	r3, #2
 8006796:	f200 80a1 	bhi.w	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d056      	beq.n	8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067a6:	e099      	b.n	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a8:	4b88      	ldr	r3, [pc, #544]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02d      	beq.n	8006810 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b4:	4b85      	ldr	r3, [pc, #532]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a84      	ldr	r2, [pc, #528]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067de:	4b7b      	ldr	r3, [pc, #492]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800680e:	e087      	b.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b6a      	ldr	r3, [pc, #424]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a03 	vldr	s12, [r7, #12]
 8006836:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006852:	e065      	b.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b59      	ldr	r3, [pc, #356]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006896:	e043      	b.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b48      	ldr	r3, [pc, #288]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80068be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068da:	e021      	b.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006920:	4b2a      	ldr	r3, [pc, #168]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006924:	0a5b      	lsrs	r3, r3, #9
 8006926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693a:	edd7 6a07 	vldr	s13, [r7, #28]
 800693e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006946:	ee17 2a90 	vmov	r2, s15
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800694e:	4b1f      	ldr	r3, [pc, #124]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006964:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006968:	edd7 6a07 	vldr	s13, [r7, #28]
 800696c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006974:	ee17 2a90 	vmov	r2, s15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800697c:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	0e1b      	lsrs	r3, r3, #24
 8006982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006996:	edd7 6a07 	vldr	s13, [r7, #28]
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069aa:	e008      	b.n	80069be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
}
 80069be:	bf00      	nop
 80069c0:	3724      	adds	r7, #36	@ 0x24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	58024400 	.word	0x58024400
 80069d0:	03d09000 	.word	0x03d09000
 80069d4:	46000000 	.word	0x46000000
 80069d8:	4c742400 	.word	0x4c742400
 80069dc:	4a742400 	.word	0x4a742400
 80069e0:	4bbebc20 	.word	0x4bbebc20

080069e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b089      	sub	sp, #36	@ 0x24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ec:	4ba1      	ldr	r3, [pc, #644]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069f6:	4b9f      	ldr	r3, [pc, #636]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fa:	0d1b      	lsrs	r3, r3, #20
 80069fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a02:	4b9c      	ldr	r3, [pc, #624]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a0e:	4b99      	ldr	r3, [pc, #612]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8111 	beq.w	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	f000 8083 	beq.w	8006b40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f200 80a1 	bhi.w	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d056      	beq.n	8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a4e:	e099      	b.n	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a50:	4b88      	ldr	r3, [pc, #544]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d02d      	beq.n	8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a5c:	4b85      	ldr	r3, [pc, #532]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	4a84      	ldr	r2, [pc, #528]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a86:	4b7b      	ldr	r3, [pc, #492]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ab6:	e087      	b.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aca:	4b6a      	ldr	r3, [pc, #424]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006afa:	e065      	b.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0e:	4b59      	ldr	r3, [pc, #356]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3e:	e043      	b.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b52:	4b48      	ldr	r3, [pc, #288]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b82:	e021      	b.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b37      	ldr	r3, [pc, #220]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	0a5b      	lsrs	r3, r3, #9
 8006bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bee:	ee17 2a90 	vmov	r2, s15
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1c:	ee17 2a90 	vmov	r2, s15
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c24:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4a:	ee17 2a90 	vmov	r2, s15
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c52:	e008      	b.n	8006c66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	bf00      	nop
 8006c68:	3724      	adds	r7, #36	@ 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	58024400 	.word	0x58024400
 8006c78:	03d09000 	.word	0x03d09000
 8006c7c:	46000000 	.word	0x46000000
 8006c80:	4c742400 	.word	0x4c742400
 8006c84:	4a742400 	.word	0x4a742400
 8006c88:	4bbebc20 	.word	0x4bbebc20

08006c8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c9a:	4b53      	ldr	r3, [pc, #332]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d101      	bne.n	8006caa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e099      	b.n	8006dde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006caa:	4b4f      	ldr	r3, [pc, #316]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4e      	ldr	r2, [pc, #312]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb6:	f7fb f8b7 	bl	8001e28 <HAL_GetTick>
 8006cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cbc:	e008      	b.n	8006cd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cbe:	f7fb f8b3 	bl	8001e28 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e086      	b.n	8006dde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cd0:	4b45      	ldr	r3, [pc, #276]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f0      	bne.n	8006cbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cdc:	4b42      	ldr	r3, [pc, #264]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	031b      	lsls	r3, r3, #12
 8006cea:	493f      	ldr	r1, [pc, #252]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	025b      	lsls	r3, r3, #9
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	061b      	lsls	r3, r3, #24
 8006d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d20:	4931      	ldr	r1, [pc, #196]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d26:	4b30      	ldr	r3, [pc, #192]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	492d      	ldr	r1, [pc, #180]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d38:	4b2b      	ldr	r3, [pc, #172]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	f023 0220 	bic.w	r2, r3, #32
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	4928      	ldr	r1, [pc, #160]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d4a:	4b27      	ldr	r3, [pc, #156]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	4a26      	ldr	r2, [pc, #152]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d50:	f023 0310 	bic.w	r3, r3, #16
 8006d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <RCCEx_PLL2_Config+0x160>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	69d2      	ldr	r2, [r2, #28]
 8006d62:	00d2      	lsls	r2, r2, #3
 8006d64:	4920      	ldr	r1, [pc, #128]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	f043 0310 	orr.w	r3, r3, #16
 8006d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d80:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d88:	e00f      	b.n	8006daa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d106      	bne.n	8006d9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d90:	4b15      	ldr	r3, [pc, #84]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d9c:	e005      	b.n	8006daa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d9e:	4b12      	ldr	r3, [pc, #72]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	4a11      	ldr	r2, [pc, #68]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006da8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006daa:	4b0f      	ldr	r3, [pc, #60]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a0e      	ldr	r2, [pc, #56]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db6:	f7fb f837 	bl	8001e28 <HAL_GetTick>
 8006dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dbc:	e008      	b.n	8006dd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dbe:	f7fb f833 	bl	8001e28 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e006      	b.n	8006dde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dd0:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	58024400 	.word	0x58024400
 8006dec:	ffff0007 	.word	0xffff0007

08006df0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfe:	4b53      	ldr	r3, [pc, #332]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d101      	bne.n	8006e0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e099      	b.n	8006f42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a4e      	ldr	r2, [pc, #312]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1a:	f7fb f805 	bl	8001e28 <HAL_GetTick>
 8006e1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e20:	e008      	b.n	8006e34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e22:	f7fb f801 	bl	8001e28 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e086      	b.n	8006f42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e34:	4b45      	ldr	r3, [pc, #276]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f0      	bne.n	8006e22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e40:	4b42      	ldr	r3, [pc, #264]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	051b      	lsls	r3, r3, #20
 8006e4e:	493f      	ldr	r1, [pc, #252]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	025b      	lsls	r3, r3, #9
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e84:	4931      	ldr	r1, [pc, #196]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e8a:	4b30      	ldr	r3, [pc, #192]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	492d      	ldr	r1, [pc, #180]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	4928      	ldr	r1, [pc, #160]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eae:	4b27      	ldr	r3, [pc, #156]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	4a26      	ldr	r2, [pc, #152]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ebe:	4b24      	ldr	r3, [pc, #144]	@ (8006f50 <RCCEx_PLL3_Config+0x160>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	69d2      	ldr	r2, [r2, #28]
 8006ec6:	00d2      	lsls	r2, r2, #3
 8006ec8:	4920      	ldr	r1, [pc, #128]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ece:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee4:	4a19      	ldr	r2, [pc, #100]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ee6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eec:	e00f      	b.n	8006f0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d106      	bne.n	8006f02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ef4:	4b15      	ldr	r3, [pc, #84]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a14      	ldr	r2, [pc, #80]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006efa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006efe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f00:	e005      	b.n	8006f0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f02:	4b12      	ldr	r3, [pc, #72]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	4a11      	ldr	r2, [pc, #68]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006f08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a0e      	ldr	r2, [pc, #56]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f1a:	f7fa ff85 	bl	8001e28 <HAL_GetTick>
 8006f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f20:	e008      	b.n	8006f34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f22:	f7fa ff81 	bl	8001e28 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e006      	b.n	8006f42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <RCCEx_PLL3_Config+0x15c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0f0      	beq.n	8006f22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	ffff0007 	.word	0xffff0007

08006f54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e10f      	b.n	8007186 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a87      	ldr	r2, [pc, #540]	@ (8007190 <HAL_SPI_Init+0x23c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <HAL_SPI_Init+0x42>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a86      	ldr	r2, [pc, #536]	@ (8007194 <HAL_SPI_Init+0x240>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00a      	beq.n	8006f96 <HAL_SPI_Init+0x42>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a84      	ldr	r2, [pc, #528]	@ (8007198 <HAL_SPI_Init+0x244>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d005      	beq.n	8006f96 <HAL_SPI_Init+0x42>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d901      	bls.n	8006f96 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0f7      	b.n	8007186 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fe2e 	bl	8007bf8 <SPI_GetPacketSize>
 8006f9c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7b      	ldr	r2, [pc, #492]	@ (8007190 <HAL_SPI_Init+0x23c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_SPI_Init+0x6e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a79      	ldr	r2, [pc, #484]	@ (8007194 <HAL_SPI_Init+0x240>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <HAL_SPI_Init+0x6e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a78      	ldr	r2, [pc, #480]	@ (8007198 <HAL_SPI_Init+0x244>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_Init+0x6e>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d811      	bhi.n	8006fe6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fc6:	4a72      	ldr	r2, [pc, #456]	@ (8007190 <HAL_SPI_Init+0x23c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a70      	ldr	r2, [pc, #448]	@ (8007194 <HAL_SPI_Init+0x240>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_SPI_Init+0x8c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a6f      	ldr	r2, [pc, #444]	@ (8007198 <HAL_SPI_Init+0x244>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d104      	bne.n	8006fea <HAL_SPI_Init+0x96>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d901      	bls.n	8006fea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0cd      	b.n	8007186 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa fbcc 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007026:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007030:	d119      	bne.n	8007066 <HAL_SPI_Init+0x112>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800703a:	d103      	bne.n	8007044 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007054:	d107      	bne.n	8007066 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007064:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00f      	beq.n	8007092 <HAL_SPI_Init+0x13e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b06      	cmp	r3, #6
 8007078:	d90b      	bls.n	8007092 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e007      	b.n	80070a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b4:	ea42 0103 	orr.w	r1, r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007102:	ea42 0103 	orr.w	r1, r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d113      	bne.n	8007142 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800712c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007140:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0201 	bic.w	r2, r2, #1
 8007150:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40013000 	.word	0x40013000
 8007194:	40003800 	.word	0x40003800
 8007198:	40003c00 	.word	0x40003c00

0800719c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4613      	mov	r3, r2
 80071aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3320      	adds	r3, #32
 80071b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b4:	f7fa fe38 	bl	8001e28 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e1d1      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0x3a>
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e1c9      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_SPI_Transmit+0x4c>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e1c2      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2203      	movs	r2, #3
 80071f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007240:	d108      	bne.n	8007254 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e009      	b.n	8007268 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007266:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4b96      	ldr	r3, [pc, #600]	@ (80074c8 <HAL_SPI_Transmit+0x32c>)
 8007270:	4013      	ands	r3, r2
 8007272:	88f9      	ldrh	r1, [r7, #6]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	430b      	orrs	r3, r1
 800727a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007294:	d107      	bne.n	80072a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d947      	bls.n	800733e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072ae:	e03f      	b.n	8007330 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d114      	bne.n	80072e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80072e6:	e023      	b.n	8007330 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e8:	f7fa fd9e 	bl	8001e28 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d803      	bhi.n	8007300 <HAL_SPI_Transmit+0x164>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d102      	bne.n	8007306 <HAL_SPI_Transmit+0x16a>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d114      	bne.n	8007330 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fba8 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007312:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e11e      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1b9      	bne.n	80072b0 <HAL_SPI_Transmit+0x114>
 800733c:	e0f1      	b.n	8007522 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	2b07      	cmp	r3, #7
 8007344:	f240 80e6 	bls.w	8007514 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007348:	e05d      	b.n	8007406 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d132      	bne.n	80073be <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d918      	bls.n	8007396 <HAL_SPI_Transmit+0x1fa>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d014      	beq.n	8007396 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800737c:	1d1a      	adds	r2, r3, #4
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b02      	subs	r3, #2
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007394:	e037      	b.n	8007406 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739a:	881a      	ldrh	r2, [r3, #0]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a4:	1c9a      	adds	r2, r3, #2
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073bc:	e023      	b.n	8007406 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073be:	f7fa fd33 	bl	8001e28 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d803      	bhi.n	80073d6 <HAL_SPI_Transmit+0x23a>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Transmit+0x240>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d114      	bne.n	8007406 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fb3d 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e0b3      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d19b      	bne.n	800734a <HAL_SPI_Transmit+0x1ae>
 8007412:	e086      	b.n	8007522 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d154      	bne.n	80074cc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d918      	bls.n	8007460 <HAL_SPI_Transmit+0x2c4>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007432:	2b40      	cmp	r3, #64	@ 0x40
 8007434:	d914      	bls.n	8007460 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007446:	1d1a      	adds	r2, r3, #4
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b04      	subs	r3, #4
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800745e:	e059      	b.n	8007514 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d917      	bls.n	800749c <HAL_SPI_Transmit+0x300>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d013      	beq.n	800749c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007482:	1c9a      	adds	r2, r3, #2
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b02      	subs	r3, #2
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800749a:	e03b      	b.n	8007514 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3320      	adds	r3, #32
 80074a6:	7812      	ldrb	r2, [r2, #0]
 80074a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074c6:	e025      	b.n	8007514 <HAL_SPI_Transmit+0x378>
 80074c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074cc:	f7fa fcac 	bl	8001e28 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d803      	bhi.n	80074e4 <HAL_SPI_Transmit+0x348>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d102      	bne.n	80074ea <HAL_SPI_Transmit+0x34e>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d114      	bne.n	8007514 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fab6 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e02c      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f af79 	bne.w	8007414 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2200      	movs	r2, #0
 800752a:	2108      	movs	r1, #8
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fb35 	bl	8007b9c <SPI_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fa87 	bl	8007a5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800756c:	2300      	movs	r3, #0
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop

08007578 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	4613      	mov	r3, r2
 8007586:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	b29b      	uxth	r3, r3
 8007590:	3301      	adds	r3, #1
 8007592:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800759c:	f7fa fc44 	bl	8001e28 <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80075ae:	2302      	movs	r3, #2
 80075b0:	e250      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_SPI_Receive+0x46>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e248      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_SPI_Receive+0x58>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e241      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2204      	movs	r2, #4
 80075dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007628:	d108      	bne.n	800763c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e009      	b.n	8007650 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800764e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4b95      	ldr	r3, [pc, #596]	@ (80078ac <HAL_SPI_Receive+0x334>)
 8007658:	4013      	ands	r3, r2
 800765a:	88f9      	ldrh	r1, [r7, #6]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	430b      	orrs	r3, r1
 8007662:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800767c:	d107      	bne.n	800768e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800768c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b0f      	cmp	r3, #15
 8007694:	d96c      	bls.n	8007770 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007696:	e064      	b.n	8007762 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d114      	bne.n	80076d8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076d6:	e044      	b.n	8007762 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8bfa      	ldrh	r2, [r7, #30]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d919      	bls.n	800771a <HAL_SPI_Receive+0x1a2>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d014      	beq.n	800771a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076fa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007718:	e023      	b.n	8007762 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800771a:	f7fa fb85 	bl	8001e28 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d803      	bhi.n	8007732 <HAL_SPI_Receive+0x1ba>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d102      	bne.n	8007738 <HAL_SPI_Receive+0x1c0>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d114      	bne.n	8007762 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f98f 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e178      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d194      	bne.n	8007698 <HAL_SPI_Receive+0x120>
 800776e:	e15e      	b.n	8007a2e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b07      	cmp	r3, #7
 8007776:	f240 8153 	bls.w	8007a20 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800777a:	e08f      	b.n	800789c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b01      	cmp	r3, #1
 8007790:	d114      	bne.n	80077bc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	8812      	ldrh	r2, [r2, #0]
 800779a:	b292      	uxth	r2, r2
 800779c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a2:	1c9a      	adds	r2, r3, #2
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077ba:	e06f      	b.n	800789c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	8bfa      	ldrh	r2, [r7, #30]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d924      	bls.n	8007814 <HAL_SPI_Receive+0x29c>
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01f      	beq.n	8007814 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	8812      	ldrh	r2, [r2, #0]
 80077dc:	b292      	uxth	r2, r2
 80077de:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	8812      	ldrh	r2, [r2, #0]
 80077f2:	b292      	uxth	r2, r2
 80077f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fa:	1c9a      	adds	r2, r3, #2
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b02      	subs	r3, #2
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007812:	e043      	b.n	800789c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d119      	bne.n	8007854 <HAL_SPI_Receive+0x2dc>
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d014      	beq.n	8007854 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	8812      	ldrh	r2, [r2, #0]
 8007832:	b292      	uxth	r2, r2
 8007834:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783a:	1c9a      	adds	r2, r3, #2
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007852:	e023      	b.n	800789c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007854:	f7fa fae8 	bl	8001e28 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d803      	bhi.n	800786c <HAL_SPI_Receive+0x2f4>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d102      	bne.n	8007872 <HAL_SPI_Receive+0x2fa>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d114      	bne.n	800789c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f8f2 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800787e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e0db      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f47f af69 	bne.w	800777c <HAL_SPI_Receive+0x204>
 80078aa:	e0c0      	b.n	8007a2e <HAL_SPI_Receive+0x4b6>
 80078ac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d117      	bne.n	80078f6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d2:	7812      	ldrb	r2, [r2, #0]
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078f4:	e094      	b.n	8007a20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8bfa      	ldrh	r2, [r7, #30]
 8007900:	429a      	cmp	r2, r3
 8007902:	d946      	bls.n	8007992 <HAL_SPI_Receive+0x41a>
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d041      	beq.n	8007992 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800791a:	7812      	ldrb	r2, [r2, #0]
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b04      	subs	r3, #4
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007990:	e046      	b.n	8007a20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b03      	cmp	r3, #3
 800799c:	d81c      	bhi.n	80079d8 <HAL_SPI_Receive+0x460>
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d017      	beq.n	80079d8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079b4:	7812      	ldrb	r2, [r2, #0]
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079d6:	e023      	b.n	8007a20 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d8:	f7fa fa26 	bl	8001e28 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d803      	bhi.n	80079f0 <HAL_SPI_Receive+0x478>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d102      	bne.n	80079f6 <HAL_SPI_Receive+0x47e>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d114      	bne.n	8007a20 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f830 	bl	8007a5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e019      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f af41 	bne.w	80078b0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f814 	bl	8007a5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007a52:	2300      	movs	r3, #0
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0208 	orr.w	r2, r2, #8
 8007a7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0210 	orr.w	r2, r2, #16
 8007a8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0201 	bic.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6919      	ldr	r1, [r3, #16]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8007b98 <SPI_CloseTransfer+0x13c>)
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007aba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d014      	beq.n	8007af2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00f      	beq.n	8007af2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0220 	orr.w	r2, r2, #32
 8007af0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d014      	beq.n	8007b28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00f      	beq.n	8007b28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b38:	f043 0201 	orr.w	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b62:	f043 0208 	orr.w	r2, r3, #8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007b8c:	bf00      	nop
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	fffffc90 	.word	0xfffffc90

08007b9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bac:	e010      	b.n	8007bd0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bae:	f7fa f93b 	bl	8001e28 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d803      	bhi.n	8007bc6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d102      	bne.n	8007bcc <SPI_WaitOnFlagUntilTimeout+0x30>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e00f      	b.n	8007bf0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695a      	ldr	r2, [r3, #20]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d0df      	beq.n	8007bae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	3307      	adds	r3, #7
 8007c16:	08db      	lsrs	r3, r3, #3
 8007c18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e042      	b.n	8007cc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7f9 fe0a 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2224      	movs	r2, #36	@ 0x24
 8007c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fa61 	bl	8009140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fcf6 	bl	8008670 <UART_SetConfig>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e01b      	b.n	8007cc6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0201 	orr.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fae0 	bl	8009284 <UART_CheckIdleState>
 8007cc4:	4603      	mov	r3, r0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b08a      	sub	sp, #40	@ 0x28
 8007cd2:	af02      	add	r7, sp, #8
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d17b      	bne.n	8007de0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_UART_Transmit+0x26>
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e074      	b.n	8007de2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2221      	movs	r2, #33	@ 0x21
 8007d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d08:	f7fa f88e 	bl	8001e28 <HAL_GetTick>
 8007d0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d26:	d108      	bne.n	8007d3a <HAL_UART_Transmit+0x6c>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e003      	b.n	8007d42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d42:	e030      	b.n	8007da6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	@ 0x80
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 fb42 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e03d      	b.n	8007de2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	3302      	adds	r3, #2
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e007      	b.n	8007d94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	3301      	adds	r3, #1
 8007d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1c8      	bne.n	8007d44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2200      	movs	r2, #0
 8007dba:	2140      	movs	r1, #64	@ 0x40
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f001 fb0b 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e006      	b.n	8007de2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e000      	b.n	8007de2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3720      	adds	r7, #32
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d137      	bne.n	8007e74 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_UART_Receive_IT+0x24>
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e030      	b.n	8007e76 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <HAL_UART_Receive_IT+0x94>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d01f      	beq.n	8007e64 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d018      	beq.n	8007e64 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	623b      	str	r3, [r7, #32]
 8007e52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	69f9      	ldr	r1, [r7, #28]
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e6      	bne.n	8007e32 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	461a      	mov	r2, r3
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f001 fb22 	bl	80094b4 <UART_Start_Receive_IT>
 8007e70:	4603      	mov	r3, r0
 8007e72:	e000      	b.n	8007e76 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e74:	2302      	movs	r3, #2
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3728      	adds	r7, #40	@ 0x28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	58000c00 	.word	0x58000c00

08007e84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b0ba      	sub	sp, #232	@ 0xe8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007eaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007eae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11b      	bne.n	8007ef8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d015      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 8393 	beq.w	8008614 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
      }
      return;
 8007ef6:	e38d      	b.n	8008614 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8123 	beq.w	8008148 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f06:	4b8d      	ldr	r3, [pc, #564]	@ (800813c <HAL_UART_IRQHandler+0x2b8>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f12:	4b8b      	ldr	r3, [pc, #556]	@ (8008140 <HAL_UART_IRQHandler+0x2bc>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8116 	beq.w	8008148 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d011      	beq.n	8007f4c <HAL_UART_IRQHandler+0xc8>
 8007f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f42:	f043 0201 	orr.w	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d011      	beq.n	8007f7c <HAL_UART_IRQHandler+0xf8>
 8007f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f72:	f043 0204 	orr.w	r2, r3, #4
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d011      	beq.n	8007fac <HAL_UART_IRQHandler+0x128>
 8007f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa2:	f043 0202 	orr.w	r2, r3, #2
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d017      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800813c <HAL_UART_IRQHandler+0x2b8>)
 8007fca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fde:	f043 0208 	orr.w	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d012      	beq.n	800801a <HAL_UART_IRQHandler+0x196>
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008010:	f043 0220 	orr.w	r2, r3, #32
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 82f9 	beq.w	8008618 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d013      	beq.n	800805a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806e:	2b40      	cmp	r3, #64	@ 0x40
 8008070:	d005      	beq.n	800807e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008076:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800807a:	2b00      	cmp	r3, #0
 800807c:	d054      	beq.n	8008128 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fb3a 	bl	80096f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808e:	2b40      	cmp	r3, #64	@ 0x40
 8008090:	d146      	bne.n	8008120 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3308      	adds	r3, #8
 80080ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1d9      	bne.n	8008092 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ee:	4a15      	ldr	r2, [pc, #84]	@ (8008144 <HAL_UART_IRQHandler+0x2c0>)
 80080f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fa fb77 	bl	80027ec <HAL_DMA_Abort_IT>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d019      	beq.n	8008138 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008112:	4610      	mov	r0, r2
 8008114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008116:	e00f      	b.n	8008138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa93 	bl	8008644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811e:	e00b      	b.n	8008138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fa8f 	bl	8008644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008126:	e007      	b.n	8008138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa8b 	bl	8008644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008136:	e26f      	b.n	8008618 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	bf00      	nop
    return;
 800813a:	e26d      	b.n	8008618 <HAL_UART_IRQHandler+0x794>
 800813c:	10000001 	.word	0x10000001
 8008140:	04000120 	.word	0x04000120
 8008144:	080097c5 	.word	0x080097c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 8203 	bne.w	8008558 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008156:	f003 0310 	and.w	r3, r3, #16
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 81fc 	beq.w	8008558 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 81f5 	beq.w	8008558 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2210      	movs	r2, #16
 8008174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	f040 816d 	bne.w	8008460 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4aa4      	ldr	r2, [pc, #656]	@ (8008420 <HAL_UART_IRQHandler+0x59c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d068      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4aa1      	ldr	r2, [pc, #644]	@ (8008424 <HAL_UART_IRQHandler+0x5a0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d061      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a9f      	ldr	r2, [pc, #636]	@ (8008428 <HAL_UART_IRQHandler+0x5a4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d05a      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a9c      	ldr	r2, [pc, #624]	@ (800842c <HAL_UART_IRQHandler+0x5a8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d053      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a9a      	ldr	r2, [pc, #616]	@ (8008430 <HAL_UART_IRQHandler+0x5ac>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d04c      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a97      	ldr	r2, [pc, #604]	@ (8008434 <HAL_UART_IRQHandler+0x5b0>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d045      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a95      	ldr	r2, [pc, #596]	@ (8008438 <HAL_UART_IRQHandler+0x5b4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d03e      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a92      	ldr	r2, [pc, #584]	@ (800843c <HAL_UART_IRQHandler+0x5b8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d037      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a90      	ldr	r2, [pc, #576]	@ (8008440 <HAL_UART_IRQHandler+0x5bc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d030      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a8d      	ldr	r2, [pc, #564]	@ (8008444 <HAL_UART_IRQHandler+0x5c0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d029      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a8b      	ldr	r2, [pc, #556]	@ (8008448 <HAL_UART_IRQHandler+0x5c4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d022      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a88      	ldr	r2, [pc, #544]	@ (800844c <HAL_UART_IRQHandler+0x5c8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d01b      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a86      	ldr	r2, [pc, #536]	@ (8008450 <HAL_UART_IRQHandler+0x5cc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d014      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a83      	ldr	r2, [pc, #524]	@ (8008454 <HAL_UART_IRQHandler+0x5d0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00d      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a81      	ldr	r2, [pc, #516]	@ (8008458 <HAL_UART_IRQHandler+0x5d4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d006      	beq.n	8008266 <HAL_UART_IRQHandler+0x3e2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a7e      	ldr	r2, [pc, #504]	@ (800845c <HAL_UART_IRQHandler+0x5d8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d106      	bne.n	8008274 <HAL_UART_IRQHandler+0x3f0>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	b29b      	uxth	r3, r3
 8008272:	e005      	b.n	8008280 <HAL_UART_IRQHandler+0x3fc>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80ad 	beq.w	80083e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008298:	429a      	cmp	r2, r3
 800829a:	f080 80a5 	bcs.w	80083e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b4:	f000 8087 	beq.w	80083c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1da      	bne.n	80082b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008326:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800832a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800832e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e1      	bne.n	8008302 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800834e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008364:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e3      	bne.n	800833e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008394:	f023 0310 	bic.w	r3, r3, #16
 8008398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e4      	bne.n	8008384 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7f9 fef5 	bl	80021b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2202      	movs	r2, #2
 80083ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f939 	bl	8008658 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80083e6:	e119      	b.n	800861c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f040 8112 	bne.w	800861c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008404:	f040 810a 	bne.w	800861c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f91e 	bl	8008658 <HAL_UARTEx_RxEventCallback>
      return;
 800841c:	e0fe      	b.n	800861c <HAL_UART_IRQHandler+0x798>
 800841e:	bf00      	nop
 8008420:	40020010 	.word	0x40020010
 8008424:	40020028 	.word	0x40020028
 8008428:	40020040 	.word	0x40020040
 800842c:	40020058 	.word	0x40020058
 8008430:	40020070 	.word	0x40020070
 8008434:	40020088 	.word	0x40020088
 8008438:	400200a0 	.word	0x400200a0
 800843c:	400200b8 	.word	0x400200b8
 8008440:	40020410 	.word	0x40020410
 8008444:	40020428 	.word	0x40020428
 8008448:	40020440 	.word	0x40020440
 800844c:	40020458 	.word	0x40020458
 8008450:	40020470 	.word	0x40020470
 8008454:	40020488 	.word	0x40020488
 8008458:	400204a0 	.word	0x400204a0
 800845c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800846c:	b29b      	uxth	r3, r3
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80cf 	beq.w	8008620 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80ca 	beq.w	8008620 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800849a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e4      	bne.n	800848c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	623b      	str	r3, [r7, #32]
   return(result);
 80084d2:	6a3a      	ldr	r2, [r7, #32]
 80084d4:	4b55      	ldr	r3, [pc, #340]	@ (800862c <HAL_UART_IRQHandler+0x7a8>)
 80084d6:	4013      	ands	r3, r2
 80084d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80084e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e3      	bne.n	80084c2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	60fb      	str	r3, [r7, #12]
   return(result);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0310 	bic.w	r3, r3, #16
 8008522:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	69b9      	ldr	r1, [r7, #24]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	617b      	str	r3, [r7, #20]
   return(result);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e4      	bne.n	800850e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800854a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f881 	bl	8008658 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008556:	e063      	b.n	8008620 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <HAL_UART_IRQHandler+0x6fe>
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d008      	beq.n	8008582 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 fe80 	bl	800a280 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008580:	e051      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d014      	beq.n	80085b8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800858e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800859a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d03a      	beq.n	8008624 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
    }
    return;
 80085b6:	e035      	b.n	8008624 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <HAL_UART_IRQHandler+0x754>
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f909 	bl	80097e8 <UART_EndTransmit_IT>
    return;
 80085d6:	e026      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <HAL_UART_IRQHandler+0x774>
 80085e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fe59 	bl	800a2a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f6:	e016      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_UART_IRQHandler+0x7a2>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008608:	2b00      	cmp	r3, #0
 800860a:	da0c      	bge.n	8008626 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fe41 	bl	800a294 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008612:	e008      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008614:	bf00      	nop
 8008616:	e006      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008618:	bf00      	nop
 800861a:	e004      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
      return;
 800861c:	bf00      	nop
 800861e:	e002      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008620:	bf00      	nop
 8008622:	e000      	b.n	8008626 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008624:	bf00      	nop
  }
}
 8008626:	37e8      	adds	r7, #232	@ 0xe8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	effffffe 	.word	0xeffffffe

08008630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008674:	b092      	sub	sp, #72	@ 0x48
 8008676:	af00      	add	r7, sp, #0
 8008678:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	431a      	orrs	r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	431a      	orrs	r2, r3
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	4313      	orrs	r3, r2
 8008696:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4bbe      	ldr	r3, [pc, #760]	@ (8008998 <UART_SetConfig+0x328>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4ab3      	ldr	r2, [pc, #716]	@ (800899c <UART_SetConfig+0x32c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d8:	4313      	orrs	r3, r2
 80086da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	4baf      	ldr	r3, [pc, #700]	@ (80089a0 <UART_SetConfig+0x330>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	f023 010f 	bic.w	r1, r3, #15
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4aa6      	ldr	r2, [pc, #664]	@ (80089a4 <UART_SetConfig+0x334>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d177      	bne.n	8008800 <UART_SetConfig+0x190>
 8008710:	4ba5      	ldr	r3, [pc, #660]	@ (80089a8 <UART_SetConfig+0x338>)
 8008712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008718:	2b28      	cmp	r3, #40	@ 0x28
 800871a:	d86d      	bhi.n	80087f8 <UART_SetConfig+0x188>
 800871c:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <UART_SetConfig+0xb4>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	080087c9 	.word	0x080087c9
 8008728:	080087f9 	.word	0x080087f9
 800872c:	080087f9 	.word	0x080087f9
 8008730:	080087f9 	.word	0x080087f9
 8008734:	080087f9 	.word	0x080087f9
 8008738:	080087f9 	.word	0x080087f9
 800873c:	080087f9 	.word	0x080087f9
 8008740:	080087f9 	.word	0x080087f9
 8008744:	080087d1 	.word	0x080087d1
 8008748:	080087f9 	.word	0x080087f9
 800874c:	080087f9 	.word	0x080087f9
 8008750:	080087f9 	.word	0x080087f9
 8008754:	080087f9 	.word	0x080087f9
 8008758:	080087f9 	.word	0x080087f9
 800875c:	080087f9 	.word	0x080087f9
 8008760:	080087f9 	.word	0x080087f9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087f9 	.word	0x080087f9
 800876c:	080087f9 	.word	0x080087f9
 8008770:	080087f9 	.word	0x080087f9
 8008774:	080087f9 	.word	0x080087f9
 8008778:	080087f9 	.word	0x080087f9
 800877c:	080087f9 	.word	0x080087f9
 8008780:	080087f9 	.word	0x080087f9
 8008784:	080087e1 	.word	0x080087e1
 8008788:	080087f9 	.word	0x080087f9
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080087f9 	.word	0x080087f9
 8008794:	080087f9 	.word	0x080087f9
 8008798:	080087f9 	.word	0x080087f9
 800879c:	080087f9 	.word	0x080087f9
 80087a0:	080087f9 	.word	0x080087f9
 80087a4:	080087e9 	.word	0x080087e9
 80087a8:	080087f9 	.word	0x080087f9
 80087ac:	080087f9 	.word	0x080087f9
 80087b0:	080087f9 	.word	0x080087f9
 80087b4:	080087f9 	.word	0x080087f9
 80087b8:	080087f9 	.word	0x080087f9
 80087bc:	080087f9 	.word	0x080087f9
 80087c0:	080087f9 	.word	0x080087f9
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e222      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e21e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e21a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e216      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087e8:	2320      	movs	r3, #32
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e212      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087f0:	2340      	movs	r3, #64	@ 0x40
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e20e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e20a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a69      	ldr	r2, [pc, #420]	@ (80089ac <UART_SetConfig+0x33c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d130      	bne.n	800886c <UART_SetConfig+0x1fc>
 800880a:	4b67      	ldr	r3, [pc, #412]	@ (80089a8 <UART_SetConfig+0x338>)
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b05      	cmp	r3, #5
 8008814:	d826      	bhi.n	8008864 <UART_SetConfig+0x1f4>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <UART_SetConfig+0x1ac>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008835 	.word	0x08008835
 8008820:	0800883d 	.word	0x0800883d
 8008824:	08008845 	.word	0x08008845
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008855 	.word	0x08008855
 8008830:	0800885d 	.word	0x0800885d
 8008834:	2300      	movs	r3, #0
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e1ec      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e1e8      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e1e4      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e1e0      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008854:	2320      	movs	r3, #32
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e1dc      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800885c:	2340      	movs	r3, #64	@ 0x40
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e1d8      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008864:	2380      	movs	r3, #128	@ 0x80
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e1d4      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a4f      	ldr	r2, [pc, #316]	@ (80089b0 <UART_SetConfig+0x340>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d130      	bne.n	80088d8 <UART_SetConfig+0x268>
 8008876:	4b4c      	ldr	r3, [pc, #304]	@ (80089a8 <UART_SetConfig+0x338>)
 8008878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b05      	cmp	r3, #5
 8008880:	d826      	bhi.n	80088d0 <UART_SetConfig+0x260>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <UART_SetConfig+0x218>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088a1 	.word	0x080088a1
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088c1 	.word	0x080088c1
 800889c:	080088c9 	.word	0x080088c9
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e1b6      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e1b2      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e1ae      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e1aa      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088c0:	2320      	movs	r3, #32
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e1a6      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088c8:	2340      	movs	r3, #64	@ 0x40
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e1a2      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088d0:	2380      	movs	r3, #128	@ 0x80
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e19e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a35      	ldr	r2, [pc, #212]	@ (80089b4 <UART_SetConfig+0x344>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d130      	bne.n	8008944 <UART_SetConfig+0x2d4>
 80088e2:	4b31      	ldr	r3, [pc, #196]	@ (80089a8 <UART_SetConfig+0x338>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d826      	bhi.n	800893c <UART_SetConfig+0x2cc>
 80088ee:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <UART_SetConfig+0x284>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008925 	.word	0x08008925
 8008904:	0800892d 	.word	0x0800892d
 8008908:	08008935 	.word	0x08008935
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e180      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e17c      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e178      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e174      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800892c:	2320      	movs	r3, #32
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e170      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008934:	2340      	movs	r3, #64	@ 0x40
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e16c      	b.n	8008c16 <UART_SetConfig+0x5a6>
 800893c:	2380      	movs	r3, #128	@ 0x80
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e168      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1b      	ldr	r2, [pc, #108]	@ (80089b8 <UART_SetConfig+0x348>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d142      	bne.n	80089d4 <UART_SetConfig+0x364>
 800894e:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <UART_SetConfig+0x338>)
 8008950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b05      	cmp	r3, #5
 8008958:	d838      	bhi.n	80089cc <UART_SetConfig+0x35c>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0x2f0>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008979 	.word	0x08008979
 8008964:	08008981 	.word	0x08008981
 8008968:	08008989 	.word	0x08008989
 800896c:	08008991 	.word	0x08008991
 8008970:	080089bd 	.word	0x080089bd
 8008974:	080089c5 	.word	0x080089c5
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e14a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008980:	2304      	movs	r3, #4
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e146      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008988:	2308      	movs	r3, #8
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e142      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008990:	2310      	movs	r3, #16
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e13e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008998:	cfff69f3 	.word	0xcfff69f3
 800899c:	58000c00 	.word	0x58000c00
 80089a0:	11fff4ff 	.word	0x11fff4ff
 80089a4:	40011000 	.word	0x40011000
 80089a8:	58024400 	.word	0x58024400
 80089ac:	40004400 	.word	0x40004400
 80089b0:	40004800 	.word	0x40004800
 80089b4:	40004c00 	.word	0x40004c00
 80089b8:	40005000 	.word	0x40005000
 80089bc:	2320      	movs	r3, #32
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e128      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80089c4:	2340      	movs	r3, #64	@ 0x40
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e124      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e120      	b.n	8008c16 <UART_SetConfig+0x5a6>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4acb      	ldr	r2, [pc, #812]	@ (8008d08 <UART_SetConfig+0x698>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d176      	bne.n	8008acc <UART_SetConfig+0x45c>
 80089de:	4bcb      	ldr	r3, [pc, #812]	@ (8008d0c <UART_SetConfig+0x69c>)
 80089e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089e6:	2b28      	cmp	r3, #40	@ 0x28
 80089e8:	d86c      	bhi.n	8008ac4 <UART_SetConfig+0x454>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <UART_SetConfig+0x380>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a95 	.word	0x08008a95
 80089f4:	08008ac5 	.word	0x08008ac5
 80089f8:	08008ac5 	.word	0x08008ac5
 80089fc:	08008ac5 	.word	0x08008ac5
 8008a00:	08008ac5 	.word	0x08008ac5
 8008a04:	08008ac5 	.word	0x08008ac5
 8008a08:	08008ac5 	.word	0x08008ac5
 8008a0c:	08008ac5 	.word	0x08008ac5
 8008a10:	08008a9d 	.word	0x08008a9d
 8008a14:	08008ac5 	.word	0x08008ac5
 8008a18:	08008ac5 	.word	0x08008ac5
 8008a1c:	08008ac5 	.word	0x08008ac5
 8008a20:	08008ac5 	.word	0x08008ac5
 8008a24:	08008ac5 	.word	0x08008ac5
 8008a28:	08008ac5 	.word	0x08008ac5
 8008a2c:	08008ac5 	.word	0x08008ac5
 8008a30:	08008aa5 	.word	0x08008aa5
 8008a34:	08008ac5 	.word	0x08008ac5
 8008a38:	08008ac5 	.word	0x08008ac5
 8008a3c:	08008ac5 	.word	0x08008ac5
 8008a40:	08008ac5 	.word	0x08008ac5
 8008a44:	08008ac5 	.word	0x08008ac5
 8008a48:	08008ac5 	.word	0x08008ac5
 8008a4c:	08008ac5 	.word	0x08008ac5
 8008a50:	08008aad 	.word	0x08008aad
 8008a54:	08008ac5 	.word	0x08008ac5
 8008a58:	08008ac5 	.word	0x08008ac5
 8008a5c:	08008ac5 	.word	0x08008ac5
 8008a60:	08008ac5 	.word	0x08008ac5
 8008a64:	08008ac5 	.word	0x08008ac5
 8008a68:	08008ac5 	.word	0x08008ac5
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ab5 	.word	0x08008ab5
 8008a74:	08008ac5 	.word	0x08008ac5
 8008a78:	08008ac5 	.word	0x08008ac5
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008ac5 	.word	0x08008ac5
 8008a84:	08008ac5 	.word	0x08008ac5
 8008a88:	08008ac5 	.word	0x08008ac5
 8008a8c:	08008ac5 	.word	0x08008ac5
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e0bc      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e0b8      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e0b4      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e0b0      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e0ac      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008abc:	2340      	movs	r3, #64	@ 0x40
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e0a8      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008ac4:	2380      	movs	r3, #128	@ 0x80
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e0a4      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a8f      	ldr	r2, [pc, #572]	@ (8008d10 <UART_SetConfig+0x6a0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d130      	bne.n	8008b38 <UART_SetConfig+0x4c8>
 8008ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8008d0c <UART_SetConfig+0x69c>)
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d826      	bhi.n	8008b30 <UART_SetConfig+0x4c0>
 8008ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <UART_SetConfig+0x478>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008b09 	.word	0x08008b09
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e086      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e082      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e07e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e07a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b20:	2320      	movs	r3, #32
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e076      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b28:	2340      	movs	r3, #64	@ 0x40
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e072      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b30:	2380      	movs	r3, #128	@ 0x80
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e06e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a75      	ldr	r2, [pc, #468]	@ (8008d14 <UART_SetConfig+0x6a4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d130      	bne.n	8008ba4 <UART_SetConfig+0x534>
 8008b42:	4b72      	ldr	r3, [pc, #456]	@ (8008d0c <UART_SetConfig+0x69c>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d826      	bhi.n	8008b9c <UART_SetConfig+0x52c>
 8008b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b54 <UART_SetConfig+0x4e4>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e050      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e04c      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e048      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e044      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e040      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b94:	2340      	movs	r3, #64	@ 0x40
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e03c      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008b9c:	2380      	movs	r3, #128	@ 0x80
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e038      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8008d18 <UART_SetConfig+0x6a8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d130      	bne.n	8008c10 <UART_SetConfig+0x5a0>
 8008bae:	4b57      	ldr	r3, [pc, #348]	@ (8008d0c <UART_SetConfig+0x69c>)
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d826      	bhi.n	8008c08 <UART_SetConfig+0x598>
 8008bba:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc0 <UART_SetConfig+0x550>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bd9 	.word	0x08008bd9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be9 	.word	0x08008be9
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2302      	movs	r3, #2
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e01a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e016      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e012      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e00e      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e00a      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008c00:	2340      	movs	r3, #64	@ 0x40
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e006      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008c08:	2380      	movs	r3, #128	@ 0x80
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e002      	b.n	8008c16 <UART_SetConfig+0x5a6>
 8008c10:	2380      	movs	r3, #128	@ 0x80
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d18 <UART_SetConfig+0x6a8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	f040 80f8 	bne.w	8008e12 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	dc46      	bgt.n	8008cb8 <UART_SetConfig+0x648>
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	f2c0 8082 	blt.w	8008d34 <UART_SetConfig+0x6c4>
 8008c30:	3b02      	subs	r3, #2
 8008c32:	2b1e      	cmp	r3, #30
 8008c34:	d87e      	bhi.n	8008d34 <UART_SetConfig+0x6c4>
 8008c36:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <UART_SetConfig+0x5cc>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008cbf 	.word	0x08008cbf
 8008c40:	08008d35 	.word	0x08008d35
 8008c44:	08008cc7 	.word	0x08008cc7
 8008c48:	08008d35 	.word	0x08008d35
 8008c4c:	08008d35 	.word	0x08008d35
 8008c50:	08008d35 	.word	0x08008d35
 8008c54:	08008cd7 	.word	0x08008cd7
 8008c58:	08008d35 	.word	0x08008d35
 8008c5c:	08008d35 	.word	0x08008d35
 8008c60:	08008d35 	.word	0x08008d35
 8008c64:	08008d35 	.word	0x08008d35
 8008c68:	08008d35 	.word	0x08008d35
 8008c6c:	08008d35 	.word	0x08008d35
 8008c70:	08008d35 	.word	0x08008d35
 8008c74:	08008ce7 	.word	0x08008ce7
 8008c78:	08008d35 	.word	0x08008d35
 8008c7c:	08008d35 	.word	0x08008d35
 8008c80:	08008d35 	.word	0x08008d35
 8008c84:	08008d35 	.word	0x08008d35
 8008c88:	08008d35 	.word	0x08008d35
 8008c8c:	08008d35 	.word	0x08008d35
 8008c90:	08008d35 	.word	0x08008d35
 8008c94:	08008d35 	.word	0x08008d35
 8008c98:	08008d35 	.word	0x08008d35
 8008c9c:	08008d35 	.word	0x08008d35
 8008ca0:	08008d35 	.word	0x08008d35
 8008ca4:	08008d35 	.word	0x08008d35
 8008ca8:	08008d35 	.word	0x08008d35
 8008cac:	08008d35 	.word	0x08008d35
 8008cb0:	08008d35 	.word	0x08008d35
 8008cb4:	08008d27 	.word	0x08008d27
 8008cb8:	2b40      	cmp	r3, #64	@ 0x40
 8008cba:	d037      	beq.n	8008d2c <UART_SetConfig+0x6bc>
 8008cbc:	e03a      	b.n	8008d34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cbe:	f7fd fd27 	bl	8006710 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cc4:	e03c      	b.n	8008d40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd fd36 	bl	800673c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd4:	e034      	b.n	8008d40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd6:	f107 0318 	add.w	r3, r7, #24
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fd fe82 	bl	80069e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce4:	e02c      	b.n	8008d40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce6:	4b09      	ldr	r3, [pc, #36]	@ (8008d0c <UART_SetConfig+0x69c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d016      	beq.n	8008d20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cf2:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <UART_SetConfig+0x69c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	08db      	lsrs	r3, r3, #3
 8008cf8:	f003 0303 	and.w	r3, r3, #3
 8008cfc:	4a07      	ldr	r2, [pc, #28]	@ (8008d1c <UART_SetConfig+0x6ac>)
 8008cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d04:	e01c      	b.n	8008d40 <UART_SetConfig+0x6d0>
 8008d06:	bf00      	nop
 8008d08:	40011400 	.word	0x40011400
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	40007800 	.word	0x40007800
 8008d14:	40007c00 	.word	0x40007c00
 8008d18:	58000c00 	.word	0x58000c00
 8008d1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d20:	4b9d      	ldr	r3, [pc, #628]	@ (8008f98 <UART_SetConfig+0x928>)
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d24:	e00c      	b.n	8008d40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d26:	4b9d      	ldr	r3, [pc, #628]	@ (8008f9c <UART_SetConfig+0x92c>)
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2a:	e009      	b.n	8008d40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d32:	e005      	b.n	8008d40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 81de 	beq.w	8009104 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4c:	4a94      	ldr	r2, [pc, #592]	@ (8008fa0 <UART_SetConfig+0x930>)
 8008d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d5a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	4413      	add	r3, r2
 8008d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d305      	bcc.n	8008d78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d7e:	e1c1      	b.n	8009104 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d82:	2200      	movs	r2, #0
 8008d84:	60bb      	str	r3, [r7, #8]
 8008d86:	60fa      	str	r2, [r7, #12]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8c:	4a84      	ldr	r2, [pc, #528]	@ (8008fa0 <UART_SetConfig+0x930>)
 8008d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2200      	movs	r2, #0
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008da2:	f7f7 faf5 	bl	8000390 <__aeabi_uldivmod>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4610      	mov	r0, r2
 8008dac:	4619      	mov	r1, r3
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	020b      	lsls	r3, r1, #8
 8008db8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dbc:	0202      	lsls	r2, r0, #8
 8008dbe:	6979      	ldr	r1, [r7, #20]
 8008dc0:	6849      	ldr	r1, [r1, #4]
 8008dc2:	0849      	lsrs	r1, r1, #1
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	4605      	mov	r5, r0
 8008dca:	eb12 0804 	adds.w	r8, r2, r4
 8008dce:	eb43 0905 	adc.w	r9, r3, r5
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	469a      	mov	sl, r3
 8008dda:	4693      	mov	fp, r2
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	4640      	mov	r0, r8
 8008de2:	4649      	mov	r1, r9
 8008de4:	f7f7 fad4 	bl	8000390 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4613      	mov	r3, r2
 8008dee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df6:	d308      	bcc.n	8008e0a <UART_SetConfig+0x79a>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dfe:	d204      	bcs.n	8008e0a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e06:	60da      	str	r2, [r3, #12]
 8008e08:	e17c      	b.n	8009104 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e10:	e178      	b.n	8009104 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e1a:	f040 80c5 	bne.w	8008fa8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	dc48      	bgt.n	8008eb8 <UART_SetConfig+0x848>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	db7b      	blt.n	8008f22 <UART_SetConfig+0x8b2>
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d879      	bhi.n	8008f22 <UART_SetConfig+0x8b2>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <UART_SetConfig+0x7c4>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008ebf 	.word	0x08008ebf
 8008e38:	08008ec7 	.word	0x08008ec7
 8008e3c:	08008f23 	.word	0x08008f23
 8008e40:	08008f23 	.word	0x08008f23
 8008e44:	08008ecf 	.word	0x08008ecf
 8008e48:	08008f23 	.word	0x08008f23
 8008e4c:	08008f23 	.word	0x08008f23
 8008e50:	08008f23 	.word	0x08008f23
 8008e54:	08008edf 	.word	0x08008edf
 8008e58:	08008f23 	.word	0x08008f23
 8008e5c:	08008f23 	.word	0x08008f23
 8008e60:	08008f23 	.word	0x08008f23
 8008e64:	08008f23 	.word	0x08008f23
 8008e68:	08008f23 	.word	0x08008f23
 8008e6c:	08008f23 	.word	0x08008f23
 8008e70:	08008f23 	.word	0x08008f23
 8008e74:	08008eef 	.word	0x08008eef
 8008e78:	08008f23 	.word	0x08008f23
 8008e7c:	08008f23 	.word	0x08008f23
 8008e80:	08008f23 	.word	0x08008f23
 8008e84:	08008f23 	.word	0x08008f23
 8008e88:	08008f23 	.word	0x08008f23
 8008e8c:	08008f23 	.word	0x08008f23
 8008e90:	08008f23 	.word	0x08008f23
 8008e94:	08008f23 	.word	0x08008f23
 8008e98:	08008f23 	.word	0x08008f23
 8008e9c:	08008f23 	.word	0x08008f23
 8008ea0:	08008f23 	.word	0x08008f23
 8008ea4:	08008f23 	.word	0x08008f23
 8008ea8:	08008f23 	.word	0x08008f23
 8008eac:	08008f23 	.word	0x08008f23
 8008eb0:	08008f23 	.word	0x08008f23
 8008eb4:	08008f15 	.word	0x08008f15
 8008eb8:	2b40      	cmp	r3, #64	@ 0x40
 8008eba:	d02e      	beq.n	8008f1a <UART_SetConfig+0x8aa>
 8008ebc:	e031      	b.n	8008f22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ebe:	f7fc f9f1 	bl	80052a4 <HAL_RCC_GetPCLK1Freq>
 8008ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ec4:	e033      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec6:	f7fc fa03 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
 8008eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ecc:	e02f      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fd fc32 	bl	800673c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	e027      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ede:	f107 0318 	add.w	r3, r7, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fd fd7e 	bl	80069e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e01f      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eee:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa4 <UART_SetConfig+0x934>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008efa:	4b2a      	ldr	r3, [pc, #168]	@ (8008fa4 <UART_SetConfig+0x934>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	08db      	lsrs	r3, r3, #3
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	4a24      	ldr	r2, [pc, #144]	@ (8008f98 <UART_SetConfig+0x928>)
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f0c:	e00f      	b.n	8008f2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f0e:	4b22      	ldr	r3, [pc, #136]	@ (8008f98 <UART_SetConfig+0x928>)
 8008f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f12:	e00c      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f14:	4b21      	ldr	r3, [pc, #132]	@ (8008f9c <UART_SetConfig+0x92c>)
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f18:	e009      	b.n	8008f2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f20:	e005      	b.n	8008f2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80e7 	beq.w	8009104 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	4a19      	ldr	r2, [pc, #100]	@ (8008fa0 <UART_SetConfig+0x930>)
 8008f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f48:	005a      	lsls	r2, r3, #1
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	085b      	lsrs	r3, r3, #1
 8008f50:	441a      	add	r2, r3
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	2b0f      	cmp	r3, #15
 8008f60:	d916      	bls.n	8008f90 <UART_SetConfig+0x920>
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f68:	d212      	bcs.n	8008f90 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f023 030f 	bic.w	r3, r3, #15
 8008f72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f82:	4313      	orrs	r3, r2
 8008f84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	e0b9      	b.n	8009104 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f96:	e0b5      	b.n	8009104 <UART_SetConfig+0xa94>
 8008f98:	03d09000 	.word	0x03d09000
 8008f9c:	003d0900 	.word	0x003d0900
 8008fa0:	0800af60 	.word	0x0800af60
 8008fa4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	dc49      	bgt.n	8009044 <UART_SetConfig+0x9d4>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	db7c      	blt.n	80090ae <UART_SetConfig+0xa3e>
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	d87a      	bhi.n	80090ae <UART_SetConfig+0xa3e>
 8008fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <UART_SetConfig+0x950>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	0800904b 	.word	0x0800904b
 8008fc4:	08009053 	.word	0x08009053
 8008fc8:	080090af 	.word	0x080090af
 8008fcc:	080090af 	.word	0x080090af
 8008fd0:	0800905b 	.word	0x0800905b
 8008fd4:	080090af 	.word	0x080090af
 8008fd8:	080090af 	.word	0x080090af
 8008fdc:	080090af 	.word	0x080090af
 8008fe0:	0800906b 	.word	0x0800906b
 8008fe4:	080090af 	.word	0x080090af
 8008fe8:	080090af 	.word	0x080090af
 8008fec:	080090af 	.word	0x080090af
 8008ff0:	080090af 	.word	0x080090af
 8008ff4:	080090af 	.word	0x080090af
 8008ff8:	080090af 	.word	0x080090af
 8008ffc:	080090af 	.word	0x080090af
 8009000:	0800907b 	.word	0x0800907b
 8009004:	080090af 	.word	0x080090af
 8009008:	080090af 	.word	0x080090af
 800900c:	080090af 	.word	0x080090af
 8009010:	080090af 	.word	0x080090af
 8009014:	080090af 	.word	0x080090af
 8009018:	080090af 	.word	0x080090af
 800901c:	080090af 	.word	0x080090af
 8009020:	080090af 	.word	0x080090af
 8009024:	080090af 	.word	0x080090af
 8009028:	080090af 	.word	0x080090af
 800902c:	080090af 	.word	0x080090af
 8009030:	080090af 	.word	0x080090af
 8009034:	080090af 	.word	0x080090af
 8009038:	080090af 	.word	0x080090af
 800903c:	080090af 	.word	0x080090af
 8009040:	080090a1 	.word	0x080090a1
 8009044:	2b40      	cmp	r3, #64	@ 0x40
 8009046:	d02e      	beq.n	80090a6 <UART_SetConfig+0xa36>
 8009048:	e031      	b.n	80090ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fc f92b 	bl	80052a4 <HAL_RCC_GetPCLK1Freq>
 800904e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009050:	e033      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009052:	f7fc f93d 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
 8009056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009058:	e02f      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800905e:	4618      	mov	r0, r3
 8009060:	f7fd fb6c 	bl	800673c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009068:	e027      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800906a:	f107 0318 	add.w	r3, r7, #24
 800906e:	4618      	mov	r0, r3
 8009070:	f7fd fcb8 	bl	80069e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009078:	e01f      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800907a:	4b2d      	ldr	r3, [pc, #180]	@ (8009130 <UART_SetConfig+0xac0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009086:	4b2a      	ldr	r3, [pc, #168]	@ (8009130 <UART_SetConfig+0xac0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	08db      	lsrs	r3, r3, #3
 800908c:	f003 0303 	and.w	r3, r3, #3
 8009090:	4a28      	ldr	r2, [pc, #160]	@ (8009134 <UART_SetConfig+0xac4>)
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009098:	e00f      	b.n	80090ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800909a:	4b26      	ldr	r3, [pc, #152]	@ (8009134 <UART_SetConfig+0xac4>)
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909e:	e00c      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090a0:	4b25      	ldr	r3, [pc, #148]	@ (8009138 <UART_SetConfig+0xac8>)
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	e009      	b.n	80090ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ac:	e005      	b.n	80090ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090b8:	bf00      	nop
    }

    if (pclk != 0U)
 80090ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d021      	beq.n	8009104 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c4:	4a1d      	ldr	r2, [pc, #116]	@ (800913c <UART_SetConfig+0xacc>)
 80090c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	441a      	add	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	d909      	bls.n	80090fe <UART_SetConfig+0xa8e>
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f0:	d205      	bcs.n	80090fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60da      	str	r2, [r3, #12]
 80090fc:	e002      	b.n	8009104 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2201      	movs	r2, #1
 8009108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2201      	movs	r2, #1
 8009110:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2200      	movs	r2, #0
 8009118:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2200      	movs	r2, #0
 800911e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009120:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009124:	4618      	mov	r0, r3
 8009126:	3748      	adds	r7, #72	@ 0x48
 8009128:	46bd      	mov	sp, r7
 800912a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800912e:	bf00      	nop
 8009130:	58024400 	.word	0x58024400
 8009134:	03d09000 	.word	0x03d09000
 8009138:	003d0900 	.word	0x003d0900
 800913c:	0800af60 	.word	0x0800af60

08009140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	f003 0304 	and.w	r3, r3, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01a      	beq.n	8009256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800923e:	d10a      	bne.n	8009256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b098      	sub	sp, #96	@ 0x60
 8009288:	af02      	add	r7, sp, #8
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009294:	f7f8 fdc8 	bl	8001e28 <HAL_GetTick>
 8009298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d12f      	bne.n	8009308 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b0:	2200      	movs	r2, #0
 80092b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f88e 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d022      	beq.n	8009308 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e6      	bne.n	80092c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e063      	b.n	80093d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	2b04      	cmp	r3, #4
 8009314:	d149      	bne.n	80093aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009316:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931e:	2200      	movs	r2, #0
 8009320:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f857 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d03c      	beq.n	80093aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	623b      	str	r3, [r7, #32]
   return(result);
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009350:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	60fb      	str	r3, [r7, #12]
   return(result);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009382:	61fa      	str	r2, [r7, #28]
 8009384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	69b9      	ldr	r1, [r7, #24]
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	617b      	str	r3, [r7, #20]
   return(result);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e5      	bne.n	8009362 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e012      	b.n	80093d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3758      	adds	r7, #88	@ 0x58
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	4613      	mov	r3, r2
 80093e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e8:	e04f      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d04b      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f2:	f7f8 fd19 	bl	8001e28 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <UART_WaitOnFlagUntilTimeout+0x30>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e04e      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	d037      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b80      	cmp	r3, #128	@ 0x80
 800941e:	d034      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b40      	cmp	r3, #64	@ 0x40
 8009424:	d031      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	2b08      	cmp	r3, #8
 8009432:	d110      	bne.n	8009456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2208      	movs	r2, #8
 800943a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f95b 	bl	80096f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2208      	movs	r2, #8
 8009446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e029      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009464:	d111      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800946e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f941 	bl	80096f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e00f      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4013      	ands	r3, r2
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	429a      	cmp	r2, r3
 8009498:	bf0c      	ite	eq
 800949a:	2301      	moveq	r3, #1
 800949c:	2300      	movne	r3, #0
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d0a0      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b0a3      	sub	sp, #140	@ 0x8c
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	4613      	mov	r3, r2
 80094c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	88fa      	ldrh	r2, [r7, #6]
 80094cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e6:	d10e      	bne.n	8009506 <UART_Start_Receive_IT+0x52>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d105      	bne.n	80094fc <UART_Start_Receive_IT+0x48>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80094f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094fa:	e02d      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	22ff      	movs	r2, #255	@ 0xff
 8009500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009504:	e028      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10d      	bne.n	800952a <UART_Start_Receive_IT+0x76>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <UART_Start_Receive_IT+0x6c>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	22ff      	movs	r2, #255	@ 0xff
 800951a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800951e:	e01b      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	227f      	movs	r2, #127	@ 0x7f
 8009524:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009528:	e016      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009532:	d10d      	bne.n	8009550 <UART_Start_Receive_IT+0x9c>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <UART_Start_Receive_IT+0x92>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	227f      	movs	r2, #127	@ 0x7f
 8009540:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009544:	e008      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	223f      	movs	r2, #63	@ 0x3f
 800954a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800954e:	e003      	b.n	8009558 <UART_Start_Receive_IT+0xa4>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2222      	movs	r2, #34	@ 0x22
 8009564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800958c:	673a      	str	r2, [r7, #112]	@ 0x70
 800958e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009592:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800959a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e3      	bne.n	8009568 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095a8:	d14f      	bne.n	800964a <UART_Start_Receive_IT+0x196>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095b0:	88fa      	ldrh	r2, [r7, #6]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d349      	bcc.n	800964a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095be:	d107      	bne.n	80095d0 <UART_Start_Receive_IT+0x11c>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d103      	bne.n	80095d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4a47      	ldr	r2, [pc, #284]	@ (80096e8 <UART_Start_Receive_IT+0x234>)
 80095cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80095ce:	e002      	b.n	80095d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4a46      	ldr	r2, [pc, #280]	@ (80096ec <UART_Start_Receive_IT+0x238>)
 80095d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01a      	beq.n	8009614 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80095ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009602:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009606:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800960e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e4      	bne.n	80095de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3308      	adds	r3, #8
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800962a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3308      	adds	r3, #8
 8009632:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009634:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009636:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800963a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e5      	bne.n	8009614 <UART_Start_Receive_IT+0x160>
 8009648:	e046      	b.n	80096d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009652:	d107      	bne.n	8009664 <UART_Start_Receive_IT+0x1b0>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d103      	bne.n	8009664 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4a24      	ldr	r2, [pc, #144]	@ (80096f0 <UART_Start_Receive_IT+0x23c>)
 8009660:	675a      	str	r2, [r3, #116]	@ 0x74
 8009662:	e002      	b.n	800966a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a23      	ldr	r2, [pc, #140]	@ (80096f4 <UART_Start_Receive_IT+0x240>)
 8009668:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d019      	beq.n	80096a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009686:	677b      	str	r3, [r7, #116]	@ 0x74
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
 8009692:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e6      	bne.n	8009672 <UART_Start_Receive_IT+0x1be>
 80096a4:	e018      	b.n	80096d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	613b      	str	r3, [r7, #16]
   return(result);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f043 0320 	orr.w	r3, r3, #32
 80096ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096c4:	623b      	str	r3, [r7, #32]
 80096c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	69f9      	ldr	r1, [r7, #28]
 80096ca:	6a3a      	ldr	r2, [r7, #32]
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e6      	bne.n	80096a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	378c      	adds	r7, #140	@ 0x8c
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	08009f15 	.word	0x08009f15
 80096ec:	08009bb1 	.word	0x08009bb1
 80096f0:	080099f9 	.word	0x080099f9
 80096f4:	08009841 	.word	0x08009841

080096f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b095      	sub	sp, #84	@ 0x54
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009720:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e6      	bne.n	8009700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	61fb      	str	r3, [r7, #28]
   return(result);
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	4b1e      	ldr	r3, [pc, #120]	@ (80097c0 <UART_EndRxTransfer+0xc8>)
 8009746:	4013      	ands	r3, r2
 8009748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e5      	bne.n	8009732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d118      	bne.n	80097a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	60bb      	str	r3, [r7, #8]
   return(result);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f023 0310 	bic.w	r3, r3, #16
 8009782:	647b      	str	r3, [r7, #68]	@ 0x44
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800978c:	61bb      	str	r3, [r7, #24]
 800978e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6979      	ldr	r1, [r7, #20]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	e841 2300 	strex	r3, r2, [r1]
 8009798:	613b      	str	r3, [r7, #16]
   return(result);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e6      	bne.n	800976e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80097b4:	bf00      	nop
 80097b6:	3754      	adds	r7, #84	@ 0x54
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	effffffe 	.word	0xeffffffe

080097c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7fe ff32 	bl	8008644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009804:	61fb      	str	r3, [r7, #28]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6979      	ldr	r1, [r7, #20]
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	613b      	str	r3, [r7, #16]
   return(result);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e6      	bne.n	80097f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fe fefd 	bl	8008630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009836:	bf00      	nop
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b09c      	sub	sp, #112	@ 0x70
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800984e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009858:	2b22      	cmp	r3, #34	@ 0x22
 800985a:	f040 80be 	bne.w	80099da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009864:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800986c:	b2d9      	uxtb	r1, r3
 800986e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009872:	b2da      	uxtb	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009878:	400a      	ands	r2, r1
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 80a1 	bne.w	80099ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e6      	bne.n	80098a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80098fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e5      	bne.n	80098da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a33      	ldr	r2, [pc, #204]	@ (80099f4 <UART_RxISR_8BIT+0x1b4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d01f      	beq.n	800996c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	623b      	str	r3, [r7, #32]
   return(result);
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800994e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009958:	633b      	str	r3, [r7, #48]	@ 0x30
 800995a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e6      	bne.n	800993a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d12e      	bne.n	80099d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	60fb      	str	r3, [r7, #12]
   return(result);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0310 	bic.w	r3, r3, #16
 800998e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	617b      	str	r3, [r7, #20]
   return(result);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d103      	bne.n	80099c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2210      	movs	r2, #16
 80099c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe fe44 	bl	8008658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d0:	e00b      	b.n	80099ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7f8 f870 	bl	8001ab8 <HAL_UART_RxCpltCallback>
}
 80099d8:	e007      	b.n	80099ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	619a      	str	r2, [r3, #24]
}
 80099ea:	bf00      	nop
 80099ec:	3770      	adds	r7, #112	@ 0x70
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	58000c00 	.word	0x58000c00

080099f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b09c      	sub	sp, #112	@ 0x70
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a10:	2b22      	cmp	r3, #34	@ 0x22
 8009a12:	f040 80be 	bne.w	8009b92 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a24:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a26:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009a2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a2e:	4013      	ands	r3, r2
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3a:	1c9a      	adds	r2, r3, #2
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 80a1 	bne.w	8009ba2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a80:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e6      	bne.n	8009a60 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	f023 0301 	bic.w	r3, r3, #1
 8009aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009ab2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e5      	bne.n	8009a92 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a33      	ldr	r2, [pc, #204]	@ (8009bac <UART_RxISR_16BIT+0x1b4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d01f      	beq.n	8009b24 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d018      	beq.n	8009b24 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b12:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d12e      	bne.n	8009b8a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0310 	bic.w	r3, r3, #16
 8009b46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6979      	ldr	r1, [r7, #20]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e6      	bne.n	8009b32 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b10      	cmp	r3, #16
 8009b70:	d103      	bne.n	8009b7a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2210      	movs	r2, #16
 8009b78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe fd68 	bl	8008658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b88:	e00b      	b.n	8009ba2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7f7 ff94 	bl	8001ab8 <HAL_UART_RxCpltCallback>
}
 8009b90:	e007      	b.n	8009ba2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0208 	orr.w	r2, r2, #8
 8009ba0:	619a      	str	r2, [r3, #24]
}
 8009ba2:	bf00      	nop
 8009ba4:	3770      	adds	r7, #112	@ 0x70
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	58000c00 	.word	0x58000c00

08009bb0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b0ac      	sub	sp, #176	@ 0xb0
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009bbe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009be6:	2b22      	cmp	r3, #34	@ 0x22
 8009be8:	f040 8181 	bne.w	8009eee <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bf2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bf6:	e124      	b.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c02:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009c06:	b2d9      	uxtb	r1, r3
 8009c08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c12:	400a      	ands	r2, r1
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d053      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d011      	beq.n	8009c7a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2201      	movs	r2, #1
 8009c68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c70:	f043 0201 	orr.w	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d011      	beq.n	8009caa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2202      	movs	r2, #2
 8009c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca0:	f043 0204 	orr.w	r2, r3, #4
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d011      	beq.n	8009cda <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd0:	f043 0202 	orr.w	r2, r3, #2
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7fe fcad 	bl	8008644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 80a1 	bne.w	8009e42 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d24:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009d28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e4      	bne.n	8009d00 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009d46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d48:	4b6f      	ldr	r3, [pc, #444]	@ (8009f08 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3308      	adds	r3, #8
 8009d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d5a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009d5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009d60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e3      	bne.n	8009d36 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a61      	ldr	r2, [pc, #388]	@ (8009f0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d021      	beq.n	8009dd0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01a      	beq.n	8009dd0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dbe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009dc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e4      	bne.n	8009d9a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d130      	bne.n	8009e3a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	f023 0310 	bic.w	r3, r3, #16
 8009df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e4      	bne.n	8009dde <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	f003 0310 	and.w	r3, r3, #16
 8009e1e:	2b10      	cmp	r3, #16
 8009e20:	d103      	bne.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2210      	movs	r2, #16
 8009e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7fe fc10 	bl	8008658 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009e38:	e00e      	b.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7f7 fe3c 	bl	8001ab8 <HAL_UART_RxCpltCallback>
        break;
 8009e40:	e00a      	b.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e42:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d006      	beq.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f47f aed0 	bne.w	8009bf8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d049      	beq.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e70:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d242      	bcs.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e3      	bne.n	8009e78 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a17      	ldr	r2, [pc, #92]	@ (8009f10 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009eb4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f043 0320 	orr.w	r3, r3, #32
 8009eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ed8:	61bb      	str	r3, [r7, #24]
 8009eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6979      	ldr	r1, [r7, #20]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e4      	bne.n	8009eb6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eec:	e007      	b.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699a      	ldr	r2, [r3, #24]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0208 	orr.w	r2, r2, #8
 8009efc:	619a      	str	r2, [r3, #24]
}
 8009efe:	bf00      	nop
 8009f00:	37b0      	adds	r7, #176	@ 0xb0
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	effffffe 	.word	0xeffffffe
 8009f0c:	58000c00 	.word	0x58000c00
 8009f10:	08009841 	.word	0x08009841

08009f14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b0ae      	sub	sp, #184	@ 0xb8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f4a:	2b22      	cmp	r3, #34	@ 0x22
 8009f4c:	f040 8185 	bne.w	800a25a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f56:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f5a:	e128      	b.n	800a1ae <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f62:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009f72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009f76:	4013      	ands	r3, r2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f84:	1c9a      	adds	r2, r3, #2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d053      	beq.n	800a05a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d011      	beq.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00b      	beq.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd8:	f043 0201 	orr.w	r2, r3, #1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d011      	beq.n	800a012 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2202      	movs	r2, #2
 800a000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a008:	f043 0204 	orr.w	r2, r3, #4
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a016:	f003 0304 	and.w	r3, r3, #4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d011      	beq.n	800a042 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a01e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2204      	movs	r2, #4
 800a030:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a038:	f043 0202 	orr.w	r2, r3, #2
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d006      	beq.n	800a05a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7fe faf9 	bl	8008644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a060:	b29b      	uxth	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	f040 80a3 	bne.w	800a1ae <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a07c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	461a      	mov	r2, r3
 800a086:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a08a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a08e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a092:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a09c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e2      	bne.n	800a068 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0b4:	4b6f      	ldr	r3, [pc, #444]	@ (800a274 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a0c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e3      	bne.n	800a0a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a61      	ldr	r2, [pc, #388]	@ (800a278 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d021      	beq.n	800a13c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d01a      	beq.n	800a13c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a11a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a12a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a12e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e4      	bne.n	800a106 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a140:	2b01      	cmp	r3, #1
 800a142:	d130      	bne.n	800a1a6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15a:	f023 0310 	bic.w	r3, r3, #16
 800a15e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a16c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a16e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e4      	bne.n	800a14a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f003 0310 	and.w	r3, r3, #16
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d103      	bne.n	800a196 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2210      	movs	r2, #16
 800a194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fe fa5a 	bl	8008658 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a1a4:	e00e      	b.n	800a1c4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7f7 fc86 	bl	8001ab8 <HAL_UART_RxCpltCallback>
        break;
 800a1ac:	e00a      	b.n	800a1c4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d006      	beq.n	800a1c4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1ba:	f003 0320 	and.w	r3, r3, #32
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f47f aecc 	bne.w	8009f5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d049      	beq.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x356>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d242      	bcs.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3308      	adds	r3, #8
 800a204:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a208:	633a      	str	r2, [r7, #48]	@ 0x30
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e3      	bne.n	800a1e4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a17      	ldr	r2, [pc, #92]	@ (800a27c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a220:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f043 0320 	orr.w	r3, r3, #32
 800a236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a244:	61fb      	str	r3, [r7, #28]
 800a246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	69b9      	ldr	r1, [r7, #24]
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	617b      	str	r3, [r7, #20]
   return(result);
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e4      	bne.n	800a222 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a258:	e007      	b.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f042 0208 	orr.w	r2, r2, #8
 800a268:	619a      	str	r2, [r3, #24]
}
 800a26a:	bf00      	nop
 800a26c:	37b8      	adds	r7, #184	@ 0xb8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	effffffe 	.word	0xeffffffe
 800a278:	58000c00 	.word	0x58000c00
 800a27c:	080099f9 	.word	0x080099f9

0800a280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e027      	b.n	800a322 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2224      	movs	r2, #36	@ 0x24
 800a2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0201 	bic.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a342:	2302      	movs	r3, #2
 800a344:	e02d      	b.n	800a3a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2224      	movs	r2, #36	@ 0x24
 800a352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0201 	bic.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f850 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e02d      	b.n	800a41e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2224      	movs	r2, #36	@ 0x24
 800a3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0201 	bic.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f812 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2220      	movs	r2, #32
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a448:	e031      	b.n	800a4ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a44a:	2310      	movs	r3, #16
 800a44c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a44e:	2310      	movs	r3, #16
 800a450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	0e5b      	lsrs	r3, r3, #25
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	0f5b      	lsrs	r3, r3, #29
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	7b3a      	ldrb	r2, [r7, #12]
 800a476:	4911      	ldr	r1, [pc, #68]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a478:	5c8a      	ldrb	r2, [r1, r2]
 800a47a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a47e:	7b3a      	ldrb	r2, [r7, #12]
 800a480:	490f      	ldr	r1, [pc, #60]	@ (800a4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a484:	fb93 f3f2 	sdiv	r3, r3, r2
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	7b7a      	ldrb	r2, [r7, #13]
 800a494:	4909      	ldr	r1, [pc, #36]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a496:	5c8a      	ldrb	r2, [r1, r2]
 800a498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a49c:	7b7a      	ldrb	r2, [r7, #13]
 800a49e:	4908      	ldr	r1, [pc, #32]	@ (800a4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	0800af78 	.word	0x0800af78
 800a4c0:	0800af80 	.word	0x0800af80

0800a4c4 <_vsniprintf_r>:
 800a4c4:	b530      	push	{r4, r5, lr}
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	2c00      	cmp	r4, #0
 800a4ca:	b09b      	sub	sp, #108	@ 0x6c
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	da05      	bge.n	800a4de <_vsniprintf_r+0x1a>
 800a4d2:	238b      	movs	r3, #139	@ 0x8b
 800a4d4:	6003      	str	r3, [r0, #0]
 800a4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4da:	b01b      	add	sp, #108	@ 0x6c
 800a4dc:	bd30      	pop	{r4, r5, pc}
 800a4de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a4e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4ec:	bf14      	ite	ne
 800a4ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4f2:	4623      	moveq	r3, r4
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4fc:	9100      	str	r1, [sp, #0]
 800a4fe:	9104      	str	r1, [sp, #16]
 800a500:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a504:	4669      	mov	r1, sp
 800a506:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a508:	f000 f9ae 	bl	800a868 <_svfiprintf_r>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	bfbc      	itt	lt
 800a510:	238b      	movlt	r3, #139	@ 0x8b
 800a512:	602b      	strlt	r3, [r5, #0]
 800a514:	2c00      	cmp	r4, #0
 800a516:	d0e0      	beq.n	800a4da <_vsniprintf_r+0x16>
 800a518:	9b00      	ldr	r3, [sp, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	e7dc      	b.n	800a4da <_vsniprintf_r+0x16>

0800a520 <vsniprintf>:
 800a520:	b507      	push	{r0, r1, r2, lr}
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4613      	mov	r3, r2
 800a526:	460a      	mov	r2, r1
 800a528:	4601      	mov	r1, r0
 800a52a:	4803      	ldr	r0, [pc, #12]	@ (800a538 <vsniprintf+0x18>)
 800a52c:	6800      	ldr	r0, [r0, #0]
 800a52e:	f7ff ffc9 	bl	800a4c4 <_vsniprintf_r>
 800a532:	b003      	add	sp, #12
 800a534:	f85d fb04 	ldr.w	pc, [sp], #4
 800a538:	2400101c 	.word	0x2400101c

0800a53c <memset>:
 800a53c:	4402      	add	r2, r0
 800a53e:	4603      	mov	r3, r0
 800a540:	4293      	cmp	r3, r2
 800a542:	d100      	bne.n	800a546 <memset+0xa>
 800a544:	4770      	bx	lr
 800a546:	f803 1b01 	strb.w	r1, [r3], #1
 800a54a:	e7f9      	b.n	800a540 <memset+0x4>

0800a54c <__errno>:
 800a54c:	4b01      	ldr	r3, [pc, #4]	@ (800a554 <__errno+0x8>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	2400101c 	.word	0x2400101c

0800a558 <__libc_init_array>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4d0d      	ldr	r5, [pc, #52]	@ (800a590 <__libc_init_array+0x38>)
 800a55c:	4c0d      	ldr	r4, [pc, #52]	@ (800a594 <__libc_init_array+0x3c>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	2600      	movs	r6, #0
 800a564:	42a6      	cmp	r6, r4
 800a566:	d109      	bne.n	800a57c <__libc_init_array+0x24>
 800a568:	4d0b      	ldr	r5, [pc, #44]	@ (800a598 <__libc_init_array+0x40>)
 800a56a:	4c0c      	ldr	r4, [pc, #48]	@ (800a59c <__libc_init_array+0x44>)
 800a56c:	f000 fc64 	bl	800ae38 <_init>
 800a570:	1b64      	subs	r4, r4, r5
 800a572:	10a4      	asrs	r4, r4, #2
 800a574:	2600      	movs	r6, #0
 800a576:	42a6      	cmp	r6, r4
 800a578:	d105      	bne.n	800a586 <__libc_init_array+0x2e>
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a580:	4798      	blx	r3
 800a582:	3601      	adds	r6, #1
 800a584:	e7ee      	b.n	800a564 <__libc_init_array+0xc>
 800a586:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58a:	4798      	blx	r3
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7f2      	b.n	800a576 <__libc_init_array+0x1e>
 800a590:	0800afc4 	.word	0x0800afc4
 800a594:	0800afc4 	.word	0x0800afc4
 800a598:	0800afc4 	.word	0x0800afc4
 800a59c:	0800afc8 	.word	0x0800afc8

0800a5a0 <__retarget_lock_acquire_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_release_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <memcpy>:
 800a5a4:	440a      	add	r2, r1
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ac:	d100      	bne.n	800a5b0 <memcpy+0xc>
 800a5ae:	4770      	bx	lr
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ba:	4291      	cmp	r1, r2
 800a5bc:	d1f9      	bne.n	800a5b2 <memcpy+0xe>
 800a5be:	bd10      	pop	{r4, pc}

0800a5c0 <_free_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	2900      	cmp	r1, #0
 800a5c6:	d041      	beq.n	800a64c <_free_r+0x8c>
 800a5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5cc:	1f0c      	subs	r4, r1, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfb8      	it	lt
 800a5d2:	18e4      	addlt	r4, r4, r3
 800a5d4:	f000 f8e0 	bl	800a798 <__malloc_lock>
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a650 <_free_r+0x90>)
 800a5da:	6813      	ldr	r3, [r2, #0]
 800a5dc:	b933      	cbnz	r3, 800a5ec <_free_r+0x2c>
 800a5de:	6063      	str	r3, [r4, #4]
 800a5e0:	6014      	str	r4, [r2, #0]
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5e8:	f000 b8dc 	b.w	800a7a4 <__malloc_unlock>
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d908      	bls.n	800a602 <_free_r+0x42>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf01      	itttt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	1809      	addeq	r1, r1, r0
 800a5fe:	6021      	streq	r1, [r4, #0]
 800a600:	e7ed      	b.n	800a5de <_free_r+0x1e>
 800a602:	461a      	mov	r2, r3
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	b10b      	cbz	r3, 800a60c <_free_r+0x4c>
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d9fa      	bls.n	800a602 <_free_r+0x42>
 800a60c:	6811      	ldr	r1, [r2, #0]
 800a60e:	1850      	adds	r0, r2, r1
 800a610:	42a0      	cmp	r0, r4
 800a612:	d10b      	bne.n	800a62c <_free_r+0x6c>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	4401      	add	r1, r0
 800a618:	1850      	adds	r0, r2, r1
 800a61a:	4283      	cmp	r3, r0
 800a61c:	6011      	str	r1, [r2, #0]
 800a61e:	d1e0      	bne.n	800a5e2 <_free_r+0x22>
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	6053      	str	r3, [r2, #4]
 800a626:	4408      	add	r0, r1
 800a628:	6010      	str	r0, [r2, #0]
 800a62a:	e7da      	b.n	800a5e2 <_free_r+0x22>
 800a62c:	d902      	bls.n	800a634 <_free_r+0x74>
 800a62e:	230c      	movs	r3, #12
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	e7d6      	b.n	800a5e2 <_free_r+0x22>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	1821      	adds	r1, r4, r0
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf04      	itt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	bf04      	itt	eq
 800a644:	1809      	addeq	r1, r1, r0
 800a646:	6021      	streq	r1, [r4, #0]
 800a648:	6054      	str	r4, [r2, #4]
 800a64a:	e7ca      	b.n	800a5e2 <_free_r+0x22>
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	24001410 	.word	0x24001410

0800a654 <sbrk_aligned>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4e0f      	ldr	r6, [pc, #60]	@ (800a694 <sbrk_aligned+0x40>)
 800a658:	460c      	mov	r4, r1
 800a65a:	6831      	ldr	r1, [r6, #0]
 800a65c:	4605      	mov	r5, r0
 800a65e:	b911      	cbnz	r1, 800a666 <sbrk_aligned+0x12>
 800a660:	f000 fba4 	bl	800adac <_sbrk_r>
 800a664:	6030      	str	r0, [r6, #0]
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 fb9f 	bl	800adac <_sbrk_r>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	d103      	bne.n	800a67a <sbrk_aligned+0x26>
 800a672:	f04f 34ff 	mov.w	r4, #4294967295
 800a676:	4620      	mov	r0, r4
 800a678:	bd70      	pop	{r4, r5, r6, pc}
 800a67a:	1cc4      	adds	r4, r0, #3
 800a67c:	f024 0403 	bic.w	r4, r4, #3
 800a680:	42a0      	cmp	r0, r4
 800a682:	d0f8      	beq.n	800a676 <sbrk_aligned+0x22>
 800a684:	1a21      	subs	r1, r4, r0
 800a686:	4628      	mov	r0, r5
 800a688:	f000 fb90 	bl	800adac <_sbrk_r>
 800a68c:	3001      	adds	r0, #1
 800a68e:	d1f2      	bne.n	800a676 <sbrk_aligned+0x22>
 800a690:	e7ef      	b.n	800a672 <sbrk_aligned+0x1e>
 800a692:	bf00      	nop
 800a694:	2400140c 	.word	0x2400140c

0800a698 <_malloc_r>:
 800a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	1ccd      	adds	r5, r1, #3
 800a69e:	f025 0503 	bic.w	r5, r5, #3
 800a6a2:	3508      	adds	r5, #8
 800a6a4:	2d0c      	cmp	r5, #12
 800a6a6:	bf38      	it	cc
 800a6a8:	250c      	movcc	r5, #12
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	db01      	blt.n	800a6b4 <_malloc_r+0x1c>
 800a6b0:	42a9      	cmp	r1, r5
 800a6b2:	d904      	bls.n	800a6be <_malloc_r+0x26>
 800a6b4:	230c      	movs	r3, #12
 800a6b6:	6033      	str	r3, [r6, #0]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a794 <_malloc_r+0xfc>
 800a6c2:	f000 f869 	bl	800a798 <__malloc_lock>
 800a6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ca:	461c      	mov	r4, r3
 800a6cc:	bb44      	cbnz	r4, 800a720 <_malloc_r+0x88>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff ffbf 	bl	800a654 <sbrk_aligned>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	4604      	mov	r4, r0
 800a6da:	d158      	bne.n	800a78e <_malloc_r+0xf6>
 800a6dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a6e0:	4627      	mov	r7, r4
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	d143      	bne.n	800a76e <_malloc_r+0xd6>
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	d04b      	beq.n	800a782 <_malloc_r+0xea>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	eb04 0903 	add.w	r9, r4, r3
 800a6f4:	f000 fb5a 	bl	800adac <_sbrk_r>
 800a6f8:	4581      	cmp	r9, r0
 800a6fa:	d142      	bne.n	800a782 <_malloc_r+0xea>
 800a6fc:	6821      	ldr	r1, [r4, #0]
 800a6fe:	1a6d      	subs	r5, r5, r1
 800a700:	4629      	mov	r1, r5
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff ffa6 	bl	800a654 <sbrk_aligned>
 800a708:	3001      	adds	r0, #1
 800a70a:	d03a      	beq.n	800a782 <_malloc_r+0xea>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	442b      	add	r3, r5
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	f8d8 3000 	ldr.w	r3, [r8]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	bb62      	cbnz	r2, 800a774 <_malloc_r+0xdc>
 800a71a:	f8c8 7000 	str.w	r7, [r8]
 800a71e:	e00f      	b.n	800a740 <_malloc_r+0xa8>
 800a720:	6822      	ldr	r2, [r4, #0]
 800a722:	1b52      	subs	r2, r2, r5
 800a724:	d420      	bmi.n	800a768 <_malloc_r+0xd0>
 800a726:	2a0b      	cmp	r2, #11
 800a728:	d917      	bls.n	800a75a <_malloc_r+0xc2>
 800a72a:	1961      	adds	r1, r4, r5
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	6025      	str	r5, [r4, #0]
 800a730:	bf18      	it	ne
 800a732:	6059      	strne	r1, [r3, #4]
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	bf08      	it	eq
 800a738:	f8c8 1000 	streq.w	r1, [r8]
 800a73c:	5162      	str	r2, [r4, r5]
 800a73e:	604b      	str	r3, [r1, #4]
 800a740:	4630      	mov	r0, r6
 800a742:	f000 f82f 	bl	800a7a4 <__malloc_unlock>
 800a746:	f104 000b 	add.w	r0, r4, #11
 800a74a:	1d23      	adds	r3, r4, #4
 800a74c:	f020 0007 	bic.w	r0, r0, #7
 800a750:	1ac2      	subs	r2, r0, r3
 800a752:	bf1c      	itt	ne
 800a754:	1a1b      	subne	r3, r3, r0
 800a756:	50a3      	strne	r3, [r4, r2]
 800a758:	e7af      	b.n	800a6ba <_malloc_r+0x22>
 800a75a:	6862      	ldr	r2, [r4, #4]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	bf0c      	ite	eq
 800a760:	f8c8 2000 	streq.w	r2, [r8]
 800a764:	605a      	strne	r2, [r3, #4]
 800a766:	e7eb      	b.n	800a740 <_malloc_r+0xa8>
 800a768:	4623      	mov	r3, r4
 800a76a:	6864      	ldr	r4, [r4, #4]
 800a76c:	e7ae      	b.n	800a6cc <_malloc_r+0x34>
 800a76e:	463c      	mov	r4, r7
 800a770:	687f      	ldr	r7, [r7, #4]
 800a772:	e7b6      	b.n	800a6e2 <_malloc_r+0x4a>
 800a774:	461a      	mov	r2, r3
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d1fb      	bne.n	800a774 <_malloc_r+0xdc>
 800a77c:	2300      	movs	r3, #0
 800a77e:	6053      	str	r3, [r2, #4]
 800a780:	e7de      	b.n	800a740 <_malloc_r+0xa8>
 800a782:	230c      	movs	r3, #12
 800a784:	6033      	str	r3, [r6, #0]
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f80c 	bl	800a7a4 <__malloc_unlock>
 800a78c:	e794      	b.n	800a6b8 <_malloc_r+0x20>
 800a78e:	6005      	str	r5, [r0, #0]
 800a790:	e7d6      	b.n	800a740 <_malloc_r+0xa8>
 800a792:	bf00      	nop
 800a794:	24001410 	.word	0x24001410

0800a798 <__malloc_lock>:
 800a798:	4801      	ldr	r0, [pc, #4]	@ (800a7a0 <__malloc_lock+0x8>)
 800a79a:	f7ff bf01 	b.w	800a5a0 <__retarget_lock_acquire_recursive>
 800a79e:	bf00      	nop
 800a7a0:	24001408 	.word	0x24001408

0800a7a4 <__malloc_unlock>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	@ (800a7ac <__malloc_unlock+0x8>)
 800a7a6:	f7ff befc 	b.w	800a5a2 <__retarget_lock_release_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	24001408 	.word	0x24001408

0800a7b0 <__ssputs_r>:
 800a7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b4:	688e      	ldr	r6, [r1, #8]
 800a7b6:	461f      	mov	r7, r3
 800a7b8:	42be      	cmp	r6, r7
 800a7ba:	680b      	ldr	r3, [r1, #0]
 800a7bc:	4682      	mov	sl, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4690      	mov	r8, r2
 800a7c2:	d82d      	bhi.n	800a820 <__ssputs_r+0x70>
 800a7c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7cc:	d026      	beq.n	800a81c <__ssputs_r+0x6c>
 800a7ce:	6965      	ldr	r5, [r4, #20]
 800a7d0:	6909      	ldr	r1, [r1, #16]
 800a7d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7d6:	eba3 0901 	sub.w	r9, r3, r1
 800a7da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7de:	1c7b      	adds	r3, r7, #1
 800a7e0:	444b      	add	r3, r9
 800a7e2:	106d      	asrs	r5, r5, #1
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	bf38      	it	cc
 800a7e8:	461d      	movcc	r5, r3
 800a7ea:	0553      	lsls	r3, r2, #21
 800a7ec:	d527      	bpl.n	800a83e <__ssputs_r+0x8e>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7ff ff52 	bl	800a698 <_malloc_r>
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	b360      	cbz	r0, 800a852 <__ssputs_r+0xa2>
 800a7f8:	6921      	ldr	r1, [r4, #16]
 800a7fa:	464a      	mov	r2, r9
 800a7fc:	f7ff fed2 	bl	800a5a4 <memcpy>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	6126      	str	r6, [r4, #16]
 800a80e:	6165      	str	r5, [r4, #20]
 800a810:	444e      	add	r6, r9
 800a812:	eba5 0509 	sub.w	r5, r5, r9
 800a816:	6026      	str	r6, [r4, #0]
 800a818:	60a5      	str	r5, [r4, #8]
 800a81a:	463e      	mov	r6, r7
 800a81c:	42be      	cmp	r6, r7
 800a81e:	d900      	bls.n	800a822 <__ssputs_r+0x72>
 800a820:	463e      	mov	r6, r7
 800a822:	6820      	ldr	r0, [r4, #0]
 800a824:	4632      	mov	r2, r6
 800a826:	4641      	mov	r1, r8
 800a828:	f000 faa6 	bl	800ad78 <memmove>
 800a82c:	68a3      	ldr	r3, [r4, #8]
 800a82e:	1b9b      	subs	r3, r3, r6
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	4433      	add	r3, r6
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	2000      	movs	r0, #0
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	462a      	mov	r2, r5
 800a840:	f000 fac4 	bl	800adcc <_realloc_r>
 800a844:	4606      	mov	r6, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	d1e0      	bne.n	800a80c <__ssputs_r+0x5c>
 800a84a:	6921      	ldr	r1, [r4, #16]
 800a84c:	4650      	mov	r0, sl
 800a84e:	f7ff feb7 	bl	800a5c0 <_free_r>
 800a852:	230c      	movs	r3, #12
 800a854:	f8ca 3000 	str.w	r3, [sl]
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	e7e9      	b.n	800a83a <__ssputs_r+0x8a>
	...

0800a868 <_svfiprintf_r>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	4698      	mov	r8, r3
 800a86e:	898b      	ldrh	r3, [r1, #12]
 800a870:	061b      	lsls	r3, r3, #24
 800a872:	b09d      	sub	sp, #116	@ 0x74
 800a874:	4607      	mov	r7, r0
 800a876:	460d      	mov	r5, r1
 800a878:	4614      	mov	r4, r2
 800a87a:	d510      	bpl.n	800a89e <_svfiprintf_r+0x36>
 800a87c:	690b      	ldr	r3, [r1, #16]
 800a87e:	b973      	cbnz	r3, 800a89e <_svfiprintf_r+0x36>
 800a880:	2140      	movs	r1, #64	@ 0x40
 800a882:	f7ff ff09 	bl	800a698 <_malloc_r>
 800a886:	6028      	str	r0, [r5, #0]
 800a888:	6128      	str	r0, [r5, #16]
 800a88a:	b930      	cbnz	r0, 800a89a <_svfiprintf_r+0x32>
 800a88c:	230c      	movs	r3, #12
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	b01d      	add	sp, #116	@ 0x74
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	2340      	movs	r3, #64	@ 0x40
 800a89c:	616b      	str	r3, [r5, #20]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a2:	2320      	movs	r3, #32
 800a8a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ac:	2330      	movs	r3, #48	@ 0x30
 800a8ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa4c <_svfiprintf_r+0x1e4>
 800a8b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8b6:	f04f 0901 	mov.w	r9, #1
 800a8ba:	4623      	mov	r3, r4
 800a8bc:	469a      	mov	sl, r3
 800a8be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c2:	b10a      	cbz	r2, 800a8c8 <_svfiprintf_r+0x60>
 800a8c4:	2a25      	cmp	r2, #37	@ 0x25
 800a8c6:	d1f9      	bne.n	800a8bc <_svfiprintf_r+0x54>
 800a8c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a8cc:	d00b      	beq.n	800a8e6 <_svfiprintf_r+0x7e>
 800a8ce:	465b      	mov	r3, fp
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff ff6b 	bl	800a7b0 <__ssputs_r>
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f000 80a7 	beq.w	800aa2e <_svfiprintf_r+0x1c6>
 800a8e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e2:	445a      	add	r2, fp
 800a8e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 809f 	beq.w	800aa2e <_svfiprintf_r+0x1c6>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8fa:	f10a 0a01 	add.w	sl, sl, #1
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	9307      	str	r3, [sp, #28]
 800a902:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a906:	931a      	str	r3, [sp, #104]	@ 0x68
 800a908:	4654      	mov	r4, sl
 800a90a:	2205      	movs	r2, #5
 800a90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a910:	484e      	ldr	r0, [pc, #312]	@ (800aa4c <_svfiprintf_r+0x1e4>)
 800a912:	f7f5 fced 	bl	80002f0 <memchr>
 800a916:	9a04      	ldr	r2, [sp, #16]
 800a918:	b9d8      	cbnz	r0, 800a952 <_svfiprintf_r+0xea>
 800a91a:	06d0      	lsls	r0, r2, #27
 800a91c:	bf44      	itt	mi
 800a91e:	2320      	movmi	r3, #32
 800a920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a924:	0711      	lsls	r1, r2, #28
 800a926:	bf44      	itt	mi
 800a928:	232b      	movmi	r3, #43	@ 0x2b
 800a92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a92e:	f89a 3000 	ldrb.w	r3, [sl]
 800a932:	2b2a      	cmp	r3, #42	@ 0x2a
 800a934:	d015      	beq.n	800a962 <_svfiprintf_r+0xfa>
 800a936:	9a07      	ldr	r2, [sp, #28]
 800a938:	4654      	mov	r4, sl
 800a93a:	2000      	movs	r0, #0
 800a93c:	f04f 0c0a 	mov.w	ip, #10
 800a940:	4621      	mov	r1, r4
 800a942:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a946:	3b30      	subs	r3, #48	@ 0x30
 800a948:	2b09      	cmp	r3, #9
 800a94a:	d94b      	bls.n	800a9e4 <_svfiprintf_r+0x17c>
 800a94c:	b1b0      	cbz	r0, 800a97c <_svfiprintf_r+0x114>
 800a94e:	9207      	str	r2, [sp, #28]
 800a950:	e014      	b.n	800a97c <_svfiprintf_r+0x114>
 800a952:	eba0 0308 	sub.w	r3, r0, r8
 800a956:	fa09 f303 	lsl.w	r3, r9, r3
 800a95a:	4313      	orrs	r3, r2
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	46a2      	mov	sl, r4
 800a960:	e7d2      	b.n	800a908 <_svfiprintf_r+0xa0>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	1d19      	adds	r1, r3, #4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	9103      	str	r1, [sp, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfbb      	ittet	lt
 800a96e:	425b      	neglt	r3, r3
 800a970:	f042 0202 	orrlt.w	r2, r2, #2
 800a974:	9307      	strge	r3, [sp, #28]
 800a976:	9307      	strlt	r3, [sp, #28]
 800a978:	bfb8      	it	lt
 800a97a:	9204      	strlt	r2, [sp, #16]
 800a97c:	7823      	ldrb	r3, [r4, #0]
 800a97e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a980:	d10a      	bne.n	800a998 <_svfiprintf_r+0x130>
 800a982:	7863      	ldrb	r3, [r4, #1]
 800a984:	2b2a      	cmp	r3, #42	@ 0x2a
 800a986:	d132      	bne.n	800a9ee <_svfiprintf_r+0x186>
 800a988:	9b03      	ldr	r3, [sp, #12]
 800a98a:	1d1a      	adds	r2, r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	9203      	str	r2, [sp, #12]
 800a990:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a994:	3402      	adds	r4, #2
 800a996:	9305      	str	r3, [sp, #20]
 800a998:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa5c <_svfiprintf_r+0x1f4>
 800a99c:	7821      	ldrb	r1, [r4, #0]
 800a99e:	2203      	movs	r2, #3
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	f7f5 fca5 	bl	80002f0 <memchr>
 800a9a6:	b138      	cbz	r0, 800a9b8 <_svfiprintf_r+0x150>
 800a9a8:	9b04      	ldr	r3, [sp, #16]
 800a9aa:	eba0 000a 	sub.w	r0, r0, sl
 800a9ae:	2240      	movs	r2, #64	@ 0x40
 800a9b0:	4082      	lsls	r2, r0
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	3401      	adds	r4, #1
 800a9b6:	9304      	str	r3, [sp, #16]
 800a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9bc:	4824      	ldr	r0, [pc, #144]	@ (800aa50 <_svfiprintf_r+0x1e8>)
 800a9be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9c2:	2206      	movs	r2, #6
 800a9c4:	f7f5 fc94 	bl	80002f0 <memchr>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d036      	beq.n	800aa3a <_svfiprintf_r+0x1d2>
 800a9cc:	4b21      	ldr	r3, [pc, #132]	@ (800aa54 <_svfiprintf_r+0x1ec>)
 800a9ce:	bb1b      	cbnz	r3, 800aa18 <_svfiprintf_r+0x1b0>
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	3307      	adds	r3, #7
 800a9d4:	f023 0307 	bic.w	r3, r3, #7
 800a9d8:	3308      	adds	r3, #8
 800a9da:	9303      	str	r3, [sp, #12]
 800a9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9de:	4433      	add	r3, r6
 800a9e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e2:	e76a      	b.n	800a8ba <_svfiprintf_r+0x52>
 800a9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	e7a8      	b.n	800a940 <_svfiprintf_r+0xd8>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f04f 0c0a 	mov.w	ip, #10
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa00:	3a30      	subs	r2, #48	@ 0x30
 800aa02:	2a09      	cmp	r2, #9
 800aa04:	d903      	bls.n	800aa0e <_svfiprintf_r+0x1a6>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0c6      	beq.n	800a998 <_svfiprintf_r+0x130>
 800aa0a:	9105      	str	r1, [sp, #20]
 800aa0c:	e7c4      	b.n	800a998 <_svfiprintf_r+0x130>
 800aa0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa12:	4604      	mov	r4, r0
 800aa14:	2301      	movs	r3, #1
 800aa16:	e7f0      	b.n	800a9fa <_svfiprintf_r+0x192>
 800aa18:	ab03      	add	r3, sp, #12
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa58 <_svfiprintf_r+0x1f0>)
 800aa20:	a904      	add	r1, sp, #16
 800aa22:	4638      	mov	r0, r7
 800aa24:	f3af 8000 	nop.w
 800aa28:	1c42      	adds	r2, r0, #1
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	d1d6      	bne.n	800a9dc <_svfiprintf_r+0x174>
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	065b      	lsls	r3, r3, #25
 800aa32:	f53f af2d 	bmi.w	800a890 <_svfiprintf_r+0x28>
 800aa36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa38:	e72c      	b.n	800a894 <_svfiprintf_r+0x2c>
 800aa3a:	ab03      	add	r3, sp, #12
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4b05      	ldr	r3, [pc, #20]	@ (800aa58 <_svfiprintf_r+0x1f0>)
 800aa42:	a904      	add	r1, sp, #16
 800aa44:	4638      	mov	r0, r7
 800aa46:	f000 f879 	bl	800ab3c <_printf_i>
 800aa4a:	e7ed      	b.n	800aa28 <_svfiprintf_r+0x1c0>
 800aa4c:	0800af88 	.word	0x0800af88
 800aa50:	0800af92 	.word	0x0800af92
 800aa54:	00000000 	.word	0x00000000
 800aa58:	0800a7b1 	.word	0x0800a7b1
 800aa5c:	0800af8e 	.word	0x0800af8e

0800aa60 <_printf_common>:
 800aa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa64:	4616      	mov	r6, r2
 800aa66:	4698      	mov	r8, r3
 800aa68:	688a      	ldr	r2, [r1, #8]
 800aa6a:	690b      	ldr	r3, [r1, #16]
 800aa6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	bfb8      	it	lt
 800aa74:	4613      	movlt	r3, r2
 800aa76:	6033      	str	r3, [r6, #0]
 800aa78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b10a      	cbz	r2, 800aa86 <_printf_common+0x26>
 800aa82:	3301      	adds	r3, #1
 800aa84:	6033      	str	r3, [r6, #0]
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	0699      	lsls	r1, r3, #26
 800aa8a:	bf42      	ittt	mi
 800aa8c:	6833      	ldrmi	r3, [r6, #0]
 800aa8e:	3302      	addmi	r3, #2
 800aa90:	6033      	strmi	r3, [r6, #0]
 800aa92:	6825      	ldr	r5, [r4, #0]
 800aa94:	f015 0506 	ands.w	r5, r5, #6
 800aa98:	d106      	bne.n	800aaa8 <_printf_common+0x48>
 800aa9a:	f104 0a19 	add.w	sl, r4, #25
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	6832      	ldr	r2, [r6, #0]
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	42ab      	cmp	r3, r5
 800aaa6:	dc26      	bgt.n	800aaf6 <_printf_common+0x96>
 800aaa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	3b00      	subs	r3, #0
 800aab0:	bf18      	it	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	0692      	lsls	r2, r2, #26
 800aab6:	d42b      	bmi.n	800ab10 <_printf_common+0xb0>
 800aab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aabc:	4641      	mov	r1, r8
 800aabe:	4638      	mov	r0, r7
 800aac0:	47c8      	blx	r9
 800aac2:	3001      	adds	r0, #1
 800aac4:	d01e      	beq.n	800ab04 <_printf_common+0xa4>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	f003 0306 	and.w	r3, r3, #6
 800aace:	2b04      	cmp	r3, #4
 800aad0:	bf02      	ittt	eq
 800aad2:	68e5      	ldreq	r5, [r4, #12]
 800aad4:	6833      	ldreq	r3, [r6, #0]
 800aad6:	1aed      	subeq	r5, r5, r3
 800aad8:	68a3      	ldr	r3, [r4, #8]
 800aada:	bf0c      	ite	eq
 800aadc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aae0:	2500      	movne	r5, #0
 800aae2:	4293      	cmp	r3, r2
 800aae4:	bfc4      	itt	gt
 800aae6:	1a9b      	subgt	r3, r3, r2
 800aae8:	18ed      	addgt	r5, r5, r3
 800aaea:	2600      	movs	r6, #0
 800aaec:	341a      	adds	r4, #26
 800aaee:	42b5      	cmp	r5, r6
 800aaf0:	d11a      	bne.n	800ab28 <_printf_common+0xc8>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e008      	b.n	800ab08 <_printf_common+0xa8>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4652      	mov	r2, sl
 800aafa:	4641      	mov	r1, r8
 800aafc:	4638      	mov	r0, r7
 800aafe:	47c8      	blx	r9
 800ab00:	3001      	adds	r0, #1
 800ab02:	d103      	bne.n	800ab0c <_printf_common+0xac>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	e7c6      	b.n	800aa9e <_printf_common+0x3e>
 800ab10:	18e1      	adds	r1, r4, r3
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	2030      	movs	r0, #48	@ 0x30
 800ab16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab1a:	4422      	add	r2, r4
 800ab1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab24:	3302      	adds	r3, #2
 800ab26:	e7c7      	b.n	800aab8 <_printf_common+0x58>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	4638      	mov	r0, r7
 800ab30:	47c8      	blx	r9
 800ab32:	3001      	adds	r0, #1
 800ab34:	d0e6      	beq.n	800ab04 <_printf_common+0xa4>
 800ab36:	3601      	adds	r6, #1
 800ab38:	e7d9      	b.n	800aaee <_printf_common+0x8e>
	...

0800ab3c <_printf_i>:
 800ab3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	7e0f      	ldrb	r7, [r1, #24]
 800ab42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab44:	2f78      	cmp	r7, #120	@ 0x78
 800ab46:	4691      	mov	r9, r2
 800ab48:	4680      	mov	r8, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	469a      	mov	sl, r3
 800ab4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab52:	d807      	bhi.n	800ab64 <_printf_i+0x28>
 800ab54:	2f62      	cmp	r7, #98	@ 0x62
 800ab56:	d80a      	bhi.n	800ab6e <_printf_i+0x32>
 800ab58:	2f00      	cmp	r7, #0
 800ab5a:	f000 80d1 	beq.w	800ad00 <_printf_i+0x1c4>
 800ab5e:	2f58      	cmp	r7, #88	@ 0x58
 800ab60:	f000 80b8 	beq.w	800acd4 <_printf_i+0x198>
 800ab64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab6c:	e03a      	b.n	800abe4 <_printf_i+0xa8>
 800ab6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab72:	2b15      	cmp	r3, #21
 800ab74:	d8f6      	bhi.n	800ab64 <_printf_i+0x28>
 800ab76:	a101      	add	r1, pc, #4	@ (adr r1, 800ab7c <_printf_i+0x40>)
 800ab78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab7c:	0800abd5 	.word	0x0800abd5
 800ab80:	0800abe9 	.word	0x0800abe9
 800ab84:	0800ab65 	.word	0x0800ab65
 800ab88:	0800ab65 	.word	0x0800ab65
 800ab8c:	0800ab65 	.word	0x0800ab65
 800ab90:	0800ab65 	.word	0x0800ab65
 800ab94:	0800abe9 	.word	0x0800abe9
 800ab98:	0800ab65 	.word	0x0800ab65
 800ab9c:	0800ab65 	.word	0x0800ab65
 800aba0:	0800ab65 	.word	0x0800ab65
 800aba4:	0800ab65 	.word	0x0800ab65
 800aba8:	0800ace7 	.word	0x0800ace7
 800abac:	0800ac13 	.word	0x0800ac13
 800abb0:	0800aca1 	.word	0x0800aca1
 800abb4:	0800ab65 	.word	0x0800ab65
 800abb8:	0800ab65 	.word	0x0800ab65
 800abbc:	0800ad09 	.word	0x0800ad09
 800abc0:	0800ab65 	.word	0x0800ab65
 800abc4:	0800ac13 	.word	0x0800ac13
 800abc8:	0800ab65 	.word	0x0800ab65
 800abcc:	0800ab65 	.word	0x0800ab65
 800abd0:	0800aca9 	.word	0x0800aca9
 800abd4:	6833      	ldr	r3, [r6, #0]
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6032      	str	r2, [r6, #0]
 800abdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abe4:	2301      	movs	r3, #1
 800abe6:	e09c      	b.n	800ad22 <_printf_i+0x1e6>
 800abe8:	6833      	ldr	r3, [r6, #0]
 800abea:	6820      	ldr	r0, [r4, #0]
 800abec:	1d19      	adds	r1, r3, #4
 800abee:	6031      	str	r1, [r6, #0]
 800abf0:	0606      	lsls	r6, r0, #24
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0xbc>
 800abf4:	681d      	ldr	r5, [r3, #0]
 800abf6:	e003      	b.n	800ac00 <_printf_i+0xc4>
 800abf8:	0645      	lsls	r5, r0, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0xb8>
 800abfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	da03      	bge.n	800ac0c <_printf_i+0xd0>
 800ac04:	232d      	movs	r3, #45	@ 0x2d
 800ac06:	426d      	negs	r5, r5
 800ac08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac0c:	4858      	ldr	r0, [pc, #352]	@ (800ad70 <_printf_i+0x234>)
 800ac0e:	230a      	movs	r3, #10
 800ac10:	e011      	b.n	800ac36 <_printf_i+0xfa>
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	6833      	ldr	r3, [r6, #0]
 800ac16:	0608      	lsls	r0, r1, #24
 800ac18:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac1c:	d402      	bmi.n	800ac24 <_printf_i+0xe8>
 800ac1e:	0649      	lsls	r1, r1, #25
 800ac20:	bf48      	it	mi
 800ac22:	b2ad      	uxthmi	r5, r5
 800ac24:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac26:	4852      	ldr	r0, [pc, #328]	@ (800ad70 <_printf_i+0x234>)
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	bf14      	ite	ne
 800ac2c:	230a      	movne	r3, #10
 800ac2e:	2308      	moveq	r3, #8
 800ac30:	2100      	movs	r1, #0
 800ac32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac36:	6866      	ldr	r6, [r4, #4]
 800ac38:	60a6      	str	r6, [r4, #8]
 800ac3a:	2e00      	cmp	r6, #0
 800ac3c:	db05      	blt.n	800ac4a <_printf_i+0x10e>
 800ac3e:	6821      	ldr	r1, [r4, #0]
 800ac40:	432e      	orrs	r6, r5
 800ac42:	f021 0104 	bic.w	r1, r1, #4
 800ac46:	6021      	str	r1, [r4, #0]
 800ac48:	d04b      	beq.n	800ace2 <_printf_i+0x1a6>
 800ac4a:	4616      	mov	r6, r2
 800ac4c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac50:	fb03 5711 	mls	r7, r3, r1, r5
 800ac54:	5dc7      	ldrb	r7, [r0, r7]
 800ac56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac5a:	462f      	mov	r7, r5
 800ac5c:	42bb      	cmp	r3, r7
 800ac5e:	460d      	mov	r5, r1
 800ac60:	d9f4      	bls.n	800ac4c <_printf_i+0x110>
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d10b      	bne.n	800ac7e <_printf_i+0x142>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	07df      	lsls	r7, r3, #31
 800ac6a:	d508      	bpl.n	800ac7e <_printf_i+0x142>
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	6861      	ldr	r1, [r4, #4]
 800ac70:	4299      	cmp	r1, r3
 800ac72:	bfde      	ittt	le
 800ac74:	2330      	movle	r3, #48	@ 0x30
 800ac76:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac7e:	1b92      	subs	r2, r2, r6
 800ac80:	6122      	str	r2, [r4, #16]
 800ac82:	f8cd a000 	str.w	sl, [sp]
 800ac86:	464b      	mov	r3, r9
 800ac88:	aa03      	add	r2, sp, #12
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	f7ff fee7 	bl	800aa60 <_printf_common>
 800ac92:	3001      	adds	r0, #1
 800ac94:	d14a      	bne.n	800ad2c <_printf_i+0x1f0>
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	b004      	add	sp, #16
 800ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	f043 0320 	orr.w	r3, r3, #32
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	4832      	ldr	r0, [pc, #200]	@ (800ad74 <_printf_i+0x238>)
 800acaa:	2778      	movs	r7, #120	@ 0x78
 800acac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	6831      	ldr	r1, [r6, #0]
 800acb4:	061f      	lsls	r7, r3, #24
 800acb6:	f851 5b04 	ldr.w	r5, [r1], #4
 800acba:	d402      	bmi.n	800acc2 <_printf_i+0x186>
 800acbc:	065f      	lsls	r7, r3, #25
 800acbe:	bf48      	it	mi
 800acc0:	b2ad      	uxthmi	r5, r5
 800acc2:	6031      	str	r1, [r6, #0]
 800acc4:	07d9      	lsls	r1, r3, #31
 800acc6:	bf44      	itt	mi
 800acc8:	f043 0320 	orrmi.w	r3, r3, #32
 800accc:	6023      	strmi	r3, [r4, #0]
 800acce:	b11d      	cbz	r5, 800acd8 <_printf_i+0x19c>
 800acd0:	2310      	movs	r3, #16
 800acd2:	e7ad      	b.n	800ac30 <_printf_i+0xf4>
 800acd4:	4826      	ldr	r0, [pc, #152]	@ (800ad70 <_printf_i+0x234>)
 800acd6:	e7e9      	b.n	800acac <_printf_i+0x170>
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	f023 0320 	bic.w	r3, r3, #32
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	e7f6      	b.n	800acd0 <_printf_i+0x194>
 800ace2:	4616      	mov	r6, r2
 800ace4:	e7bd      	b.n	800ac62 <_printf_i+0x126>
 800ace6:	6833      	ldr	r3, [r6, #0]
 800ace8:	6825      	ldr	r5, [r4, #0]
 800acea:	6961      	ldr	r1, [r4, #20]
 800acec:	1d18      	adds	r0, r3, #4
 800acee:	6030      	str	r0, [r6, #0]
 800acf0:	062e      	lsls	r6, r5, #24
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	d501      	bpl.n	800acfa <_printf_i+0x1be>
 800acf6:	6019      	str	r1, [r3, #0]
 800acf8:	e002      	b.n	800ad00 <_printf_i+0x1c4>
 800acfa:	0668      	lsls	r0, r5, #25
 800acfc:	d5fb      	bpl.n	800acf6 <_printf_i+0x1ba>
 800acfe:	8019      	strh	r1, [r3, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	4616      	mov	r6, r2
 800ad06:	e7bc      	b.n	800ac82 <_printf_i+0x146>
 800ad08:	6833      	ldr	r3, [r6, #0]
 800ad0a:	1d1a      	adds	r2, r3, #4
 800ad0c:	6032      	str	r2, [r6, #0]
 800ad0e:	681e      	ldr	r6, [r3, #0]
 800ad10:	6862      	ldr	r2, [r4, #4]
 800ad12:	2100      	movs	r1, #0
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7f5 faeb 	bl	80002f0 <memchr>
 800ad1a:	b108      	cbz	r0, 800ad20 <_printf_i+0x1e4>
 800ad1c:	1b80      	subs	r0, r0, r6
 800ad1e:	6060      	str	r0, [r4, #4]
 800ad20:	6863      	ldr	r3, [r4, #4]
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	2300      	movs	r3, #0
 800ad26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad2a:	e7aa      	b.n	800ac82 <_printf_i+0x146>
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4649      	mov	r1, r9
 800ad32:	4640      	mov	r0, r8
 800ad34:	47d0      	blx	sl
 800ad36:	3001      	adds	r0, #1
 800ad38:	d0ad      	beq.n	800ac96 <_printf_i+0x15a>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	079b      	lsls	r3, r3, #30
 800ad3e:	d413      	bmi.n	800ad68 <_printf_i+0x22c>
 800ad40:	68e0      	ldr	r0, [r4, #12]
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	4298      	cmp	r0, r3
 800ad46:	bfb8      	it	lt
 800ad48:	4618      	movlt	r0, r3
 800ad4a:	e7a6      	b.n	800ac9a <_printf_i+0x15e>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	4632      	mov	r2, r6
 800ad50:	4649      	mov	r1, r9
 800ad52:	4640      	mov	r0, r8
 800ad54:	47d0      	blx	sl
 800ad56:	3001      	adds	r0, #1
 800ad58:	d09d      	beq.n	800ac96 <_printf_i+0x15a>
 800ad5a:	3501      	adds	r5, #1
 800ad5c:	68e3      	ldr	r3, [r4, #12]
 800ad5e:	9903      	ldr	r1, [sp, #12]
 800ad60:	1a5b      	subs	r3, r3, r1
 800ad62:	42ab      	cmp	r3, r5
 800ad64:	dcf2      	bgt.n	800ad4c <_printf_i+0x210>
 800ad66:	e7eb      	b.n	800ad40 <_printf_i+0x204>
 800ad68:	2500      	movs	r5, #0
 800ad6a:	f104 0619 	add.w	r6, r4, #25
 800ad6e:	e7f5      	b.n	800ad5c <_printf_i+0x220>
 800ad70:	0800af99 	.word	0x0800af99
 800ad74:	0800afaa 	.word	0x0800afaa

0800ad78 <memmove>:
 800ad78:	4288      	cmp	r0, r1
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	eb01 0402 	add.w	r4, r1, r2
 800ad80:	d902      	bls.n	800ad88 <memmove+0x10>
 800ad82:	4284      	cmp	r4, r0
 800ad84:	4623      	mov	r3, r4
 800ad86:	d807      	bhi.n	800ad98 <memmove+0x20>
 800ad88:	1e43      	subs	r3, r0, #1
 800ad8a:	42a1      	cmp	r1, r4
 800ad8c:	d008      	beq.n	800ada0 <memmove+0x28>
 800ad8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad96:	e7f8      	b.n	800ad8a <memmove+0x12>
 800ad98:	4402      	add	r2, r0
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	428a      	cmp	r2, r1
 800ad9e:	d100      	bne.n	800ada2 <memmove+0x2a>
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ada6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adaa:	e7f7      	b.n	800ad9c <memmove+0x24>

0800adac <_sbrk_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d06      	ldr	r5, [pc, #24]	@ (800adc8 <_sbrk_r+0x1c>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f6 fe96 	bl	8001ae8 <_sbrk>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_sbrk_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_sbrk_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	24001404 	.word	0x24001404

0800adcc <_realloc_r>:
 800adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add0:	4607      	mov	r7, r0
 800add2:	4614      	mov	r4, r2
 800add4:	460d      	mov	r5, r1
 800add6:	b921      	cbnz	r1, 800ade2 <_realloc_r+0x16>
 800add8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800addc:	4611      	mov	r1, r2
 800adde:	f7ff bc5b 	b.w	800a698 <_malloc_r>
 800ade2:	b92a      	cbnz	r2, 800adf0 <_realloc_r+0x24>
 800ade4:	f7ff fbec 	bl	800a5c0 <_free_r>
 800ade8:	4625      	mov	r5, r4
 800adea:	4628      	mov	r0, r5
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	f000 f81a 	bl	800ae28 <_malloc_usable_size_r>
 800adf4:	4284      	cmp	r4, r0
 800adf6:	4606      	mov	r6, r0
 800adf8:	d802      	bhi.n	800ae00 <_realloc_r+0x34>
 800adfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adfe:	d8f4      	bhi.n	800adea <_realloc_r+0x1e>
 800ae00:	4621      	mov	r1, r4
 800ae02:	4638      	mov	r0, r7
 800ae04:	f7ff fc48 	bl	800a698 <_malloc_r>
 800ae08:	4680      	mov	r8, r0
 800ae0a:	b908      	cbnz	r0, 800ae10 <_realloc_r+0x44>
 800ae0c:	4645      	mov	r5, r8
 800ae0e:	e7ec      	b.n	800adea <_realloc_r+0x1e>
 800ae10:	42b4      	cmp	r4, r6
 800ae12:	4622      	mov	r2, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	bf28      	it	cs
 800ae18:	4632      	movcs	r2, r6
 800ae1a:	f7ff fbc3 	bl	800a5a4 <memcpy>
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4638      	mov	r0, r7
 800ae22:	f7ff fbcd 	bl	800a5c0 <_free_r>
 800ae26:	e7f1      	b.n	800ae0c <_realloc_r+0x40>

0800ae28 <_malloc_usable_size_r>:
 800ae28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2c:	1f18      	subs	r0, r3, #4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfbc      	itt	lt
 800ae32:	580b      	ldrlt	r3, [r1, r0]
 800ae34:	18c0      	addlt	r0, r0, r3
 800ae36:	4770      	bx	lr

0800ae38 <_init>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr

0800ae44 <_fini>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	bf00      	nop
 800ae48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4a:	bc08      	pop	{r3}
 800ae4c:	469e      	mov	lr, r3
 800ae4e:	4770      	bx	lr
