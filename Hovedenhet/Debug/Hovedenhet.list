
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b85c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800bafc  0800bafc  0000cafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc1c  0800bc1c  0000cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bc28  0800bc28  0000cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800bc2c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015a0  24000060  0800bc8c  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001600  0800bc8c  0000d600  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b180  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003124  00000000  00000000  0002820e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0002b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d7b  00000000  00000000  0002c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ed2  00000000  00000000  0002d22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000192e1  00000000  00000000  000670fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a635  00000000  00000000  000803de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eaa13  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ebc  00000000  00000000  001eaa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ef914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bae4 	.word	0x0800bae4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800bae4 	.word	0x0800bae4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c8:	70fb      	strb	r3, [r7, #3]
	CAM.Tx_Buffer[0] = CMD;
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	713b      	strb	r3, [r7, #4]
	CAM.Tx_Buffer[1] = CMD;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	f008 f886 	bl	80087ea <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006f6:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000706:	2208      	movs	r2, #8
 8000708:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <CAN_SendMessage+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <CAN_SendMessage+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <CAN_SendMessage+0x60>)
 800072a:	4906      	ldr	r1, [pc, #24]	@ (8000744 <CAN_SendMessage+0x5c>)
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <CAN_SendMessage+0x64>)
 800072e:	f003 fa22 	bl	8003b76 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <CAN_SendMessage+0x54>
        Error_Handler();
 8000738:	f001 fb06 	bl	8001d48 <Error_Handler>
    }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24001108 	.word	0x24001108
 8000748:	24000088 	.word	0x24000088
 800074c:	2400112c 	.word	0x2400112c

08000750 <CAN_SendStatus>:

void CAN_SendStatus(uint8_t CAN_Timeout){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	uint32_t Status = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(GPIOC, CAM1_PWR_Pin)){
 800075e:	2102      	movs	r1, #2
 8000760:	482c      	ldr	r0, [pc, #176]	@ (8000814 <CAN_SendStatus+0xc4>)
 8000762:	f004 fb07 	bl	8004d74 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <CAN_SendStatus+0x24>
		Status |= (1 << 0);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
	}
	if(HAL_GPIO_ReadPin(GPIOE, CAM2_PWR_Pin)){
 8000774:	2108      	movs	r1, #8
 8000776:	4828      	ldr	r0, [pc, #160]	@ (8000818 <CAN_SendStatus+0xc8>)
 8000778:	f004 fafc 	bl	8004d74 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <CAN_SendStatus+0x3a>
		Status |= (1 << 1);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
	}
	if(HAL_GPIO_ReadPin(GPIOB, CAM3_PWR_Pin)){
 800078a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078e:	4823      	ldr	r0, [pc, #140]	@ (800081c <CAN_SendStatus+0xcc>)
 8000790:	f004 faf0 	bl	8004d74 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <CAN_SendStatus+0x52>
		Status |= (1 << 2);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
	}
	if(CAM1.Status[0] == 0x42){
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <CAN_SendStatus+0xd0>)
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	2b42      	cmp	r3, #66	@ 0x42
 80007a8:	d103      	bne.n	80007b2 <CAN_SendStatus+0x62>
		Status |= (1 << 3);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	60fb      	str	r3, [r7, #12]
	}
	if(CAM2.Status[0] == 0x42){
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <CAN_SendStatus+0xd4>)
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	2b42      	cmp	r3, #66	@ 0x42
 80007b8:	d103      	bne.n	80007c2 <CAN_SendStatus+0x72>
		Status |= (1 << 4);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
	}
	if(CAM3.Status[0] == 0x42){
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <CAN_SendStatus+0xd8>)
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	2b42      	cmp	r3, #66	@ 0x42
 80007c8:	d103      	bne.n	80007d2 <CAN_SendStatus+0x82>
		Status |= (1 << 5);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	60fb      	str	r3, [r7, #12]
	}
	if(CAN_Timeout){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <CAN_SendStatus+0x90>
		Status |= (1 << 6);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007de:	60fb      	str	r3, [r7, #12]
	}
	if(Start_Flight_Recording){
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <CAN_SendStatus+0xdc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <CAN_SendStatus+0xa0>
		Status |= (1 << 7);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
	}

	*(uint32_t*)&CAN.Tx_Buffer[0] = Status;
 80007f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <CAN_SendStatus+0xe0>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6013      	str	r3, [r2, #0]
	*(uint16_t*)&CAN.Tx_Buffer[4] = Flash.Page_Index;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <CAN_SendStatus+0xe4>)
 80007f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <CAN_SendStatus+0xe8>)
 80007fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80007fe:	8892      	ldrh	r2, [r2, #4]
 8000800:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(400);
 8000802:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000806:	f7ff ff6f 	bl	80006e8 <CAN_SendMessage>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58020800 	.word	0x58020800
 8000818:	58021000 	.word	0x58021000
 800081c:	58020400 	.word	0x58020400
 8000820:	240010bc 	.word	0x240010bc
 8000824:	240010c8 	.word	0x240010c8
 8000828:	240010d4 	.word	0x240010d4
 800082c:	2400007c 	.word	0x2400007c
 8000830:	24000088 	.word	0x24000088
 8000834:	2400008c 	.word	0x2400008c
 8000838:	240000ac 	.word	0x240000ac

0800083c <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 8000846:	f000 fd07 	bl	8001258 <W25N_WaitForReady>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d012      	beq.n	8000876 <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000850:	4b67      	ldr	r3, [pc, #412]	@ (80009f0 <Flash_Init+0x1b4>)
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fb13 	bl	8000e80 <Read_Status_Register>
 800085a:	4603      	mov	r3, r0
 800085c:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 800085e:	7ebb      	ldrb	r3, [r7, #26]
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000866:	4b62      	ldr	r3, [pc, #392]	@ (80009f0 <Flash_Init+0x1b4>)
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	7eba      	ldrb	r2, [r7, #26]
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fb36 	bl	8000ee0 <Write_Status_Register>
 8000874:	e011      	b.n	800089a <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000876:	4b5e      	ldr	r3, [pc, #376]	@ (80009f0 <Flash_Init+0x1b4>)
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fb00 	bl	8000e80 <Read_Status_Register>
 8000880:	4603      	mov	r3, r0
 8000882:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000884:	7efb      	ldrb	r3, [r7, #27]
 8000886:	f023 0308 	bic.w	r3, r3, #8
 800088a:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 800088c:	4b58      	ldr	r3, [pc, #352]	@ (80009f0 <Flash_Init+0x1b4>)
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	7efa      	ldrb	r2, [r7, #27]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fb23 	bl	8000ee0 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 800089a:	4b55      	ldr	r3, [pc, #340]	@ (80009f0 <Flash_Init+0x1b4>)
 800089c:	78db      	ldrb	r3, [r3, #3]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 faee 	bl	8000e80 <Read_Status_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 80008a8:	7e7b      	ldrb	r3, [r7, #25]
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 80008b0:	7e7b      	ldrb	r3, [r7, #25]
 80008b2:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80008b6:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80008b8:	4b4d      	ldr	r3, [pc, #308]	@ (80009f0 <Flash_Init+0x1b4>)
 80008ba:	78db      	ldrb	r3, [r3, #3]
 80008bc:	7e7a      	ldrb	r2, [r7, #25]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fb0d 	bl	8000ee0 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80008d4:	2300      	movs	r3, #0
 80008d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80008dc:	e031      	b.n	8000942 <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80008de:	2300      	movs	r3, #0
 80008e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80008e2:	f107 0108 	add.w	r1, r7, #8
 80008e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008e8:	2210      	movs	r2, #16
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f982 	bl	8000bf4 <Read_Data>

		for(int i = 0; i < 16; i++){
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	e013      	b.n	800091e <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80008f6:	f107 0208 	add.w	r2, r7, #8
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2bff      	cmp	r3, #255	@ 0xff
 8000902:	d109      	bne.n	8000918 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 8000904:	2201      	movs	r2, #1
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	b21a      	sxth	r2, r3
 800090e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	3301      	adds	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	dde8      	ble.n	80008f6 <Flash_Init+0xba>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000924:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800092a:	4293      	cmp	r3, r2
 800092c:	d003      	beq.n	8000936 <Flash_Init+0xfa>
			Temp_Page += 64;
 800092e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000930:	3340      	adds	r3, #64	@ 0x40
 8000932:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000934:	e005      	b.n	8000942 <Flash_Init+0x106>
		}
		else{
			if(Temp_Page == 0) break;
 8000936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000938:	2b00      	cmp	r3, #0
 800093a:	d008      	beq.n	800094e <Flash_Init+0x112>
			else Temp_Page -= 64;
 800093c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800093e:	3b40      	subs	r3, #64	@ 0x40
 8000940:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000942:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000948:	4293      	cmp	r3, r2
 800094a:	d1c8      	bne.n	80008de <Flash_Init+0xa2>
 800094c:	e000      	b.n	8000950 <Flash_Init+0x114>
			if(Temp_Page == 0) break;
 800094e:	bf00      	nop
		}
	}
	Page_Bit=0x0000;
 8000950:	2300      	movs	r3, #0
 8000952:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000954:	e02a      	b.n	80009ac <Flash_Init+0x170>
		Page_Bit = 0x0000;
 8000956:	2300      	movs	r3, #0
 8000958:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800095a:	f107 0108 	add.w	r1, r7, #8
 800095e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000960:	2210      	movs	r2, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f946 	bl	8000bf4 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e013      	b.n	8000996 <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 800096e:	f107 0208 	add.w	r2, r7, #8
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2bff      	cmp	r3, #255	@ 0xff
 800097a:	d109      	bne.n	8000990 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 800097c:	2201      	movs	r2, #1
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21a      	sxth	r2, r3
 8000986:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800098a:	4313      	orrs	r3, r2
 800098c:	b21b      	sxth	r3, r3
 800098e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	3301      	adds	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	dde8      	ble.n	800096e <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 800099c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800099e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d002      	beq.n	80009ac <Flash_Init+0x170>
			Temp_Page++;
 80009a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009a8:	3301      	adds	r3, #1
 80009aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80009ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d1cf      	bne.n	8000956 <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <Flash_Init+0x1b8>)
 80009b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009bc:	461a      	mov	r2, r3
 80009be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009c0:	8093      	strh	r3, [r2, #4]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <Flash_Init+0x1b8>)
 80009c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c8:	889b      	ldrh	r3, [r3, #4]
 80009ca:	099b      	lsrs	r3, r3, #6
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <Flash_Init+0x1b8>)
 80009d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d4:	805a      	strh	r2, [r3, #2]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <Flash_Init+0x1b8>)
 80009d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <Flash_Init+0x1bc>)
 80009e2:	f000 fc13 	bl	800120c <USART3_Printf>
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	240000a4 	.word	0x240000a4
 80009f4:	240000ac 	.word	0x240000ac
 80009f8:	0800bafc 	.word	0x0800bafc

080009fc <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	463b      	mov	r3, r7
 8000a04:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fa38 	bl	8000e80 <Read_Status_Register>
 8000a10:	4603      	mov	r3, r0
 8000a12:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 8000a14:	2064      	movs	r0, #100	@ 0x64
 8000a16:	f000 fbcf 	bl	80011b8 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 8000a1a:	793b      	ldrb	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fa2f 	bl	8000e80 <Read_Status_Register>
 8000a22:	4603      	mov	r3, r0
 8000a24:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 8000a26:	2064      	movs	r0, #100	@ 0x64
 8000a28:	f000 fbc6 	bl	80011b8 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000a2c:	797b      	ldrb	r3, [r7, #5]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fa26 	bl	8000e80 <Read_Status_Register>
 8000a34:	4603      	mov	r3, r0
 8000a36:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 8000a38:	2064      	movs	r0, #100	@ 0x64
 8000a3a:	f000 fbbd 	bl	80011b8 <delay_ns>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <Write_Data+0xa0>)
 8000a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a5a:	889b      	ldrh	r3, [r3, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d108      	bne.n	8000a72 <Write_Data+0x2a>
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <Write_Data+0xa0>)
 8000a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a66:	88db      	ldrh	r3, [r3, #6]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <Write_Data+0x2a>
		Block_Erase(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fb6f 	bl	8001150 <Block_Erase>
	}
	uint16_t count=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000a76:	e02e      	b.n	8000ad6 <Write_Data+0x8e>
		if(Flash.Memory_Full == 1){
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <Write_Data+0xa0>)
 8000a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7e:	785b      	ldrb	r3, [r3, #1]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d02d      	beq.n	8000ae0 <Write_Data+0x98>
			return;
		}

		*Flash.Buffer_p=*data;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <Write_Data+0xa0>)
 8000a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <Write_Data+0xa0>)
 8000a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <Write_Data+0xa0>)
 8000a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000aa2:	60d3      	str	r3, [r2, #12]
		data++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <Write_Data+0xa0>)
 8000aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ab0:	88db      	ldrh	r3, [r3, #6]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <Write_Data+0xa0>)
 8000ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000abc:	80da      	strh	r2, [r3, #6]
		count++;
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <Write_Data+0xa0>)
 8000ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aca:	88db      	ldrh	r3, [r3, #6]
 8000acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ad0:	d301      	bcc.n	8000ad6 <Write_Data+0x8e>
			Write_to_page();
 8000ad2:	f000 f80b 	bl	8000aec <Write_to_page>
	while(count<lenght){
 8000ad6:	89fa      	ldrh	r2, [r7, #14]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3cc      	bcc.n	8000a78 <Write_Data+0x30>
 8000ade:	e000      	b.n	8000ae2 <Write_Data+0x9a>
			return;
 8000ae0:	bf00      	nop
		}
	}
}
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000ac 	.word	0x240000ac

08000aec <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	//Check if it is the last page
	if(Flash.Page_Index >= 0xFFFF){
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <Write_to_page+0xfc>)
 8000af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d122      	bne.n	8000b46 <Write_to_page+0x5a>

		//Set memory full flag and disable flight recording
		Flash.Memory_Full = 1;
 8000b00:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <Write_to_page+0xfc>)
 8000b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b06:	2201      	movs	r2, #1
 8000b08:	705a      	strb	r2, [r3, #1]
		Start_Flight_Recording = 0;
 8000b0a:	4b38      	ldr	r3, [pc, #224]	@ (8000bec <Write_to_page+0x100>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]

		//Store data to the last page and return
		if(Flash.Buffer_Select==0){
 8000b10:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <Write_to_page+0xfc>)
 8000b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d106      	bne.n	8000b2a <Write_to_page+0x3e>
			Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 8000b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b20:	4931      	ldr	r1, [pc, #196]	@ (8000be8 <Write_to_page+0xfc>)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fa3e 	bl	8000fa4 <Write_Data_Buffer>
 8000b28:	e005      	b.n	8000b36 <Write_to_page+0x4a>
		}
		else{
			Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b2e:	4930      	ldr	r1, [pc, #192]	@ (8000bf0 <Write_to_page+0x104>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 fa37 	bl	8000fa4 <Write_Data_Buffer>
		}
		Program_Page_Flash(Flash.Page_Index);
 8000b36:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <Write_to_page+0xfc>)
 8000b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b3c:	889b      	ldrh	r3, [r3, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fa6c 	bl	800101c <Program_Page_Flash>
		return;
 8000b44:	e04f      	b.n	8000be6 <Write_to_page+0xfa>
	}
	if(Flash.Buffer_Select==0){
 8000b46:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <Write_to_page+0xfc>)
 8000b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d116      	bne.n	8000b80 <Write_to_page+0x94>
		Flash.Buffer_Select=1;
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <Write_to_page+0xfc>)
 8000b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_1;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <Write_to_page+0xfc>)
 8000b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <Write_to_page+0x104>)
 8000b66:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <Write_to_page+0xfc>)
 8000b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b6e:	2200      	movs	r2, #0
 8000b70:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 8000b72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b76:	491c      	ldr	r1, [pc, #112]	@ (8000be8 <Write_to_page+0xfc>)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fa13 	bl	8000fa4 <Write_Data_Buffer>
 8000b7e:	e015      	b.n	8000bac <Write_to_page+0xc0>
	}
	else{
		Flash.Buffer_Select=0;
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <Write_to_page+0xfc>)
 8000b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <Write_to_page+0xfc>)
 8000b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <Write_to_page+0xfc>)
 8000b94:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <Write_to_page+0xfc>)
 8000b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000ba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba4:	4912      	ldr	r1, [pc, #72]	@ (8000bf0 <Write_to_page+0x104>)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f9fc 	bl	8000fa4 <Write_Data_Buffer>
	}
	Program_Page_Flash(Flash.Page_Index);
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <Write_to_page+0xfc>)
 8000bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bb2:	889b      	ldrh	r3, [r3, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fa31 	bl	800101c <Program_Page_Flash>
	Flash.Page_Index++;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <Write_to_page+0xfc>)
 8000bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <Write_to_page+0xfc>)
 8000bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bcc:	809a      	strh	r2, [r3, #4]
	Flash.Buffer_Index=0;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <Write_to_page+0xfc>)
 8000bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	80da      	strh	r2, [r3, #6]
	Automatic_Block_Managment(Flash.Page_Index);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <Write_to_page+0xfc>)
 8000bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bde:	889b      	ldrh	r3, [r3, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f81d 	bl	8000c20 <Automatic_Block_Managment>
}
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	240000ac 	.word	0x240000ac
 8000bec:	2400007c 	.word	0x2400007c
 8000bf0:	240008ac 	.word	0x240008ac

08000bf4 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	80fb      	strh	r3, [r7, #6]
 8000c00:	4613      	mov	r3, r2
 8000c02:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fa3c 	bl	8001084 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6838      	ldr	r0, [r7, #0]
 8000c12:	f000 fa69 	bl	80010e8 <Read_Data_Buffer>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <Automatic_Block_Managment+0x48>)
 8000c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c36:	885b      	ldrh	r3, [r3, #2]
 8000c38:	89fa      	ldrh	r2, [r7, #14]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d00a      	beq.n	8000c54 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa85 	bl	8001150 <Block_Erase>
		Flash.Block_Mem=Block;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <Automatic_Block_Managment+0x48>)
 8000c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	8053      	strh	r3, [r2, #2]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000c52:	e005      	b.n	8000c60 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <Automatic_Block_Managment+0x48>)
 8000c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	8053      	strh	r3, [r2, #2]
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	240000ac 	.word	0x240000ac

08000c6c <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	USART3_Printf("Sletter minne ...\r\n");
 8000c72:	4826      	ldr	r0, [pc, #152]	@ (8000d0c <Chip_Erase+0xa0>)
 8000c74:	f000 faca 	bl	800120c <USART3_Printf>
	for(int i = 0; i <= 1024; i++){
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	e009      	b.n	8000c92 <Chip_Erase+0x26>
		Block_Erase(i*64);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fa62 	bl	8001150 <Block_Erase>
	for(int i = 0; i <= 1024; i++){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c98:	ddf1      	ble.n	8000c7e <Chip_Erase+0x12>
	}
	Flash.Buffer_Index=0;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <Chip_Erase+0xa4>)
 8000c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	80da      	strh	r2, [r3, #6]
	Flash.Page_Index=0;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <Chip_Erase+0xa4>)
 8000ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000caa:	2200      	movs	r2, #0
 8000cac:	809a      	strh	r2, [r3, #4]
	Flash.Block_Mem=0;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	805a      	strh	r2, [r3, #2]
	Flash.Buffer_Select=0;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	Flash.Memory_Full=0;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
	Flash.Buffer_p=Flash.Buffer_0;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cd6:	60d3      	str	r3, [r2, #12]

	Flash_Data* pointer = &Flash;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <Chip_Erase+0xa4>)
 8000cda:	603b      	str	r3, [r7, #0]
	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ce2:	21ff      	movs	r1, #255	@ 0xff
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00a fa7f 	bl	800b1e8 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cf4:	21ff      	movs	r1, #255	@ 0xff
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00a fa76 	bl	800b1e8 <memset>
	USART3_Printf("Ferdig\r\n");
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <Chip_Erase+0xa8>)
 8000cfe:	f000 fa85 	bl	800120c <USART3_Printf>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	0800bb14 	.word	0x0800bb14
 8000d10:	240000ac 	.word	0x240000ac
 8000d14:	0800bb28 	.word	0x0800bb28

08000d18 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d1c:	b089      	sub	sp, #36	@ 0x24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	466b      	mov	r3, sp
 8000d26:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f9ab 	bl	8001084 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000d2e:	88f9      	ldrh	r1, [r7, #6]
 8000d30:	460b      	mov	r3, r1
 8000d32:	3b01      	subs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	b28b      	uxth	r3, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	4691      	mov	r9, r2
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d52:	b28b      	uxth	r3, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	461c      	mov	r4, r3
 8000d58:	4615      	mov	r5, r2
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	00eb      	lsls	r3, r5, #3
 8000d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d68:	00e2      	lsls	r2, r4, #3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	ebad 0d03 	sub.w	sp, sp, r3
 8000d76:	466b      	mov	r3, sp
 8000d78:	3300      	adds	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <Read_Data_Cont+0x118>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <Read_Data_Cont+0x118>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <Read_Data_Cont+0x118>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000d8e:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <Read_Data_Cont+0x118>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d94:	2200      	movs	r2, #0
 8000d96:	2110      	movs	r1, #16
 8000d98:	4826      	ldr	r0, [pc, #152]	@ (8000e34 <Read_Data_Cont+0x11c>)
 8000d9a:	f004 f803 	bl	8004da4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000d9e:	2364      	movs	r3, #100	@ 0x64
 8000da0:	2204      	movs	r2, #4
 8000da2:	4923      	ldr	r1, [pc, #140]	@ (8000e30 <Read_Data_Cont+0x118>)
 8000da4:	4824      	ldr	r0, [pc, #144]	@ (8000e38 <Read_Data_Cont+0x120>)
 8000da6:	f006 ff87 	bl	8007cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000daa:	88fa      	ldrh	r2, [r7, #6]
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	68f9      	ldr	r1, [r7, #12]
 8000db2:	4821      	ldr	r0, [pc, #132]	@ (8000e38 <Read_Data_Cont+0x120>)
 8000db4:	f007 f96e 	bl	8008094 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3303      	adds	r3, #3
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	330b      	adds	r3, #11
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[len-1]==0x0F)){
 8000dd0:	e018      	b.n	8000e04 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000dd2:	8bf9      	ldrh	r1, [r7, #30]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <Read_Data_Cont+0x124>)
 8000dda:	f000 fa17 	bl	800120c <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	68f9      	ldr	r1, [r7, #12]
 8000de6:	4814      	ldr	r0, [pc, #80]	@ (8000e38 <Read_Data_Cont+0x120>)
 8000de8:	f007 f954 	bl	8008094 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3303      	adds	r3, #3
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	330b      	adds	r3, #11
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[len-1]==0x0F)){
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e0a:	d105      	bne.n	8000e18 <Read_Data_Cont+0x100>
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d0dc      	beq.n	8000dd2 <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <Read_Data_Cont+0x11c>)
 8000e1e:	f003 ffc1 	bl	8004da4 <HAL_GPIO_WritePin>
 8000e22:	46b5      	mov	sp, r6
}
 8000e24:	bf00      	nop
 8000e26:	3724      	adds	r7, #36	@ 0x24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e2e:	bf00      	nop
 8000e30:	24000098 	.word	0x24000098
 8000e34:	58020000 	.word	0x58020000
 8000e38:	240011cc 	.word	0x240011cc
 8000e3c:	0800bb34 	.word	0x0800bb34

08000e40 <Write_Enable>:
////////Low-level code for interfacing with Flash IC////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <Write_Enable+0x34>)
 8000e46:	2206      	movs	r2, #6
 8000e48:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <Write_Enable+0x38>)
 8000e50:	f003 ffa8 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000e54:	2364      	movs	r3, #100	@ 0x64
 8000e56:	2201      	movs	r2, #1
 8000e58:	4906      	ldr	r1, [pc, #24]	@ (8000e74 <Write_Enable+0x34>)
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <Write_Enable+0x3c>)
 8000e5c:	f006 ff2c 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <Write_Enable+0x38>)
 8000e66:	f003 ff9d 	bl	8004da4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e6a:	2064      	movs	r0, #100	@ 0x64
 8000e6c:	f000 f9a4 	bl	80011b8 <delay_ns>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	24000098 	.word	0x24000098
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	240011cc 	.word	0x240011cc

08000e80 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <Read_Status_Register+0x50>)
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000e90:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <Read_Status_Register+0x50>)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000e96:	2200      	movs	r2, #0
 8000e98:	2110      	movs	r1, #16
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <Read_Status_Register+0x54>)
 8000e9c:	f003 ff82 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	490a      	ldr	r1, [pc, #40]	@ (8000ed0 <Read_Status_Register+0x50>)
 8000ea6:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <Read_Status_Register+0x58>)
 8000ea8:	f006 ff06 	bl	8007cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000eac:	2364      	movs	r3, #100	@ 0x64
 8000eae:	2201      	movs	r2, #1
 8000eb0:	490a      	ldr	r1, [pc, #40]	@ (8000edc <Read_Status_Register+0x5c>)
 8000eb2:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <Read_Status_Register+0x58>)
 8000eb4:	f007 f8ee 	bl	8008094 <HAL_SPI_Receive>
	csHIGH();
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <Read_Status_Register+0x54>)
 8000ebe:	f003 ff71 	bl	8004da4 <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000ec2:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <Read_Status_Register+0x50>)
 8000ec4:	795b      	ldrb	r3, [r3, #5]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000098 	.word	0x24000098
 8000ed4:	58020000 	.word	0x58020000
 8000ed8:	240011cc 	.word	0x240011cc
 8000edc:	2400009d 	.word	0x2400009d

08000ee0 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <Write_Status_Register+0x50>)
 8000ef2:	221f      	movs	r2, #31
 8000ef4:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <Write_Status_Register+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <Write_Status_Register+0x50>)
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <Write_Status_Register+0x54>)
 8000f08:	f003 ff4c 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000f0c:	2364      	movs	r3, #100	@ 0x64
 8000f0e:	2203      	movs	r2, #3
 8000f10:	4907      	ldr	r1, [pc, #28]	@ (8000f30 <Write_Status_Register+0x50>)
 8000f12:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <Write_Status_Register+0x58>)
 8000f14:	f006 fed0 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <Write_Status_Register+0x54>)
 8000f1e:	f003 ff41 	bl	8004da4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f000 f948 	bl	80011b8 <delay_ns>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	24000098 	.word	0x24000098
 8000f34:	58020000 	.word	0x58020000
 8000f38:	240011cc 	.word	0x240011cc

08000f3c <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <Read_ID+0x5c>)
 8000f44:	229f      	movs	r2, #159	@ 0x9f
 8000f46:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <Read_ID+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <Read_ID+0x60>)
 8000f54:	f003 ff26 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <Read_ID+0x5c>)
 8000f5e:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <Read_ID+0x64>)
 8000f60:	f006 feaa 	bl	8007cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	2364      	movs	r3, #100	@ 0x64
 8000f68:	2204      	movs	r2, #4
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <Read_ID+0x64>)
 8000f6c:	f007 f892 	bl	8008094 <HAL_SPI_Receive>
	csHIGH();
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4809      	ldr	r0, [pc, #36]	@ (8000f9c <Read_ID+0x60>)
 8000f76:	f003 ff15 	bl	8004da4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000f7a:	2064      	movs	r0, #100	@ 0x64
 8000f7c:	f000 f91c 	bl	80011b8 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000f80:	793b      	ldrb	r3, [r7, #4]
 8000f82:	041a      	lsls	r2, r3, #16
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	79b9      	ldrb	r1, [r7, #6]
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	4313      	orrs	r3, r2
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000098 	.word	0x24000098
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	240011cc 	.word	0x240011cc

08000fa4 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000fb4:	f7ff ff44 	bl	8000e40 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <Write_Data_Buffer+0x6c>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <Write_Data_Buffer+0x6c>)
 8000fc8:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <Write_Data_Buffer+0x6c>)
 8000fd0:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	480f      	ldr	r0, [pc, #60]	@ (8001014 <Write_Data_Buffer+0x70>)
 8000fd8:	f003 fee4 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	2203      	movs	r2, #3
 8000fe0:	490b      	ldr	r1, [pc, #44]	@ (8001010 <Write_Data_Buffer+0x6c>)
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <Write_Data_Buffer+0x74>)
 8000fe4:	f006 fe68 	bl	8007cb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000fe8:	88ba      	ldrh	r2, [r7, #4]
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	6839      	ldr	r1, [r7, #0]
 8000ff0:	4809      	ldr	r0, [pc, #36]	@ (8001018 <Write_Data_Buffer+0x74>)
 8000ff2:	f006 fe61 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <Write_Data_Buffer+0x70>)
 8000ffc:	f003 fed2 	bl	8004da4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8001000:	2064      	movs	r0, #100	@ 0x64
 8001002:	f000 f8d9 	bl	80011b8 <delay_ns>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000098 	.word	0x24000098
 8001014:	58020000 	.word	0x58020000
 8001018:	240011cc 	.word	0x240011cc

0800101c <Program_Page_Flash>:

//Program page with data in buffer
void Program_Page_Flash(uint16_t Page_Addr){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8001026:	f7ff ff0b 	bl	8000e40 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <Program_Page_Flash+0x5c>)
 800102c:	2210      	movs	r2, #16
 800102e:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <Program_Page_Flash+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	b29b      	uxth	r3, r3
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <Program_Page_Flash+0x5c>)
 8001040:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <Program_Page_Flash+0x5c>)
 8001048:	70da      	strb	r2, [r3, #3]
	csLOW();
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <Program_Page_Flash+0x60>)
 8001050:	f003 fea8 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001054:	2364      	movs	r3, #100	@ 0x64
 8001056:	2204      	movs	r2, #4
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <Program_Page_Flash+0x5c>)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Program_Page_Flash+0x64>)
 800105c:	f006 fe2c 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <Program_Page_Flash+0x60>)
 8001066:	f003 fe9d 	bl	8004da4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 800106a:	f000 f8f5 	bl	8001258 <W25N_WaitForReady>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000098 	.word	0x24000098
 800107c:	58020000 	.word	0x58020000
 8001080:	240011cc 	.word	0x240011cc

08001084 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <Select_Page_Read+0x58>)
 8001090:	2213      	movs	r2, #19
 8001092:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <Select_Page_Read+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <Select_Page_Read+0x58>)
 80010a4:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <Select_Page_Read+0x58>)
 80010ac:	70da      	strb	r2, [r3, #3]
	csLOW();
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <Select_Page_Read+0x5c>)
 80010b4:	f003 fe76 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	2204      	movs	r2, #4
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <Select_Page_Read+0x58>)
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <Select_Page_Read+0x60>)
 80010c0:	f006 fdfa 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <Select_Page_Read+0x5c>)
 80010ca:	f003 fe6b 	bl	8004da4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 80010ce:	f000 f8c3 	bl	8001258 <W25N_WaitForReady>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	24000098 	.word	0x24000098
 80010e0:	58020000 	.word	0x58020000
 80010e4:	240011cc 	.word	0x240011cc

080010e8 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <Read_Data_Buffer+0x5c>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <Read_Data_Buffer+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8001100:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <Read_Data_Buffer+0x5c>)
 8001102:	2200      	movs	r2, #0
 8001104:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <Read_Data_Buffer+0x5c>)
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
	csLOW();
 800110c:	2200      	movs	r2, #0
 800110e:	2110      	movs	r1, #16
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <Read_Data_Buffer+0x60>)
 8001112:	f003 fe47 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	2204      	movs	r2, #4
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <Read_Data_Buffer+0x5c>)
 800111c:	480b      	ldr	r0, [pc, #44]	@ (800114c <Read_Data_Buffer+0x64>)
 800111e:	f006 fdcb 	bl	8007cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <Read_Data_Buffer+0x64>)
 800112c:	f006 ffb2 	bl	8008094 <HAL_SPI_Receive>
	csHIGH();
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <Read_Data_Buffer+0x60>)
 8001136:	f003 fe35 	bl	8004da4 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000098 	.word	0x24000098
 8001148:	58020000 	.word	0x58020000
 800114c:	240011cc 	.word	0x240011cc

08001150 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 800115a:	f7ff fe71 	bl	8000e40 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <Block_Erase+0x5c>)
 8001160:	22d8      	movs	r2, #216	@ 0xd8
 8001162:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <Block_Erase+0x5c>)
 8001166:	2200      	movs	r2, #0
 8001168:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <Block_Erase+0x5c>)
 8001174:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <Block_Erase+0x5c>)
 800117c:	70da      	strb	r2, [r3, #3]
	csLOW();
 800117e:	2200      	movs	r2, #0
 8001180:	2110      	movs	r1, #16
 8001182:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <Block_Erase+0x60>)
 8001184:	f003 fe0e 	bl	8004da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001188:	2364      	movs	r3, #100	@ 0x64
 800118a:	2204      	movs	r2, #4
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <Block_Erase+0x5c>)
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <Block_Erase+0x64>)
 8001190:	f006 fd92 	bl	8007cb8 <HAL_SPI_Transmit>
	csHIGH();
 8001194:	2201      	movs	r2, #1
 8001196:	2110      	movs	r1, #16
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <Block_Erase+0x60>)
 800119a:	f003 fe03 	bl	8004da4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 800119e:	f000 f85b 	bl	8001258 <W25N_WaitForReady>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000098 	.word	0x24000098
 80011b0:	58020000 	.word	0x58020000
 80011b4:	240011cc 	.word	0x240011cc

080011b8 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <delay_ns+0x48>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0a5b      	lsrs	r3, r3, #9
 80011c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <delay_ns+0x4c>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	09db      	lsrs	r3, r3, #7
 80011ce:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <delay_ns+0x50>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 80011e0:	bf00      	nop
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <delay_ns+0x50>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f8      	bhi.n	80011e2 <delay_ns+0x2a>
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24000000 	.word	0x24000000
 8001204:	00044b83 	.word	0x00044b83
 8001208:	e0001000 	.word	0xe0001000

0800120c <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 800120c:	b40f      	push	{r0, r1, r2, r3}
 800120e:	b580      	push	{r7, lr}
 8001210:	b0a2      	sub	sp, #136	@ 0x88
 8001212:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001214:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001218:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800121a:	f107 0008 	add.w	r0, r7, #8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001224:	2180      	movs	r1, #128	@ 0x80
 8001226:	f009 ffd1 	bl	800b1cc <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f856 	bl	80002e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f107 0108 	add.w	r1, r7, #8
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <USART3_Printf+0x48>)
 8001242:	f007 fad2 	bl	80087ea <HAL_UART_Transmit>
}
 8001246:	bf00      	nop
 8001248:	3788      	adds	r7, #136	@ 0x88
 800124a:	46bd      	mov	sp, r7
 800124c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr
 8001254:	24001410 	.word	0x24001410

08001258 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f7ff ffab 	bl	80011b8 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001262:	e002      	b.n	800126a <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8001264:	2064      	movs	r0, #100	@ 0x64
 8001266:	f7ff ffa7 	bl	80011b8 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <W25N_WaitForReady+0x2c>)
 800126c:	795b      	ldrb	r3, [r3, #5]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe06 	bl	8000e80 <Read_Status_Register>
 8001274:	4603      	mov	r3, r0
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f2      	bne.n	8001264 <W25N_WaitForReady+0xc>
    }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	240000a4 	.word	0x240000a4

08001288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800128c:	f3bf 8f4f 	dsb	sy
}
 8001290:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <__NVIC_SystemReset+0x24>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800129a:	4904      	ldr	r1, [pc, #16]	@ (80012ac <__NVIC_SystemReset+0x24>)
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_SystemReset+0x28>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012a2:	f3bf 8f4f 	dsb	sy
}
 80012a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <__NVIC_SystemReset+0x20>
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	05fa0004 	.word	0x05fa0004

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012b8:	f000 fd1a 	bl	8001cf0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f001 fac8 	bl	8002850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f938 	bl	8001534 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 80012c4:	f000 fc9a 	bl	8001bfc <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 fbc0 	bl	8001a4c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80012cc:	f000 f9ae 	bl	800162c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80012d0:	f000 fa36 	bl	8001740 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80012d4:	f000 fb6e 	bl	80019b4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 80012d8:	f000 fa88 	bl	80017ec <MX_UART5_Init>
  MX_UART8_Init();
 80012dc:	f000 fad2 	bl	8001884 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80012e0:	f000 fb1c 	bl	800191c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 80012e4:	4b86      	ldr	r3, [pc, #536]	@ (8001500 <main+0x24c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4986      	ldr	r1, [pc, #536]	@ (8001504 <main+0x250>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f007 fbd3 	bl	8008a98 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 80012f2:	4b85      	ldr	r3, [pc, #532]	@ (8001508 <main+0x254>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2202      	movs	r2, #2
 80012f8:	4984      	ldr	r1, [pc, #528]	@ (800150c <main+0x258>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fbcc 	bl	8008a98 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 8001300:	4b83      	ldr	r3, [pc, #524]	@ (8001510 <main+0x25c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2202      	movs	r2, #2
 8001306:	4983      	ldr	r1, [pc, #524]	@ (8001514 <main+0x260>)
 8001308:	4618      	mov	r0, r3
 800130a:	f007 fbc5 	bl	8008a98 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fa94 	bl	800083c <Flash_Init>
  Flash.ID=Read_ID();
 8001314:	f7ff fe12 	bl	8000f3c <Read_ID>
 8001318:	4603      	mov	r3, r0
 800131a:	4a7f      	ldr	r2, [pc, #508]	@ (8001518 <main+0x264>)
 800131c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001320:	6093      	str	r3, [r2, #8]
  while (1)
  {
	  Read_Register(SR);
 8001322:	4b7e      	ldr	r3, [pc, #504]	@ (800151c <main+0x268>)
 8001324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001328:	f7ff fb68 	bl	80009fc <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 800132c:	2364      	movs	r3, #100	@ 0x64
 800132e:	2201      	movs	r2, #1
 8001330:	497b      	ldr	r1, [pc, #492]	@ (8001520 <main+0x26c>)
 8001332:	487c      	ldr	r0, [pc, #496]	@ (8001524 <main+0x270>)
 8001334:	f007 fae7 	bl	8008906 <HAL_UART_Receive>

	  //CAM to IDLE
	  if(command==0x41){
 8001338:	4b79      	ldr	r3, [pc, #484]	@ (8001520 <main+0x26c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b41      	cmp	r3, #65	@ 0x41
 800133e:	d111      	bne.n	8001364 <main+0xb0>
		  command_cam(CAM1, IDLE);
 8001340:	4a6f      	ldr	r2, [pc, #444]	@ (8001500 <main+0x24c>)
 8001342:	2341      	movs	r3, #65	@ 0x41
 8001344:	ca07      	ldmia	r2, {r0, r1, r2}
 8001346:	f7ff f9b9 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 800134a:	4a6f      	ldr	r2, [pc, #444]	@ (8001508 <main+0x254>)
 800134c:	2341      	movs	r3, #65	@ 0x41
 800134e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001350:	f7ff f9b4 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 8001354:	4a6e      	ldr	r2, [pc, #440]	@ (8001510 <main+0x25c>)
 8001356:	2341      	movs	r3, #65	@ 0x41
 8001358:	ca07      	ldmia	r2, {r0, r1, r2}
 800135a:	f7ff f9af 	bl	80006bc <command_cam>
		  command=0;
 800135e:	4b70      	ldr	r3, [pc, #448]	@ (8001520 <main+0x26c>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x42){
 8001364:	4b6e      	ldr	r3, [pc, #440]	@ (8001520 <main+0x26c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b42      	cmp	r3, #66	@ 0x42
 800136a:	d111      	bne.n	8001390 <main+0xdc>
		  command_cam(CAM1, REC);
 800136c:	4a64      	ldr	r2, [pc, #400]	@ (8001500 <main+0x24c>)
 800136e:	2342      	movs	r3, #66	@ 0x42
 8001370:	ca07      	ldmia	r2, {r0, r1, r2}
 8001372:	f7ff f9a3 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 8001376:	4a64      	ldr	r2, [pc, #400]	@ (8001508 <main+0x254>)
 8001378:	2342      	movs	r3, #66	@ 0x42
 800137a:	ca07      	ldmia	r2, {r0, r1, r2}
 800137c:	f7ff f99e 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 8001380:	4a63      	ldr	r2, [pc, #396]	@ (8001510 <main+0x25c>)
 8001382:	2342      	movs	r3, #66	@ 0x42
 8001384:	ca07      	ldmia	r2, {r0, r1, r2}
 8001386:	f7ff f999 	bl	80006bc <command_cam>
		  command=0;
 800138a:	4b65      	ldr	r3, [pc, #404]	@ (8001520 <main+0x26c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x43){
 8001390:	4b63      	ldr	r3, [pc, #396]	@ (8001520 <main+0x26c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b43      	cmp	r3, #67	@ 0x43
 8001396:	d111      	bne.n	80013bc <main+0x108>
		  command_cam(CAM1, FORMAT);
 8001398:	4a59      	ldr	r2, [pc, #356]	@ (8001500 <main+0x24c>)
 800139a:	2343      	movs	r3, #67	@ 0x43
 800139c:	ca07      	ldmia	r2, {r0, r1, r2}
 800139e:	f7ff f98d 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 80013a2:	4a59      	ldr	r2, [pc, #356]	@ (8001508 <main+0x254>)
 80013a4:	2343      	movs	r3, #67	@ 0x43
 80013a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a8:	f7ff f988 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 80013ac:	4a58      	ldr	r2, [pc, #352]	@ (8001510 <main+0x25c>)
 80013ae:	2343      	movs	r3, #67	@ 0x43
 80013b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013b2:	f7ff f983 	bl	80006bc <command_cam>
		  command=0;
 80013b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001520 <main+0x26c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x44){
 80013bc:	4b58      	ldr	r3, [pc, #352]	@ (8001520 <main+0x26c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b44      	cmp	r3, #68	@ 0x44
 80013c2:	d111      	bne.n	80013e8 <main+0x134>
		  command_cam(CAM1, REBOOT);
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <main+0x24c>)
 80013c6:	2344      	movs	r3, #68	@ 0x44
 80013c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013ca:	f7ff f977 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 80013ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <main+0x254>)
 80013d0:	2344      	movs	r3, #68	@ 0x44
 80013d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d4:	f7ff f972 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 80013d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001510 <main+0x25c>)
 80013da:	2344      	movs	r3, #68	@ 0x44
 80013dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013de:	f7ff f96d 	bl	80006bc <command_cam>
		  command=0;
 80013e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001520 <main+0x26c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x45){
 80013e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <main+0x26c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b45      	cmp	r3, #69	@ 0x45
 80013ee:	d111      	bne.n	8001414 <main+0x160>
		  command_cam(CAM1, DEB);
 80013f0:	4a43      	ldr	r2, [pc, #268]	@ (8001500 <main+0x24c>)
 80013f2:	2345      	movs	r3, #69	@ 0x45
 80013f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f6:	f7ff f961 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 80013fa:	4a43      	ldr	r2, [pc, #268]	@ (8001508 <main+0x254>)
 80013fc:	2345      	movs	r3, #69	@ 0x45
 80013fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001400:	f7ff f95c 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 8001404:	4a42      	ldr	r2, [pc, #264]	@ (8001510 <main+0x25c>)
 8001406:	2345      	movs	r3, #69	@ 0x45
 8001408:	ca07      	ldmia	r2, {r0, r1, r2}
 800140a:	f7ff f957 	bl	80006bc <command_cam>
		  command=0;
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <main+0x26c>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
	  }

	  //Reboot MCU
	  if(command==0x47){
 8001414:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <main+0x26c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b47      	cmp	r3, #71	@ 0x47
 800141a:	d101      	bne.n	8001420 <main+0x16c>
		  NVIC_SystemReset();
 800141c:	f7ff ff34 	bl	8001288 <__NVIC_SystemReset>
		  command=0;
	  }

	  //Start GoPro filming
	  if(command==0x48){
 8001420:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <main+0x26c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b48      	cmp	r3, #72	@ 0x48
 8001426:	d10b      	bne.n	8001440 <main+0x18c>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800142e:	483e      	ldr	r0, [pc, #248]	@ (8001528 <main+0x274>)
 8001430:	f003 fcb8 	bl	8004da4 <HAL_GPIO_WritePin>
		  GoPro=1;
 8001434:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <main+0x278>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
		  command=0;
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <main+0x26c>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop GoPro filming
	  if(command==0x49){
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <main+0x26c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b49      	cmp	r3, #73	@ 0x49
 8001446:	d10b      	bne.n	8001460 <main+0x1ac>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144e:	4836      	ldr	r0, [pc, #216]	@ (8001528 <main+0x274>)
 8001450:	f003 fca8 	bl	8004da4 <HAL_GPIO_WritePin>
		  GoPro=1;
 8001454:	4b35      	ldr	r3, [pc, #212]	@ (800152c <main+0x278>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
		  command=0;
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <main+0x26c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn on GoPro
	  if(command==0x4A){
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <main+0x26c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b4a      	cmp	r3, #74	@ 0x4a
 8001466:	d10b      	bne.n	8001480 <main+0x1cc>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146e:	482e      	ldr	r0, [pc, #184]	@ (8001528 <main+0x274>)
 8001470:	f003 fc98 	bl	8004da4 <HAL_GPIO_WritePin>
		  GoPro=1;
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <main+0x278>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
		  command=0;
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <main+0x26c>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn off GoPro
	  if(command==0x4B){
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <main+0x26c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b4b      	cmp	r3, #75	@ 0x4b
 8001486:	d10b      	bne.n	80014a0 <main+0x1ec>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148e:	4826      	ldr	r0, [pc, #152]	@ (8001528 <main+0x274>)
 8001490:	f003 fc88 	bl	8004da4 <HAL_GPIO_WritePin>
		  GoPro=1;
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <main+0x278>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
		  command=0;
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <main+0x26c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase flight REC
	  if(command==0x4C){
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <main+0x26c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b4c      	cmp	r3, #76	@ 0x4c
 80014a6:	d104      	bne.n	80014b2 <main+0x1fe>
		  Chip_Erase();
 80014a8:	f7ff fbe0 	bl	8000c6c <Chip_Erase>
		  command=0;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <main+0x26c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	  }

	  //Start fligt REC
	  if(command==0x4D){
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <main+0x26c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b4d      	cmp	r3, #77	@ 0x4d
 80014b8:	d10b      	bne.n	80014d2 <main+0x21e>
		  if(Flash.Memory_Full == 0){
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <main+0x264>)
 80014bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <main+0x218>
			  Start_Flight_Recording=1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <main+0x27c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
		  }
		  command=0;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <main+0x26c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop flight REC
	  if(command==0x4E){
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <main+0x26c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80014d8:	d105      	bne.n	80014e6 <main+0x232>
		  Start_Flight_Recording=0;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <main+0x27c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		  command=0;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <main+0x26c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	  }

	  //Read flight REC
	  if(command==0x52){
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <main+0x26c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b52      	cmp	r3, #82	@ 0x52
 80014ec:	f47f af19 	bne.w	8001322 <main+0x6e>
		  Read_Data_Cont(16);
 80014f0:	2010      	movs	r0, #16
 80014f2:	f7ff fc11 	bl	8000d18 <Read_Data_Cont>
		  command = 0;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <main+0x26c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 80014fc:	e711      	b.n	8001322 <main+0x6e>
 80014fe:	bf00      	nop
 8001500:	240010bc 	.word	0x240010bc
 8001504:	240010c0 	.word	0x240010c0
 8001508:	240010c8 	.word	0x240010c8
 800150c:	240010cc 	.word	0x240010cc
 8001510:	240010d4 	.word	0x240010d4
 8001514:	240010d8 	.word	0x240010d8
 8001518:	240000ac 	.word	0x240000ac
 800151c:	240000a4 	.word	0x240000a4
 8001520:	2400007d 	.word	0x2400007d
 8001524:	24001410 	.word	0x24001410
 8001528:	58020c00 	.word	0x58020c00
 800152c:	24000084 	.word	0x24000084
 8001530:	2400007c 	.word	0x2400007c

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09c      	sub	sp, #112	@ 0x70
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	224c      	movs	r2, #76	@ 0x4c
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f009 fe50 	bl	800b1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2220      	movs	r2, #32
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f009 fe4a 	bl	800b1e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001554:	2002      	movs	r0, #2
 8001556:	f003 fc3f 	bl	8004dd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <SystemClock_Config+0xf0>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a30      	ldr	r2, [pc, #192]	@ (8001624 <SystemClock_Config+0xf0>)
 8001564:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <SystemClock_Config+0xf0>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4b2c      	ldr	r3, [pc, #176]	@ (8001628 <SystemClock_Config+0xf4>)
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	4a2b      	ldr	r2, [pc, #172]	@ (8001628 <SystemClock_Config+0xf4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <SystemClock_Config+0xf4>)
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800158c:	bf00      	nop
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <SystemClock_Config+0xf0>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800159a:	d1f8      	bne.n	800158e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2340      	movs	r3, #64	@ 0x40
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80015b4:	233c      	movs	r3, #60	@ 0x3c
 80015b6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80015bc:	230a      	movs	r3, #10
 80015be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015c4:	230c      	movs	r3, #12
 80015c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fc39 	bl	8004e4c <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015e0:	f000 fbb2 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	233f      	movs	r3, #63	@ 0x3f
 80015e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2303      	movs	r3, #3
 80015ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015f0:	2308      	movs	r3, #8
 80015f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015f4:	2340      	movs	r3, #64	@ 0x40
 80015f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015f8:	2340      	movs	r3, #64	@ 0x40
 80015fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001600:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001602:	2340      	movs	r3, #64	@ 0x40
 8001604:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2104      	movs	r1, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f004 f878 	bl	8005700 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001616:	f000 fb97 	bl	8001d48 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3770      	adds	r7, #112	@ 0x70
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58024800 	.word	0x58024800
 8001628:	58000400 	.word	0x58000400

0800162c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 8001632:	4b40      	ldr	r3, [pc, #256]	@ (8001734 <MX_FDCAN1_Init+0x108>)
 8001634:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001638:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <MX_FDCAN1_Init+0x108>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <MX_FDCAN1_Init+0x108>)
 8001644:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001650:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001652:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <MX_FDCAN1_Init+0x110>)
 8001654:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001656:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800165c:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001662:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001664:	2200      	movs	r2, #0
 8001666:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001668:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800166a:	2200      	movs	r2, #0
 800166c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001670:	2200      	movs	r2, #0
 8001672:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001674:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001676:	2201      	movs	r2, #1
 8001678:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800167c:	2202      	movs	r2, #2
 800167e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001682:	2205      	movs	r2, #5
 8001684:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001686:	4b2c      	ldr	r3, [pc, #176]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001688:	2202      	movs	r2, #2
 800168a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800168e:	2201      	movs	r2, #1
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001692:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 8001694:	2203      	movs	r2, #3
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800169a:	2204      	movs	r2, #4
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800169e:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016a0:	2203      	movs	r2, #3
 80016a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016b8:	2240      	movs	r2, #64	@ 0x40
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016be:	2204      	movs	r2, #4
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016f4:	2204      	movs	r2, #4
 80016f6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 80016fa:	f002 f833 	bl	8003764 <HAL_FDCAN_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001704:	f000 fb20 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001708:	480b      	ldr	r0, [pc, #44]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800170a:	f002 fa09 	bl	8003b20 <HAL_FDCAN_Start>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001714:	f000 fb18 	bl	8001d48 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001718:	2200      	movs	r2, #0
 800171a:	2101      	movs	r1, #1
 800171c:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_FDCAN1_Init+0x10c>)
 800171e:	f002 fbf1 	bl	8003f04 <HAL_FDCAN_ActivateNotification>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001728:	f000 fb0e 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58024400 	.word	0x58024400
 8001738:	2400112c 	.word	0x2400112c
 800173c:	4000a000 	.word	0x4000a000

08001740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001746:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <MX_SPI1_Init+0xa8>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800174c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800175a:	2207      	movs	r2, #7
 800175c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800176c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001778:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_SPI1_Init+0xa4>)
 80017d2:	f006 f94d 	bl	8007a70 <HAL_SPI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80017dc:	f000 fab4 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	240011cc 	.word	0x240011cc
 80017e8:	40013000 	.word	0x40013000

080017ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <MX_UART5_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <MX_UART5_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_UART5_Init+0x90>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_UART5_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_UART5_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_UART5_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_UART5_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_UART5_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <MX_UART5_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <MX_UART5_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_UART5_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_UART5_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_UART5_Init+0x90>)
 8001836:	f006 ff88 	bl	800874a <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 fa82 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_UART5_Init+0x90>)
 8001848:	f009 fbc7 	bl	800afda <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001852:	f000 fa79 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	@ (800187c <MX_UART5_Init+0x90>)
 800185a:	f009 fbfc 	bl	800b056 <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 fa70 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_UART5_Init+0x90>)
 800186a:	f009 fb7d 	bl	800af68 <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 fa68 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	24001254 	.word	0x24001254
 8001880:	40005000 	.word	0x40005000

08001884 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001888:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <MX_UART8_Init+0x90>)
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <MX_UART8_Init+0x94>)
 800188c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <MX_UART8_Init+0x90>)
 8001890:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001894:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <MX_UART8_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <MX_UART8_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_UART8_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_UART8_Init+0x90>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_UART8_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_UART8_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_UART8_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_UART8_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_UART8_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80018cc:	4811      	ldr	r0, [pc, #68]	@ (8001914 <MX_UART8_Init+0x90>)
 80018ce:	f006 ff3c 	bl	800874a <HAL_UART_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80018d8:	f000 fa36 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_UART8_Init+0x90>)
 80018e0:	f009 fb7b 	bl	800afda <HAL_UARTEx_SetTxFifoThreshold>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80018ea:	f000 fa2d 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4808      	ldr	r0, [pc, #32]	@ (8001914 <MX_UART8_Init+0x90>)
 80018f2:	f009 fbb0 	bl	800b056 <HAL_UARTEx_SetRxFifoThreshold>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f000 fa24 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_UART8_Init+0x90>)
 8001902:	f009 fb31 	bl	800af68 <HAL_UARTEx_DisableFifoMode>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800190c:	f000 fa1c 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	240012e8 	.word	0x240012e8
 8001918:	40007c00 	.word	0x40007c00

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <MX_USART2_UART_Init+0x94>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001966:	f006 fef0 	bl	800874a <HAL_UART_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001970:	f000 f9ea 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 8001978:	f009 fb2f 	bl	800afda <HAL_UARTEx_SetTxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001982:	f000 f9e1 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 800198a:	f009 fb64 	bl	800b056 <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001994:	f000 f9d8 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_USART2_UART_Init+0x90>)
 800199a:	f009 fae5 	bl	800af68 <HAL_UARTEx_DisableFifoMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f9d0 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2400137c 	.word	0x2400137c
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019ba:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <MX_USART3_UART_Init+0x94>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019c0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80019c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019fc:	4811      	ldr	r0, [pc, #68]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 80019fe:	f006 fea4 	bl	800874a <HAL_UART_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a08:	f000 f99e 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 8001a10:	f009 fae3 	bl	800afda <HAL_UARTEx_SetTxFifoThreshold>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a1a:	f000 f995 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4808      	ldr	r0, [pc, #32]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 8001a22:	f009 fb18 	bl	800b056 <HAL_UARTEx_SetRxFifoThreshold>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a2c:	f000 f98c 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <MX_USART3_UART_Init+0x90>)
 8001a32:	f009 fa99 	bl	800af68 <HAL_UARTEx_DisableFifoMode>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a3c:	f000 f984 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24001410 	.word	0x24001410
 8001a48:	40004800 	.word	0x40004800

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a62:	4b5f      	ldr	r3, [pc, #380]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	4a5d      	ldr	r2, [pc, #372]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a72:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	4b57      	ldr	r3, [pc, #348]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a86:	4a56      	ldr	r2, [pc, #344]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a90:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b48      	ldr	r3, [pc, #288]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac2:	4a47      	ldr	r2, [pc, #284]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001acc:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae0:	4a3f      	ldr	r2, [pc, #252]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aea:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af8:	4b39      	ldr	r3, [pc, #228]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afe:	4a38      	ldr	r2, [pc, #224]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b08:	4b35      	ldr	r3, [pc, #212]	@ (8001be0 <MX_GPIO_Init+0x194>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2110      	movs	r1, #16
 8001b1a:	4832      	ldr	r0, [pc, #200]	@ (8001be4 <MX_GPIO_Init+0x198>)
 8001b1c:	f003 f942 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b26:	4830      	ldr	r0, [pc, #192]	@ (8001be8 <MX_GPIO_Init+0x19c>)
 8001b28:	f003 f93c 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2118      	movs	r1, #24
 8001b30:	482e      	ldr	r0, [pc, #184]	@ (8001bec <MX_GPIO_Init+0x1a0>)
 8001b32:	f003 f937 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 8001b36:	2308      	movs	r3, #8
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4829      	ldr	r0, [pc, #164]	@ (8001bf0 <MX_GPIO_Init+0x1a4>)
 8001b4a:	f002 ff63 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4824      	ldr	r0, [pc, #144]	@ (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001b62:	f002 ff57 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001b66:	2310      	movs	r3, #16
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <MX_GPIO_Init+0x198>)
 8001b7e:	f002 ff49 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 8001b82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4818      	ldr	r0, [pc, #96]	@ (8001bf8 <MX_GPIO_Init+0x1ac>)
 8001b98:	f002 ff3c 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 8001b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <MX_GPIO_Init+0x19c>)
 8001bb6:	f002 ff2d 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 8001bba:	2318      	movs	r3, #24
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_GPIO_Init+0x1a0>)
 8001bd2:	f002 ff1f 	bl	8004a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020000 	.word	0x58020000
 8001be8:	58020c00 	.word	0x58020c00
 8001bec:	58021800 	.word	0x58021800
 8001bf0:	58021000 	.word	0x58021000
 8001bf4:	58020800 	.word	0x58020800
 8001bf8:	58020400 	.word	0x58020400

08001bfc <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 8001c02:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <init+0xcc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <init+0xcc>)
 8001c0a:	22a0      	movs	r2, #160	@ 0xa0
 8001c0c:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <init+0xcc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <init+0xcc>)
 8001c16:	22b0      	movs	r2, #176	@ 0xb0
 8001c18:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <init+0xcc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <init+0xcc>)
 8001c22:	22c0      	movs	r2, #192	@ 0xc0
 8001c24:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001c26:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <init+0xd0>)
 8001c28:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c30:	21ff      	movs	r1, #255	@ 0xff
 8001c32:	4618      	mov	r0, r3
 8001c34:	f009 fad8 	bl	800b1e8 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c42:	21ff      	movs	r1, #255	@ 0xff
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 facf 	bl	800b1e8 <memset>
	Flash.Buffer_Index = 0;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <init+0xd0>)
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c50:	2200      	movs	r2, #0
 8001c52:	80da      	strh	r2, [r3, #6]
	Flash.Buffer_Select = 0;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <init+0xd0>)
 8001c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
	Flash.Memory_Full = 0;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <init+0xd0>)
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	2200      	movs	r2, #0
 8001c66:	705a      	strb	r2, [r3, #1]
	Flash.Block_Mem = 0;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <init+0xd0>)
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6e:	2200      	movs	r2, #0
 8001c70:	805a      	strh	r2, [r3, #2]
	Flash.Page_Index = 0;
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <init+0xd0>)
 8001c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c78:	2200      	movs	r2, #0
 8001c7a:	809a      	strh	r2, [r3, #4]
	Flash.ID = 0;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <init+0xd0>)
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c82:	461a      	mov	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	6093      	str	r3, [r2, #8]
	Flash.Buffer_p = Flash.Buffer_0;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <init+0xd0>)
 8001c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <init+0xd0>)
 8001c92:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <init+0xd4>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <init+0xd4>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <init+0xd8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <init+0xd8>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <init+0xdc>)
 8001cae:	4a0b      	ldr	r2, [pc, #44]	@ (8001cdc <init+0xe0>)
 8001cb0:	609a      	str	r2, [r3, #8]
	CAM2.huart = &huart8;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <init+0xe4>)
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <init+0xe8>)
 8001cb6:	609a      	str	r2, [r3, #8]
	CAM3.huart = &huart5;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <init+0xec>)
 8001cba:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <init+0xf0>)
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	240000a4 	.word	0x240000a4
 8001ccc:	240000ac 	.word	0x240000ac
 8001cd0:	e000edf0 	.word	0xe000edf0
 8001cd4:	e0001000 	.word	0xe0001000
 8001cd8:	240010bc 	.word	0x240010bc
 8001cdc:	2400137c 	.word	0x2400137c
 8001ce0:	240010c8 	.word	0x240010c8
 8001ce4:	240012e8 	.word	0x240012e8
 8001ce8:	240010d4 	.word	0x240010d4
 8001cec:	24001254 	.word	0x24001254

08001cf0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d02:	f000 ff53 	bl	8002bac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d12:	231f      	movs	r3, #31
 8001d14:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d16:	2387      	movs	r3, #135	@ 0x87
 8001d18:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d32:	463b      	mov	r3, r7
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 ff71 	bl	8002c1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d3a:	2004      	movs	r0, #4
 8001d3c:	f000 ff4e 	bl	8002bdc <HAL_MPU_Enable>

}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <Error_Handler+0x10>)
 8001d4e:	f001 fee7 	bl	8003b20 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2400112c 	.word	0x2400112c

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d68:	4a08      	ldr	r2, [pc, #32]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0ba      	sub	sp, #232	@ 0xe8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	22c0      	movs	r2, #192	@ 0xc0
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f009 fa19 	bl	800b1e8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a33      	ldr	r2, [pc, #204]	@ (8001e88 <HAL_FDCAN_MspInit+0xf8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d15f      	bne.n	8001e80 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001dd8:	2314      	movs	r3, #20
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001de0:	23c0      	movs	r3, #192	@ 0xc0
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001de4:	2320      	movs	r3, #32
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001dec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 f80d 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001e04:	f7ff ffa0 	bl	8001d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001e18:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2c:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_FDCAN_MspInit+0xfc>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e5e:	2309      	movs	r3, #9
 8001e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4809      	ldr	r0, [pc, #36]	@ (8001e90 <HAL_FDCAN_MspInit+0x100>)
 8001e6c:	f002 fdd2 	bl	8004a14 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2013      	movs	r0, #19
 8001e76:	f000 fe64 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001e7a:	2013      	movs	r0, #19
 8001e7c:	f000 fe7b 	bl	8002b76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001e80:	bf00      	nop
 8001e82:	37e8      	adds	r7, #232	@ 0xe8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	4000a000 	.word	0x4000a000
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58020400 	.word	0x58020400

08001e94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0ba      	sub	sp, #232	@ 0xe8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	22c0      	movs	r2, #192	@ 0xc0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f009 f997 	bl	800b1e8 <memset>
  if(hspi->Instance==SPI1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_SPI_MspInit+0xc4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d144      	bne.n	8001f4e <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ec4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 ff9d 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001ee4:	f7ff ff30 	bl	8001d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eee:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_SPI_MspInit+0xc8>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f24:	23e0      	movs	r3, #224	@ 0xe0
 8001f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <HAL_SPI_MspInit+0xcc>)
 8001f4a:	f002 fd63 	bl	8004a14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f4e:	bf00      	nop
 8001f50:	37e8      	adds	r7, #232	@ 0xe8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40013000 	.word	0x40013000
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58020000 	.word	0x58020000

08001f64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0c0      	sub	sp, #256	@ 0x100
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f80:	22c0      	movs	r2, #192	@ 0xc0
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f009 f92f 	bl	800b1e8 <memset>
  if(huart->Instance==UART5)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4aa6      	ldr	r2, [pc, #664]	@ (8002228 <HAL_UART_MspInit+0x2c4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d14f      	bne.n	8002034 <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f94:	f04f 0202 	mov.w	r2, #2
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 ff34 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fb6:	f7ff fec7 	bl	8001d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fba:	4b9c      	ldr	r3, [pc, #624]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fc0:	4a9a      	ldr	r2, [pc, #616]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fca:	4b98      	ldr	r3, [pc, #608]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b94      	ldr	r3, [pc, #592]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	4a93      	ldr	r2, [pc, #588]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe8:	4b90      	ldr	r3, [pc, #576]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ff6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002010:	230e      	movs	r3, #14
 8002012:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800201a:	4619      	mov	r1, r3
 800201c:	4884      	ldr	r0, [pc, #528]	@ (8002230 <HAL_UART_MspInit+0x2cc>)
 800201e:	f002 fcf9 	bl	8004a14 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	2035      	movs	r0, #53	@ 0x35
 8002028:	f000 fd8b 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800202c:	2035      	movs	r0, #53	@ 0x35
 800202e:	f000 fda2 	bl	8002b76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002032:	e0f3      	b.n	800221c <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==UART8)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7e      	ldr	r2, [pc, #504]	@ (8002234 <HAL_UART_MspInit+0x2d0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d14e      	bne.n	80020dc <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800203e:	f04f 0202 	mov.w	r2, #2
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fedf 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8002060:	f7ff fe72 	bl	8001d48 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002064:	4b71      	ldr	r3, [pc, #452]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800206a:	4a70      	ldr	r2, [pc, #448]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800206c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002070:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002074:	4b6d      	ldr	r3, [pc, #436]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800207a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002088:	4a68      	ldr	r2, [pc, #416]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002092:	4b66      	ldr	r3, [pc, #408]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80020b8:	2308      	movs	r3, #8
 80020ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020c2:	4619      	mov	r1, r3
 80020c4:	485c      	ldr	r0, [pc, #368]	@ (8002238 <HAL_UART_MspInit+0x2d4>)
 80020c6:	f002 fca5 	bl	8004a14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2053      	movs	r0, #83	@ 0x53
 80020d0:	f000 fd37 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80020d4:	2053      	movs	r0, #83	@ 0x53
 80020d6:	f000 fd4e 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 80020da:	e09f      	b.n	800221c <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a56      	ldr	r2, [pc, #344]	@ (800223c <HAL_UART_MspInit+0x2d8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d14e      	bne.n	8002184 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e6:	f04f 0202 	mov.w	r2, #2
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fe8b 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002108:	f7ff fe1e 	bl	8001d48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800210c:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800210e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002112:	4a46      	ldr	r2, [pc, #280]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800211c:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b40      	ldr	r3, [pc, #256]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002130:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800213a:	4b3c      	ldr	r3, [pc, #240]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002148:	230c      	movs	r3, #12
 800214a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002160:	2307      	movs	r3, #7
 8002162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800216a:	4619      	mov	r1, r3
 800216c:	4834      	ldr	r0, [pc, #208]	@ (8002240 <HAL_UART_MspInit+0x2dc>)
 800216e:	f002 fc51 	bl	8004a14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2026      	movs	r0, #38	@ 0x26
 8002178:	f000 fce3 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800217c:	2026      	movs	r0, #38	@ 0x26
 800217e:	f000 fcfa 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 8002182:	e04b      	b.n	800221c <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_UART_MspInit+0x2e0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d146      	bne.n	800221c <HAL_UART_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800218e:	f04f 0202 	mov.w	r2, #2
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fe37 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_UART_MspInit+0x250>
      Error_Handler();
 80021b0:	f7ff fdca 	bl	8001d48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a14      	ldr	r2, [pc, #80]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_UART_MspInit+0x2c8>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800220a:	2307      	movs	r3, #7
 800220c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002210:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002214:	4619      	mov	r1, r3
 8002216:	480c      	ldr	r0, [pc, #48]	@ (8002248 <HAL_UART_MspInit+0x2e4>)
 8002218:	f002 fbfc 	bl	8004a14 <HAL_GPIO_Init>
}
 800221c:	bf00      	nop
 800221e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40005000 	.word	0x40005000
 800222c:	58024400 	.word	0x58024400
 8002230:	58020400 	.word	0x58020400
 8002234:	40007c00 	.word	0x40007c00
 8002238:	58021000 	.word	0x58021000
 800223c:	40004400 	.word	0x40004400
 8002240:	58020000 	.word	0x58020000
 8002244:	40004800 	.word	0x40004800
 8002248:	58020c00 	.word	0x58020c00

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <NMI_Handler+0x4>

08002254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <MemManage_Handler+0x4>

08002264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <UsageFault_Handler+0x4>

08002274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Local_Time++;
 80022a4:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <SysTick_Handler+0xbc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a2c      	ldr	r2, [pc, #176]	@ (800235c <SysTick_Handler+0xbc>)
 80022ac:	6013      	str	r3, [r2, #0]
	blink++;
 80022ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <SysTick_Handler+0xc0>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <SysTick_Handler+0xc0>)
 80022b8:	801a      	strh	r2, [r3, #0]
	Status_timer++;
 80022ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002364 <SysTick_Handler+0xc4>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <SysTick_Handler+0xc4>)
 80022c4:	801a      	strh	r2, [r3, #0]

	if(CAN_Timeout <= 1000){
 80022c6:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <SysTick_Handler+0xc8>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022ce:	d805      	bhi.n	80022dc <SysTick_Handler+0x3c>
		CAN_Timeout++;
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <SysTick_Handler+0xc8>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <SysTick_Handler+0xc8>)
 80022da:	801a      	strh	r2, [r3, #0]
	}

	if(blink>=500){
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <SysTick_Handler+0xc0>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022e4:	d308      	bcc.n	80022f8 <SysTick_Handler+0x58>
		GPIOG->ODR^=GPIO_PIN_3;
 80022e6:	4b21      	ldr	r3, [pc, #132]	@ (800236c <SysTick_Handler+0xcc>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <SysTick_Handler+0xcc>)
 80022ec:	f083 0308 	eor.w	r3, r3, #8
 80022f0:	6153      	str	r3, [r2, #20]
		blink=0;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <SysTick_Handler+0xc0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 fb1c 	bl	8002934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if(GoPro){
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <SysTick_Handler+0xd0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d014      	beq.n	800232e <SysTick_Handler+0x8e>
	  GoPro_timer++;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <SysTick_Handler+0xd4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	4a1a      	ldr	r2, [pc, #104]	@ (8002374 <SysTick_Handler+0xd4>)
 800230c:	6013      	str	r3, [r2, #0]
	  if(GoPro_timer>=GOPRO_MAX){
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <SysTick_Handler+0xd4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b63      	cmp	r3, #99	@ 0x63
 8002314:	d90b      	bls.n	800232e <SysTick_Handler+0x8e>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800231c:	4816      	ldr	r0, [pc, #88]	@ (8002378 <SysTick_Handler+0xd8>)
 800231e:	f002 fd41 	bl	8004da4 <HAL_GPIO_WritePin>
		  GoPro_timer=0;
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <SysTick_Handler+0xd4>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
		  GoPro=0;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <SysTick_Handler+0xd0>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
	  }
  }

  if(Status_timer >= 1000){
 800232e:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <SysTick_Handler+0xc4>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002336:	d30e      	bcc.n	8002356 <SysTick_Handler+0xb6>
	  CAN_SendStatus(CAN_Timeout >= 1000);
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <SysTick_Handler+0xc8>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002340:	4293      	cmp	r3, r2
 8002342:	bf8c      	ite	hi
 8002344:	2301      	movhi	r3, #1
 8002346:	2300      	movls	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fa00 	bl	8000750 <CAN_SendStatus>
	  Status_timer = 0;
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <SysTick_Handler+0xc4>)
 8002352:	2200      	movs	r2, #0
 8002354:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	24000080 	.word	0x24000080
 8002360:	240014a8 	.word	0x240014a8
 8002364:	240014aa 	.word	0x240014aa
 8002368:	240014ac 	.word	0x240014ac
 800236c:	58021800 	.word	0x58021800
 8002370:	24000084 	.word	0x24000084
 8002374:	240014a4 	.word	0x240014a4
 8002378:	58020c00 	.word	0x58020c00

0800237c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <FDCAN1_IT0_IRQHandler+0x10>)
 8002382:	f001 fe39 	bl	8003ff8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2400112c 	.word	0x2400112c

08002390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <USART2_IRQHandler+0x10>)
 8002396:	f006 fbcb 	bl	8008b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2400137c 	.word	0x2400137c

080023a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <UART5_IRQHandler+0x10>)
 80023aa:	f006 fbc1 	bl	8008b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	24001254 	.word	0x24001254

080023b8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <UART8_IRQHandler+0x10>)
 80023be:	f006 fbb7 	bl	8008b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	240012e8 	.word	0x240012e8

080023cc <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	@ 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 80023d6:	e0be      	b.n	8002556 <HAL_FDCAN_RxFifo0Callback+0x18a>
		CAN_Timeout = 0;
 80023d8:	4b66      	ldr	r3, [pc, #408]	@ (8002574 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]

		//CAN ID = 201 is CAN message with GNSS time from flight estimator used to update local time
		if(RxHeader.Identifier == 201){
 80023de:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2bc9      	cmp	r3, #201	@ 0xc9
 80023e4:	d145      	bne.n	8002472 <HAL_FDCAN_RxFifo0Callback+0xa6>
			uint32_t GNSS_time = *(uint32_t*)&CAN.Rx_Buffer[0];
 80023e6:	4b65      	ldr	r3, [pc, #404]	@ (800257c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

			uint32_t H = GNSS_time/10000000;
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	4a64      	ldr	r2, [pc, #400]	@ (8002580 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0d9b      	lsrs	r3, r3, #22
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			uint32_t M = (GNSS_time/100000) % 100;
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	4a61      	ldr	r2, [pc, #388]	@ (8002584 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	09db      	lsrs	r3, r3, #7
 8002404:	4a60      	ldr	r2, [pc, #384]	@ (8002588 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002406:	fba2 1203 	umull	r1, r2, r2, r3
 800240a:	0952      	lsrs	r2, r2, #5
 800240c:	2164      	movs	r1, #100	@ 0x64
 800240e:	fb01 f202 	mul.w	r2, r1, r2
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
			uint32_t S = (GNSS_time/1000) % 100;
 8002416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002418:	4a5c      	ldr	r2, [pc, #368]	@ (800258c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	4a59      	ldr	r2, [pc, #356]	@ (8002588 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002422:	fba2 1203 	umull	r1, r2, r2, r3
 8002426:	0952      	lsrs	r2, r2, #5
 8002428:	2164      	movs	r1, #100	@ 0x64
 800242a:	fb01 f202 	mul.w	r2, r1, r2
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	623b      	str	r3, [r7, #32]
			uint32_t MS = GNSS_time % 1000;
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	4a55      	ldr	r2, [pc, #340]	@ (800258c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002436:	fba2 1203 	umull	r1, r2, r2, r3
 800243a:	0992      	lsrs	r2, r2, #6
 800243c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002440:	fb01 f202 	mul.w	r2, r1, r2
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	61fb      	str	r3, [r7, #28]

			Local_Time = ((H*3600UL + M*60UL + S)*1000UL) + MS;
 8002448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800244e:	fb02 f103 	mul.w	r1, r2, r3
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	18ca      	adds	r2, r1, r3
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4413      	add	r3, r2
 8002462:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002466:	fb03 f202 	mul.w	r2, r3, r2
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8002470:	6013      	str	r3, [r2, #0]
		}
		//CAN ID = 401 is CAN message for commands to black box
		if(RxHeader.Identifier == 401){
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f240 1291 	movw	r2, #401	@ 0x191
 800247a:	4293      	cmp	r3, r2
 800247c:	d109      	bne.n	8002492 <HAL_FDCAN_RxFifo0Callback+0xc6>
			if(CAN.Rx_Buffer[6] == CAN.Rx_Buffer[7]){
 800247e:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002480:	7b9a      	ldrb	r2, [r3, #14]
 8002482:	4b44      	ldr	r3, [pc, #272]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002484:	7bdb      	ldrb	r3, [r3, #15]
 8002486:	429a      	cmp	r2, r3
 8002488:	d103      	bne.n	8002492 <HAL_FDCAN_RxFifo0Callback+0xc6>
				command = CAN.Rx_Buffer[6];
 800248a:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800248c:	7b9a      	ldrb	r2, [r3, #14]
 800248e:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8002490:	701a      	strb	r2, [r3, #0]
			}

		}
		//CAN ID = 402 is CAN message for manual update of current page
		if(RxHeader.Identifier == 402){
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 800249a:	d11c      	bne.n	80024d6 <HAL_FDCAN_RxFifo0Callback+0x10a>
			uint16_t Page = *(uint16_t*)&CAN.Rx_Buffer[6];
 800249c:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	837b      	strh	r3, [r7, #26]

			Automatic_Block_Managment(Page);
 80024a2:	8b7b      	ldrh	r3, [r7, #26]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fbbb 	bl	8000c20 <Automatic_Block_Managment>

			Flash.Buffer_Index=0;
 80024aa:	4b3d      	ldr	r3, [pc, #244]	@ (80025a0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80024ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b0:	2200      	movs	r2, #0
 80024b2:	80da      	strh	r2, [r3, #6]
			Flash.Page_Index=Page;
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80024b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ba:	461a      	mov	r2, r3
 80024bc:	8b7b      	ldrh	r3, [r7, #26]
 80024be:	8093      	strh	r3, [r2, #4]
			Flash.Buffer_Select=0;
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80024c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
			Flash.Buffer_p=Flash.Buffer_0;
 80024ca:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80024cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80024d4:	60d3      	str	r3, [r2, #12]
		}

		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 80024d6:	23f0      	movs	r3, #240	@ 0xf0
 80024d8:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	3301      	adds	r3, #1
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80024ea:	7a1b      	ldrb	r3, [r3, #8]
 80024ec:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 80024ee:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80024f0:	7a5b      	ldrb	r3, [r3, #9]
 80024f2:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80024f6:	7a9b      	ldrb	r3, [r3, #10]
 80024f8:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 80024fa:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80024fc:	7adb      	ldrb	r3, [r3, #11]
 80024fe:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002502:	7b1b      	ldrb	r3, [r3, #12]
 8002504:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 8002506:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002508:	7b5b      	ldrb	r3, [r3, #13]
 800250a:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800250e:	7b9b      	ldrb	r3, [r3, #14]
 8002510:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002514:	7bdb      	ldrb	r3, [r3, #15]
 8002516:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(Local_Time);
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(Local_Time>>8);
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b2db      	uxtb	r3, r3
 8002528:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(Local_Time>>16);
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b2db      	uxtb	r3, r3
 8002532:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(Local_Time>>24);
 8002534:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 800253e:	230f      	movs	r3, #15
 8002540:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002542:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_FDCAN_RxFifo0Callback+0x18a>
			Write_Data(Temp, sizeof(Temp));
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	2110      	movs	r1, #16
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fa79 	bl	8000a48 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8002558:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800255a:	2140      	movs	r1, #64	@ 0x40
 800255c:	4812      	ldr	r0, [pc, #72]	@ (80025a8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800255e:	f001 fb65 	bl	8003c2c <HAL_FDCAN_GetRxMessage>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f43f af37 	beq.w	80023d8 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3730      	adds	r7, #48	@ 0x30
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	240014ac 	.word	0x240014ac
 8002578:	240010e0 	.word	0x240010e0
 800257c:	24000090 	.word	0x24000090
 8002580:	6b5fca6b 	.word	0x6b5fca6b
 8002584:	0a7c5ac5 	.word	0x0a7c5ac5
 8002588:	51eb851f 	.word	0x51eb851f
 800258c:	10624dd3 	.word	0x10624dd3
 8002590:	24000080 	.word	0x24000080
 8002594:	24000088 	.word	0x24000088
 8002598:	2400007d 	.word	0x2400007d
 800259c:	24000096 	.word	0x24000096
 80025a0:	240000ac 	.word	0x240000ac
 80025a4:	2400007c 	.word	0x2400007c
 80025a8:	2400112c 	.word	0x2400112c

080025ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	if(huart == CAM1.huart)HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_UART_RxCpltCallback+0x58>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d106      	bne.n	80025cc <HAL_UART_RxCpltCallback+0x20>
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_UART_RxCpltCallback+0x58>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4910      	ldr	r1, [pc, #64]	@ (8002608 <HAL_UART_RxCpltCallback+0x5c>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 fa66 	bl	8008a98 <HAL_UART_Receive_IT>
	if(huart == CAM2.huart)HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_UART_RxCpltCallback+0x60>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_RxCpltCallback+0x38>
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_UART_RxCpltCallback+0x60>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2202      	movs	r2, #2
 80025dc:	490c      	ldr	r1, [pc, #48]	@ (8002610 <HAL_UART_RxCpltCallback+0x64>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 fa5a 	bl	8008a98 <HAL_UART_Receive_IT>
	if(huart == CAM3.huart)HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_UART_RxCpltCallback+0x68>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_UART_RxCpltCallback+0x50>
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_UART_RxCpltCallback+0x68>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2202      	movs	r2, #2
 80025f4:	4908      	ldr	r1, [pc, #32]	@ (8002618 <HAL_UART_RxCpltCallback+0x6c>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	f006 fa4e 	bl	8008a98 <HAL_UART_Receive_IT>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	240010bc 	.word	0x240010bc
 8002608:	240010c0 	.word	0x240010c0
 800260c:	240010c8 	.word	0x240010c8
 8002610:	240010cc 	.word	0x240010cc
 8002614:	240010d4 	.word	0x240010d4
 8002618:	240010d8 	.word	0x240010d8

0800261c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002624:	4a14      	ldr	r2, [pc, #80]	@ (8002678 <_sbrk+0x5c>)
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <_sbrk+0x60>)
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <_sbrk+0x64>)
 800263a:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <_sbrk+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	429a      	cmp	r2, r3
 800264a:	d207      	bcs.n	800265c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800264c:	f008 fdd4 	bl	800b1f8 <__errno>
 8002650:	4603      	mov	r3, r0
 8002652:	220c      	movs	r2, #12
 8002654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	e009      	b.n	8002670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800265c:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <_sbrk+0x64>)
 800266c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24080000 	.word	0x24080000
 800267c:	00000400 	.word	0x00000400
 8002680:	240014b0 	.word	0x240014b0
 8002684:	24001600 	.word	0x24001600

08002688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800268c:	4b43      	ldr	r3, [pc, #268]	@ (800279c <SystemInit+0x114>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	4a42      	ldr	r2, [pc, #264]	@ (800279c <SystemInit+0x114>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800269c:	4b40      	ldr	r3, [pc, #256]	@ (80027a0 <SystemInit+0x118>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d807      	bhi.n	80026b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026a8:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <SystemInit+0x118>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 030f 	bic.w	r3, r3, #15
 80026b0:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <SystemInit+0x118>)
 80026b2:	f043 0307 	orr.w	r3, r3, #7
 80026b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026b8:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <SystemInit+0x11c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a39      	ldr	r2, [pc, #228]	@ (80027a4 <SystemInit+0x11c>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <SystemInit+0x11c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026ca:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <SystemInit+0x11c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4935      	ldr	r1, [pc, #212]	@ (80027a4 <SystemInit+0x11c>)
 80026d0:	4b35      	ldr	r3, [pc, #212]	@ (80027a8 <SystemInit+0x120>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d6:	4b32      	ldr	r3, [pc, #200]	@ (80027a0 <SystemInit+0x118>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e2:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <SystemInit+0x118>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	4a2d      	ldr	r2, [pc, #180]	@ (80027a0 <SystemInit+0x118>)
 80026ec:	f043 0307 	orr.w	r3, r3, #7
 80026f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026f2:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <SystemInit+0x11c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <SystemInit+0x11c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026fe:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <SystemInit+0x11c>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <SystemInit+0x11c>)
 8002706:	4a29      	ldr	r2, [pc, #164]	@ (80027ac <SystemInit+0x124>)
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800270a:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <SystemInit+0x11c>)
 800270c:	4a28      	ldr	r2, [pc, #160]	@ (80027b0 <SystemInit+0x128>)
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <SystemInit+0x11c>)
 8002712:	4a28      	ldr	r2, [pc, #160]	@ (80027b4 <SystemInit+0x12c>)
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <SystemInit+0x11c>)
 8002718:	2200      	movs	r2, #0
 800271a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <SystemInit+0x11c>)
 800271e:	4a25      	ldr	r2, [pc, #148]	@ (80027b4 <SystemInit+0x12c>)
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <SystemInit+0x11c>)
 8002724:	2200      	movs	r2, #0
 8002726:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <SystemInit+0x11c>)
 800272a:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <SystemInit+0x12c>)
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800272e:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <SystemInit+0x11c>)
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <SystemInit+0x11c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <SystemInit+0x11c>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002740:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <SystemInit+0x11c>)
 8002742:	2200      	movs	r2, #0
 8002744:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002746:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <SystemInit+0x130>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <SystemInit+0x134>)
 800274c:	4013      	ands	r3, r2
 800274e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002752:	d202      	bcs.n	800275a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <SystemInit+0x138>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <SystemInit+0x11c>)
 800275c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d113      	bne.n	8002790 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002768:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <SystemInit+0x11c>)
 800276a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800276e:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <SystemInit+0x11c>)
 8002770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <SystemInit+0x13c>)
 800277a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800277e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <SystemInit+0x11c>)
 8002782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002786:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <SystemInit+0x11c>)
 8002788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800278c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	52002000 	.word	0x52002000
 80027a4:	58024400 	.word	0x58024400
 80027a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027ac:	02020200 	.word	0x02020200
 80027b0:	01ff0000 	.word	0x01ff0000
 80027b4:	01010280 	.word	0x01010280
 80027b8:	5c001000 	.word	0x5c001000
 80027bc:	ffff0000 	.word	0xffff0000
 80027c0:	51008108 	.word	0x51008108
 80027c4:	52004000 	.word	0x52004000

080027c8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <ExitRun0Mode+0x2c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <ExitRun0Mode+0x2c>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80027d8:	bf00      	nop
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <ExitRun0Mode+0x2c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f9      	beq.n	80027da <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	58024800 	.word	0x58024800

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002834 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80027fc:	f7ff ffe4 	bl	80027c8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002800:	f7ff ff42 	bl	8002688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002804:	480c      	ldr	r0, [pc, #48]	@ (8002838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002806:	490d      	ldr	r1, [pc, #52]	@ (800283c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800281c:	4c0a      	ldr	r4, [pc, #40]	@ (8002848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282a:	f008 fceb 	bl	800b204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282e:	f7fe fd41 	bl	80012b4 <main>
  bx  lr
 8002832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800283c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002840:	0800bc2c 	.word	0x0800bc2c
  ldr r2, =_sbss
 8002844:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002848:	24001600 	.word	0x24001600

0800284c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC3_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002856:	2003      	movs	r0, #3
 8002858:	f000 f968 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800285c:	f003 f906 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_Init+0x68>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	4913      	ldr	r1, [pc, #76]	@ (80028bc <HAL_Init+0x6c>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <HAL_Init+0x68>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a0e      	ldr	r2, [pc, #56]	@ (80028bc <HAL_Init+0x6c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_Init+0x70>)
 8002892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002894:	4a0b      	ldr	r2, [pc, #44]	@ (80028c4 <HAL_Init+0x74>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289a:	200f      	movs	r0, #15
 800289c:	f000 f814 	bl	80028c8 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e002      	b.n	80028b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028aa:	f7ff fa57 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58024400 	.word	0x58024400
 80028bc:	0800bba0 	.word	0x0800bba0
 80028c0:	24000004 	.word	0x24000004
 80028c4:	24000000 	.word	0x24000000

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_InitTick+0x60>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e021      	b.n	8002920 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028dc:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_InitTick+0x64>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_InitTick+0x60>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f94d 	bl	8002b92 <HAL_SYSTICK_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00e      	b.n	8002920 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d80a      	bhi.n	800291e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002908:	2200      	movs	r2, #0
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f000 f917 	bl	8002b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002914:	4a06      	ldr	r2, [pc, #24]	@ (8002930 <HAL_InitTick+0x68>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2400000c 	.word	0x2400000c
 800292c:	24000000 	.word	0x24000000
 8002930:	24000008 	.word	0x24000008

08002934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x20>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_IncTick+0x24>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4413      	add	r3, r2
 8002944:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <HAL_IncTick+0x24>)
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	2400000c 	.word	0x2400000c
 8002958:	240014b4 	.word	0x240014b4

0800295c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_GetTick+0x14>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	240014b4 	.word	0x240014b4

08002974 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_GetREVID+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0c1b      	lsrs	r3, r3, #16
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	5c001000 	.word	0x5c001000

0800298c <__NVIC_SetPriorityGrouping>:
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <__NVIC_SetPriorityGrouping+0x40>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <__NVIC_SetPriorityGrouping+0x40>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00
 80029d0:	05fa0000 	.word	0x05fa0000

080029d4 <__NVIC_GetPriorityGrouping>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f7ff ff8e 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff29 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff40 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff90 	bl	8002a80 <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5f 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff33 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa4 	bl	8002ae8 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bb0:	f3bf 8f5f 	dmb	sy
}
 8002bb4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_MPU_Disable+0x28>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	4a06      	ldr	r2, [pc, #24]	@ (8002bd4 <HAL_MPU_Disable+0x28>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_MPU_Disable+0x2c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000ed00 	.word	0xe000ed00
 8002bd8:	e000ed90 	.word	0xe000ed90

08002bdc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002be4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <HAL_MPU_Enable+0x38>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_MPU_Enable+0x3c>)
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_MPU_Enable+0x3c>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bfa:	f3bf 8f4f 	dsb	sy
}
 8002bfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c00:	f3bf 8f6f 	isb	sy
}
 8002c04:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed90 	.word	0xe000ed90
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	785a      	ldrb	r2, [r3, #1]
 8002c28:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_MPU_ConfigRegion+0x7c>)
 8002c2a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <HAL_MPU_ConfigRegion+0x7c>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a19      	ldr	r2, [pc, #100]	@ (8002c98 <HAL_MPU_ConfigRegion+0x7c>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c38:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_MPU_ConfigRegion+0x7c>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7b1b      	ldrb	r3, [r3, #12]
 8002c44:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7adb      	ldrb	r3, [r3, #11]
 8002c4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7a9b      	ldrb	r3, [r3, #10]
 8002c52:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7b5b      	ldrb	r3, [r3, #13]
 8002c5a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7b9b      	ldrb	r3, [r3, #14]
 8002c62:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7bdb      	ldrb	r3, [r3, #15]
 8002c6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7a5b      	ldrb	r3, [r3, #9]
 8002c72:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7a1b      	ldrb	r3, [r3, #8]
 8002c7a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c7c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c86:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c88:	6113      	str	r3, [r2, #16]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed90 	.word	0xe000ed90

08002c9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff fe5a 	bl	800295c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e2dc      	b.n	800326e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d008      	beq.n	8002cd2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2280      	movs	r2, #128	@ 0x80
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e2cd      	b.n	800326e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a76      	ldr	r2, [pc, #472]	@ (8002eb0 <HAL_DMA_Abort+0x214>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04a      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a74      	ldr	r2, [pc, #464]	@ (8002eb4 <HAL_DMA_Abort+0x218>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d045      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a73      	ldr	r2, [pc, #460]	@ (8002eb8 <HAL_DMA_Abort+0x21c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d040      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a71      	ldr	r2, [pc, #452]	@ (8002ebc <HAL_DMA_Abort+0x220>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03b      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a70      	ldr	r2, [pc, #448]	@ (8002ec0 <HAL_DMA_Abort+0x224>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d036      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec4 <HAL_DMA_Abort+0x228>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d031      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6d      	ldr	r2, [pc, #436]	@ (8002ec8 <HAL_DMA_Abort+0x22c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02c      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ecc <HAL_DMA_Abort+0x230>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d027      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed0 <HAL_DMA_Abort+0x234>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	@ (8002ed4 <HAL_DMA_Abort+0x238>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a67      	ldr	r2, [pc, #412]	@ (8002ed8 <HAL_DMA_Abort+0x23c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_DMA_Abort+0x240>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a64      	ldr	r2, [pc, #400]	@ (8002ee0 <HAL_DMA_Abort+0x244>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a62      	ldr	r2, [pc, #392]	@ (8002ee4 <HAL_DMA_Abort+0x248>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a61      	ldr	r2, [pc, #388]	@ (8002ee8 <HAL_DMA_Abort+0x24c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002eec <HAL_DMA_Abort+0x250>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Abort+0xda>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_Abort+0xdc>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 021e 	bic.w	r2, r2, #30
 8002d8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e00a      	b.n	8002dba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020e 	bic.w	r2, r2, #14
 8002db2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb0 <HAL_DMA_Abort+0x214>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d072      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb4 <HAL_DMA_Abort+0x218>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d06d      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	@ (8002eb8 <HAL_DMA_Abort+0x21c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d068      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a37      	ldr	r2, [pc, #220]	@ (8002ebc <HAL_DMA_Abort+0x220>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d063      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a36      	ldr	r2, [pc, #216]	@ (8002ec0 <HAL_DMA_Abort+0x224>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d05e      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a34      	ldr	r2, [pc, #208]	@ (8002ec4 <HAL_DMA_Abort+0x228>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d059      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a33      	ldr	r2, [pc, #204]	@ (8002ec8 <HAL_DMA_Abort+0x22c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d054      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <HAL_DMA_Abort+0x230>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d04f      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_DMA_Abort+0x234>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04a      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed4 <HAL_DMA_Abort+0x238>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d045      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <HAL_DMA_Abort+0x23c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d040      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <HAL_DMA_Abort+0x240>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d03b      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <HAL_DMA_Abort+0x244>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d036      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <HAL_DMA_Abort+0x248>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <HAL_DMA_Abort+0x24c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d02c      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a25      	ldr	r2, [pc, #148]	@ (8002eec <HAL_DMA_Abort+0x250>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a24      	ldr	r2, [pc, #144]	@ (8002ef0 <HAL_DMA_Abort+0x254>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a22      	ldr	r2, [pc, #136]	@ (8002ef4 <HAL_DMA_Abort+0x258>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <HAL_DMA_Abort+0x25c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_DMA_Abort+0x260>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1e      	ldr	r2, [pc, #120]	@ (8002f00 <HAL_DMA_Abort+0x264>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_DMA_Abort+0x268>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_DMA_Abort+0x26c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_DMA_Abort+0x270>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d132      	bne.n	8002f10 <HAL_DMA_Abort+0x274>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e031      	b.n	8002f12 <HAL_DMA_Abort+0x276>
 8002eae:	bf00      	nop
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
 8002ef0:	58025408 	.word	0x58025408
 8002ef4:	5802541c 	.word	0x5802541c
 8002ef8:	58025430 	.word	0x58025430
 8002efc:	58025444 	.word	0x58025444
 8002f00:	58025458 	.word	0x58025458
 8002f04:	5802546c 	.word	0x5802546c
 8002f08:	58025480 	.word	0x58025480
 8002f0c:	58025494 	.word	0x58025494
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80030e0 <HAL_DMA_Abort+0x444>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d04a      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6b      	ldr	r2, [pc, #428]	@ (80030e4 <HAL_DMA_Abort+0x448>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d045      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80030e8 <HAL_DMA_Abort+0x44c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d040      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a68      	ldr	r2, [pc, #416]	@ (80030ec <HAL_DMA_Abort+0x450>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d03b      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a67      	ldr	r2, [pc, #412]	@ (80030f0 <HAL_DMA_Abort+0x454>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d036      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_DMA_Abort+0x458>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a64      	ldr	r2, [pc, #400]	@ (80030f8 <HAL_DMA_Abort+0x45c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d02c      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a62      	ldr	r2, [pc, #392]	@ (80030fc <HAL_DMA_Abort+0x460>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a61      	ldr	r2, [pc, #388]	@ (8003100 <HAL_DMA_Abort+0x464>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5f      	ldr	r2, [pc, #380]	@ (8003104 <HAL_DMA_Abort+0x468>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01d      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003108 <HAL_DMA_Abort+0x46c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	@ (800310c <HAL_DMA_Abort+0x470>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8003110 <HAL_DMA_Abort+0x474>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a59      	ldr	r2, [pc, #356]	@ (8003114 <HAL_DMA_Abort+0x478>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_DMA_Abort+0x47c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_DMA_Abort+0x480>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <HAL_DMA_Abort+0x33c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e007      	b.n	8002fe8 <HAL_DMA_Abort+0x34c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fe8:	e013      	b.n	8003012 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fea:	f7ff fcb7 	bl	800295c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d90c      	bls.n	8003012 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2203      	movs	r2, #3
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e12d      	b.n	800326e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2f      	ldr	r2, [pc, #188]	@ (80030e0 <HAL_DMA_Abort+0x444>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_DMA_Abort+0x448>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <HAL_DMA_Abort+0x44c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_Abort+0x422>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_DMA_Abort+0x450>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a29      	ldr	r2, [pc, #164]	@ (80030f0 <HAL_DMA_Abort+0x454>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_DMA_Abort+0x458>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a26      	ldr	r2, [pc, #152]	@ (80030f8 <HAL_DMA_Abort+0x45c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <HAL_DMA_Abort+0x460>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a23      	ldr	r2, [pc, #140]	@ (8003100 <HAL_DMA_Abort+0x464>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_DMA_Abort+0x468>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a20      	ldr	r2, [pc, #128]	@ (8003108 <HAL_DMA_Abort+0x46c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_DMA_Abort+0x470>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <HAL_DMA_Abort+0x474>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_DMA_Abort+0x478>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <HAL_DMA_Abort+0x47c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_DMA_Abort+0x480>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_Abort+0x426>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_Abort+0x428>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02b      	beq.n	8003120 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	223f      	movs	r2, #63	@ 0x3f
 80030d8:	409a      	lsls	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	e02a      	b.n	8003136 <HAL_DMA_Abort+0x49a>
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2201      	movs	r2, #1
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a4f      	ldr	r2, [pc, #316]	@ (8003278 <HAL_DMA_Abort+0x5dc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d072      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4d      	ldr	r2, [pc, #308]	@ (800327c <HAL_DMA_Abort+0x5e0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d06d      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4c      	ldr	r2, [pc, #304]	@ (8003280 <HAL_DMA_Abort+0x5e4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d068      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4a      	ldr	r2, [pc, #296]	@ (8003284 <HAL_DMA_Abort+0x5e8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d063      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a49      	ldr	r2, [pc, #292]	@ (8003288 <HAL_DMA_Abort+0x5ec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d05e      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a47      	ldr	r2, [pc, #284]	@ (800328c <HAL_DMA_Abort+0x5f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d059      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <HAL_DMA_Abort+0x5f4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d054      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a44      	ldr	r2, [pc, #272]	@ (8003294 <HAL_DMA_Abort+0x5f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d04f      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a43      	ldr	r2, [pc, #268]	@ (8003298 <HAL_DMA_Abort+0x5fc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04a      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a41      	ldr	r2, [pc, #260]	@ (800329c <HAL_DMA_Abort+0x600>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d045      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a40      	ldr	r2, [pc, #256]	@ (80032a0 <HAL_DMA_Abort+0x604>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d040      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3e      	ldr	r2, [pc, #248]	@ (80032a4 <HAL_DMA_Abort+0x608>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d03b      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	@ (80032a8 <HAL_DMA_Abort+0x60c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d036      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <HAL_DMA_Abort+0x610>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	@ (80032b0 <HAL_DMA_Abort+0x614>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d02c      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a38      	ldr	r2, [pc, #224]	@ (80032b4 <HAL_DMA_Abort+0x618>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d027      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a37      	ldr	r2, [pc, #220]	@ (80032b8 <HAL_DMA_Abort+0x61c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a35      	ldr	r2, [pc, #212]	@ (80032bc <HAL_DMA_Abort+0x620>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a34      	ldr	r2, [pc, #208]	@ (80032c0 <HAL_DMA_Abort+0x624>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_DMA_Abort+0x628>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a31      	ldr	r2, [pc, #196]	@ (80032c8 <HAL_DMA_Abort+0x62c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <HAL_DMA_Abort+0x630>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2e      	ldr	r2, [pc, #184]	@ (80032d0 <HAL_DMA_Abort+0x634>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2c      	ldr	r2, [pc, #176]	@ (80032d4 <HAL_DMA_Abort+0x638>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_DMA_Abort+0x58e>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_DMA_Abort+0x590>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003238:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800324c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003250:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800325a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40020010 	.word	0x40020010
 800327c:	40020028 	.word	0x40020028
 8003280:	40020040 	.word	0x40020040
 8003284:	40020058 	.word	0x40020058
 8003288:	40020070 	.word	0x40020070
 800328c:	40020088 	.word	0x40020088
 8003290:	400200a0 	.word	0x400200a0
 8003294:	400200b8 	.word	0x400200b8
 8003298:	40020410 	.word	0x40020410
 800329c:	40020428 	.word	0x40020428
 80032a0:	40020440 	.word	0x40020440
 80032a4:	40020458 	.word	0x40020458
 80032a8:	40020470 	.word	0x40020470
 80032ac:	40020488 	.word	0x40020488
 80032b0:	400204a0 	.word	0x400204a0
 80032b4:	400204b8 	.word	0x400204b8
 80032b8:	58025408 	.word	0x58025408
 80032bc:	5802541c 	.word	0x5802541c
 80032c0:	58025430 	.word	0x58025430
 80032c4:	58025444 	.word	0x58025444
 80032c8:	58025458 	.word	0x58025458
 80032cc:	5802546c 	.word	0x5802546c
 80032d0:	58025480 	.word	0x58025480
 80032d4:	58025494 	.word	0x58025494

080032d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e237      	b.n	800375a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2280      	movs	r2, #128	@ 0x80
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e22c      	b.n	800375a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5c      	ldr	r2, [pc, #368]	@ (8003478 <HAL_DMA_Abort_IT+0x1a0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5b      	ldr	r2, [pc, #364]	@ (800347c <HAL_DMA_Abort_IT+0x1a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a59      	ldr	r2, [pc, #356]	@ (8003480 <HAL_DMA_Abort_IT+0x1a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a58      	ldr	r2, [pc, #352]	@ (8003484 <HAL_DMA_Abort_IT+0x1ac>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_DMA_Abort_IT+0x1b0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a55      	ldr	r2, [pc, #340]	@ (800348c <HAL_DMA_Abort_IT+0x1b4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a53      	ldr	r2, [pc, #332]	@ (8003490 <HAL_DMA_Abort_IT+0x1b8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a52      	ldr	r2, [pc, #328]	@ (8003494 <HAL_DMA_Abort_IT+0x1bc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a50      	ldr	r2, [pc, #320]	@ (8003498 <HAL_DMA_Abort_IT+0x1c0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a4f      	ldr	r2, [pc, #316]	@ (800349c <HAL_DMA_Abort_IT+0x1c4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4d      	ldr	r2, [pc, #308]	@ (80034a0 <HAL_DMA_Abort_IT+0x1c8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a4a      	ldr	r2, [pc, #296]	@ (80034a8 <HAL_DMA_Abort_IT+0x1d0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a49      	ldr	r2, [pc, #292]	@ (80034ac <HAL_DMA_Abort_IT+0x1d4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a47      	ldr	r2, [pc, #284]	@ (80034b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a46      	ldr	r2, [pc, #280]	@ (80034b4 <HAL_DMA_Abort_IT+0x1dc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_DMA_Abort_IT+0xcc>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_Abort_IT+0xce>
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8086 	beq.w	80034b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2204      	movs	r2, #4
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003478 <HAL_DMA_Abort_IT+0x1a0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d04a      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2e      	ldr	r2, [pc, #184]	@ (800347c <HAL_DMA_Abort_IT+0x1a4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d045      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <HAL_DMA_Abort_IT+0x1a8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d040      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003484 <HAL_DMA_Abort_IT+0x1ac>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d03b      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a29      	ldr	r2, [pc, #164]	@ (8003488 <HAL_DMA_Abort_IT+0x1b0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d036      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	@ (800348c <HAL_DMA_Abort_IT+0x1b4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a26      	ldr	r2, [pc, #152]	@ (8003490 <HAL_DMA_Abort_IT+0x1b8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02c      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a25      	ldr	r2, [pc, #148]	@ (8003494 <HAL_DMA_Abort_IT+0x1bc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d027      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_DMA_Abort_IT+0x1c0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d022      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <HAL_DMA_Abort_IT+0x1c4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d01d      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a20      	ldr	r2, [pc, #128]	@ (80034a0 <HAL_DMA_Abort_IT+0x1c8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1f      	ldr	r2, [pc, #124]	@ (80034a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <HAL_DMA_Abort_IT+0x1d0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <HAL_DMA_Abort_IT+0x1d4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1a      	ldr	r2, [pc, #104]	@ (80034b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_DMA_Abort_IT+0x17c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <HAL_DMA_Abort_IT+0x1dc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <HAL_DMA_Abort_IT+0x18e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e178      	b.n	8003758 <HAL_DMA_Abort_IT+0x480>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e16f      	b.n	8003758 <HAL_DMA_Abort_IT+0x480>
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020e 	bic.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003680 <HAL_DMA_Abort_IT+0x3a8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04a      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003684 <HAL_DMA_Abort_IT+0x3ac>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d045      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a69      	ldr	r2, [pc, #420]	@ (8003688 <HAL_DMA_Abort_IT+0x3b0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d040      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a68      	ldr	r2, [pc, #416]	@ (800368c <HAL_DMA_Abort_IT+0x3b4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03b      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a66      	ldr	r2, [pc, #408]	@ (8003690 <HAL_DMA_Abort_IT+0x3b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d036      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a65      	ldr	r2, [pc, #404]	@ (8003694 <HAL_DMA_Abort_IT+0x3bc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d031      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a63      	ldr	r2, [pc, #396]	@ (8003698 <HAL_DMA_Abort_IT+0x3c0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02c      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a62      	ldr	r2, [pc, #392]	@ (800369c <HAL_DMA_Abort_IT+0x3c4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d027      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a60      	ldr	r2, [pc, #384]	@ (80036a0 <HAL_DMA_Abort_IT+0x3c8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5f      	ldr	r2, [pc, #380]	@ (80036a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01d      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5d      	ldr	r2, [pc, #372]	@ (80036a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5c      	ldr	r2, [pc, #368]	@ (80036ac <HAL_DMA_Abort_IT+0x3d4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5a      	ldr	r2, [pc, #360]	@ (80036b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a59      	ldr	r2, [pc, #356]	@ (80036b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a57      	ldr	r2, [pc, #348]	@ (80036b8 <HAL_DMA_Abort_IT+0x3e0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_Abort_IT+0x290>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a56      	ldr	r2, [pc, #344]	@ (80036bc <HAL_DMA_Abort_IT+0x3e4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d108      	bne.n	800357a <HAL_DMA_Abort_IT+0x2a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e007      	b.n	800358a <HAL_DMA_Abort_IT+0x2b2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3c      	ldr	r2, [pc, #240]	@ (8003680 <HAL_DMA_Abort_IT+0x3a8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d072      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <HAL_DMA_Abort_IT+0x3ac>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d06d      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a39      	ldr	r2, [pc, #228]	@ (8003688 <HAL_DMA_Abort_IT+0x3b0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d068      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a37      	ldr	r2, [pc, #220]	@ (800368c <HAL_DMA_Abort_IT+0x3b4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d063      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a36      	ldr	r2, [pc, #216]	@ (8003690 <HAL_DMA_Abort_IT+0x3b8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d05e      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a34      	ldr	r2, [pc, #208]	@ (8003694 <HAL_DMA_Abort_IT+0x3bc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d059      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <HAL_DMA_Abort_IT+0x3c0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d054      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a31      	ldr	r2, [pc, #196]	@ (800369c <HAL_DMA_Abort_IT+0x3c4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d04f      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a30      	ldr	r2, [pc, #192]	@ (80036a0 <HAL_DMA_Abort_IT+0x3c8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d04a      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <HAL_DMA_Abort_IT+0x3cc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d045      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <HAL_DMA_Abort_IT+0x3d0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d040      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <HAL_DMA_Abort_IT+0x3d4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d03b      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2a      	ldr	r2, [pc, #168]	@ (80036b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d036      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a28      	ldr	r2, [pc, #160]	@ (80036b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a27      	ldr	r2, [pc, #156]	@ (80036b8 <HAL_DMA_Abort_IT+0x3e0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d02c      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a25      	ldr	r2, [pc, #148]	@ (80036bc <HAL_DMA_Abort_IT+0x3e4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d027      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a24      	ldr	r2, [pc, #144]	@ (80036c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a22      	ldr	r2, [pc, #136]	@ (80036c4 <HAL_DMA_Abort_IT+0x3ec>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01d      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a21      	ldr	r2, [pc, #132]	@ (80036c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d018      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <HAL_DMA_Abort_IT+0x3f4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1e      	ldr	r2, [pc, #120]	@ (80036d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1b      	ldr	r2, [pc, #108]	@ (80036d8 <HAL_DMA_Abort_IT+0x400>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <HAL_DMA_Abort_IT+0x404>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d132      	bne.n	80036e0 <HAL_DMA_Abort_IT+0x408>
 800367a:	2301      	movs	r3, #1
 800367c:	e031      	b.n	80036e2 <HAL_DMA_Abort_IT+0x40a>
 800367e:	bf00      	nop
 8003680:	40020010 	.word	0x40020010
 8003684:	40020028 	.word	0x40020028
 8003688:	40020040 	.word	0x40020040
 800368c:	40020058 	.word	0x40020058
 8003690:	40020070 	.word	0x40020070
 8003694:	40020088 	.word	0x40020088
 8003698:	400200a0 	.word	0x400200a0
 800369c:	400200b8 	.word	0x400200b8
 80036a0:	40020410 	.word	0x40020410
 80036a4:	40020428 	.word	0x40020428
 80036a8:	40020440 	.word	0x40020440
 80036ac:	40020458 	.word	0x40020458
 80036b0:	40020470 	.word	0x40020470
 80036b4:	40020488 	.word	0x40020488
 80036b8:	400204a0 	.word	0x400204a0
 80036bc:	400204b8 	.word	0x400204b8
 80036c0:	58025408 	.word	0x58025408
 80036c4:	5802541c 	.word	0x5802541c
 80036c8:	58025430 	.word	0x58025430
 80036cc:	58025444 	.word	0x58025444
 80036d0:	58025458 	.word	0x58025458
 80036d4:	5802546c 	.word	0x5802546c
 80036d8:	58025480 	.word	0x58025480
 80036dc:	58025494 	.word	0x58025494
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d028      	beq.n	8003738 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003714:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800372c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003736:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b098      	sub	sp, #96	@ 0x60
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800376c:	4a84      	ldr	r2, [pc, #528]	@ (8003980 <HAL_FDCAN_Init+0x21c>)
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	4611      	mov	r1, r2
 8003774:	224c      	movs	r2, #76	@ 0x4c
 8003776:	4618      	mov	r0, r3
 8003778:	f007 fd6a 	bl	800b250 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1c6      	b.n	8003b14 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7e      	ldr	r2, [pc, #504]	@ (8003984 <HAL_FDCAN_Init+0x220>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d106      	bne.n	800379e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe faec 	bl	8001d90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0210 	bic.w	r2, r2, #16
 80037c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7ff f8c8 	bl	800295c <HAL_GetTick>
 80037cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80037ce:	e014      	b.n	80037fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80037d0:	f7ff f8c4 	bl	800295c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d90d      	bls.n	80037fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e18c      	b.n	8003b14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d0e3      	beq.n	80037d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003818:	f7ff f8a0 	bl	800295c <HAL_GetTick>
 800381c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800381e:	e014      	b.n	800384a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003820:	f7ff f89c 	bl	800295c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b0a      	cmp	r3, #10
 800382c:	d90d      	bls.n	800384a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2203      	movs	r2, #3
 8003842:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e164      	b.n	8003b14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0e3      	beq.n	8003820 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0202 	orr.w	r2, r2, #2
 8003866:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7c1b      	ldrb	r3, [r3, #16]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387e:	619a      	str	r2, [r3, #24]
 8003880:	e007      	b.n	8003892 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003890:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7c5b      	ldrb	r3, [r3, #17]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a8:	619a      	str	r2, [r3, #24]
 80038aa:	e007      	b.n	80038bc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7c9b      	ldrb	r3, [r3, #18]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038d2:	619a      	str	r2, [r3, #24]
 80038d4:	e007      	b.n	80038e6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038e4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800390a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0210 	bic.w	r2, r2, #16
 800391a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0204 	orr.w	r2, r2, #4
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e030      	b.n	8003998 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d02c      	beq.n	8003998 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d020      	beq.n	8003988 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003954:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0210 	orr.w	r2, r2, #16
 8003964:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d114      	bne.n	8003998 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	619a      	str	r2, [r3, #24]
 800397e:	e00b      	b.n	8003998 <HAL_FDCAN_Init+0x234>
 8003980:	0800bb54 	.word	0x0800bb54
 8003984:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	3b01      	subs	r3, #1
 800399e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039a8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039b0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039c0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039c2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039cc:	d115      	bne.n	80039fa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	3b01      	subs	r3, #1
 80039da:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039dc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	3b01      	subs	r3, #1
 80039e4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80039f6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039f8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	4413      	add	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a2e:	f023 0107 	bic.w	r1, r3, #7
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3360      	adds	r3, #96	@ 0x60
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a5a:	f023 0107 	bic.w	r1, r3, #7
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3360      	adds	r3, #96	@ 0x60
 8003a66:	443b      	add	r3, r7
 8003a68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a86:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	3360      	adds	r3, #96	@ 0x60
 8003a92:	443b      	add	r3, r7
 8003a94:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003a98:	011a      	lsls	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ab4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3360      	adds	r3, #96	@ 0x60
 8003ac0:	443b      	add	r3, r7
 8003ac2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a11      	ldr	r2, [pc, #68]	@ (8003b1c <HAL_FDCAN_Init+0x3b8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d107      	bne.n	8003aec <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f022 0203 	bic.w	r2, r2, #3
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fd81 	bl	800460c <FDCAN_CalcultateRamBlockAddresses>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003b10:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3760      	adds	r7, #96	@ 0x60
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	4000a000 	.word	0x4000a000

08003b20 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d111      	bne.n	8003b58 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e008      	b.n	8003b6a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d141      	bne.n	8003c12 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b96:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e038      	b.n	8003c24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e026      	b.n	8003c24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fe93 	bl	8004918 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003c02:	2201      	movs	r2, #1
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e008      	b.n	8003c24 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c18:	f043 0208 	orr.w	r2, r3, #8
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b08b      	sub	sp, #44	@ 0x2c
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003c44:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c46:	7efb      	ldrb	r3, [r7, #27]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f040 8149 	bne.w	8003ee0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d14c      	bne.n	8003cee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e13c      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e12a      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cac:	d10a      	bne.n	8003cc4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cbe:	d101      	bne.n	8003cc4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce0:	69f9      	ldr	r1, [r7, #28]
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cec:	e068      	b.n	8003dc0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b41      	cmp	r3, #65	@ 0x41
 8003cf2:	d14c      	bne.n	8003d8e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cfc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0ec      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0da      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d4c:	d10a      	bne.n	8003d64 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5e:	d101      	bne.n	8003d64 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	e018      	b.n	8003dc0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d309      	bcc.n	8003dac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0a2      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0c9b      	lsrs	r3, r3, #18
 8003dda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e005      	b.n	8003df0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0e1b      	lsrs	r3, r3, #24
 8003e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0fda      	lsrs	r2, r3, #31
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	3304      	adds	r3, #4
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	e00a      	b.n	8003e7c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	440b      	add	r3, r1
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d3ec      	bcc.n	8003e66 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d105      	bne.n	8003e9e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003e9c:	e01e      	b.n	8003edc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b41      	cmp	r3, #65	@ 0x41
 8003ea2:	d105      	bne.n	8003eb0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003eae:	e015      	b.n	8003edc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b1f      	cmp	r3, #31
 8003eb4:	d808      	bhi.n	8003ec8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003ec6:	e009      	b.n	8003edc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 021f 	and.w	r2, r3, #31
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e008      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee6:	f043 0208 	orr.w	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	372c      	adds	r7, #44	@ 0x2c
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	0800bbb0 	.word	0x0800bbb0

08003f04 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f16:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <HAL_FDCAN_ActivateNotification+0x20>
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d155      	bne.n	8003fd0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f42:	e014      	b.n	8003f6e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d108      	bne.n	8003f66 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0202 	orr.w	r2, r2, #2
 8003f62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f64:	e003      	b.n	8003f6e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <HAL_FDCAN_ActivateNotification+0xec>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0f9b      	lsrs	r3, r3, #30
 8003fc6:	490b      	ldr	r1, [pc, #44]	@ (8003ff4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e008      	b.n	8003fe2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd6:	f043 0202 	orr.w	r2, r3, #2
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	3fcfffff 	.word	0x3fcfffff
 8003ff4:	4000a800 	.word	0x4000a800

08003ff8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b096      	sub	sp, #88	@ 0x58
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004000:	4b9a      	ldr	r3, [pc, #616]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	079b      	lsls	r3, r3, #30
 8004006:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004008:	4b98      	ldr	r3, [pc, #608]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	079b      	lsls	r3, r3, #30
 800400e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004010:	4013      	ands	r3, r2
 8004012:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004028:	4013      	ands	r3, r2
 800402a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004040:	4013      	ands	r3, r2
 8004042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004058:	4013      	ands	r3, r2
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004066:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004070:	4013      	ands	r3, r2
 8004072:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800407e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004088:	4013      	ands	r3, r2
 800408a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800409c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80040be:	4b6b      	ldr	r3, [pc, #428]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa54 	bl	8004572 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80040ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040cc:	0a9b      	lsrs	r3, r3, #10
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	0a9b      	lsrs	r3, r3, #10
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040f6:	4013      	ands	r3, r2
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004102:	651a      	str	r2, [r3, #80]	@ 0x50
 8004104:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800410a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa07 	bl	8004520 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411e:	4b54      	ldr	r3, [pc, #336]	@ (8004270 <HAL_FDCAN_IRQHandler+0x278>)
 8004120:	400b      	ands	r3, r1
 8004122:	6513      	str	r3, [r2, #80]	@ 0x50
 8004124:	4a51      	ldr	r2, [pc, #324]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	0f9b      	lsrs	r3, r3, #30
 800412a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800412c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f9c0 	bl	80044b4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <HAL_FDCAN_IRQHandler+0x278>)
 8004142:	400b      	ands	r3, r1
 8004144:	6513      	str	r3, [r2, #80]	@ 0x50
 8004146:	4a49      	ldr	r2, [pc, #292]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800414a:	0f9b      	lsrs	r3, r3, #30
 800414c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800414e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f9ba 	bl	80044ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004162:	4b43      	ldr	r3, [pc, #268]	@ (8004270 <HAL_FDCAN_IRQHandler+0x278>)
 8004164:	400b      	ands	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	@ 0x50
 8004168:	4a40      	ldr	r2, [pc, #256]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 800416a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416c:	0f9b      	lsrs	r3, r3, #30
 800416e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004170:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe f92a 	bl	80023cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004184:	4b3a      	ldr	r3, [pc, #232]	@ (8004270 <HAL_FDCAN_IRQHandler+0x278>)
 8004186:	400b      	ands	r3, r1
 8004188:	6513      	str	r3, [r2, #80]	@ 0x50
 800418a:	4a38      	ldr	r2, [pc, #224]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 800418c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800418e:	0f9b      	lsrs	r3, r3, #30
 8004190:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004192:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9a3 	bl	80044e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800419a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419c:	0adb      	lsrs	r3, r3, #11
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	0adb      	lsrs	r3, r3, #11
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80041bc:	4b2b      	ldr	r3, [pc, #172]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f997 	bl	80044f6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80041c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ca:	0a5b      	lsrs	r3, r3, #9
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01d      	beq.n	8004210 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f4:	4013      	ands	r3, r2
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004200:	651a      	str	r2, [r3, #80]	@ 0x50
 8004202:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004204:	2200      	movs	r2, #0
 8004206:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004208:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f97d 	bl	800450a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	0cdb      	lsrs	r3, r3, #19
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421e:	0cdb      	lsrs	r3, r3, #19
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004230:	651a      	str	r2, [r3, #80]	@ 0x50
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f97c 	bl	8004536 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800423e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800425e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004260:	4b02      	ldr	r3, [pc, #8]	@ (800426c <HAL_FDCAN_IRQHandler+0x274>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	e004      	b.n	8004274 <HAL_FDCAN_IRQHandler+0x27c>
 800426a:	bf00      	nop
 800426c:	4000a800 	.word	0x4000a800
 8004270:	3fcfffff 	.word	0x3fcfffff
 8004274:	f000 f969 	bl	800454a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427a:	0c9b      	lsrs	r3, r3, #18
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
 800429a:	4b83      	ldr	r3, [pc, #524]	@ (80044a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f95c 	bl	800455e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80042a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a8:	0c5b      	lsrs	r3, r3, #17
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	0c5b      	lsrs	r3, r3, #17
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00f      	beq.n	80042de <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80042c8:	4b77      	ldr	r3, [pc, #476]	@ (80044a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00d      	beq.n	8004300 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ea:	4b70      	ldr	r3, [pc, #448]	@ (80044ac <HAL_FDCAN_IRQHandler+0x4b4>)
 80042ec:	400b      	ands	r3, r1
 80042ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80042f0:	4a6d      	ldr	r2, [pc, #436]	@ (80044a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f4:	0f9b      	lsrs	r3, r3, #30
 80042f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80042f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f94d 	bl	800459a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800430c:	4b67      	ldr	r3, [pc, #412]	@ (80044ac <HAL_FDCAN_IRQHandler+0x4b4>)
 800430e:	400b      	ands	r3, r1
 8004310:	6513      	str	r3, [r2, #80]	@ 0x50
 8004312:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004316:	0f9b      	lsrs	r3, r3, #30
 8004318:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a60      	ldr	r2, [pc, #384]	@ (80044b0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f040 80ac 	bne.w	800448e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a4 	beq.w	800448e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435a:	4013      	ands	r3, r2
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004372:	4013      	ands	r3, r2
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438a:	4013      	ands	r3, r2
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004398:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	4013      	ands	r3, r2
 80043a4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80043b0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80043dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8e6 	bl	80045b0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80043f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8e6 	bl	80045c6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01a      	beq.n	800443c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d014      	beq.n	800443c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	b29b      	uxth	r3, r3
 800441c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004428:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6939      	ldr	r1, [r7, #16]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8d0 	bl	80045dc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004448:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800444a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8d1 	bl	80045f4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f874 	bl	8004586 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800449e:	bf00      	nop
 80044a0:	3758      	adds	r7, #88	@ 0x58
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	4000a800 	.word	0x4000a800
 80044ac:	3fcfffff 	.word	0x3fcfffff
 80044b0:	4000a000 	.word	0x4000a000

080044b4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004618:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004622:	4ba7      	ldr	r3, [pc, #668]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004624:	4013      	ands	r3, r2
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	0091      	lsls	r1, r2, #2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	430b      	orrs	r3, r1
 8004630:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	041a      	lsls	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4413      	add	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004662:	4b97      	ldr	r3, [pc, #604]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004664:	4013      	ands	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	0091      	lsls	r1, r2, #2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	430b      	orrs	r3, r1
 8004670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004684:	041a      	lsls	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4413      	add	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80046a4:	4b86      	ldr	r3, [pc, #536]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	0091      	lsls	r1, r2, #2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046be:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	041a      	lsls	r2, r3, #16
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4413      	add	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80046ec:	4b74      	ldr	r3, [pc, #464]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	0091      	lsls	r1, r2, #2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004706:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470e:	041a      	lsls	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004734:	4b62      	ldr	r3, [pc, #392]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	0091      	lsls	r1, r2, #2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004760:	4b57      	ldr	r3, [pc, #348]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004762:	4013      	ands	r3, r2
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	0091      	lsls	r1, r2, #2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	430b      	orrs	r3, r1
 800476e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800477a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	041a      	lsls	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4413      	add	r3, r2
 8004798:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80047a2:	4b47      	ldr	r3, [pc, #284]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0091      	lsls	r1, r2, #2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	430b      	orrs	r3, r1
 80047b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047bc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	041a      	lsls	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047d8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e0:	061a      	lsls	r2, r3, #24
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f0:	4b34      	ldr	r3, [pc, #208]	@ (80048c4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80047f2:	4413      	add	r3, r2
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	4a04      	ldr	r2, [pc, #16]	@ (80048c8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d915      	bls.n	80048e8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80048bc:	e006      	b.n	80048cc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80048be:	bf00      	nop
 80048c0:	ffff0003 	.word	0xffff0003
 80048c4:	10002b00 	.word	0x10002b00
 80048c8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2203      	movs	r2, #3
 80048e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e010      	b.n	800490a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e005      	b.n	80048fc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3304      	adds	r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3f3      	bcc.n	80048f0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	@ 0x24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004936:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800493e:	4313      	orrs	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e00a      	b.n	800495a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800494c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004952:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004958:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004964:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800496a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004970:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3304      	adds	r3, #4
 800499c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	3304      	adds	r3, #4
 80049a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e020      	b.n	80049f2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3303      	adds	r3, #3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3302      	adds	r3, #2
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	440b      	add	r3, r1
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049c8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3301      	adds	r3, #1
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	440b      	add	r3, r1
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049d6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	440a      	add	r2, r1
 80049de:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80049e0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3304      	adds	r3, #4
 80049ea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3304      	adds	r3, #4
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4a06      	ldr	r2, [pc, #24]	@ (8004a10 <FDCAN_CopyMessageToRAM+0xf8>)
 80049f8:	5cd3      	ldrb	r3, [r2, r3]
 80049fa:	461a      	mov	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d3d6      	bcc.n	80049b0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	3724      	adds	r7, #36	@ 0x24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	0800bbb0 	.word	0x0800bbb0

08004a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a22:	4b89      	ldr	r3, [pc, #548]	@ (8004c48 <HAL_GPIO_Init+0x234>)
 8004a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a26:	e194      	b.n	8004d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8186 	beq.w	8004d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d005      	beq.n	8004a58 <HAL_GPIO_Init+0x44>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d130      	bne.n	8004aba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a8e:	2201      	movs	r2, #1
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 0201 	and.w	r2, r3, #1
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d017      	beq.n	8004af6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d123      	bne.n	8004b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	08da      	lsrs	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3208      	adds	r2, #8
 8004b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	220f      	movs	r2, #15
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	08da      	lsrs	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3208      	adds	r2, #8
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2203      	movs	r2, #3
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0203 	and.w	r2, r3, #3
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80e0 	beq.w	8004d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c4c <HAL_GPIO_Init+0x238>)
 8004b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b92:	4a2e      	ldr	r2, [pc, #184]	@ (8004c4c <HAL_GPIO_Init+0x238>)
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_GPIO_Init+0x238>)
 8004b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004baa:	4a29      	ldr	r2, [pc, #164]	@ (8004c50 <HAL_GPIO_Init+0x23c>)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	220f      	movs	r2, #15
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	@ (8004c54 <HAL_GPIO_Init+0x240>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d052      	beq.n	8004c7c <HAL_GPIO_Init+0x268>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c58 <HAL_GPIO_Init+0x244>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d031      	beq.n	8004c42 <HAL_GPIO_Init+0x22e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c5c <HAL_GPIO_Init+0x248>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02b      	beq.n	8004c3e <HAL_GPIO_Init+0x22a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <HAL_GPIO_Init+0x24c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d025      	beq.n	8004c3a <HAL_GPIO_Init+0x226>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_GPIO_Init+0x250>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01f      	beq.n	8004c36 <HAL_GPIO_Init+0x222>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_GPIO_Init+0x254>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d019      	beq.n	8004c32 <HAL_GPIO_Init+0x21e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1a      	ldr	r2, [pc, #104]	@ (8004c6c <HAL_GPIO_Init+0x258>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_GPIO_Init+0x21a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <HAL_GPIO_Init+0x25c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00d      	beq.n	8004c2a <HAL_GPIO_Init+0x216>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a18      	ldr	r2, [pc, #96]	@ (8004c74 <HAL_GPIO_Init+0x260>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <HAL_GPIO_Init+0x212>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a17      	ldr	r2, [pc, #92]	@ (8004c78 <HAL_GPIO_Init+0x264>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_GPIO_Init+0x20e>
 8004c1e:	2309      	movs	r3, #9
 8004c20:	e02d      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c22:	230a      	movs	r3, #10
 8004c24:	e02b      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c26:	2308      	movs	r3, #8
 8004c28:	e029      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c2a:	2307      	movs	r3, #7
 8004c2c:	e027      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c2e:	2306      	movs	r3, #6
 8004c30:	e025      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c32:	2305      	movs	r3, #5
 8004c34:	e023      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c36:	2304      	movs	r3, #4
 8004c38:	e021      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e01f      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e01d      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e01b      	b.n	8004c7e <HAL_GPIO_Init+0x26a>
 8004c46:	bf00      	nop
 8004c48:	58000080 	.word	0x58000080
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	58000400 	.word	0x58000400
 8004c54:	58020000 	.word	0x58020000
 8004c58:	58020400 	.word	0x58020400
 8004c5c:	58020800 	.word	0x58020800
 8004c60:	58020c00 	.word	0x58020c00
 8004c64:	58021000 	.word	0x58021000
 8004c68:	58021400 	.word	0x58021400
 8004c6c:	58021800 	.word	0x58021800
 8004c70:	58021c00 	.word	0x58021c00
 8004c74:	58022000 	.word	0x58022000
 8004c78:	58022400 	.word	0x58022400
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	f002 0203 	and.w	r2, r2, #3
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	4093      	lsls	r3, r2
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8e:	4938      	ldr	r1, [pc, #224]	@ (8004d70 <HAL_GPIO_Init+0x35c>)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f ae63 	bne.w	8004a28 <HAL_GPIO_Init+0x14>
  }
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	3724      	adds	r7, #36	@ 0x24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	58000400 	.word	0x58000400

08004d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e001      	b.n	8004d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004db4:	787b      	ldrb	r3, [r7, #1]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004dc0:	e003      	b.n	8004dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004de0:	4b19      	ldr	r3, [pc, #100]	@ (8004e48 <HAL_PWREx_ConfigSupply+0x70>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d00a      	beq.n	8004e02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004dec:	4b16      	ldr	r3, [pc, #88]	@ (8004e48 <HAL_PWREx_ConfigSupply+0x70>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d001      	beq.n	8004dfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01f      	b.n	8004e3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e01d      	b.n	8004e3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e02:	4b11      	ldr	r3, [pc, #68]	@ (8004e48 <HAL_PWREx_ConfigSupply+0x70>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 0207 	bic.w	r2, r3, #7
 8004e0a:	490f      	ldr	r1, [pc, #60]	@ (8004e48 <HAL_PWREx_ConfigSupply+0x70>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e12:	f7fd fda3 	bl	800295c <HAL_GetTick>
 8004e16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e18:	e009      	b.n	8004e2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e1a:	f7fd fd9f 	bl	800295c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e28:	d901      	bls.n	8004e2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e007      	b.n	8004e3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e2e:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <HAL_PWREx_ConfigSupply+0x70>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3a:	d1ee      	bne.n	8004e1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	58024800 	.word	0x58024800

08004e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	@ 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f000 bc48 	b.w	80056f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8088 	beq.w	8004f7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	4b99      	ldr	r3, [pc, #612]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e78:	4b96      	ldr	r3, [pc, #600]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d007      	beq.n	8004e94 <HAL_RCC_OscConfig+0x48>
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	2b18      	cmp	r3, #24
 8004e88:	d111      	bne.n	8004eae <HAL_RCC_OscConfig+0x62>
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4b8f      	ldr	r3, [pc, #572]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d06d      	beq.n	8004f7c <HAL_RCC_OscConfig+0x130>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d169      	bne.n	8004f7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f000 bc21 	b.w	80056f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x7a>
 8004eb8:	4b86      	ldr	r3, [pc, #536]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a85      	ldr	r2, [pc, #532]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e02e      	b.n	8004f24 <HAL_RCC_OscConfig+0xd8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x9c>
 8004ece:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a80      	ldr	r2, [pc, #512]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b7e      	ldr	r3, [pc, #504]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7d      	ldr	r2, [pc, #500]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e01d      	b.n	8004f24 <HAL_RCC_OscConfig+0xd8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0xc0>
 8004ef2:	4b78      	ldr	r3, [pc, #480]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a77      	ldr	r2, [pc, #476]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b75      	ldr	r3, [pc, #468]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a74      	ldr	r2, [pc, #464]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0xd8>
 8004f0c:	4b71      	ldr	r3, [pc, #452]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a70      	ldr	r2, [pc, #448]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b6e      	ldr	r3, [pc, #440]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6d      	ldr	r2, [pc, #436]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fd16 	bl	800295c <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fd fd12 	bl	800295c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	@ 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e3d4      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f46:	4b63      	ldr	r3, [pc, #396]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0xe8>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fd02 	bl	800295c <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fd fcfe 	bl	800295c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	@ 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e3c0      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f6e:	4b59      	ldr	r3, [pc, #356]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x110>
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80ca 	beq.w	8005120 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8c:	4b51      	ldr	r3, [pc, #324]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f96:	4b4f      	ldr	r3, [pc, #316]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x166>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2b18      	cmp	r3, #24
 8004fa6:	d156      	bne.n	8005056 <HAL_RCC_OscConfig+0x20a>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d151      	bne.n	8005056 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb2:	4b48      	ldr	r3, [pc, #288]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_RCC_OscConfig+0x17e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e392      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fca:	4b42      	ldr	r3, [pc, #264]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 0219 	bic.w	r2, r3, #25
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	493f      	ldr	r1, [pc, #252]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fcbe 	bl	800295c <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fcba 	bl	800295c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e37c      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ff6:	4b37      	ldr	r3, [pc, #220]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005002:	f7fd fcb7 	bl	8002974 <HAL_GetREVID>
 8005006:	4603      	mov	r3, r0
 8005008:	f241 0203 	movw	r2, #4099	@ 0x1003
 800500c:	4293      	cmp	r3, r2
 800500e:	d817      	bhi.n	8005040 <HAL_RCC_OscConfig+0x1f4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b40      	cmp	r3, #64	@ 0x40
 8005016:	d108      	bne.n	800502a <HAL_RCC_OscConfig+0x1de>
 8005018:	4b2e      	ldr	r3, [pc, #184]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005020:	4a2c      	ldr	r2, [pc, #176]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005026:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005028:	e07a      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b2a      	ldr	r3, [pc, #168]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	031b      	lsls	r3, r3, #12
 8005038:	4926      	ldr	r1, [pc, #152]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 800503a:	4313      	orrs	r3, r2
 800503c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503e:	e06f      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005040:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	4921      	ldr	r1, [pc, #132]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005054:	e064      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d047      	beq.n	80050ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800505e:	4b1d      	ldr	r3, [pc, #116]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0219 	bic.w	r2, r3, #25
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	491a      	ldr	r1, [pc, #104]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fc74 	bl	800295c <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005078:	f7fd fc70 	bl	800295c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e332      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	f7fd fc6d 	bl	8002974 <HAL_GetREVID>
 800509a:	4603      	mov	r3, r0
 800509c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d819      	bhi.n	80050d8 <HAL_RCC_OscConfig+0x28c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d108      	bne.n	80050be <HAL_RCC_OscConfig+0x272>
 80050ac:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050b4:	4a07      	ldr	r2, [pc, #28]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ba:	6053      	str	r3, [r2, #4]
 80050bc:	e030      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
 80050be:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	031b      	lsls	r3, r3, #12
 80050cc:	4901      	ldr	r1, [pc, #4]	@ (80050d4 <HAL_RCC_OscConfig+0x288>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	604b      	str	r3, [r1, #4]
 80050d2:	e025      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
 80050d4:	58024400 	.word	0x58024400
 80050d8:	4b9a      	ldr	r3, [pc, #616]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	4997      	ldr	r1, [pc, #604]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
 80050ec:	e018      	b.n	8005120 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ee:	4b95      	ldr	r3, [pc, #596]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a94      	ldr	r2, [pc, #592]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fc2f 	bl	800295c <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fd fc2b 	bl	800295c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e2ed      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005114:	4b8b      	ldr	r3, [pc, #556]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80a9 	beq.w	8005280 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800512e:	4b85      	ldr	r3, [pc, #532]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005136:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005138:	4b82      	ldr	r3, [pc, #520]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d007      	beq.n	8005154 <HAL_RCC_OscConfig+0x308>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b18      	cmp	r3, #24
 8005148:	d13a      	bne.n	80051c0 <HAL_RCC_OscConfig+0x374>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d135      	bne.n	80051c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005154:	4b7b      	ldr	r3, [pc, #492]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_OscConfig+0x320>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e2c1      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800516c:	f7fd fc02 	bl	8002974 <HAL_GetREVID>
 8005170:	4603      	mov	r3, r0
 8005172:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005176:	4293      	cmp	r3, r2
 8005178:	d817      	bhi.n	80051aa <HAL_RCC_OscConfig+0x35e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	2b20      	cmp	r3, #32
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x348>
 8005182:	4b70      	ldr	r3, [pc, #448]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800518a:	4a6e      	ldr	r2, [pc, #440]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 800518c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005190:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005192:	e075      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005194:	4b6b      	ldr	r3, [pc, #428]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	069b      	lsls	r3, r3, #26
 80051a2:	4968      	ldr	r1, [pc, #416]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051a8:	e06a      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051aa:	4b66      	ldr	r3, [pc, #408]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	4962      	ldr	r1, [pc, #392]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051be:	e05f      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d042      	beq.n	800524e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd fbc2 	bl	800295c <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051dc:	f7fd fbbe 	bl	800295c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e280      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051ee:	4b55      	ldr	r3, [pc, #340]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051fa:	f7fd fbbb 	bl	8002974 <HAL_GetREVID>
 80051fe:	4603      	mov	r3, r0
 8005200:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005204:	4293      	cmp	r3, r2
 8005206:	d817      	bhi.n	8005238 <HAL_RCC_OscConfig+0x3ec>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	2b20      	cmp	r3, #32
 800520e:	d108      	bne.n	8005222 <HAL_RCC_OscConfig+0x3d6>
 8005210:	4b4c      	ldr	r3, [pc, #304]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005218:	4a4a      	ldr	r2, [pc, #296]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 800521a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800521e:	6053      	str	r3, [r2, #4]
 8005220:	e02e      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
 8005222:	4b48      	ldr	r3, [pc, #288]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	069b      	lsls	r3, r3, #26
 8005230:	4944      	ldr	r1, [pc, #272]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
 8005236:	e023      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
 8005238:	4b42      	ldr	r3, [pc, #264]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	493f      	ldr	r1, [pc, #252]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	60cb      	str	r3, [r1, #12]
 800524c:	e018      	b.n	8005280 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800524e:	4b3d      	ldr	r3, [pc, #244]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3c      	ldr	r2, [pc, #240]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fd fb7f 	bl	800295c <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005262:	f7fd fb7b 	bl	800295c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e23d      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005274:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d036      	beq.n	80052fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d019      	beq.n	80052c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005294:	4b2b      	ldr	r3, [pc, #172]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005298:	4a2a      	ldr	r2, [pc, #168]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a0:	f7fd fb5c 	bl	800295c <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fd fb58 	bl	800295c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e21a      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ba:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x45c>
 80052c6:	e018      	b.n	80052fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80052ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fd fb42 	bl	800295c <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fd fb3e 	bl	800295c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e200      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 80052f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d039      	beq.n	800537a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01c      	beq.n	8005348 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005314:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800531a:	f7fd fb1f 	bl	800295c <HAL_GetTick>
 800531e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005322:	f7fd fb1b 	bl	800295c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1dd      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005334:	4b03      	ldr	r3, [pc, #12]	@ (8005344 <HAL_RCC_OscConfig+0x4f8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x4d6>
 8005340:	e01b      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
 8005342:	bf00      	nop
 8005344:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005348:	4b9b      	ldr	r3, [pc, #620]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a9a      	ldr	r2, [pc, #616]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800534e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005352:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005354:	f7fd fb02 	bl	800295c <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800535c:	f7fd fafe 	bl	800295c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1c0      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800536e:	4b92      	ldr	r3, [pc, #584]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8081 	beq.w	800548a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005388:	4b8c      	ldr	r3, [pc, #560]	@ (80055bc <HAL_RCC_OscConfig+0x770>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a8b      	ldr	r2, [pc, #556]	@ (80055bc <HAL_RCC_OscConfig+0x770>)
 800538e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005394:	f7fd fae2 	bl	800295c <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd fade 	bl	800295c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	@ 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1a0      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ae:	4b83      	ldr	r3, [pc, #524]	@ (80055bc <HAL_RCC_OscConfig+0x770>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d106      	bne.n	80053d0 <HAL_RCC_OscConfig+0x584>
 80053c2:	4b7d      	ldr	r3, [pc, #500]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	4a7c      	ldr	r2, [pc, #496]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ce:	e02d      	b.n	800542c <HAL_RCC_OscConfig+0x5e0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x5a6>
 80053d8:	4b77      	ldr	r3, [pc, #476]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	4a76      	ldr	r2, [pc, #472]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e4:	4b74      	ldr	r3, [pc, #464]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	4a73      	ldr	r2, [pc, #460]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053ea:	f023 0304 	bic.w	r3, r3, #4
 80053ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f0:	e01c      	b.n	800542c <HAL_RCC_OscConfig+0x5e0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x5c8>
 80053fa:	4b6f      	ldr	r3, [pc, #444]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	4a6e      	ldr	r2, [pc, #440]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005400:	f043 0304 	orr.w	r3, r3, #4
 8005404:	6713      	str	r3, [r2, #112]	@ 0x70
 8005406:	4b6c      	ldr	r3, [pc, #432]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	4a6b      	ldr	r2, [pc, #428]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6713      	str	r3, [r2, #112]	@ 0x70
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0x5e0>
 8005414:	4b68      	ldr	r3, [pc, #416]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a67      	ldr	r2, [pc, #412]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005420:	4b65      	ldr	r3, [pc, #404]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	4a64      	ldr	r2, [pc, #400]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005426:	f023 0304 	bic.w	r3, r3, #4
 800542a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fd fa92 	bl	800295c <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fd fa8e 	bl	800295c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e14e      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005452:	4b59      	ldr	r3, [pc, #356]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ee      	beq.n	800543c <HAL_RCC_OscConfig+0x5f0>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fd fa7c 	bl	800295c <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005466:	e00a      	b.n	800547e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7fd fa78 	bl	800295c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e138      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800547e:	4b4e      	ldr	r3, [pc, #312]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ee      	bne.n	8005468 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 812d 	beq.w	80056ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005494:	4b48      	ldr	r3, [pc, #288]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800549c:	2b18      	cmp	r3, #24
 800549e:	f000 80bd 	beq.w	800561c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	f040 809e 	bne.w	80055e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ac:	4b42      	ldr	r3, [pc, #264]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a41      	ldr	r2, [pc, #260]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80054b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fd fa50 	bl	800295c <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c0:	f7fd fa4c 	bl	800295c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e10e      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054d2:	4b39      	ldr	r3, [pc, #228]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054de:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80054e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054e2:	4b37      	ldr	r3, [pc, #220]	@ (80055c0 <HAL_RCC_OscConfig+0x774>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	430a      	orrs	r2, r1
 80054f2:	4931      	ldr	r1, [pc, #196]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	3b01      	subs	r3, #1
 8005508:	025b      	lsls	r3, r3, #9
 800550a:	b29b      	uxth	r3, r3
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	3b01      	subs	r3, #1
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	3b01      	subs	r3, #1
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005528:	4923      	ldr	r1, [pc, #140]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800552a:	4313      	orrs	r3, r2
 800552c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800552e:	4b22      	ldr	r3, [pc, #136]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	4a21      	ldr	r2, [pc, #132]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800553a:	4b1f      	ldr	r3, [pc, #124]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800553c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800553e:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <HAL_RCC_OscConfig+0x778>)
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005546:	00d2      	lsls	r2, r2, #3
 8005548:	491b      	ldr	r1, [pc, #108]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800554e:	4b1a      	ldr	r3, [pc, #104]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	f023 020c 	bic.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	4917      	ldr	r1, [pc, #92]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005560:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	f023 0202 	bic.w	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556c:	4912      	ldr	r1, [pc, #72]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005572:	4b11      	ldr	r3, [pc, #68]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	4a10      	ldr	r2, [pc, #64]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557e:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005596:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	4a07      	ldr	r2, [pc, #28]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a2:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <HAL_RCC_OscConfig+0x76c>)
 80055a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd f9d5 	bl	800295c <HAL_GetTick>
 80055b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055b4:	e011      	b.n	80055da <HAL_RCC_OscConfig+0x78e>
 80055b6:	bf00      	nop
 80055b8:	58024400 	.word	0x58024400
 80055bc:	58024800 	.word	0x58024800
 80055c0:	fffffc0c 	.word	0xfffffc0c
 80055c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fd f9c8 	bl	800295c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e08a      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055da:	4b47      	ldr	r3, [pc, #284]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x77c>
 80055e6:	e082      	b.n	80056ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e8:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a42      	ldr	r2, [pc, #264]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd f9b2 	bl	800295c <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fd f9ae 	bl	800295c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e070      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800560e:	4b3a      	ldr	r3, [pc, #232]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x7b0>
 800561a:	e068      	b.n	80056ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800561c:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005622:	4b35      	ldr	r3, [pc, #212]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	2b01      	cmp	r3, #1
 800562e:	d031      	beq.n	8005694 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f003 0203 	and.w	r2, r3, #3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d12a      	bne.n	8005694 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d122      	bne.n	8005694 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d11a      	bne.n	8005694 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0a5b      	lsrs	r3, r3, #9
 8005662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d111      	bne.n	8005694 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d108      	bne.n	8005694 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e02b      	b.n	80056f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005698:	4b17      	ldr	r3, [pc, #92]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 800569a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d01f      	beq.n	80056ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	4a11      	ldr	r2, [pc, #68]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056ba:	f7fd f94f 	bl	800295c <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056c0:	bf00      	nop
 80056c2:	f7fd f94b 	bl	800295c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d0f9      	beq.n	80056c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056ce:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d2:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <HAL_RCC_OscConfig+0x8b0>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056da:	00d2      	lsls	r2, r2, #3
 80056dc:	4906      	ldr	r1, [pc, #24]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056e2:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	4a04      	ldr	r2, [pc, #16]	@ (80056f8 <HAL_RCC_OscConfig+0x8ac>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3730      	adds	r7, #48	@ 0x30
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	58024400 	.word	0x58024400
 80056fc:	ffff0007 	.word	0xffff0007

08005700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e19c      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b8a      	ldr	r3, [pc, #552]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d910      	bls.n	8005744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b87      	ldr	r3, [pc, #540]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 020f 	bic.w	r2, r3, #15
 800572a:	4985      	ldr	r1, [pc, #532]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b83      	ldr	r3, [pc, #524]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e184      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	4b7b      	ldr	r3, [pc, #492]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800575c:	429a      	cmp	r2, r3
 800575e:	d908      	bls.n	8005772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005760:	4b78      	ldr	r3, [pc, #480]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	4975      	ldr	r1, [pc, #468]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800576e:	4313      	orrs	r3, r2
 8005770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	4b70      	ldr	r3, [pc, #448]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800578a:	429a      	cmp	r2, r3
 800578c:	d908      	bls.n	80057a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800578e:	4b6d      	ldr	r3, [pc, #436]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	496a      	ldr	r1, [pc, #424]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800579c:	4313      	orrs	r3, r2
 800579e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b64      	ldr	r3, [pc, #400]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d908      	bls.n	80057ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057bc:	4b61      	ldr	r3, [pc, #388]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	495e      	ldr	r1, [pc, #376]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	4b59      	ldr	r3, [pc, #356]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d908      	bls.n	80057fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057ea:	4b56      	ldr	r3, [pc, #344]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4953      	ldr	r1, [pc, #332]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d010      	beq.n	800582a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	4b4d      	ldr	r3, [pc, #308]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	429a      	cmp	r2, r3
 8005816:	d908      	bls.n	800582a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005818:	4b4a      	ldr	r3, [pc, #296]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f023 020f 	bic.w	r2, r3, #15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4947      	ldr	r1, [pc, #284]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005826:	4313      	orrs	r3, r2
 8005828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d055      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005836:	4b43      	ldr	r3, [pc, #268]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	4940      	ldr	r1, [pc, #256]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005844:	4313      	orrs	r3, r2
 8005846:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d107      	bne.n	8005860 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005850:	4b3c      	ldr	r3, [pc, #240]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d121      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0f6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d107      	bne.n	8005878 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d115      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0ea      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005880:	4b30      	ldr	r3, [pc, #192]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0de      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005890:	4b2c      	ldr	r3, [pc, #176]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0d6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a0:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f023 0207 	bic.w	r2, r3, #7
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4925      	ldr	r1, [pc, #148]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fd f853 	bl	800295c <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ba:	f7fd f84f 	bl	800295c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0be      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	429a      	cmp	r2, r3
 80058e0:	d1eb      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d208      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fe:	4b11      	ldr	r3, [pc, #68]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f023 020f 	bic.w	r2, r3, #15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	490e      	ldr	r1, [pc, #56]	@ (8005944 <HAL_RCC_ClockConfig+0x244>)
 800590c:	4313      	orrs	r3, r2
 800590e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d214      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 020f 	bic.w	r2, r3, #15
 8005926:	4906      	ldr	r1, [pc, #24]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d005      	beq.n	8005948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e086      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
 8005940:	52002000 	.word	0x52002000
 8005944:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	4b3f      	ldr	r3, [pc, #252]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005960:	429a      	cmp	r2, r3
 8005962:	d208      	bcs.n	8005976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005964:	4b3c      	ldr	r3, [pc, #240]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4939      	ldr	r1, [pc, #228]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005972:	4313      	orrs	r3, r2
 8005974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d010      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	4b34      	ldr	r3, [pc, #208]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800598e:	429a      	cmp	r2, r3
 8005990:	d208      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005992:	4b31      	ldr	r3, [pc, #196]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	492e      	ldr	r1, [pc, #184]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	4b28      	ldr	r3, [pc, #160]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059bc:	429a      	cmp	r2, r3
 80059be:	d208      	bcs.n	80059d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059c0:	4b25      	ldr	r3, [pc, #148]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	4922      	ldr	r1, [pc, #136]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d208      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4917      	ldr	r1, [pc, #92]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a00:	f000 f834 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4912      	ldr	r1, [pc, #72]	@ (8005a5c <HAL_RCC_ClockConfig+0x35c>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a0d      	ldr	r2, [pc, #52]	@ (8005a5c <HAL_RCC_ClockConfig+0x35c>)
 8005a28:	5cd3      	ldrb	r3, [r2, r3]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	4a0a      	ldr	r2, [pc, #40]	@ (8005a60 <HAL_RCC_ClockConfig+0x360>)
 8005a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a38:	4a0a      	ldr	r2, [pc, #40]	@ (8005a64 <HAL_RCC_ClockConfig+0x364>)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <HAL_RCC_ClockConfig+0x368>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc ff40 	bl	80028c8 <HAL_InitTick>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	0800bba0 	.word	0x0800bba0
 8005a60:	24000004 	.word	0x24000004
 8005a64:	24000000 	.word	0x24000000
 8005a68:	24000008 	.word	0x24000008

08005a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	@ 0x24
 8005a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a72:	4bb3      	ldr	r3, [pc, #716]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a7a:	2b18      	cmp	r3, #24
 8005a7c:	f200 8155 	bhi.w	8005d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aed 	.word	0x08005aed
 8005a8c:	08005d2b 	.word	0x08005d2b
 8005a90:	08005d2b 	.word	0x08005d2b
 8005a94:	08005d2b 	.word	0x08005d2b
 8005a98:	08005d2b 	.word	0x08005d2b
 8005a9c:	08005d2b 	.word	0x08005d2b
 8005aa0:	08005d2b 	.word	0x08005d2b
 8005aa4:	08005d2b 	.word	0x08005d2b
 8005aa8:	08005b13 	.word	0x08005b13
 8005aac:	08005d2b 	.word	0x08005d2b
 8005ab0:	08005d2b 	.word	0x08005d2b
 8005ab4:	08005d2b 	.word	0x08005d2b
 8005ab8:	08005d2b 	.word	0x08005d2b
 8005abc:	08005d2b 	.word	0x08005d2b
 8005ac0:	08005d2b 	.word	0x08005d2b
 8005ac4:	08005d2b 	.word	0x08005d2b
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005d2b 	.word	0x08005d2b
 8005ad0:	08005d2b 	.word	0x08005d2b
 8005ad4:	08005d2b 	.word	0x08005d2b
 8005ad8:	08005d2b 	.word	0x08005d2b
 8005adc:	08005d2b 	.word	0x08005d2b
 8005ae0:	08005d2b 	.word	0x08005d2b
 8005ae4:	08005d2b 	.word	0x08005d2b
 8005ae8:	08005b1f 	.word	0x08005b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aec:	4b94      	ldr	r3, [pc, #592]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af8:	4b91      	ldr	r3, [pc, #580]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	4a90      	ldr	r2, [pc, #576]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b0a:	e111      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b0e:	61bb      	str	r3, [r7, #24]
      break;
 8005b10:	e10e      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b12:	4b8d      	ldr	r3, [pc, #564]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b14:	61bb      	str	r3, [r7, #24]
      break;
 8005b16:	e10b      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b18:	4b8c      	ldr	r3, [pc, #560]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b1a:	61bb      	str	r3, [r7, #24]
      break;
 8005b1c:	e108      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b1e:	4b88      	ldr	r3, [pc, #544]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b28:	4b85      	ldr	r3, [pc, #532]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b34:	4b82      	ldr	r3, [pc, #520]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b3e:	4b80      	ldr	r3, [pc, #512]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80e1 	beq.w	8005d24 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	f000 8083 	beq.w	8005c70 <HAL_RCC_GetSysClockFreq+0x204>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	f200 80a1 	bhi.w	8005cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x114>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d056      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b7e:	e099      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b80:	4b6f      	ldr	r3, [pc, #444]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	4a6b      	ldr	r2, [pc, #428]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b62      	ldr	r3, [pc, #392]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005be6:	e087      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b51      	ldr	r3, [pc, #324]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c2a:	e065      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c6e:	e043      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b2f      	ldr	r3, [pc, #188]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cb2:	e021      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d02:	3301      	adds	r3, #1
 8005d04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1c:	ee17 3a90 	vmov	r3, s15
 8005d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
      break;
 8005d28:	e002      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d2a:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d2c:	61bb      	str	r3, [r7, #24]
      break;
 8005d2e:	bf00      	nop
  }

  return sysclockfreq;
 8005d30:	69bb      	ldr	r3, [r7, #24]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3724      	adds	r7, #36	@ 0x24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400
 8005d44:	03d09000 	.word	0x03d09000
 8005d48:	003d0900 	.word	0x003d0900
 8005d4c:	017d7840 	.word	0x017d7840
 8005d50:	46000000 	.word	0x46000000
 8005d54:	4c742400 	.word	0x4c742400
 8005d58:	4a742400 	.word	0x4a742400
 8005d5c:	4bbebc20 	.word	0x4bbebc20

08005d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d66:	f7ff fe81 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b10      	ldr	r3, [pc, #64]	@ (8005db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	490f      	ldr	r1, [pc, #60]	@ (8005db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d78:	5ccb      	ldrb	r3, [r1, r3]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d84:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d8e:	5cd3      	ldrb	r3, [r2, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	4a07      	ldr	r2, [pc, #28]	@ (8005db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d9e:	4a07      	ldr	r2, [pc, #28]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005da4:	4b04      	ldr	r3, [pc, #16]	@ (8005db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005da6:	681b      	ldr	r3, [r3, #0]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	58024400 	.word	0x58024400
 8005db4:	0800bba0 	.word	0x0800bba0
 8005db8:	24000004 	.word	0x24000004
 8005dbc:	24000000 	.word	0x24000000

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dc4:	f7ff ffcc 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4904      	ldr	r1, [pc, #16]	@ (8005de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	58024400 	.word	0x58024400
 8005de8:	0800bba0 	.word	0x0800bba0

08005dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005df0:	f7ff ffb6 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4904      	ldr	r1, [pc, #16]	@ (8005e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58024400 	.word	0x58024400
 8005e14:	0800bba0 	.word	0x0800bba0

08005e18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b0ca      	sub	sp, #296	@ 0x128
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e42:	d049      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e4e:	d02f      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e54:	d828      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e5a:	d01a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e60:	d822      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e6a:	d007      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e6c:	e01c      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6e:	4bb8      	ldr	r3, [pc, #736]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	4ab7      	ldr	r2, [pc, #732]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e7a:	e01a      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e80:	3308      	adds	r3, #8
 8005e82:	2102      	movs	r1, #2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 fc8f 	bl	80077a8 <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e90:	e00f      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e96:	3328      	adds	r3, #40	@ 0x28
 8005e98:	2102      	movs	r1, #2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fd36 	bl	800790c <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005eba:	4ba5      	ldr	r3, [pc, #660]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec8:	4aa1      	ldr	r2, [pc, #644]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	ea58 0309 	orrs.w	r3, r8, r9
 8005eec:	d047      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d82a      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8005f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f15 	.word	0x08005f15
 8005f04:	08005f23 	.word	0x08005f23
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f57 	.word	0x08005f57
 8005f10:	08005f57 	.word	0x08005f57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f14:	4b8e      	ldr	r3, [pc, #568]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4a8d      	ldr	r2, [pc, #564]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f20:	e01a      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	3308      	adds	r3, #8
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fc3c 	bl	80077a8 <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f36:	e00f      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	3328      	adds	r3, #40	@ 0x28
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fce3 	bl	800790c <RCCEx_PLL3_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e004      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f60:	4b7b      	ldr	r3, [pc, #492]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f64:	f023 0107 	bic.w	r1, r3, #7
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	4a78      	ldr	r2, [pc, #480]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005f8a:	f04f 0b00 	mov.w	fp, #0
 8005f8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f92:	d04c      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9e:	d030      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa4:	d829      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fa8:	d02d      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fac:	d825      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fae:	2b80      	cmp	r3, #128	@ 0x80
 8005fb0:	d018      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005fb2:	2b80      	cmp	r3, #128	@ 0x80
 8005fb4:	d821      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005fba:	2b40      	cmp	r3, #64	@ 0x40
 8005fbc:	d007      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005fbe:	e01c      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	4a62      	ldr	r2, [pc, #392]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005fcc:	e01c      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fbe6 	bl	80077a8 <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005fe2:	e011      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	3328      	adds	r3, #40	@ 0x28
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 fc8d 	bl	800790c <RCCEx_PLL3_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ff8:	e006      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006000:	e002      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006010:	4b4f      	ldr	r3, [pc, #316]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006014:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601e:	4a4c      	ldr	r2, [pc, #304]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006020:	430b      	orrs	r3, r1
 8006022:	6513      	str	r3, [r2, #80]	@ 0x50
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800603a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006044:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006048:	460b      	mov	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	d053      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006056:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800605a:	d035      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800605c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006060:	d82e      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006062:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006066:	d031      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006068:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800606c:	d828      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800606e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006072:	d01a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006078:	d822      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800607e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006082:	d007      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006084:	e01c      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006086:	4b32      	ldr	r3, [pc, #200]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608a:	4a31      	ldr	r2, [pc, #196]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800608c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006092:	e01c      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	3308      	adds	r3, #8
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f001 fb83 	bl	80077a8 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060a8:	e011      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	3328      	adds	r3, #40	@ 0x28
 80060b0:	2100      	movs	r1, #0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fc2a 	bl	800790c <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060be:	e006      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006102:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800610c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d056      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800611e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006122:	d038      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006128:	d831      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800612a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800612e:	d034      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006134:	d82b      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800613a:	d01d      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800613c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006140:	d825      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800614c:	e01f      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800614e:	bf00      	nop
 8006150:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006154:	4ba2      	ldr	r3, [pc, #648]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4aa1      	ldr	r2, [pc, #644]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800615a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006160:	e01c      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	3308      	adds	r3, #8
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fb1c 	bl	80077a8 <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006176:	e011      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fbc3 	bl	800790c <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006194:	e002      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061a4:	4b8e      	ldr	r3, [pc, #568]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061b4:	4a8a      	ldr	r2, [pc, #552]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b6:	430b      	orrs	r3, r1
 80061b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ba:	e003      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80061d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d03a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	2b30      	cmp	r3, #48	@ 0x30
 80061ec:	d01f      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80061ee:	2b30      	cmp	r3, #48	@ 0x30
 80061f0:	d819      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d00c      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d815      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d019      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d111      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006202:	4b77      	ldr	r3, [pc, #476]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	4a76      	ldr	r2, [pc, #472]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800620c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800620e:	e011      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	3308      	adds	r3, #8
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fac5 	bl	80077a8 <RCCEx_PLL2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800622c:	e002      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800622e:	bf00      	nop
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800623c:	4b68      	ldr	r3, [pc, #416]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800623e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006240:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	4a65      	ldr	r2, [pc, #404]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800624c:	430b      	orrs	r3, r1
 800624e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006250:	e003      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006266:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006270:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006274:	460b      	mov	r3, r1
 8006276:	4313      	orrs	r3, r2
 8006278:	d051      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006284:	d035      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800628a:	d82e      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800628c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006290:	d031      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006292:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006296:	d828      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629c:	d01a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800629e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a2:	d822      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ac:	d007      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062ae:	e01c      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b0:	4b4b      	ldr	r3, [pc, #300]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	4a4a      	ldr	r2, [pc, #296]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062bc:	e01c      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	3308      	adds	r3, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fa6e 	bl	80077a8 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062d2:	e011      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	3328      	adds	r3, #40	@ 0x28
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fb15 	bl	800790c <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062e8:	e006      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80062f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006300:	4b37      	ldr	r3, [pc, #220]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006304:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630e:	4a34      	ldr	r2, [pc, #208]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006310:	430b      	orrs	r3, r1
 8006312:	6513      	str	r3, [r2, #80]	@ 0x50
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800632a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006334:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d056      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006348:	d033      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800634a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800634e:	d82c      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006350:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006354:	d02f      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006356:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800635a:	d826      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800635c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006360:	d02b      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006362:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006366:	d820      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636c:	d012      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800636e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006372:	d81a      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d022      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637c:	d115      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	3308      	adds	r3, #8
 8006384:	2101      	movs	r1, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f001 fa0e 	bl	80077a8 <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006392:	e015      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	3328      	adds	r3, #40	@ 0x28
 800639a:	2101      	movs	r1, #1
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fab5 	bl	800790c <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063a8:	e00a      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063b0:	e006      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063b2:	bf00      	nop
 80063b4:	e004      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d6:	4a02      	ldr	r2, [pc, #8]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6513      	str	r3, [r2, #80]	@ 0x50
 80063dc:	e006      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006402:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d055      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006418:	d033      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800641a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800641e:	d82c      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006424:	d02f      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d826      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800642c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006430:	d02b      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006432:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006436:	d820      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800643c:	d012      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800643e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006442:	d81a      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800644c:	d115      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	3308      	adds	r3, #8
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f9a6 	bl	80077a8 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006462:	e015      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006468:	3328      	adds	r3, #40	@ 0x28
 800646a:	2101      	movs	r1, #1
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fa4d 	bl	800790c <RCCEx_PLL3_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006478:	e00a      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006480:	e006      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800648e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006498:	4ba3      	ldr	r3, [pc, #652]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064a8:	4a9f      	ldr	r2, [pc, #636]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ae:	e003      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80064c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d037      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e2:	d00e      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80064e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e8:	d816      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80064ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f2:	d111      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a8b      	ldr	r2, [pc, #556]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006500:	e00f      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	3308      	adds	r3, #8
 8006508:	2101      	movs	r1, #1
 800650a:	4618      	mov	r0, r3
 800650c:	f001 f94c 	bl	80077a8 <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006516:	e004      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800652a:	4b7f      	ldr	r3, [pc, #508]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006538:	4a7b      	ldr	r2, [pc, #492]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653a:	430b      	orrs	r3, r1
 800653c:	6513      	str	r3, [r2, #80]	@ 0x50
 800653e:	e003      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800655e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d039      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656e:	2b03      	cmp	r3, #3
 8006570:	d81c      	bhi.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006572:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065b5 	.word	0x080065b5
 800657c:	08006589 	.word	0x08006589
 8006580:	08006597 	.word	0x08006597
 8006584:	080065b5 	.word	0x080065b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006588:	4b67      	ldr	r3, [pc, #412]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	4a66      	ldr	r2, [pc, #408]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800658e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006594:	e00f      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	3308      	adds	r3, #8
 800659c:	2102      	movs	r1, #2
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 f902 	bl	80077a8 <RCCEx_PLL2_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065aa:	e004      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80065b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065be:	4b5a      	ldr	r3, [pc, #360]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065c2:	f023 0103 	bic.w	r1, r3, #3
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065cc:	4a56      	ldr	r2, [pc, #344]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ce:	430b      	orrs	r3, r1
 80065d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80065e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065ec:	2300      	movs	r3, #0
 80065ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f000 809f 	beq.w	800673c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065fe:	4b4b      	ldr	r3, [pc, #300]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4a      	ldr	r2, [pc, #296]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006608:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800660a:	f7fc f9a7 	bl	800295c <HAL_GetTick>
 800660e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006612:	e00b      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006614:	f7fc f9a2 	bl	800295c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	@ 0x64
 8006622:	d903      	bls.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800662a:	e005      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800662c:	4b3f      	ldr	r3, [pc, #252]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0ed      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663c:	2b00      	cmp	r3, #0
 800663e:	d179      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006640:	4b39      	ldr	r3, [pc, #228]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006642:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800664c:	4053      	eors	r3, r2
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d015      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006656:	4b34      	ldr	r3, [pc, #208]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006662:	4b31      	ldr	r3, [pc, #196]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006666:	4a30      	ldr	r2, [pc, #192]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800666e:	4b2e      	ldr	r3, [pc, #184]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006672:	4a2d      	ldr	r2, [pc, #180]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006678:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800667a:	4a2b      	ldr	r2, [pc, #172]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800667c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006680:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d118      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fc f964 	bl	800295c <HAL_GetTick>
 8006694:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006698:	e00d      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fc f95f 	bl	800295c <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80066a4:	1ad2      	subs	r2, r2, r3
 80066a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80066b4:	e005      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0eb      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80066c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d129      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066da:	d10e      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80066dc:	4b12      	ldr	r3, [pc, #72]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066ec:	091a      	lsrs	r2, r3, #4
 80066ee:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6113      	str	r3, [r2, #16]
 80066f8:	e005      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80066fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006700:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006704:	6113      	str	r3, [r2, #16]
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006708:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006716:	4a04      	ldr	r2, [pc, #16]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006718:	430b      	orrs	r3, r1
 800671a:	6713      	str	r3, [r2, #112]	@ 0x70
 800671c:	e00e      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800671e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006726:	e009      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006728:	58024400 	.word	0x58024400
 800672c:	58024800 	.word	0x58024800
 8006730:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f002 0301 	and.w	r3, r2, #1
 8006748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006752:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006756:	460b      	mov	r3, r1
 8006758:	4313      	orrs	r3, r2
 800675a:	f000 8089 	beq.w	8006870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006764:	2b28      	cmp	r3, #40	@ 0x28
 8006766:	d86b      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006768:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006849 	.word	0x08006849
 8006774:	08006841 	.word	0x08006841
 8006778:	08006841 	.word	0x08006841
 800677c:	08006841 	.word	0x08006841
 8006780:	08006841 	.word	0x08006841
 8006784:	08006841 	.word	0x08006841
 8006788:	08006841 	.word	0x08006841
 800678c:	08006841 	.word	0x08006841
 8006790:	08006815 	.word	0x08006815
 8006794:	08006841 	.word	0x08006841
 8006798:	08006841 	.word	0x08006841
 800679c:	08006841 	.word	0x08006841
 80067a0:	08006841 	.word	0x08006841
 80067a4:	08006841 	.word	0x08006841
 80067a8:	08006841 	.word	0x08006841
 80067ac:	08006841 	.word	0x08006841
 80067b0:	0800682b 	.word	0x0800682b
 80067b4:	08006841 	.word	0x08006841
 80067b8:	08006841 	.word	0x08006841
 80067bc:	08006841 	.word	0x08006841
 80067c0:	08006841 	.word	0x08006841
 80067c4:	08006841 	.word	0x08006841
 80067c8:	08006841 	.word	0x08006841
 80067cc:	08006841 	.word	0x08006841
 80067d0:	08006849 	.word	0x08006849
 80067d4:	08006841 	.word	0x08006841
 80067d8:	08006841 	.word	0x08006841
 80067dc:	08006841 	.word	0x08006841
 80067e0:	08006841 	.word	0x08006841
 80067e4:	08006841 	.word	0x08006841
 80067e8:	08006841 	.word	0x08006841
 80067ec:	08006841 	.word	0x08006841
 80067f0:	08006849 	.word	0x08006849
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006841 	.word	0x08006841
 8006800:	08006841 	.word	0x08006841
 8006804:	08006841 	.word	0x08006841
 8006808:	08006841 	.word	0x08006841
 800680c:	08006841 	.word	0x08006841
 8006810:	08006849 	.word	0x08006849
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	3308      	adds	r3, #8
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f000 ffc3 	bl	80077a8 <RCCEx_PLL2_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006828:	e00f      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	3328      	adds	r3, #40	@ 0x28
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f86a 	bl	800790c <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800683e:	e004      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006846:	e000      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006852:	4bbf      	ldr	r3, [pc, #764]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006856:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006860:	4abb      	ldr	r2, [pc, #748]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006862:	430b      	orrs	r3, r1
 8006864:	6553      	str	r3, [r2, #84]	@ 0x54
 8006866:	e003      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 0302 	and.w	r3, r2, #2
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006886:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d041      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006896:	2b05      	cmp	r3, #5
 8006898:	d824      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068ed 	.word	0x080068ed
 80068a4:	080068b9 	.word	0x080068b9
 80068a8:	080068cf 	.word	0x080068cf
 80068ac:	080068ed 	.word	0x080068ed
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	080068ed 	.word	0x080068ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	3308      	adds	r3, #8
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 ff71 	bl	80077a8 <RCCEx_PLL2_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068cc:	e00f      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3328      	adds	r3, #40	@ 0x28
 80068d4:	2101      	movs	r1, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f818 	bl	800790c <RCCEx_PLL3_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068f6:	4b96      	ldr	r3, [pc, #600]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fa:	f023 0107 	bic.w	r1, r3, #7
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006904:	4a92      	ldr	r2, [pc, #584]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006906:	430b      	orrs	r3, r1
 8006908:	6553      	str	r3, [r2, #84]	@ 0x54
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 0304 	and.w	r3, r2, #4
 8006920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800692a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d044      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800693c:	2b05      	cmp	r3, #5
 800693e:	d825      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006940:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006995 	.word	0x08006995
 800694c:	08006961 	.word	0x08006961
 8006950:	08006977 	.word	0x08006977
 8006954:	08006995 	.word	0x08006995
 8006958:	08006995 	.word	0x08006995
 800695c:	08006995 	.word	0x08006995
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006964:	3308      	adds	r3, #8
 8006966:	2101      	movs	r1, #1
 8006968:	4618      	mov	r0, r3
 800696a:	f000 ff1d 	bl	80077a8 <RCCEx_PLL2_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006974:	e00f      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	3328      	adds	r3, #40	@ 0x28
 800697c:	2101      	movs	r1, #1
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ffc4 	bl	800790c <RCCEx_PLL3_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800698a:	e004      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800699e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a2:	f023 0107 	bic.w	r1, r3, #7
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ae:	4a68      	ldr	r2, [pc, #416]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069b4:	e003      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f002 0320 	and.w	r3, r2, #32
 80069ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d055      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ea:	d033      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80069ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069f0:	d82c      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f6:	d02f      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d826      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80069fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a02:	d02b      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006a04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a08:	d820      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a0e:	d012      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a14:	d81a      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d022      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a1e:	d115      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	3308      	adds	r3, #8
 8006a26:	2100      	movs	r1, #0
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 febd 	bl	80077a8 <RCCEx_PLL2_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a34:	e015      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	3328      	adds	r3, #40	@ 0x28
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 ff64 	bl	800790c <RCCEx_PLL3_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a52:	e006      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a54:	bf00      	nop
 8006a56:	e004      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a6a:	4b39      	ldr	r3, [pc, #228]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	4a35      	ldr	r2, [pc, #212]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a80:	e003      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006aa0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d058      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ab2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006ab6:	d033      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006ab8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006abc:	d82c      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac2:	d02f      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac8:	d826      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006aca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ace:	d02b      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ad4:	d820      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ada:	d012      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ae0:	d81a      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d022      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aea:	d115      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	3308      	adds	r3, #8
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fe57 	bl	80077a8 <RCCEx_PLL2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b00:	e015      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	3328      	adds	r3, #40	@ 0x28
 8006b08:	2102      	movs	r1, #2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fefe 	bl	800790c <RCCEx_PLL3_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b16:	e00a      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b1e:	e006      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b20:	bf00      	nop
 8006b22:	e004      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10e      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b36:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b46:	4a02      	ldr	r2, [pc, #8]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4c:	e006      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006b4e:	bf00      	nop
 8006b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006b76:	460b      	mov	r3, r1
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	d055      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b88:	d033      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006b8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b8e:	d82c      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b94:	d02f      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b9a:	d826      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ba0:	d02b      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ba2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ba6:	d820      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bac:	d012      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bb2:	d81a      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d022      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bbc:	d115      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fdee 	bl	80077a8 <RCCEx_PLL2_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006bd2:	e015      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3328      	adds	r3, #40	@ 0x28
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fe95 	bl	800790c <RCCEx_PLL3_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006be8:	e00a      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bf0:	e006      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006bf2:	bf00      	nop
 8006bf4:	e004      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006bf6:	bf00      	nop
 8006bf8:	e002      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006bfa:	bf00      	nop
 8006bfc:	e000      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c08:	4ba1      	ldr	r3, [pc, #644]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c18:	4a9d      	ldr	r2, [pc, #628]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c1e:	e003      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f002 0308 	and.w	r3, r2, #8
 8006c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006c42:	460b      	mov	r3, r1
 8006c44:	4313      	orrs	r3, r2
 8006c46:	d01e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	3328      	adds	r3, #40	@ 0x28
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fe54 	bl	800790c <RCCEx_PLL3_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c70:	4b87      	ldr	r3, [pc, #540]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c80:	4a83      	ldr	r2, [pc, #524]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f002 0310 	and.w	r3, r2, #16
 8006c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c96:	2300      	movs	r3, #0
 8006c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d01e      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb8:	3328      	adds	r3, #40	@ 0x28
 8006cba:	2102      	movs	r1, #2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fe25 	bl	800790c <RCCEx_PLL3_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cce:	4b70      	ldr	r3, [pc, #448]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cde:	4a6c      	ldr	r2, [pc, #432]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d03e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d10:	d022      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d16:	d81b      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d00b      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006d22:	e015      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fd3b 	bl	80077a8 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d38:	e00f      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	3328      	adds	r3, #40	@ 0x28
 8006d40:	2102      	movs	r1, #2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fde2 	bl	800790c <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d4e:	e004      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d62:	4b4b      	ldr	r3, [pc, #300]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d72:	4a47      	ldr	r2, [pc, #284]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d78:	e003      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d90:	2300      	movs	r3, #0
 8006d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d03b      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006daa:	d01f      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006dac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006db0:	d818      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db6:	d003      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dbc:	d007      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006dbe:	e011      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4b33      	ldr	r3, [pc, #204]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a32      	ldr	r2, [pc, #200]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006dcc:	e00f      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3328      	adds	r3, #40	@ 0x28
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fd98 	bl	800790c <RCCEx_PLL3_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006df6:	4b26      	ldr	r3, [pc, #152]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e06:	4a22      	ldr	r2, [pc, #136]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e22:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e24:	2300      	movs	r3, #0
 8006e26:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	d034      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e40:	d007      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006e42:	e011      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e44:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	4a11      	ldr	r2, [pc, #68]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e50:	e00e      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	3308      	adds	r3, #8
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fca4 	bl	80077a8 <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e66:	e003      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10d      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e86:	4a02      	ldr	r2, [pc, #8]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e8c:	e006      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eaa:	2300      	movs	r3, #0
 8006eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006eae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d00c      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	3328      	adds	r3, #40	@ 0x28
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fd23 	bl	800790c <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ede:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ee4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4313      	orrs	r3, r2
 8006eec:	d038      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006efa:	d018      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f00:	d811      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f06:	d014      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d80b      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f16:	d106      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f18:	4bc3      	ldr	r3, [pc, #780]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	4ac2      	ldr	r2, [pc, #776]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f24:	e008      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f2c:	e004      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f40:	4bb9      	ldr	r3, [pc, #740]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f50:	4ab5      	ldr	r2, [pc, #724]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f52:	430b      	orrs	r3, r1
 8006f54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f6e:	2300      	movs	r3, #0
 8006f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	d009      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f7c:	4baa      	ldr	r3, [pc, #680]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f8a:	4aa7      	ldr	r2, [pc, #668]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	d00a      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fac:	4b9e      	ldr	r3, [pc, #632]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006fbc:	4a9a      	ldr	r2, [pc, #616]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fde:	4b92      	ldr	r3, [pc, #584]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fec:	4a8e      	ldr	r2, [pc, #568]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007000:	2300      	movs	r3, #0
 8007002:	647b      	str	r3, [r7, #68]	@ 0x44
 8007004:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800700e:	4b86      	ldr	r3, [pc, #536]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4a85      	ldr	r2, [pc, #532]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007014:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007018:	6113      	str	r3, [r2, #16]
 800701a:	4b83      	ldr	r3, [pc, #524]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800701c:	6919      	ldr	r1, [r3, #16]
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007026:	4a80      	ldr	r2, [pc, #512]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007028:	430b      	orrs	r3, r1
 800702a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800703e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d009      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007048:	4b77      	ldr	r3, [pc, #476]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800704a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007056:	4a74      	ldr	r2, [pc, #464]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007058:	430b      	orrs	r3, r1
 800705a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007068:	633b      	str	r3, [r7, #48]	@ 0x30
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
 800706e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007078:	4b6b      	ldr	r3, [pc, #428]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800707a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007088:	4a67      	ldr	r2, [pc, #412]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800708a:	430b      	orrs	r3, r1
 800708c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	2100      	movs	r1, #0
 8007098:	62b9      	str	r1, [r7, #40]	@ 0x28
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80070a4:	460b      	mov	r3, r1
 80070a6:	4313      	orrs	r3, r2
 80070a8:	d011      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	3308      	adds	r3, #8
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fb78 	bl	80077a8 <RCCEx_PLL2_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	2100      	movs	r1, #0
 80070d8:	6239      	str	r1, [r7, #32]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d011      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	3308      	adds	r3, #8
 80070f0:	2101      	movs	r1, #1
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fb58 	bl	80077a8 <RCCEx_PLL2_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	2100      	movs	r1, #0
 8007118:	61b9      	str	r1, [r7, #24]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007124:	460b      	mov	r3, r1
 8007126:	4313      	orrs	r3, r2
 8007128:	d011      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	3308      	adds	r3, #8
 8007130:	2102      	movs	r1, #2
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fb38 	bl	80077a8 <RCCEx_PLL2_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	2100      	movs	r1, #0
 8007158:	6139      	str	r1, [r7, #16]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d011      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	3328      	adds	r3, #40	@ 0x28
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fbca 	bl	800790c <RCCEx_PLL3_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800718a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	2100      	movs	r1, #0
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071a4:	460b      	mov	r3, r1
 80071a6:	4313      	orrs	r3, r2
 80071a8:	d011      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	3328      	adds	r3, #40	@ 0x28
 80071b0:	2101      	movs	r1, #1
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbaa 	bl	800790c <RCCEx_PLL3_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80071be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	2100      	movs	r1, #0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80071e4:	460b      	mov	r3, r1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d011      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	3328      	adds	r3, #40	@ 0x28
 80071f0:	2102      	movs	r1, #2
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fb8a 	bl	800790c <RCCEx_PLL3_Config>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800720e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
}
 800721c:	4618      	mov	r0, r3
 800721e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007222:	46bd      	mov	sp, r7
 8007224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007228:	58024400 	.word	0x58024400

0800722c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007230:	f7fe fd96 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4904      	ldr	r1, [pc, #16]	@ (8007254 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800724c:	4618      	mov	r0, r3
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024400 	.word	0x58024400
 8007254:	0800bba0 	.word	0x0800bba0

08007258 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	@ 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007260:	4ba1      	ldr	r3, [pc, #644]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800726a:	4b9f      	ldr	r3, [pc, #636]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726e:	0b1b      	lsrs	r3, r3, #12
 8007270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007274:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007276:	4b9c      	ldr	r3, [pc, #624]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007282:	4b99      	ldr	r3, [pc, #612]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8111 	beq.w	80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f000 8083 	beq.w	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f200 80a1 	bhi.w	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d056      	beq.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072c2:	e099      	b.n	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c4:	4b88      	ldr	r3, [pc, #544]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02d      	beq.n	800732c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d0:	4b85      	ldr	r3, [pc, #532]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	4a84      	ldr	r2, [pc, #528]	@ (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b7b      	ldr	r3, [pc, #492]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800732a:	e087      	b.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b6a      	ldr	r3, [pc, #424]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736e:	e065      	b.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b59      	ldr	r3, [pc, #356]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b2:	e043      	b.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b48      	ldr	r3, [pc, #288]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f6:	e021      	b.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b37      	ldr	r3, [pc, #220]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800743c:	4b2a      	ldr	r3, [pc, #168]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	0a5b      	lsrs	r3, r3, #9
 8007442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007456:	edd7 6a07 	vldr	s13, [r7, #28]
 800745a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007462:	ee17 2a90 	vmov	r2, s15
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800746a:	4b1f      	ldr	r3, [pc, #124]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800746c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007484:	edd7 6a07 	vldr	s13, [r7, #28]
 8007488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007490:	ee17 2a90 	vmov	r2, s15
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007498:	4b13      	ldr	r3, [pc, #76]	@ (80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074c6:	e008      	b.n	80074da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	3724      	adds	r7, #36	@ 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
 80074ec:	03d09000 	.word	0x03d09000
 80074f0:	46000000 	.word	0x46000000
 80074f4:	4c742400 	.word	0x4c742400
 80074f8:	4a742400 	.word	0x4a742400
 80074fc:	4bbebc20 	.word	0x4bbebc20

08007500 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	@ 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007508:	4ba1      	ldr	r3, [pc, #644]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007512:	4b9f      	ldr	r3, [pc, #636]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	0d1b      	lsrs	r3, r3, #20
 8007518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800751c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800751e:	4b9c      	ldr	r3, [pc, #624]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800752a:	4b99      	ldr	r3, [pc, #612]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8111 	beq.w	8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b02      	cmp	r3, #2
 8007552:	f000 8083 	beq.w	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b02      	cmp	r3, #2
 800755a:	f200 80a1 	bhi.w	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d056      	beq.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800756a:	e099      	b.n	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756c:	4b88      	ldr	r3, [pc, #544]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02d      	beq.n	80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007578:	4b85      	ldr	r3, [pc, #532]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	08db      	lsrs	r3, r3, #3
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	4a84      	ldr	r2, [pc, #528]	@ (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075d2:	e087      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007616:	e065      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007622:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762a:	4b59      	ldr	r3, [pc, #356]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763a:	ed97 6a03 	vldr	s12, [r7, #12]
 800763e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765a:	e043      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b48      	ldr	r3, [pc, #288]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007682:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800769e:	e021      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b37      	ldr	r3, [pc, #220]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e8:	0a5b      	lsrs	r3, r3, #9
 80076ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770a:	ee17 2a90 	vmov	r2, s15
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007712:	4b1f      	ldr	r3, [pc, #124]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007716:	0c1b      	lsrs	r3, r3, #16
 8007718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007724:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007738:	ee17 2a90 	vmov	r2, s15
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007740:	4b13      	ldr	r3, [pc, #76]	@ (8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007744:	0e1b      	lsrs	r3, r3, #24
 8007746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775a:	edd7 6a07 	vldr	s13, [r7, #28]
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007766:	ee17 2a90 	vmov	r2, s15
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800776e:	e008      	b.n	8007782 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
}
 8007782:	bf00      	nop
 8007784:	3724      	adds	r7, #36	@ 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	58024400 	.word	0x58024400
 8007794:	03d09000 	.word	0x03d09000
 8007798:	46000000 	.word	0x46000000
 800779c:	4c742400 	.word	0x4c742400
 80077a0:	4a742400 	.word	0x4a742400
 80077a4:	4bbebc20 	.word	0x4bbebc20

080077a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b6:	4b53      	ldr	r3, [pc, #332]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d101      	bne.n	80077c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e099      	b.n	80078fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7fb f8c3 	bl	800295c <HAL_GetTick>
 80077d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077d8:	e008      	b.n	80077ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077da:	f7fb f8bf 	bl	800295c <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e086      	b.n	80078fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077ec:	4b45      	ldr	r3, [pc, #276]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077f8:	4b42      	ldr	r3, [pc, #264]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	031b      	lsls	r3, r3, #12
 8007806:	493f      	ldr	r1, [pc, #252]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007808:	4313      	orrs	r3, r2
 800780a:	628b      	str	r3, [r1, #40]	@ 0x28
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	3b01      	subs	r3, #1
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	b29b      	uxth	r3, r3
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	3b01      	subs	r3, #1
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800783c:	4931      	ldr	r1, [pc, #196]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 800783e:	4313      	orrs	r3, r2
 8007840:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007842:	4b30      	ldr	r3, [pc, #192]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	492d      	ldr	r1, [pc, #180]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007854:	4b2b      	ldr	r3, [pc, #172]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007858:	f023 0220 	bic.w	r2, r3, #32
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4928      	ldr	r1, [pc, #160]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007866:	4b27      	ldr	r3, [pc, #156]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	4a26      	ldr	r2, [pc, #152]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 800786c:	f023 0310 	bic.w	r3, r3, #16
 8007870:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007872:	4b24      	ldr	r3, [pc, #144]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007876:	4b24      	ldr	r3, [pc, #144]	@ (8007908 <RCCEx_PLL2_Config+0x160>)
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	69d2      	ldr	r2, [r2, #28]
 800787e:	00d2      	lsls	r2, r2, #3
 8007880:	4920      	ldr	r1, [pc, #128]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007886:	4b1f      	ldr	r3, [pc, #124]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	4a1e      	ldr	r2, [pc, #120]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 800788c:	f043 0310 	orr.w	r3, r3, #16
 8007890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007898:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	4a19      	ldr	r2, [pc, #100]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 800789e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078a4:	e00f      	b.n	80078c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d106      	bne.n	80078ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078ac:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	4a14      	ldr	r2, [pc, #80]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078b8:	e005      	b.n	80078c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078ba:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	4a11      	ldr	r2, [pc, #68]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d2:	f7fb f843 	bl	800295c <HAL_GetTick>
 80078d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078d8:	e008      	b.n	80078ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078da:	f7fb f83f 	bl	800295c <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <RCCEx_PLL2_Config+0x15c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	58024400 	.word	0x58024400
 8007908:	ffff0007 	.word	0xffff0007

0800790c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800791a:	4b53      	ldr	r3, [pc, #332]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d101      	bne.n	800792a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e099      	b.n	8007a5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800792a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007936:	f7fb f811 	bl	800295c <HAL_GetTick>
 800793a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800793c:	e008      	b.n	8007950 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800793e:	f7fb f80d 	bl	800295c <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e086      	b.n	8007a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007950:	4b45      	ldr	r3, [pc, #276]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f0      	bne.n	800793e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800795c:	4b42      	ldr	r3, [pc, #264]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	051b      	lsls	r3, r3, #20
 800796a:	493f      	ldr	r1, [pc, #252]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 800796c:	4313      	orrs	r3, r2
 800796e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	3b01      	subs	r3, #1
 8007976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	3b01      	subs	r3, #1
 8007980:	025b      	lsls	r3, r3, #9
 8007982:	b29b      	uxth	r3, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	3b01      	subs	r3, #1
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	3b01      	subs	r3, #1
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079a0:	4931      	ldr	r1, [pc, #196]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079a6:	4b30      	ldr	r3, [pc, #192]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	492d      	ldr	r1, [pc, #180]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	4928      	ldr	r1, [pc, #160]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ca:	4b27      	ldr	r3, [pc, #156]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079d6:	4b24      	ldr	r3, [pc, #144]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079da:	4b24      	ldr	r3, [pc, #144]	@ (8007a6c <RCCEx_PLL3_Config+0x160>)
 80079dc:	4013      	ands	r3, r2
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	69d2      	ldr	r2, [r2, #28]
 80079e2:	00d2      	lsls	r2, r2, #3
 80079e4:	4920      	ldr	r1, [pc, #128]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a19      	ldr	r2, [pc, #100]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a08:	e00f      	b.n	8007a2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d106      	bne.n	8007a1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a10:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	4a14      	ldr	r2, [pc, #80]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a1c:	e005      	b.n	8007a2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	4a11      	ldr	r2, [pc, #68]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a36:	f7fa ff91 	bl	800295c <HAL_GetTick>
 8007a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a3c:	e008      	b.n	8007a50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a3e:	f7fa ff8d 	bl	800295c <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e006      	b.n	8007a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a50:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <RCCEx_PLL3_Config+0x15c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0f0      	beq.n	8007a3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	ffff0007 	.word	0xffff0007

08007a70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e10f      	b.n	8007ca2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a87      	ldr	r2, [pc, #540]	@ (8007cac <HAL_SPI_Init+0x23c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00f      	beq.n	8007ab2 <HAL_SPI_Init+0x42>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a86      	ldr	r2, [pc, #536]	@ (8007cb0 <HAL_SPI_Init+0x240>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00a      	beq.n	8007ab2 <HAL_SPI_Init+0x42>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a84      	ldr	r2, [pc, #528]	@ (8007cb4 <HAL_SPI_Init+0x244>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d005      	beq.n	8007ab2 <HAL_SPI_Init+0x42>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	d901      	bls.n	8007ab2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e0f7      	b.n	8007ca2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fe2e 	bl	8008714 <SPI_GetPacketSize>
 8007ab8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a7b      	ldr	r2, [pc, #492]	@ (8007cac <HAL_SPI_Init+0x23c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00c      	beq.n	8007ade <HAL_SPI_Init+0x6e>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a79      	ldr	r2, [pc, #484]	@ (8007cb0 <HAL_SPI_Init+0x240>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <HAL_SPI_Init+0x6e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a78      	ldr	r2, [pc, #480]	@ (8007cb4 <HAL_SPI_Init+0x244>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_Init+0x6e>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b08      	cmp	r3, #8
 8007adc:	d811      	bhi.n	8007b02 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ae2:	4a72      	ldr	r2, [pc, #456]	@ (8007cac <HAL_SPI_Init+0x23c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d009      	beq.n	8007afc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a70      	ldr	r2, [pc, #448]	@ (8007cb0 <HAL_SPI_Init+0x240>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <HAL_SPI_Init+0x8c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6f      	ldr	r2, [pc, #444]	@ (8007cb4 <HAL_SPI_Init+0x244>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d104      	bne.n	8007b06 <HAL_SPI_Init+0x96>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d901      	bls.n	8007b06 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0cd      	b.n	8007ca2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa f9ba 	bl	8001e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b4c:	d119      	bne.n	8007b82 <HAL_SPI_Init+0x112>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b56:	d103      	bne.n	8007b60 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10c      	bne.n	8007b82 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b70:	d107      	bne.n	8007b82 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <HAL_SPI_Init+0x13e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b06      	cmp	r3, #6
 8007b94:	d90b      	bls.n	8007bae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e007      	b.n	8007bbe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bbc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69da      	ldr	r2, [r3, #28]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	ea42 0103 	orr.w	r1, r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	431a      	orrs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c1e:	ea42 0103 	orr.w	r1, r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d113      	bne.n	8007c5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40013000 	.word	0x40013000
 8007cb0:	40003800 	.word	0x40003800
 8007cb4:	40003c00 	.word	0x40003c00

08007cb8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3320      	adds	r3, #32
 8007cce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd0:	f7fa fe44 	bl	800295c <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d001      	beq.n	8007ce6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e1d1      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_SPI_Transmit+0x3a>
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e1c9      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_SPI_Transmit+0x4c>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e1c2      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007d5c:	d108      	bne.n	8007d70 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e009      	b.n	8007d84 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007d82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	4b96      	ldr	r3, [pc, #600]	@ (8007fe4 <HAL_SPI_Transmit+0x32c>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	88f9      	ldrh	r1, [r7, #6]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db0:	d107      	bne.n	8007dc2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d947      	bls.n	8007e5a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007dca:	e03f      	b.n	8007e4c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d114      	bne.n	8007e04 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dea:	1d1a      	adds	r2, r3, #4
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e02:	e023      	b.n	8007e4c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e04:	f7fa fdaa 	bl	800295c <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d803      	bhi.n	8007e1c <HAL_SPI_Transmit+0x164>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d102      	bne.n	8007e22 <HAL_SPI_Transmit+0x16a>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d114      	bne.n	8007e4c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fba8 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e11e      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1b9      	bne.n	8007dcc <HAL_SPI_Transmit+0x114>
 8007e58:	e0f1      	b.n	800803e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b07      	cmp	r3, #7
 8007e60:	f240 80e6 	bls.w	8008030 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007e64:	e05d      	b.n	8007f22 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d132      	bne.n	8007eda <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d918      	bls.n	8007eb2 <HAL_SPI_Transmit+0x1fa>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d014      	beq.n	8007eb2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e98:	1d1a      	adds	r2, r3, #4
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b02      	subs	r3, #2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007eb0:	e037      	b.n	8007f22 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb6:	881a      	ldrh	r2, [r3, #0]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ec0:	1c9a      	adds	r2, r3, #2
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007ed8:	e023      	b.n	8007f22 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eda:	f7fa fd3f 	bl	800295c <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d803      	bhi.n	8007ef2 <HAL_SPI_Transmit+0x23a>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef0:	d102      	bne.n	8007ef8 <HAL_SPI_Transmit+0x240>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d114      	bne.n	8007f22 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fb3d 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e0b3      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d19b      	bne.n	8007e66 <HAL_SPI_Transmit+0x1ae>
 8007f2e:	e086      	b.n	800803e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d154      	bne.n	8007fe8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d918      	bls.n	8007f7c <HAL_SPI_Transmit+0x2c4>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d914      	bls.n	8007f7c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b04      	subs	r3, #4
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007f7a:	e059      	b.n	8008030 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d917      	bls.n	8007fb8 <HAL_SPI_Transmit+0x300>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d013      	beq.n	8007fb8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f94:	881a      	ldrh	r2, [r3, #0]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9e:	1c9a      	adds	r2, r3, #2
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b02      	subs	r3, #2
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007fb6:	e03b      	b.n	8008030 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3320      	adds	r3, #32
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007fe2:	e025      	b.n	8008030 <HAL_SPI_Transmit+0x378>
 8007fe4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe8:	f7fa fcb8 	bl	800295c <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d803      	bhi.n	8008000 <HAL_SPI_Transmit+0x348>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d102      	bne.n	8008006 <HAL_SPI_Transmit+0x34e>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d114      	bne.n	8008030 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fab6 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008012:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e02c      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f af79 	bne.w	8007f30 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2200      	movs	r2, #0
 8008046:	2108      	movs	r1, #8
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fb35 	bl	80086b8 <SPI_WaitOnFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fa87 	bl	8008578 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008088:	2300      	movs	r3, #0
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3301      	adds	r3, #1
 80080ae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3330      	adds	r3, #48	@ 0x30
 80080b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080b8:	f7fa fc50 	bl	800295c <HAL_GetTick>
 80080bc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d001      	beq.n	80080ce <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80080ca:	2302      	movs	r3, #2
 80080cc:	e250      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_SPI_Receive+0x46>
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e248      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_SPI_Receive+0x58>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e241      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2204      	movs	r2, #4
 80080f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008144:	d108      	bne.n	8008158 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	e009      	b.n	800816c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800816a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	4b95      	ldr	r3, [pc, #596]	@ (80083c8 <HAL_SPI_Receive+0x334>)
 8008174:	4013      	ands	r3, r2
 8008176:	88f9      	ldrh	r1, [r7, #6]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	430b      	orrs	r3, r1
 800817e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008198:	d107      	bne.n	80081aa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	2b0f      	cmp	r3, #15
 80081b0:	d96c      	bls.n	800828c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80081b2:	e064      	b.n	800827e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d114      	bne.n	80081f4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081f2:	e044      	b.n	800827e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	8bfa      	ldrh	r2, [r7, #30]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d919      	bls.n	8008236 <HAL_SPI_Receive+0x1a2>
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d014      	beq.n	8008236 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008214:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008216:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008234:	e023      	b.n	800827e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008236:	f7fa fb91 	bl	800295c <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d803      	bhi.n	800824e <HAL_SPI_Receive+0x1ba>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d102      	bne.n	8008254 <HAL_SPI_Receive+0x1c0>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d114      	bne.n	800827e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f98f 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008260:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e178      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d194      	bne.n	80081b4 <HAL_SPI_Receive+0x120>
 800828a:	e15e      	b.n	800854a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b07      	cmp	r3, #7
 8008292:	f240 8153 	bls.w	800853c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008296:	e08f      	b.n	80083b8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d114      	bne.n	80082d8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	8812      	ldrh	r2, [r2, #0]
 80082b6:	b292      	uxth	r2, r2
 80082b8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082be:	1c9a      	adds	r2, r3, #2
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082d6:	e06f      	b.n	80083b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8bfa      	ldrh	r2, [r7, #30]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d924      	bls.n	8008330 <HAL_SPI_Receive+0x29c>
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01f      	beq.n	8008330 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	8812      	ldrh	r2, [r2, #0]
 80082f8:	b292      	uxth	r2, r2
 80082fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008300:	1c9a      	adds	r2, r3, #2
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	8812      	ldrh	r2, [r2, #0]
 800830e:	b292      	uxth	r2, r2
 8008310:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008316:	1c9a      	adds	r2, r3, #2
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008322:	b29b      	uxth	r3, r3
 8008324:	3b02      	subs	r3, #2
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800832e:	e043      	b.n	80083b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d119      	bne.n	8008370 <HAL_SPI_Receive+0x2dc>
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d014      	beq.n	8008370 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	8812      	ldrh	r2, [r2, #0]
 800834e:	b292      	uxth	r2, r2
 8008350:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008356:	1c9a      	adds	r2, r3, #2
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b01      	subs	r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800836e:	e023      	b.n	80083b8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008370:	f7fa faf4 	bl	800295c <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d803      	bhi.n	8008388 <HAL_SPI_Receive+0x2f4>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d102      	bne.n	800838e <HAL_SPI_Receive+0x2fa>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d114      	bne.n	80083b8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f8f2 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800839a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e0db      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af69 	bne.w	8008298 <HAL_SPI_Receive+0x204>
 80083c6:	e0c0      	b.n	800854a <HAL_SPI_Receive+0x4b6>
 80083c8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d117      	bne.n	8008412 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ee:	7812      	ldrb	r2, [r2, #0]
 80083f0:	b2d2      	uxtb	r2, r2
 80083f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008410:	e094      	b.n	800853c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008418:	b29b      	uxth	r3, r3
 800841a:	8bfa      	ldrh	r2, [r7, #30]
 800841c:	429a      	cmp	r2, r3
 800841e:	d946      	bls.n	80084ae <HAL_SPI_Receive+0x41a>
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d041      	beq.n	80084ae <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008452:	7812      	ldrb	r2, [r2, #0]
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846e:	7812      	ldrb	r2, [r2, #0]
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800848a:	7812      	ldrb	r2, [r2, #0]
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b04      	subs	r3, #4
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084ac:	e046      	b.n	800853c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d81c      	bhi.n	80084f4 <HAL_SPI_Receive+0x460>
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d017      	beq.n	80084f4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d0:	7812      	ldrb	r2, [r2, #0]
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084f2:	e023      	b.n	800853c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f4:	f7fa fa32 	bl	800295c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d803      	bhi.n	800850c <HAL_SPI_Receive+0x478>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d102      	bne.n	8008512 <HAL_SPI_Receive+0x47e>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d114      	bne.n	800853c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f830 	bl	8008578 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800851e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e019      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f af41 	bne.w	80083cc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f814 	bl	8008578 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800856e:	2300      	movs	r3, #0
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0208 	orr.w	r2, r2, #8
 8008596:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0210 	orr.w	r2, r2, #16
 80085a6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0201 	bic.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6919      	ldr	r1, [r3, #16]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b3c      	ldr	r3, [pc, #240]	@ (80086b4 <SPI_CloseTransfer+0x13c>)
 80085c4:	400b      	ands	r3, r1
 80085c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80085d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d014      	beq.n	800860e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00f      	beq.n	800860e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0220 	orr.w	r2, r2, #32
 800860c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b03      	cmp	r3, #3
 8008618:	d014      	beq.n	8008644 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00f      	beq.n	8008644 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862a:	f043 0204 	orr.w	r2, r3, #4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008642:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00f      	beq.n	800866e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008654:	f043 0201 	orr.w	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699a      	ldr	r2, [r3, #24]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800866c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00f      	beq.n	8008698 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699a      	ldr	r2, [r3, #24]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008696:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	fffffc90 	.word	0xfffffc90

080086b8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80086c8:	e010      	b.n	80086ec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ca:	f7fa f947 	bl	800295c <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d803      	bhi.n	80086e2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d102      	bne.n	80086e8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e00f      	b.n	800870c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695a      	ldr	r2, [r3, #20]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4013      	ands	r3, r2
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	bf0c      	ite	eq
 80086fc:	2301      	moveq	r3, #1
 80086fe:	2300      	movne	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	429a      	cmp	r2, r3
 8008708:	d0df      	beq.n	80086ca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	3307      	adds	r3, #7
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	fb02 f303 	mul.w	r3, r2, r3
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e042      	b.n	80087e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7f9 fbf8 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2224      	movs	r2, #36	@ 0x24
 8008778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fb29 	bl	8009dec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fdbe 	bl	800931c <UART_SetConfig>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e01b      	b.n	80087e2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fba8 	bl	8009f30 <UART_CheckIdleState>
 80087e0:	4603      	mov	r3, r0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b08a      	sub	sp, #40	@ 0x28
 80087ee:	af02      	add	r7, sp, #8
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008800:	2b20      	cmp	r3, #32
 8008802:	d17b      	bne.n	80088fc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_UART_Transmit+0x26>
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e074      	b.n	80088fe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2221      	movs	r2, #33	@ 0x21
 8008820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008824:	f7fa f89a 	bl	800295c <HAL_GetTick>
 8008828:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	88fa      	ldrh	r2, [r7, #6]
 800882e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	88fa      	ldrh	r2, [r7, #6]
 8008836:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008842:	d108      	bne.n	8008856 <HAL_UART_Transmit+0x6c>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	61bb      	str	r3, [r7, #24]
 8008854:	e003      	b.n	800885e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800885e:	e030      	b.n	80088c2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	2180      	movs	r1, #128	@ 0x80
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 fc0a 	bl	800a084 <UART_WaitOnFlagUntilTimeout>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e03d      	b.n	80088fe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10b      	bne.n	80088a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008896:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3302      	adds	r3, #2
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	e007      	b.n	80088b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	3301      	adds	r3, #1
 80088ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1c8      	bne.n	8008860 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	2140      	movs	r1, #64	@ 0x40
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f001 fbd3 	bl	800a084 <UART_WaitOnFlagUntilTimeout>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e006      	b.n	80088fe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	e000      	b.n	80088fe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80088fc:	2302      	movs	r3, #2
  }
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b08a      	sub	sp, #40	@ 0x28
 800890a:	af02      	add	r7, sp, #8
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	603b      	str	r3, [r7, #0]
 8008912:	4613      	mov	r3, r2
 8008914:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800891c:	2b20      	cmp	r3, #32
 800891e:	f040 80b5 	bne.w	8008a8c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_UART_Receive+0x28>
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e0ad      	b.n	8008a8e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2222      	movs	r2, #34	@ 0x22
 800893e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008948:	f7fa f808 	bl	800295c <HAL_GetTick>
 800894c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	88fa      	ldrh	r2, [r7, #6]
 8008952:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008966:	d10e      	bne.n	8008986 <HAL_UART_Receive+0x80>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_UART_Receive+0x76>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800897a:	e02d      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	22ff      	movs	r2, #255	@ 0xff
 8008980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008984:	e028      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10d      	bne.n	80089aa <HAL_UART_Receive+0xa4>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d104      	bne.n	80089a0 <HAL_UART_Receive+0x9a>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	22ff      	movs	r2, #255	@ 0xff
 800899a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800899e:	e01b      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	227f      	movs	r2, #127	@ 0x7f
 80089a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089a8:	e016      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089b2:	d10d      	bne.n	80089d0 <HAL_UART_Receive+0xca>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d104      	bne.n	80089c6 <HAL_UART_Receive+0xc0>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	227f      	movs	r2, #127	@ 0x7f
 80089c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089c4:	e008      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	223f      	movs	r2, #63	@ 0x3f
 80089ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089ce:	e003      	b.n	80089d8 <HAL_UART_Receive+0xd2>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e8:	d108      	bne.n	80089fc <HAL_UART_Receive+0xf6>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	61bb      	str	r3, [r7, #24]
 80089fa:	e003      	b.n	8008a04 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a04:	e036      	b.n	8008a74 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2120      	movs	r1, #32
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f001 fb37 	bl	800a084 <UART_WaitOnFlagUntilTimeout>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e032      	b.n	8008a8e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10c      	bne.n	8008a48 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	8a7b      	ldrh	r3, [r7, #18]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	3302      	adds	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	e00c      	b.n	8008a62 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	8a7b      	ldrh	r3, [r7, #18]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4013      	ands	r3, r2
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1c2      	bne.n	8008a06 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e000      	b.n	8008a8e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008a8c:	2302      	movs	r3, #2
  }
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3720      	adds	r7, #32
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	@ 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d137      	bne.n	8008b20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <HAL_UART_Receive_IT+0x24>
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e030      	b.n	8008b22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a18      	ldr	r2, [pc, #96]	@ (8008b2c <HAL_UART_Receive_IT+0x94>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d01f      	beq.n	8008b10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d018      	beq.n	8008b10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	613b      	str	r3, [r7, #16]
   return(result);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	623b      	str	r3, [r7, #32]
 8008afe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	461a      	mov	r2, r3
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 fb22 	bl	800a160 <UART_Start_Receive_IT>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	e000      	b.n	8008b22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b20:	2302      	movs	r3, #2
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	@ 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	58000c00 	.word	0x58000c00

08008b30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b0ba      	sub	sp, #232	@ 0xe8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008b5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008b5e:	4013      	ands	r3, r2
 8008b60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d11b      	bne.n	8008ba4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d015      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8393 	beq.w	80092c0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
      }
      return;
 8008ba2:	e38d      	b.n	80092c0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8123 	beq.w	8008df4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008bae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8008de8 <HAL_UART_IRQHandler+0x2b8>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8008dec <HAL_UART_IRQHandler+0x2bc>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8116 	beq.w	8008df4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d011      	beq.n	8008bf8 <HAL_UART_IRQHandler+0xc8>
 8008bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bee:	f043 0201 	orr.w	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d011      	beq.n	8008c28 <HAL_UART_IRQHandler+0xf8>
 8008c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2202      	movs	r2, #2
 8008c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1e:	f043 0204 	orr.w	r2, r3, #4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d011      	beq.n	8008c58 <HAL_UART_IRQHandler+0x128>
 8008c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2204      	movs	r2, #4
 8008c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4e:	f043 0202 	orr.w	r2, r3, #2
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c74:	4b5c      	ldr	r3, [pc, #368]	@ (8008de8 <HAL_UART_IRQHandler+0x2b8>)
 8008c76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2208      	movs	r2, #8
 8008c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8a:	f043 0208 	orr.w	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d012      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x196>
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cbc:	f043 0220 	orr.w	r2, r3, #32
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 82f9 	beq.w	80092c4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d013      	beq.n	8008d06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d1a:	2b40      	cmp	r3, #64	@ 0x40
 8008d1c:	d005      	beq.n	8008d2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d054      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fb3a 	bl	800a3a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b40      	cmp	r3, #64	@ 0x40
 8008d3c:	d146      	bne.n	8008dcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3308      	adds	r3, #8
 8008d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1d9      	bne.n	8008d3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d017      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9a:	4a15      	ldr	r2, [pc, #84]	@ (8008df0 <HAL_UART_IRQHandler+0x2c0>)
 8008d9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fa fa97 	bl	80032d8 <HAL_DMA_Abort_IT>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d019      	beq.n	8008de4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc2:	e00f      	b.n	8008de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa93 	bl	80092f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dca:	e00b      	b.n	8008de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fa8f 	bl	80092f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd2:	e007      	b.n	8008de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa8b 	bl	80092f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008de2:	e26f      	b.n	80092c4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	bf00      	nop
    return;
 8008de6:	e26d      	b.n	80092c4 <HAL_UART_IRQHandler+0x794>
 8008de8:	10000001 	.word	0x10000001
 8008dec:	04000120 	.word	0x04000120
 8008df0:	0800a471 	.word	0x0800a471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	f040 8203 	bne.w	8009204 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 81fc 	beq.w	8009204 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 81f5 	beq.w	8009204 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2210      	movs	r2, #16
 8008e20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2c:	2b40      	cmp	r3, #64	@ 0x40
 8008e2e:	f040 816d 	bne.w	800910c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4aa4      	ldr	r2, [pc, #656]	@ (80090cc <HAL_UART_IRQHandler+0x59c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d068      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4aa1      	ldr	r2, [pc, #644]	@ (80090d0 <HAL_UART_IRQHandler+0x5a0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d061      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a9f      	ldr	r2, [pc, #636]	@ (80090d4 <HAL_UART_IRQHandler+0x5a4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d05a      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a9c      	ldr	r2, [pc, #624]	@ (80090d8 <HAL_UART_IRQHandler+0x5a8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d053      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a9a      	ldr	r2, [pc, #616]	@ (80090dc <HAL_UART_IRQHandler+0x5ac>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d04c      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a97      	ldr	r2, [pc, #604]	@ (80090e0 <HAL_UART_IRQHandler+0x5b0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d045      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a95      	ldr	r2, [pc, #596]	@ (80090e4 <HAL_UART_IRQHandler+0x5b4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d03e      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a92      	ldr	r2, [pc, #584]	@ (80090e8 <HAL_UART_IRQHandler+0x5b8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d037      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a90      	ldr	r2, [pc, #576]	@ (80090ec <HAL_UART_IRQHandler+0x5bc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d030      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a8d      	ldr	r2, [pc, #564]	@ (80090f0 <HAL_UART_IRQHandler+0x5c0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d029      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a8b      	ldr	r2, [pc, #556]	@ (80090f4 <HAL_UART_IRQHandler+0x5c4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d022      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a88      	ldr	r2, [pc, #544]	@ (80090f8 <HAL_UART_IRQHandler+0x5c8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01b      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a86      	ldr	r2, [pc, #536]	@ (80090fc <HAL_UART_IRQHandler+0x5cc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d014      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a83      	ldr	r2, [pc, #524]	@ (8009100 <HAL_UART_IRQHandler+0x5d0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00d      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a81      	ldr	r2, [pc, #516]	@ (8009104 <HAL_UART_IRQHandler+0x5d4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d006      	beq.n	8008f12 <HAL_UART_IRQHandler+0x3e2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a7e      	ldr	r2, [pc, #504]	@ (8009108 <HAL_UART_IRQHandler+0x5d8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d106      	bne.n	8008f20 <HAL_UART_IRQHandler+0x3f0>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	e005      	b.n	8008f2c <HAL_UART_IRQHandler+0x3fc>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 80ad 	beq.w	8009094 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f44:	429a      	cmp	r2, r3
 8008f46:	f080 80a5 	bcs.w	8009094 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f60:	f000 8087 	beq.w	8009072 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1da      	bne.n	8008f64 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e1      	bne.n	8008fae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800900e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009010:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009014:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800901c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e3      	bne.n	8008fea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800903e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009040:	f023 0310 	bic.w	r3, r3, #16
 8009044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009052:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009054:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e4      	bne.n	8009030 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800906c:	4618      	mov	r0, r3
 800906e:	f7f9 fe15 	bl	8002c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009084:	b29b      	uxth	r3, r3
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	b29b      	uxth	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f939 	bl	8009304 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009092:	e119      	b.n	80092c8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800909a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800909e:	429a      	cmp	r2, r3
 80090a0:	f040 8112 	bne.w	80092c8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b0:	f040 810a 	bne.w	80092c8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f91e 	bl	8009304 <HAL_UARTEx_RxEventCallback>
      return;
 80090c8:	e0fe      	b.n	80092c8 <HAL_UART_IRQHandler+0x798>
 80090ca:	bf00      	nop
 80090cc:	40020010 	.word	0x40020010
 80090d0:	40020028 	.word	0x40020028
 80090d4:	40020040 	.word	0x40020040
 80090d8:	40020058 	.word	0x40020058
 80090dc:	40020070 	.word	0x40020070
 80090e0:	40020088 	.word	0x40020088
 80090e4:	400200a0 	.word	0x400200a0
 80090e8:	400200b8 	.word	0x400200b8
 80090ec:	40020410 	.word	0x40020410
 80090f0:	40020428 	.word	0x40020428
 80090f4:	40020440 	.word	0x40020440
 80090f8:	40020458 	.word	0x40020458
 80090fc:	40020470 	.word	0x40020470
 8009100:	40020488 	.word	0x40020488
 8009104:	400204a0 	.word	0x400204a0
 8009108:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80cf 	beq.w	80092cc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800912e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80ca 	beq.w	80092cc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800914c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800915a:	647b      	str	r3, [r7, #68]	@ 0x44
 800915c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e4      	bne.n	8009138 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	623b      	str	r3, [r7, #32]
   return(result);
 800917e:	6a3a      	ldr	r2, [r7, #32]
 8009180:	4b55      	ldr	r3, [pc, #340]	@ (80092d8 <HAL_UART_IRQHandler+0x7a8>)
 8009182:	4013      	ands	r3, r2
 8009184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009192:	633a      	str	r2, [r7, #48]	@ 0x30
 8009194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e3      	bne.n	800916e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0310 	bic.w	r3, r3, #16
 80091ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80091dc:	61fb      	str	r3, [r7, #28]
 80091de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	69b9      	ldr	r1, [r7, #24]
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	617b      	str	r3, [r7, #20]
   return(result);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e4      	bne.n	80091ba <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f881 	bl	8009304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009202:	e063      	b.n	80092cc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <HAL_UART_IRQHandler+0x6fe>
 8009210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fe80 	bl	800af2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800922c:	e051      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009236:	2b00      	cmp	r3, #0
 8009238:	d014      	beq.n	8009264 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800923a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800923e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d105      	bne.n	8009252 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800924a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d008      	beq.n	8009264 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009256:	2b00      	cmp	r3, #0
 8009258:	d03a      	beq.n	80092d0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
    }
    return;
 8009262:	e035      	b.n	80092d0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <HAL_UART_IRQHandler+0x754>
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 f909 	bl	800a494 <UART_EndTransmit_IT>
    return;
 8009282:	e026      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d009      	beq.n	80092a4 <HAL_UART_IRQHandler+0x774>
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009294:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 fe59 	bl	800af54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092a2:	e016      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d010      	beq.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da0c      	bge.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 fe41 	bl	800af40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092be:	e008      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80092c0:	bf00      	nop
 80092c2:	e006      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80092c4:	bf00      	nop
 80092c6:	e004      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80092d0:	bf00      	nop
  }
}
 80092d2:	37e8      	adds	r7, #232	@ 0xe8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	effffffe 	.word	0xeffffffe

080092dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800931c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009320:	b092      	sub	sp, #72	@ 0x48
 8009322:	af00      	add	r7, sp, #0
 8009324:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	431a      	orrs	r2, r3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	431a      	orrs	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	4313      	orrs	r3, r2
 8009342:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4bbe      	ldr	r3, [pc, #760]	@ (8009644 <UART_SetConfig+0x328>)
 800934c:	4013      	ands	r3, r2
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	6812      	ldr	r2, [r2, #0]
 8009352:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009354:	430b      	orrs	r3, r1
 8009356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4ab3      	ldr	r2, [pc, #716]	@ (8009648 <UART_SetConfig+0x32c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d004      	beq.n	8009388 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009384:	4313      	orrs	r3, r2
 8009386:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	4baf      	ldr	r3, [pc, #700]	@ (800964c <UART_SetConfig+0x330>)
 8009390:	4013      	ands	r3, r2
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	6812      	ldr	r2, [r2, #0]
 8009396:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009398:	430b      	orrs	r3, r1
 800939a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	f023 010f 	bic.w	r1, r3, #15
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4aa6      	ldr	r2, [pc, #664]	@ (8009650 <UART_SetConfig+0x334>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d177      	bne.n	80094ac <UART_SetConfig+0x190>
 80093bc:	4ba5      	ldr	r3, [pc, #660]	@ (8009654 <UART_SetConfig+0x338>)
 80093be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093c4:	2b28      	cmp	r3, #40	@ 0x28
 80093c6:	d86d      	bhi.n	80094a4 <UART_SetConfig+0x188>
 80093c8:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <UART_SetConfig+0xb4>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	08009475 	.word	0x08009475
 80093d4:	080094a5 	.word	0x080094a5
 80093d8:	080094a5 	.word	0x080094a5
 80093dc:	080094a5 	.word	0x080094a5
 80093e0:	080094a5 	.word	0x080094a5
 80093e4:	080094a5 	.word	0x080094a5
 80093e8:	080094a5 	.word	0x080094a5
 80093ec:	080094a5 	.word	0x080094a5
 80093f0:	0800947d 	.word	0x0800947d
 80093f4:	080094a5 	.word	0x080094a5
 80093f8:	080094a5 	.word	0x080094a5
 80093fc:	080094a5 	.word	0x080094a5
 8009400:	080094a5 	.word	0x080094a5
 8009404:	080094a5 	.word	0x080094a5
 8009408:	080094a5 	.word	0x080094a5
 800940c:	080094a5 	.word	0x080094a5
 8009410:	08009485 	.word	0x08009485
 8009414:	080094a5 	.word	0x080094a5
 8009418:	080094a5 	.word	0x080094a5
 800941c:	080094a5 	.word	0x080094a5
 8009420:	080094a5 	.word	0x080094a5
 8009424:	080094a5 	.word	0x080094a5
 8009428:	080094a5 	.word	0x080094a5
 800942c:	080094a5 	.word	0x080094a5
 8009430:	0800948d 	.word	0x0800948d
 8009434:	080094a5 	.word	0x080094a5
 8009438:	080094a5 	.word	0x080094a5
 800943c:	080094a5 	.word	0x080094a5
 8009440:	080094a5 	.word	0x080094a5
 8009444:	080094a5 	.word	0x080094a5
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094a5 	.word	0x080094a5
 8009450:	08009495 	.word	0x08009495
 8009454:	080094a5 	.word	0x080094a5
 8009458:	080094a5 	.word	0x080094a5
 800945c:	080094a5 	.word	0x080094a5
 8009460:	080094a5 	.word	0x080094a5
 8009464:	080094a5 	.word	0x080094a5
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094a5 	.word	0x080094a5
 8009470:	0800949d 	.word	0x0800949d
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e222      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800947c:	2304      	movs	r3, #4
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e21e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009484:	2308      	movs	r3, #8
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e21a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800948c:	2310      	movs	r3, #16
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e216      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009494:	2320      	movs	r3, #32
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e212      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800949c:	2340      	movs	r3, #64	@ 0x40
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e20e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80094a4:	2380      	movs	r3, #128	@ 0x80
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e20a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a69      	ldr	r2, [pc, #420]	@ (8009658 <UART_SetConfig+0x33c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d130      	bne.n	8009518 <UART_SetConfig+0x1fc>
 80094b6:	4b67      	ldr	r3, [pc, #412]	@ (8009654 <UART_SetConfig+0x338>)
 80094b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d826      	bhi.n	8009510 <UART_SetConfig+0x1f4>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0x1ac>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094e1 	.word	0x080094e1
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094f1 	.word	0x080094f1
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	08009501 	.word	0x08009501
 80094dc:	08009509 	.word	0x08009509
 80094e0:	2300      	movs	r3, #0
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e1ec      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80094e8:	2304      	movs	r3, #4
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e1e8      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e1e4      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80094f8:	2310      	movs	r3, #16
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e1e0      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009500:	2320      	movs	r3, #32
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e1dc      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009508:	2340      	movs	r3, #64	@ 0x40
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e1d8      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009510:	2380      	movs	r3, #128	@ 0x80
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e1d4      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a4f      	ldr	r2, [pc, #316]	@ (800965c <UART_SetConfig+0x340>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d130      	bne.n	8009584 <UART_SetConfig+0x268>
 8009522:	4b4c      	ldr	r3, [pc, #304]	@ (8009654 <UART_SetConfig+0x338>)
 8009524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b05      	cmp	r3, #5
 800952c:	d826      	bhi.n	800957c <UART_SetConfig+0x260>
 800952e:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <UART_SetConfig+0x218>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	0800954d 	.word	0x0800954d
 8009538:	08009555 	.word	0x08009555
 800953c:	0800955d 	.word	0x0800955d
 8009540:	08009565 	.word	0x08009565
 8009544:	0800956d 	.word	0x0800956d
 8009548:	08009575 	.word	0x08009575
 800954c:	2300      	movs	r3, #0
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e1b6      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009554:	2304      	movs	r3, #4
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e1b2      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800955c:	2308      	movs	r3, #8
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e1ae      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009564:	2310      	movs	r3, #16
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e1aa      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800956c:	2320      	movs	r3, #32
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e1a6      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009574:	2340      	movs	r3, #64	@ 0x40
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e1a2      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800957c:	2380      	movs	r3, #128	@ 0x80
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e19e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a35      	ldr	r2, [pc, #212]	@ (8009660 <UART_SetConfig+0x344>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d130      	bne.n	80095f0 <UART_SetConfig+0x2d4>
 800958e:	4b31      	ldr	r3, [pc, #196]	@ (8009654 <UART_SetConfig+0x338>)
 8009590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b05      	cmp	r3, #5
 8009598:	d826      	bhi.n	80095e8 <UART_SetConfig+0x2cc>
 800959a:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <UART_SetConfig+0x284>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	080095b9 	.word	0x080095b9
 80095a4:	080095c1 	.word	0x080095c1
 80095a8:	080095c9 	.word	0x080095c9
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d9 	.word	0x080095d9
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e180      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095c0:	2304      	movs	r3, #4
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e17c      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095c8:	2308      	movs	r3, #8
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e178      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e174      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095d8:	2320      	movs	r3, #32
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e170      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095e0:	2340      	movs	r3, #64	@ 0x40
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e16c      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095e8:	2380      	movs	r3, #128	@ 0x80
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e168      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009664 <UART_SetConfig+0x348>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d142      	bne.n	8009680 <UART_SetConfig+0x364>
 80095fa:	4b16      	ldr	r3, [pc, #88]	@ (8009654 <UART_SetConfig+0x338>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	2b05      	cmp	r3, #5
 8009604:	d838      	bhi.n	8009678 <UART_SetConfig+0x35c>
 8009606:	a201      	add	r2, pc, #4	@ (adr r2, 800960c <UART_SetConfig+0x2f0>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009625 	.word	0x08009625
 8009610:	0800962d 	.word	0x0800962d
 8009614:	08009635 	.word	0x08009635
 8009618:	0800963d 	.word	0x0800963d
 800961c:	08009669 	.word	0x08009669
 8009620:	08009671 	.word	0x08009671
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e14a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e146      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e142      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e13e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009644:	cfff69f3 	.word	0xcfff69f3
 8009648:	58000c00 	.word	0x58000c00
 800964c:	11fff4ff 	.word	0x11fff4ff
 8009650:	40011000 	.word	0x40011000
 8009654:	58024400 	.word	0x58024400
 8009658:	40004400 	.word	0x40004400
 800965c:	40004800 	.word	0x40004800
 8009660:	40004c00 	.word	0x40004c00
 8009664:	40005000 	.word	0x40005000
 8009668:	2320      	movs	r3, #32
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e128      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009670:	2340      	movs	r3, #64	@ 0x40
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e124      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009678:	2380      	movs	r3, #128	@ 0x80
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e120      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4acb      	ldr	r2, [pc, #812]	@ (80099b4 <UART_SetConfig+0x698>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d176      	bne.n	8009778 <UART_SetConfig+0x45c>
 800968a:	4bcb      	ldr	r3, [pc, #812]	@ (80099b8 <UART_SetConfig+0x69c>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009692:	2b28      	cmp	r3, #40	@ 0x28
 8009694:	d86c      	bhi.n	8009770 <UART_SetConfig+0x454>
 8009696:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <UART_SetConfig+0x380>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	08009741 	.word	0x08009741
 80096a0:	08009771 	.word	0x08009771
 80096a4:	08009771 	.word	0x08009771
 80096a8:	08009771 	.word	0x08009771
 80096ac:	08009771 	.word	0x08009771
 80096b0:	08009771 	.word	0x08009771
 80096b4:	08009771 	.word	0x08009771
 80096b8:	08009771 	.word	0x08009771
 80096bc:	08009749 	.word	0x08009749
 80096c0:	08009771 	.word	0x08009771
 80096c4:	08009771 	.word	0x08009771
 80096c8:	08009771 	.word	0x08009771
 80096cc:	08009771 	.word	0x08009771
 80096d0:	08009771 	.word	0x08009771
 80096d4:	08009771 	.word	0x08009771
 80096d8:	08009771 	.word	0x08009771
 80096dc:	08009751 	.word	0x08009751
 80096e0:	08009771 	.word	0x08009771
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009771 	.word	0x08009771
 80096ec:	08009771 	.word	0x08009771
 80096f0:	08009771 	.word	0x08009771
 80096f4:	08009771 	.word	0x08009771
 80096f8:	08009771 	.word	0x08009771
 80096fc:	08009759 	.word	0x08009759
 8009700:	08009771 	.word	0x08009771
 8009704:	08009771 	.word	0x08009771
 8009708:	08009771 	.word	0x08009771
 800970c:	08009771 	.word	0x08009771
 8009710:	08009771 	.word	0x08009771
 8009714:	08009771 	.word	0x08009771
 8009718:	08009771 	.word	0x08009771
 800971c:	08009761 	.word	0x08009761
 8009720:	08009771 	.word	0x08009771
 8009724:	08009771 	.word	0x08009771
 8009728:	08009771 	.word	0x08009771
 800972c:	08009771 	.word	0x08009771
 8009730:	08009771 	.word	0x08009771
 8009734:	08009771 	.word	0x08009771
 8009738:	08009771 	.word	0x08009771
 800973c:	08009769 	.word	0x08009769
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e0bc      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009748:	2304      	movs	r3, #4
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e0b8      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009750:	2308      	movs	r3, #8
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e0b4      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009758:	2310      	movs	r3, #16
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e0b0      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009760:	2320      	movs	r3, #32
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e0ac      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009768:	2340      	movs	r3, #64	@ 0x40
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e0a8      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009770:	2380      	movs	r3, #128	@ 0x80
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e0a4      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a8f      	ldr	r2, [pc, #572]	@ (80099bc <UART_SetConfig+0x6a0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d130      	bne.n	80097e4 <UART_SetConfig+0x4c8>
 8009782:	4b8d      	ldr	r3, [pc, #564]	@ (80099b8 <UART_SetConfig+0x69c>)
 8009784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b05      	cmp	r3, #5
 800978c:	d826      	bhi.n	80097dc <UART_SetConfig+0x4c0>
 800978e:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <UART_SetConfig+0x478>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	080097ad 	.word	0x080097ad
 8009798:	080097b5 	.word	0x080097b5
 800979c:	080097bd 	.word	0x080097bd
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097cd 	.word	0x080097cd
 80097a8:	080097d5 	.word	0x080097d5
 80097ac:	2300      	movs	r3, #0
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e086      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097b4:	2304      	movs	r3, #4
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e082      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097bc:	2308      	movs	r3, #8
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e07e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097c4:	2310      	movs	r3, #16
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e07a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097cc:	2320      	movs	r3, #32
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e076      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097d4:	2340      	movs	r3, #64	@ 0x40
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e072      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097dc:	2380      	movs	r3, #128	@ 0x80
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e06e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a75      	ldr	r2, [pc, #468]	@ (80099c0 <UART_SetConfig+0x6a4>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d130      	bne.n	8009850 <UART_SetConfig+0x534>
 80097ee:	4b72      	ldr	r3, [pc, #456]	@ (80099b8 <UART_SetConfig+0x69c>)
 80097f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	d826      	bhi.n	8009848 <UART_SetConfig+0x52c>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <UART_SetConfig+0x4e4>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009819 	.word	0x08009819
 8009804:	08009821 	.word	0x08009821
 8009808:	08009829 	.word	0x08009829
 800980c:	08009831 	.word	0x08009831
 8009810:	08009839 	.word	0x08009839
 8009814:	08009841 	.word	0x08009841
 8009818:	2300      	movs	r3, #0
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e050      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009820:	2304      	movs	r3, #4
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e04c      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009828:	2308      	movs	r3, #8
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e048      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009830:	2310      	movs	r3, #16
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e044      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009838:	2320      	movs	r3, #32
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e040      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009840:	2340      	movs	r3, #64	@ 0x40
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e03c      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e038      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a5b      	ldr	r2, [pc, #364]	@ (80099c4 <UART_SetConfig+0x6a8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d130      	bne.n	80098bc <UART_SetConfig+0x5a0>
 800985a:	4b57      	ldr	r3, [pc, #348]	@ (80099b8 <UART_SetConfig+0x69c>)
 800985c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	2b05      	cmp	r3, #5
 8009864:	d826      	bhi.n	80098b4 <UART_SetConfig+0x598>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <UART_SetConfig+0x550>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	08009885 	.word	0x08009885
 8009870:	0800988d 	.word	0x0800988d
 8009874:	08009895 	.word	0x08009895
 8009878:	0800989d 	.word	0x0800989d
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098ad 	.word	0x080098ad
 8009884:	2302      	movs	r3, #2
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e01a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800988c:	2304      	movs	r3, #4
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e016      	b.n	80098c2 <UART_SetConfig+0x5a6>
 8009894:	2308      	movs	r3, #8
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e012      	b.n	80098c2 <UART_SetConfig+0x5a6>
 800989c:	2310      	movs	r3, #16
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e00e      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80098a4:	2320      	movs	r3, #32
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e00a      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80098ac:	2340      	movs	r3, #64	@ 0x40
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e006      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80098b4:	2380      	movs	r3, #128	@ 0x80
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e002      	b.n	80098c2 <UART_SetConfig+0x5a6>
 80098bc:	2380      	movs	r3, #128	@ 0x80
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a3f      	ldr	r2, [pc, #252]	@ (80099c4 <UART_SetConfig+0x6a8>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	f040 80f8 	bne.w	8009abe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	dc46      	bgt.n	8009964 <UART_SetConfig+0x648>
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	f2c0 8082 	blt.w	80099e0 <UART_SetConfig+0x6c4>
 80098dc:	3b02      	subs	r3, #2
 80098de:	2b1e      	cmp	r3, #30
 80098e0:	d87e      	bhi.n	80099e0 <UART_SetConfig+0x6c4>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <UART_SetConfig+0x5cc>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	0800996b 	.word	0x0800996b
 80098ec:	080099e1 	.word	0x080099e1
 80098f0:	08009973 	.word	0x08009973
 80098f4:	080099e1 	.word	0x080099e1
 80098f8:	080099e1 	.word	0x080099e1
 80098fc:	080099e1 	.word	0x080099e1
 8009900:	08009983 	.word	0x08009983
 8009904:	080099e1 	.word	0x080099e1
 8009908:	080099e1 	.word	0x080099e1
 800990c:	080099e1 	.word	0x080099e1
 8009910:	080099e1 	.word	0x080099e1
 8009914:	080099e1 	.word	0x080099e1
 8009918:	080099e1 	.word	0x080099e1
 800991c:	080099e1 	.word	0x080099e1
 8009920:	08009993 	.word	0x08009993
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099e1 	.word	0x080099e1
 800992c:	080099e1 	.word	0x080099e1
 8009930:	080099e1 	.word	0x080099e1
 8009934:	080099e1 	.word	0x080099e1
 8009938:	080099e1 	.word	0x080099e1
 800993c:	080099e1 	.word	0x080099e1
 8009940:	080099e1 	.word	0x080099e1
 8009944:	080099e1 	.word	0x080099e1
 8009948:	080099e1 	.word	0x080099e1
 800994c:	080099e1 	.word	0x080099e1
 8009950:	080099e1 	.word	0x080099e1
 8009954:	080099e1 	.word	0x080099e1
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099e1 	.word	0x080099e1
 8009960:	080099d3 	.word	0x080099d3
 8009964:	2b40      	cmp	r3, #64	@ 0x40
 8009966:	d037      	beq.n	80099d8 <UART_SetConfig+0x6bc>
 8009968:	e03a      	b.n	80099e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800996a:	f7fd fc5f 	bl	800722c <HAL_RCCEx_GetD3PCLK1Freq>
 800996e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009970:	e03c      	b.n	80099ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd fc6e 	bl	8007258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009980:	e034      	b.n	80099ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009982:	f107 0318 	add.w	r3, r7, #24
 8009986:	4618      	mov	r0, r3
 8009988:	f7fd fdba 	bl	8007500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009990:	e02c      	b.n	80099ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009992:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <UART_SetConfig+0x69c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d016      	beq.n	80099cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800999e:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <UART_SetConfig+0x69c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	08db      	lsrs	r3, r3, #3
 80099a4:	f003 0303 	and.w	r3, r3, #3
 80099a8:	4a07      	ldr	r2, [pc, #28]	@ (80099c8 <UART_SetConfig+0x6ac>)
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099b0:	e01c      	b.n	80099ec <UART_SetConfig+0x6d0>
 80099b2:	bf00      	nop
 80099b4:	40011400 	.word	0x40011400
 80099b8:	58024400 	.word	0x58024400
 80099bc:	40007800 	.word	0x40007800
 80099c0:	40007c00 	.word	0x40007c00
 80099c4:	58000c00 	.word	0x58000c00
 80099c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099cc:	4b9d      	ldr	r3, [pc, #628]	@ (8009c44 <UART_SetConfig+0x928>)
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d0:	e00c      	b.n	80099ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099d2:	4b9d      	ldr	r3, [pc, #628]	@ (8009c48 <UART_SetConfig+0x92c>)
 80099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d6:	e009      	b.n	80099ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099de:	e005      	b.n	80099ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 81de 	beq.w	8009db0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	4a94      	ldr	r2, [pc, #592]	@ (8009c4c <UART_SetConfig+0x930>)
 80099fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fe:	461a      	mov	r2, r3
 8009a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	4413      	add	r3, r2
 8009a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d305      	bcc.n	8009a24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d903      	bls.n	8009a2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a2a:	e1c1      	b.n	8009db0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2e:	2200      	movs	r2, #0
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	60fa      	str	r2, [r7, #12]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a38:	4a84      	ldr	r2, [pc, #528]	@ (8009c4c <UART_SetConfig+0x930>)
 8009a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	2200      	movs	r2, #0
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a4e:	f7f6 fc9f 	bl	8000390 <__aeabi_uldivmod>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4610      	mov	r0, r2
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	f04f 0300 	mov.w	r3, #0
 8009a62:	020b      	lsls	r3, r1, #8
 8009a64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a68:	0202      	lsls	r2, r0, #8
 8009a6a:	6979      	ldr	r1, [r7, #20]
 8009a6c:	6849      	ldr	r1, [r1, #4]
 8009a6e:	0849      	lsrs	r1, r1, #1
 8009a70:	2000      	movs	r0, #0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4605      	mov	r5, r0
 8009a76:	eb12 0804 	adds.w	r8, r2, r4
 8009a7a:	eb43 0905 	adc.w	r9, r3, r5
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	469a      	mov	sl, r3
 8009a86:	4693      	mov	fp, r2
 8009a88:	4652      	mov	r2, sl
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fc7e 	bl	8000390 <__aeabi_uldivmod>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4613      	mov	r3, r2
 8009a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aa2:	d308      	bcc.n	8009ab6 <UART_SetConfig+0x79a>
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aaa:	d204      	bcs.n	8009ab6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ab2:	60da      	str	r2, [r3, #12]
 8009ab4:	e17c      	b.n	8009db0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009abc:	e178      	b.n	8009db0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ac6:	f040 80c5 	bne.w	8009c54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009aca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	dc48      	bgt.n	8009b64 <UART_SetConfig+0x848>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	db7b      	blt.n	8009bce <UART_SetConfig+0x8b2>
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d879      	bhi.n	8009bce <UART_SetConfig+0x8b2>
 8009ada:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <UART_SetConfig+0x7c4>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b6b 	.word	0x08009b6b
 8009ae4:	08009b73 	.word	0x08009b73
 8009ae8:	08009bcf 	.word	0x08009bcf
 8009aec:	08009bcf 	.word	0x08009bcf
 8009af0:	08009b7b 	.word	0x08009b7b
 8009af4:	08009bcf 	.word	0x08009bcf
 8009af8:	08009bcf 	.word	0x08009bcf
 8009afc:	08009bcf 	.word	0x08009bcf
 8009b00:	08009b8b 	.word	0x08009b8b
 8009b04:	08009bcf 	.word	0x08009bcf
 8009b08:	08009bcf 	.word	0x08009bcf
 8009b0c:	08009bcf 	.word	0x08009bcf
 8009b10:	08009bcf 	.word	0x08009bcf
 8009b14:	08009bcf 	.word	0x08009bcf
 8009b18:	08009bcf 	.word	0x08009bcf
 8009b1c:	08009bcf 	.word	0x08009bcf
 8009b20:	08009b9b 	.word	0x08009b9b
 8009b24:	08009bcf 	.word	0x08009bcf
 8009b28:	08009bcf 	.word	0x08009bcf
 8009b2c:	08009bcf 	.word	0x08009bcf
 8009b30:	08009bcf 	.word	0x08009bcf
 8009b34:	08009bcf 	.word	0x08009bcf
 8009b38:	08009bcf 	.word	0x08009bcf
 8009b3c:	08009bcf 	.word	0x08009bcf
 8009b40:	08009bcf 	.word	0x08009bcf
 8009b44:	08009bcf 	.word	0x08009bcf
 8009b48:	08009bcf 	.word	0x08009bcf
 8009b4c:	08009bcf 	.word	0x08009bcf
 8009b50:	08009bcf 	.word	0x08009bcf
 8009b54:	08009bcf 	.word	0x08009bcf
 8009b58:	08009bcf 	.word	0x08009bcf
 8009b5c:	08009bcf 	.word	0x08009bcf
 8009b60:	08009bc1 	.word	0x08009bc1
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	d02e      	beq.n	8009bc6 <UART_SetConfig+0x8aa>
 8009b68:	e031      	b.n	8009bce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b6a:	f7fc f929 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8009b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b70:	e033      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b72:	f7fc f93b 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8009b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b78:	e02f      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fd fb6a 	bl	8007258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b88:	e027      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b8a:	f107 0318 	add.w	r3, r7, #24
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fd fcb6 	bl	8007500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b98:	e01f      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c50 <UART_SetConfig+0x934>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8009c50 <UART_SetConfig+0x934>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	08db      	lsrs	r3, r3, #3
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	4a24      	ldr	r2, [pc, #144]	@ (8009c44 <UART_SetConfig+0x928>)
 8009bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bb8:	e00f      	b.n	8009bda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bba:	4b22      	ldr	r3, [pc, #136]	@ (8009c44 <UART_SetConfig+0x928>)
 8009bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbe:	e00c      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bc0:	4b21      	ldr	r3, [pc, #132]	@ (8009c48 <UART_SetConfig+0x92c>)
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e009      	b.n	8009bda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bcc:	e005      	b.n	8009bda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80e7 	beq.w	8009db0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	4a19      	ldr	r2, [pc, #100]	@ (8009c4c <UART_SetConfig+0x930>)
 8009be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf4:	005a      	lsls	r2, r3, #1
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	085b      	lsrs	r3, r3, #1
 8009bfc:	441a      	add	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	2b0f      	cmp	r3, #15
 8009c0c:	d916      	bls.n	8009c3c <UART_SetConfig+0x920>
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c14:	d212      	bcs.n	8009c3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f023 030f 	bic.w	r3, r3, #15
 8009c1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e0b9      	b.n	8009db0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c42:	e0b5      	b.n	8009db0 <UART_SetConfig+0xa94>
 8009c44:	03d09000 	.word	0x03d09000
 8009c48:	003d0900 	.word	0x003d0900
 8009c4c:	0800bbc0 	.word	0x0800bbc0
 8009c50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	dc49      	bgt.n	8009cf0 <UART_SetConfig+0x9d4>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	db7c      	blt.n	8009d5a <UART_SetConfig+0xa3e>
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d87a      	bhi.n	8009d5a <UART_SetConfig+0xa3e>
 8009c64:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <UART_SetConfig+0x950>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009cff 	.word	0x08009cff
 8009c74:	08009d5b 	.word	0x08009d5b
 8009c78:	08009d5b 	.word	0x08009d5b
 8009c7c:	08009d07 	.word	0x08009d07
 8009c80:	08009d5b 	.word	0x08009d5b
 8009c84:	08009d5b 	.word	0x08009d5b
 8009c88:	08009d5b 	.word	0x08009d5b
 8009c8c:	08009d17 	.word	0x08009d17
 8009c90:	08009d5b 	.word	0x08009d5b
 8009c94:	08009d5b 	.word	0x08009d5b
 8009c98:	08009d5b 	.word	0x08009d5b
 8009c9c:	08009d5b 	.word	0x08009d5b
 8009ca0:	08009d5b 	.word	0x08009d5b
 8009ca4:	08009d5b 	.word	0x08009d5b
 8009ca8:	08009d5b 	.word	0x08009d5b
 8009cac:	08009d27 	.word	0x08009d27
 8009cb0:	08009d5b 	.word	0x08009d5b
 8009cb4:	08009d5b 	.word	0x08009d5b
 8009cb8:	08009d5b 	.word	0x08009d5b
 8009cbc:	08009d5b 	.word	0x08009d5b
 8009cc0:	08009d5b 	.word	0x08009d5b
 8009cc4:	08009d5b 	.word	0x08009d5b
 8009cc8:	08009d5b 	.word	0x08009d5b
 8009ccc:	08009d5b 	.word	0x08009d5b
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d5b 	.word	0x08009d5b
 8009cd8:	08009d5b 	.word	0x08009d5b
 8009cdc:	08009d5b 	.word	0x08009d5b
 8009ce0:	08009d5b 	.word	0x08009d5b
 8009ce4:	08009d5b 	.word	0x08009d5b
 8009ce8:	08009d5b 	.word	0x08009d5b
 8009cec:	08009d4d 	.word	0x08009d4d
 8009cf0:	2b40      	cmp	r3, #64	@ 0x40
 8009cf2:	d02e      	beq.n	8009d52 <UART_SetConfig+0xa36>
 8009cf4:	e031      	b.n	8009d5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf6:	f7fc f863 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8009cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cfc:	e033      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cfe:	f7fc f875 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8009d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d04:	e02f      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd faa4 	bl	8007258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e027      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d16:	f107 0318 	add.w	r3, r7, #24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd fbf0 	bl	8007500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d24:	e01f      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d26:	4b2d      	ldr	r3, [pc, #180]	@ (8009ddc <UART_SetConfig+0xac0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d32:	4b2a      	ldr	r3, [pc, #168]	@ (8009ddc <UART_SetConfig+0xac0>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a28      	ldr	r2, [pc, #160]	@ (8009de0 <UART_SetConfig+0xac4>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d44:	e00f      	b.n	8009d66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d46:	4b26      	ldr	r3, [pc, #152]	@ (8009de0 <UART_SetConfig+0xac4>)
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4a:	e00c      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d4c:	4b25      	ldr	r3, [pc, #148]	@ (8009de4 <UART_SetConfig+0xac8>)
 8009d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d50:	e009      	b.n	8009d66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	e005      	b.n	8009d66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d64:	bf00      	nop
    }

    if (pclk != 0U)
 8009d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d021      	beq.n	8009db0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d70:	4a1d      	ldr	r2, [pc, #116]	@ (8009de8 <UART_SetConfig+0xacc>)
 8009d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d76:	461a      	mov	r2, r3
 8009d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	085b      	lsrs	r3, r3, #1
 8009d84:	441a      	add	r2, r3
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	2b0f      	cmp	r3, #15
 8009d94:	d909      	bls.n	8009daa <UART_SetConfig+0xa8e>
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d9c:	d205      	bcs.n	8009daa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60da      	str	r2, [r3, #12]
 8009da8:	e002      	b.n	8009db0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009dcc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3748      	adds	r7, #72	@ 0x48
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dda:	bf00      	nop
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	03d09000 	.word	0x03d09000
 8009de4:	003d0900 	.word	0x003d0900
 8009de8:	0800bbc0 	.word	0x0800bbc0

08009dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e80:	f003 0310 	and.w	r3, r3, #16
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01a      	beq.n	8009f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eea:	d10a      	bne.n	8009f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	605a      	str	r2, [r3, #4]
  }
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b098      	sub	sp, #96	@ 0x60
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f40:	f7f8 fd0c 	bl	800295c <HAL_GetTick>
 8009f44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d12f      	bne.n	8009fb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f88e 	bl	800a084 <UART_WaitOnFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d022      	beq.n	8009fb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f76:	e853 3f00 	ldrex	r3, [r3]
 8009f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e6      	bne.n	8009f6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e063      	b.n	800a07c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0304 	and.w	r3, r3, #4
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	d149      	bne.n	800a056 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f857 	bl	800a084 <UART_WaitOnFlagUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d03c      	beq.n	800a056 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e6      	bne.n	8009fdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3308      	adds	r3, #8
 800a014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a02e:	61fa      	str	r2, [r7, #28]
 800a030:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	69b9      	ldr	r1, [r7, #24]
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	617b      	str	r3, [r7, #20]
   return(result);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e5      	bne.n	800a00e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2220      	movs	r2, #32
 800a046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e012      	b.n	800a07c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3758      	adds	r7, #88	@ 0x58
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a094:	e04f      	b.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09c:	d04b      	beq.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09e:	f7f8 fc5d 	bl	800295c <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d302      	bcc.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e04e      	b.n	800a156 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d037      	beq.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ca:	d034      	beq.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d031      	beq.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	f003 0308 	and.w	r3, r3, #8
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d110      	bne.n	800a102 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f95b 	bl	800a3a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e029      	b.n	800a156 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a10c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a110:	d111      	bne.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a11a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f941 	bl	800a3a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2220      	movs	r2, #32
 800a126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e00f      	b.n	800a156 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4013      	ands	r3, r2
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	429a      	cmp	r2, r3
 800a144:	bf0c      	ite	eq
 800a146:	2301      	moveq	r3, #1
 800a148:	2300      	movne	r3, #0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	429a      	cmp	r2, r3
 800a152:	d0a0      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a160:	b480      	push	{r7}
 800a162:	b0a3      	sub	sp, #140	@ 0x8c
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	88fa      	ldrh	r2, [r7, #6]
 800a178:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	88fa      	ldrh	r2, [r7, #6]
 800a180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a192:	d10e      	bne.n	800a1b2 <UART_Start_Receive_IT+0x52>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d105      	bne.n	800a1a8 <UART_Start_Receive_IT+0x48>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a1a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1a6:	e02d      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	22ff      	movs	r2, #255	@ 0xff
 800a1ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1b0:	e028      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10d      	bne.n	800a1d6 <UART_Start_Receive_IT+0x76>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d104      	bne.n	800a1cc <UART_Start_Receive_IT+0x6c>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	22ff      	movs	r2, #255	@ 0xff
 800a1c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1ca:	e01b      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	227f      	movs	r2, #127	@ 0x7f
 800a1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1d4:	e016      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1de:	d10d      	bne.n	800a1fc <UART_Start_Receive_IT+0x9c>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <UART_Start_Receive_IT+0x92>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	227f      	movs	r2, #127	@ 0x7f
 800a1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1f0:	e008      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	223f      	movs	r2, #63	@ 0x3f
 800a1f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1fa:	e003      	b.n	800a204 <UART_Start_Receive_IT+0xa4>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2222      	movs	r2, #34	@ 0x22
 800a210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3308      	adds	r3, #8
 800a21a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a238:	673a      	str	r2, [r7, #112]	@ 0x70
 800a23a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a23e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e3      	bne.n	800a214 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a254:	d14f      	bne.n	800a2f6 <UART_Start_Receive_IT+0x196>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a25c:	88fa      	ldrh	r2, [r7, #6]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d349      	bcc.n	800a2f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a26a:	d107      	bne.n	800a27c <UART_Start_Receive_IT+0x11c>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d103      	bne.n	800a27c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4a47      	ldr	r2, [pc, #284]	@ (800a394 <UART_Start_Receive_IT+0x234>)
 800a278:	675a      	str	r2, [r3, #116]	@ 0x74
 800a27a:	e002      	b.n	800a282 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a46      	ldr	r2, [pc, #280]	@ (800a398 <UART_Start_Receive_IT+0x238>)
 800a280:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01a      	beq.n	800a2c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a29a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a29e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a2b4:	e841 2300 	strex	r3, r2, [r1]
 800a2b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e4      	bne.n	800a28a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ca:	e853 3f00 	ldrex	r3, [r3]
 800a2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a2e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a2e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e5      	bne.n	800a2c0 <UART_Start_Receive_IT+0x160>
 800a2f4:	e046      	b.n	800a384 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fe:	d107      	bne.n	800a310 <UART_Start_Receive_IT+0x1b0>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4a24      	ldr	r2, [pc, #144]	@ (800a39c <UART_Start_Receive_IT+0x23c>)
 800a30c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a30e:	e002      	b.n	800a316 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <UART_Start_Receive_IT+0x240>)
 800a314:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d019      	beq.n	800a352 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a332:	677b      	str	r3, [r7, #116]	@ 0x74
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a33c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_Start_Receive_IT+0x1be>
 800a350:	e018      	b.n	800a384 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	613b      	str	r3, [r7, #16]
   return(result);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f043 0320 	orr.w	r3, r3, #32
 800a366:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	461a      	mov	r2, r3
 800a36e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a370:	623b      	str	r3, [r7, #32]
 800a372:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	69f9      	ldr	r1, [r7, #28]
 800a376:	6a3a      	ldr	r2, [r7, #32]
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e6      	bne.n	800a352 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	378c      	adds	r7, #140	@ 0x8c
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	0800abc1 	.word	0x0800abc1
 800a398:	0800a85d 	.word	0x0800a85d
 800a39c:	0800a6a5 	.word	0x0800a6a5
 800a3a0:	0800a4ed 	.word	0x0800a4ed

0800a3a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b095      	sub	sp, #84	@ 0x54
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e6      	bne.n	800a3ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a46c <UART_EndRxTransfer+0xc8>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e5      	bne.n	800a3de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a416:	2b01      	cmp	r3, #1
 800a418:	d118      	bne.n	800a44c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	60bb      	str	r3, [r7, #8]
   return(result);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f023 0310 	bic.w	r3, r3, #16
 800a42e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6979      	ldr	r1, [r7, #20]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	613b      	str	r3, [r7, #16]
   return(result);
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e6      	bne.n	800a41a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a460:	bf00      	nop
 800a462:	3754      	adds	r7, #84	@ 0x54
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	effffffe 	.word	0xeffffffe

0800a470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a47c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7fe ff32 	bl	80092f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7fe fefd 	bl	80092dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4e2:	bf00      	nop
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b09c      	sub	sp, #112	@ 0x70
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a4fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a504:	2b22      	cmp	r3, #34	@ 0x22
 800a506:	f040 80be 	bne.w	800a686 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a510:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a514:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a518:	b2d9      	uxtb	r1, r3
 800a51a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a524:	400a      	ands	r2, r1
 800a526:	b2d2      	uxtb	r2, r2
 800a528:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f040 80a1 	bne.w	800a696 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a55c:	e853 3f00 	ldrex	r3, [r3]
 800a560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a572:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a574:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e6      	bne.n	800a554 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e5      	bne.n	800a586 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a33      	ldr	r2, [pc, #204]	@ (800a6a0 <UART_RxISR_8BIT+0x1b4>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d01f      	beq.n	800a618 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d018      	beq.n	800a618 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a604:	633b      	str	r3, [r7, #48]	@ 0x30
 800a606:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d12e      	bne.n	800a67e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	60fb      	str	r3, [r7, #12]
   return(result);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0310 	bic.w	r3, r3, #16
 800a63a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	69b9      	ldr	r1, [r7, #24]
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	617b      	str	r3, [r7, #20]
   return(result);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e6      	bne.n	800a626 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b10      	cmp	r3, #16
 800a664:	d103      	bne.n	800a66e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2210      	movs	r2, #16
 800a66c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fe fe44 	bl	8009304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a67c:	e00b      	b.n	800a696 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7f7 ff94 	bl	80025ac <HAL_UART_RxCpltCallback>
}
 800a684:	e007      	b.n	800a696 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0208 	orr.w	r2, r2, #8
 800a694:	619a      	str	r2, [r3, #24]
}
 800a696:	bf00      	nop
 800a698:	3770      	adds	r7, #112	@ 0x70
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	58000c00 	.word	0x58000c00

0800a6a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b09c      	sub	sp, #112	@ 0x70
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6bc:	2b22      	cmp	r3, #34	@ 0x22
 800a6be:	f040 80be 	bne.w	800a83e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a6d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a6d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a6da:	4013      	ands	r3, r2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6e6:	1c9a      	adds	r2, r3, #2
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a704:	b29b      	uxth	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	f040 80a1 	bne.w	800a84e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a71c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a720:	667b      	str	r3, [r7, #100]	@ 0x64
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a72a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a72c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a732:	e841 2300 	strex	r3, r2, [r1]
 800a736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1e6      	bne.n	800a70c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	f023 0301 	bic.w	r3, r3, #1
 800a754:	663b      	str	r3, [r7, #96]	@ 0x60
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a75e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e5      	bne.n	800a73e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a33      	ldr	r2, [pc, #204]	@ (800a858 <UART_RxISR_16BIT+0x1b4>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d01f      	beq.n	800a7d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d018      	beq.n	800a7d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e6      	bne.n	800a79e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d12e      	bne.n	800a836 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	e853 3f00 	ldrex	r3, [r3]
 800a7ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f023 0310 	bic.w	r3, r3, #16
 800a7f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7fc:	61bb      	str	r3, [r7, #24]
 800a7fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6979      	ldr	r1, [r7, #20]
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	613b      	str	r3, [r7, #16]
   return(result);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e6      	bne.n	800a7de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	f003 0310 	and.w	r3, r3, #16
 800a81a:	2b10      	cmp	r3, #16
 800a81c:	d103      	bne.n	800a826 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2210      	movs	r2, #16
 800a824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7fe fd68 	bl	8009304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a834:	e00b      	b.n	800a84e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7f7 feb8 	bl	80025ac <HAL_UART_RxCpltCallback>
}
 800a83c:	e007      	b.n	800a84e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f042 0208 	orr.w	r2, r2, #8
 800a84c:	619a      	str	r2, [r3, #24]
}
 800a84e:	bf00      	nop
 800a850:	3770      	adds	r7, #112	@ 0x70
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	58000c00 	.word	0x58000c00

0800a85c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b0ac      	sub	sp, #176	@ 0xb0
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a86a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a892:	2b22      	cmp	r3, #34	@ 0x22
 800a894:	f040 8181 	bne.w	800ab9a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a89e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8a2:	e124      	b.n	800aaee <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a8ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a8b2:	b2d9      	uxtb	r1, r3
 800a8b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8be:	400a      	ands	r2, r1
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8ee:	f003 0307 	and.w	r3, r3, #7
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d053      	beq.n	800a99e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d011      	beq.n	800a926 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2201      	movs	r2, #1
 800a914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a91c:	f043 0201 	orr.w	r2, r3, #1
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d011      	beq.n	800a956 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2202      	movs	r2, #2
 800a944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a94c:	f043 0204 	orr.w	r2, r3, #4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a95a:	f003 0304 	and.w	r3, r3, #4
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d011      	beq.n	800a986 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2204      	movs	r2, #4
 800a974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a97c:	f043 0202 	orr.w	r2, r3, #2
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d006      	beq.n	800a99e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7fe fcad 	bl	80092f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f040 80a1 	bne.w	800aaee <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a9ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a9d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a9dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e4      	bne.n	800a9ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a9f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9f4:	4b6f      	ldr	r3, [pc, #444]	@ (800abb4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3308      	adds	r3, #8
 800aa02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa06:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aa08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aa0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aa14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e3      	bne.n	800a9e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a61      	ldr	r2, [pc, #388]	@ (800abb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d021      	beq.n	800aa7c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01a      	beq.n	800aa7c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa68:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e4      	bne.n	800aa46 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d130      	bne.n	800aae6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	f023 0310 	bic.w	r3, r3, #16
 800aa9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aaac:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e4      	bne.n	800aa8a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b10      	cmp	r3, #16
 800aacc:	d103      	bne.n	800aad6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2210      	movs	r2, #16
 800aad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7fe fc10 	bl	8009304 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800aae4:	e00e      	b.n	800ab04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7f7 fd60 	bl	80025ac <HAL_UART_RxCpltCallback>
        break;
 800aaec:	e00a      	b.n	800ab04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aaee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d006      	beq.n	800ab04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800aaf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aafa:	f003 0320 	and.w	r3, r3, #32
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f47f aed0 	bne.w	800a8a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d049      	beq.n	800abaa <UART_RxISR_8BIT_FIFOEN+0x34e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab1c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d242      	bcs.n	800abaa <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e3      	bne.n	800ab24 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a17      	ldr	r2, [pc, #92]	@ (800abbc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ab60:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	e853 3f00 	ldrex	r3, [r3]
 800ab6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f043 0320 	orr.w	r3, r3, #32
 800ab76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6979      	ldr	r1, [r7, #20]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	613b      	str	r3, [r7, #16]
   return(result);
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e4      	bne.n	800ab62 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab98:	e007      	b.n	800abaa <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	699a      	ldr	r2, [r3, #24]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f042 0208 	orr.w	r2, r2, #8
 800aba8:	619a      	str	r2, [r3, #24]
}
 800abaa:	bf00      	nop
 800abac:	37b0      	adds	r7, #176	@ 0xb0
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	effffffe 	.word	0xeffffffe
 800abb8:	58000c00 	.word	0x58000c00
 800abbc:	0800a4ed 	.word	0x0800a4ed

0800abc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b0ae      	sub	sp, #184	@ 0xb8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abf6:	2b22      	cmp	r3, #34	@ 0x22
 800abf8:	f040 8185 	bne.w	800af06 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac06:	e128      	b.n	800ae5a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ac1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ac1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ac22:	4013      	ands	r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac30:	1c9a      	adds	r2, r3, #2
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ac52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d053      	beq.n	800ad06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d011      	beq.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ac6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00b      	beq.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac84:	f043 0201 	orr.w	r2, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d011      	beq.n	800acbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ac9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2202      	movs	r2, #2
 800acac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb4:	f043 0204 	orr.w	r2, r3, #4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d011      	beq.n	800acee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800acca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00b      	beq.n	800acee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2204      	movs	r2, #4
 800acdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace4:	f043 0202 	orr.w	r2, r3, #2
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d006      	beq.n	800ad06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7fe faf9 	bl	80092f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f040 80a3 	bne.w	800ae5a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e2      	bne.n	800ad14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3308      	adds	r3, #8
 800ad54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ad60:	4b6f      	ldr	r3, [pc, #444]	@ (800af20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ad62:	4013      	ands	r3, r2
 800ad64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ad72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e3      	bne.n	800ad4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a61      	ldr	r2, [pc, #388]	@ (800af24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d021      	beq.n	800ade8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01a      	beq.n	800ade8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800adc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800add4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800add6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ade2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e4      	bne.n	800adb2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adec:	2b01      	cmp	r3, #1
 800adee:	d130      	bne.n	800ae52 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae06:	f023 0310 	bic.w	r3, r3, #16
 800ae0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae18:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae20:	e841 2300 	strex	r3, r2, [r1]
 800ae24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e4      	bne.n	800adf6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	2b10      	cmp	r3, #16
 800ae38:	d103      	bne.n	800ae42 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2210      	movs	r2, #16
 800ae40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7fe fa5a 	bl	8009304 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ae50:	e00e      	b.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7f7 fbaa 	bl	80025ac <HAL_UART_RxCpltCallback>
        break;
 800ae58:	e00a      	b.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae5a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d006      	beq.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800ae62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f47f aecc 	bne.w	800ac08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae76:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d049      	beq.n	800af16 <UART_RxISR_16BIT_FIFOEN+0x356>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae88:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d242      	bcs.n	800af16 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3308      	adds	r3, #8
 800ae96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	e853 3f00 	ldrex	r3, [r3]
 800ae9e:	623b      	str	r3, [r7, #32]
   return(result);
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aea6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aeb4:	633a      	str	r2, [r7, #48]	@ 0x30
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e3      	bne.n	800ae90 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a17      	ldr	r2, [pc, #92]	@ (800af28 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800aecc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	60fb      	str	r3, [r7, #12]
   return(result);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f043 0320 	orr.w	r3, r3, #32
 800aee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	69b9      	ldr	r1, [r7, #24]
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	617b      	str	r3, [r7, #20]
   return(result);
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e4      	bne.n	800aece <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af04:	e007      	b.n	800af16 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f042 0208 	orr.w	r2, r2, #8
 800af14:	619a      	str	r2, [r3, #24]
}
 800af16:	bf00      	nop
 800af18:	37b8      	adds	r7, #184	@ 0xb8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	effffffe 	.word	0xeffffffe
 800af24:	58000c00 	.word	0x58000c00
 800af28:	0800a6a5 	.word	0x0800a6a5

0800af2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_UARTEx_DisableFifoMode+0x16>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e027      	b.n	800afce <HAL_UARTEx_DisableFifoMode+0x66>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2224      	movs	r2, #36	@ 0x24
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0201 	bic.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800afac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afea:	2b01      	cmp	r3, #1
 800afec:	d101      	bne.n	800aff2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afee:	2302      	movs	r3, #2
 800aff0:	e02d      	b.n	800b04e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2224      	movs	r2, #36	@ 0x24
 800affe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0201 	bic.w	r2, r2, #1
 800b018:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f850 	bl	800b0d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b066:	2b01      	cmp	r3, #1
 800b068:	d101      	bne.n	800b06e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b06a:	2302      	movs	r3, #2
 800b06c:	e02d      	b.n	800b0ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2224      	movs	r2, #36	@ 0x24
 800b07a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f022 0201 	bic.w	r2, r2, #1
 800b094:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f812 	bl	800b0d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d108      	bne.n	800b0f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0f4:	e031      	b.n	800b15a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0fa:	2310      	movs	r3, #16
 800b0fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	0e5b      	lsrs	r3, r3, #25
 800b106:	b2db      	uxtb	r3, r3
 800b108:	f003 0307 	and.w	r3, r3, #7
 800b10c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	0f5b      	lsrs	r3, r3, #29
 800b116:	b2db      	uxtb	r3, r3
 800b118:	f003 0307 	and.w	r3, r3, #7
 800b11c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	7b3a      	ldrb	r2, [r7, #12]
 800b122:	4911      	ldr	r1, [pc, #68]	@ (800b168 <UARTEx_SetNbDataToProcess+0x94>)
 800b124:	5c8a      	ldrb	r2, [r1, r2]
 800b126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b12a:	7b3a      	ldrb	r2, [r7, #12]
 800b12c:	490f      	ldr	r1, [pc, #60]	@ (800b16c <UARTEx_SetNbDataToProcess+0x98>)
 800b12e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b130:	fb93 f3f2 	sdiv	r3, r3, r2
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	7b7a      	ldrb	r2, [r7, #13]
 800b140:	4909      	ldr	r1, [pc, #36]	@ (800b168 <UARTEx_SetNbDataToProcess+0x94>)
 800b142:	5c8a      	ldrb	r2, [r1, r2]
 800b144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b148:	7b7a      	ldrb	r2, [r7, #13]
 800b14a:	4908      	ldr	r1, [pc, #32]	@ (800b16c <UARTEx_SetNbDataToProcess+0x98>)
 800b14c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b14e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	0800bbd8 	.word	0x0800bbd8
 800b16c:	0800bbe0 	.word	0x0800bbe0

0800b170 <_vsniprintf_r>:
 800b170:	b530      	push	{r4, r5, lr}
 800b172:	4614      	mov	r4, r2
 800b174:	2c00      	cmp	r4, #0
 800b176:	b09b      	sub	sp, #108	@ 0x6c
 800b178:	4605      	mov	r5, r0
 800b17a:	461a      	mov	r2, r3
 800b17c:	da05      	bge.n	800b18a <_vsniprintf_r+0x1a>
 800b17e:	238b      	movs	r3, #139	@ 0x8b
 800b180:	6003      	str	r3, [r0, #0]
 800b182:	f04f 30ff 	mov.w	r0, #4294967295
 800b186:	b01b      	add	sp, #108	@ 0x6c
 800b188:	bd30      	pop	{r4, r5, pc}
 800b18a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b18e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b192:	f04f 0300 	mov.w	r3, #0
 800b196:	9319      	str	r3, [sp, #100]	@ 0x64
 800b198:	bf14      	ite	ne
 800b19a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b19e:	4623      	moveq	r3, r4
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1a8:	9100      	str	r1, [sp, #0]
 800b1aa:	9104      	str	r1, [sp, #16]
 800b1ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b1b0:	4669      	mov	r1, sp
 800b1b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b1b4:	f000 f9ae 	bl	800b514 <_svfiprintf_r>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	bfbc      	itt	lt
 800b1bc:	238b      	movlt	r3, #139	@ 0x8b
 800b1be:	602b      	strlt	r3, [r5, #0]
 800b1c0:	2c00      	cmp	r4, #0
 800b1c2:	d0e0      	beq.n	800b186 <_vsniprintf_r+0x16>
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	701a      	strb	r2, [r3, #0]
 800b1ca:	e7dc      	b.n	800b186 <_vsniprintf_r+0x16>

0800b1cc <vsniprintf>:
 800b1cc:	b507      	push	{r0, r1, r2, lr}
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	4803      	ldr	r0, [pc, #12]	@ (800b1e4 <vsniprintf+0x18>)
 800b1d8:	6800      	ldr	r0, [r0, #0]
 800b1da:	f7ff ffc9 	bl	800b170 <_vsniprintf_r>
 800b1de:	b003      	add	sp, #12
 800b1e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1e4:	24000010 	.word	0x24000010

0800b1e8 <memset>:
 800b1e8:	4402      	add	r2, r0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d100      	bne.n	800b1f2 <memset+0xa>
 800b1f0:	4770      	bx	lr
 800b1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f6:	e7f9      	b.n	800b1ec <memset+0x4>

0800b1f8 <__errno>:
 800b1f8:	4b01      	ldr	r3, [pc, #4]	@ (800b200 <__errno+0x8>)
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	24000010 	.word	0x24000010

0800b204 <__libc_init_array>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	4d0d      	ldr	r5, [pc, #52]	@ (800b23c <__libc_init_array+0x38>)
 800b208:	4c0d      	ldr	r4, [pc, #52]	@ (800b240 <__libc_init_array+0x3c>)
 800b20a:	1b64      	subs	r4, r4, r5
 800b20c:	10a4      	asrs	r4, r4, #2
 800b20e:	2600      	movs	r6, #0
 800b210:	42a6      	cmp	r6, r4
 800b212:	d109      	bne.n	800b228 <__libc_init_array+0x24>
 800b214:	4d0b      	ldr	r5, [pc, #44]	@ (800b244 <__libc_init_array+0x40>)
 800b216:	4c0c      	ldr	r4, [pc, #48]	@ (800b248 <__libc_init_array+0x44>)
 800b218:	f000 fc64 	bl	800bae4 <_init>
 800b21c:	1b64      	subs	r4, r4, r5
 800b21e:	10a4      	asrs	r4, r4, #2
 800b220:	2600      	movs	r6, #0
 800b222:	42a6      	cmp	r6, r4
 800b224:	d105      	bne.n	800b232 <__libc_init_array+0x2e>
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	f855 3b04 	ldr.w	r3, [r5], #4
 800b22c:	4798      	blx	r3
 800b22e:	3601      	adds	r6, #1
 800b230:	e7ee      	b.n	800b210 <__libc_init_array+0xc>
 800b232:	f855 3b04 	ldr.w	r3, [r5], #4
 800b236:	4798      	blx	r3
 800b238:	3601      	adds	r6, #1
 800b23a:	e7f2      	b.n	800b222 <__libc_init_array+0x1e>
 800b23c:	0800bc24 	.word	0x0800bc24
 800b240:	0800bc24 	.word	0x0800bc24
 800b244:	0800bc24 	.word	0x0800bc24
 800b248:	0800bc28 	.word	0x0800bc28

0800b24c <__retarget_lock_acquire_recursive>:
 800b24c:	4770      	bx	lr

0800b24e <__retarget_lock_release_recursive>:
 800b24e:	4770      	bx	lr

0800b250 <memcpy>:
 800b250:	440a      	add	r2, r1
 800b252:	4291      	cmp	r1, r2
 800b254:	f100 33ff 	add.w	r3, r0, #4294967295
 800b258:	d100      	bne.n	800b25c <memcpy+0xc>
 800b25a:	4770      	bx	lr
 800b25c:	b510      	push	{r4, lr}
 800b25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b262:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b266:	4291      	cmp	r1, r2
 800b268:	d1f9      	bne.n	800b25e <memcpy+0xe>
 800b26a:	bd10      	pop	{r4, pc}

0800b26c <_free_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4605      	mov	r5, r0
 800b270:	2900      	cmp	r1, #0
 800b272:	d041      	beq.n	800b2f8 <_free_r+0x8c>
 800b274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b278:	1f0c      	subs	r4, r1, #4
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bfb8      	it	lt
 800b27e:	18e4      	addlt	r4, r4, r3
 800b280:	f000 f8e0 	bl	800b444 <__malloc_lock>
 800b284:	4a1d      	ldr	r2, [pc, #116]	@ (800b2fc <_free_r+0x90>)
 800b286:	6813      	ldr	r3, [r2, #0]
 800b288:	b933      	cbnz	r3, 800b298 <_free_r+0x2c>
 800b28a:	6063      	str	r3, [r4, #4]
 800b28c:	6014      	str	r4, [r2, #0]
 800b28e:	4628      	mov	r0, r5
 800b290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b294:	f000 b8dc 	b.w	800b450 <__malloc_unlock>
 800b298:	42a3      	cmp	r3, r4
 800b29a:	d908      	bls.n	800b2ae <_free_r+0x42>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	1821      	adds	r1, r4, r0
 800b2a0:	428b      	cmp	r3, r1
 800b2a2:	bf01      	itttt	eq
 800b2a4:	6819      	ldreq	r1, [r3, #0]
 800b2a6:	685b      	ldreq	r3, [r3, #4]
 800b2a8:	1809      	addeq	r1, r1, r0
 800b2aa:	6021      	streq	r1, [r4, #0]
 800b2ac:	e7ed      	b.n	800b28a <_free_r+0x1e>
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	b10b      	cbz	r3, 800b2b8 <_free_r+0x4c>
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	d9fa      	bls.n	800b2ae <_free_r+0x42>
 800b2b8:	6811      	ldr	r1, [r2, #0]
 800b2ba:	1850      	adds	r0, r2, r1
 800b2bc:	42a0      	cmp	r0, r4
 800b2be:	d10b      	bne.n	800b2d8 <_free_r+0x6c>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	4401      	add	r1, r0
 800b2c4:	1850      	adds	r0, r2, r1
 800b2c6:	4283      	cmp	r3, r0
 800b2c8:	6011      	str	r1, [r2, #0]
 800b2ca:	d1e0      	bne.n	800b28e <_free_r+0x22>
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	6053      	str	r3, [r2, #4]
 800b2d2:	4408      	add	r0, r1
 800b2d4:	6010      	str	r0, [r2, #0]
 800b2d6:	e7da      	b.n	800b28e <_free_r+0x22>
 800b2d8:	d902      	bls.n	800b2e0 <_free_r+0x74>
 800b2da:	230c      	movs	r3, #12
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	e7d6      	b.n	800b28e <_free_r+0x22>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	1821      	adds	r1, r4, r0
 800b2e4:	428b      	cmp	r3, r1
 800b2e6:	bf04      	itt	eq
 800b2e8:	6819      	ldreq	r1, [r3, #0]
 800b2ea:	685b      	ldreq	r3, [r3, #4]
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	bf04      	itt	eq
 800b2f0:	1809      	addeq	r1, r1, r0
 800b2f2:	6021      	streq	r1, [r4, #0]
 800b2f4:	6054      	str	r4, [r2, #4]
 800b2f6:	e7ca      	b.n	800b28e <_free_r+0x22>
 800b2f8:	bd38      	pop	{r3, r4, r5, pc}
 800b2fa:	bf00      	nop
 800b2fc:	240015fc 	.word	0x240015fc

0800b300 <sbrk_aligned>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	4e0f      	ldr	r6, [pc, #60]	@ (800b340 <sbrk_aligned+0x40>)
 800b304:	460c      	mov	r4, r1
 800b306:	6831      	ldr	r1, [r6, #0]
 800b308:	4605      	mov	r5, r0
 800b30a:	b911      	cbnz	r1, 800b312 <sbrk_aligned+0x12>
 800b30c:	f000 fba4 	bl	800ba58 <_sbrk_r>
 800b310:	6030      	str	r0, [r6, #0]
 800b312:	4621      	mov	r1, r4
 800b314:	4628      	mov	r0, r5
 800b316:	f000 fb9f 	bl	800ba58 <_sbrk_r>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	d103      	bne.n	800b326 <sbrk_aligned+0x26>
 800b31e:	f04f 34ff 	mov.w	r4, #4294967295
 800b322:	4620      	mov	r0, r4
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	1cc4      	adds	r4, r0, #3
 800b328:	f024 0403 	bic.w	r4, r4, #3
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d0f8      	beq.n	800b322 <sbrk_aligned+0x22>
 800b330:	1a21      	subs	r1, r4, r0
 800b332:	4628      	mov	r0, r5
 800b334:	f000 fb90 	bl	800ba58 <_sbrk_r>
 800b338:	3001      	adds	r0, #1
 800b33a:	d1f2      	bne.n	800b322 <sbrk_aligned+0x22>
 800b33c:	e7ef      	b.n	800b31e <sbrk_aligned+0x1e>
 800b33e:	bf00      	nop
 800b340:	240015f8 	.word	0x240015f8

0800b344 <_malloc_r>:
 800b344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b348:	1ccd      	adds	r5, r1, #3
 800b34a:	f025 0503 	bic.w	r5, r5, #3
 800b34e:	3508      	adds	r5, #8
 800b350:	2d0c      	cmp	r5, #12
 800b352:	bf38      	it	cc
 800b354:	250c      	movcc	r5, #12
 800b356:	2d00      	cmp	r5, #0
 800b358:	4606      	mov	r6, r0
 800b35a:	db01      	blt.n	800b360 <_malloc_r+0x1c>
 800b35c:	42a9      	cmp	r1, r5
 800b35e:	d904      	bls.n	800b36a <_malloc_r+0x26>
 800b360:	230c      	movs	r3, #12
 800b362:	6033      	str	r3, [r6, #0]
 800b364:	2000      	movs	r0, #0
 800b366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b440 <_malloc_r+0xfc>
 800b36e:	f000 f869 	bl	800b444 <__malloc_lock>
 800b372:	f8d8 3000 	ldr.w	r3, [r8]
 800b376:	461c      	mov	r4, r3
 800b378:	bb44      	cbnz	r4, 800b3cc <_malloc_r+0x88>
 800b37a:	4629      	mov	r1, r5
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff ffbf 	bl	800b300 <sbrk_aligned>
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	4604      	mov	r4, r0
 800b386:	d158      	bne.n	800b43a <_malloc_r+0xf6>
 800b388:	f8d8 4000 	ldr.w	r4, [r8]
 800b38c:	4627      	mov	r7, r4
 800b38e:	2f00      	cmp	r7, #0
 800b390:	d143      	bne.n	800b41a <_malloc_r+0xd6>
 800b392:	2c00      	cmp	r4, #0
 800b394:	d04b      	beq.n	800b42e <_malloc_r+0xea>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	4639      	mov	r1, r7
 800b39a:	4630      	mov	r0, r6
 800b39c:	eb04 0903 	add.w	r9, r4, r3
 800b3a0:	f000 fb5a 	bl	800ba58 <_sbrk_r>
 800b3a4:	4581      	cmp	r9, r0
 800b3a6:	d142      	bne.n	800b42e <_malloc_r+0xea>
 800b3a8:	6821      	ldr	r1, [r4, #0]
 800b3aa:	1a6d      	subs	r5, r5, r1
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ffa6 	bl	800b300 <sbrk_aligned>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d03a      	beq.n	800b42e <_malloc_r+0xea>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	442b      	add	r3, r5
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	f8d8 3000 	ldr.w	r3, [r8]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	bb62      	cbnz	r2, 800b420 <_malloc_r+0xdc>
 800b3c6:	f8c8 7000 	str.w	r7, [r8]
 800b3ca:	e00f      	b.n	800b3ec <_malloc_r+0xa8>
 800b3cc:	6822      	ldr	r2, [r4, #0]
 800b3ce:	1b52      	subs	r2, r2, r5
 800b3d0:	d420      	bmi.n	800b414 <_malloc_r+0xd0>
 800b3d2:	2a0b      	cmp	r2, #11
 800b3d4:	d917      	bls.n	800b406 <_malloc_r+0xc2>
 800b3d6:	1961      	adds	r1, r4, r5
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	6025      	str	r5, [r4, #0]
 800b3dc:	bf18      	it	ne
 800b3de:	6059      	strne	r1, [r3, #4]
 800b3e0:	6863      	ldr	r3, [r4, #4]
 800b3e2:	bf08      	it	eq
 800b3e4:	f8c8 1000 	streq.w	r1, [r8]
 800b3e8:	5162      	str	r2, [r4, r5]
 800b3ea:	604b      	str	r3, [r1, #4]
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f000 f82f 	bl	800b450 <__malloc_unlock>
 800b3f2:	f104 000b 	add.w	r0, r4, #11
 800b3f6:	1d23      	adds	r3, r4, #4
 800b3f8:	f020 0007 	bic.w	r0, r0, #7
 800b3fc:	1ac2      	subs	r2, r0, r3
 800b3fe:	bf1c      	itt	ne
 800b400:	1a1b      	subne	r3, r3, r0
 800b402:	50a3      	strne	r3, [r4, r2]
 800b404:	e7af      	b.n	800b366 <_malloc_r+0x22>
 800b406:	6862      	ldr	r2, [r4, #4]
 800b408:	42a3      	cmp	r3, r4
 800b40a:	bf0c      	ite	eq
 800b40c:	f8c8 2000 	streq.w	r2, [r8]
 800b410:	605a      	strne	r2, [r3, #4]
 800b412:	e7eb      	b.n	800b3ec <_malloc_r+0xa8>
 800b414:	4623      	mov	r3, r4
 800b416:	6864      	ldr	r4, [r4, #4]
 800b418:	e7ae      	b.n	800b378 <_malloc_r+0x34>
 800b41a:	463c      	mov	r4, r7
 800b41c:	687f      	ldr	r7, [r7, #4]
 800b41e:	e7b6      	b.n	800b38e <_malloc_r+0x4a>
 800b420:	461a      	mov	r2, r3
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	42a3      	cmp	r3, r4
 800b426:	d1fb      	bne.n	800b420 <_malloc_r+0xdc>
 800b428:	2300      	movs	r3, #0
 800b42a:	6053      	str	r3, [r2, #4]
 800b42c:	e7de      	b.n	800b3ec <_malloc_r+0xa8>
 800b42e:	230c      	movs	r3, #12
 800b430:	6033      	str	r3, [r6, #0]
 800b432:	4630      	mov	r0, r6
 800b434:	f000 f80c 	bl	800b450 <__malloc_unlock>
 800b438:	e794      	b.n	800b364 <_malloc_r+0x20>
 800b43a:	6005      	str	r5, [r0, #0]
 800b43c:	e7d6      	b.n	800b3ec <_malloc_r+0xa8>
 800b43e:	bf00      	nop
 800b440:	240015fc 	.word	0x240015fc

0800b444 <__malloc_lock>:
 800b444:	4801      	ldr	r0, [pc, #4]	@ (800b44c <__malloc_lock+0x8>)
 800b446:	f7ff bf01 	b.w	800b24c <__retarget_lock_acquire_recursive>
 800b44a:	bf00      	nop
 800b44c:	240015f4 	.word	0x240015f4

0800b450 <__malloc_unlock>:
 800b450:	4801      	ldr	r0, [pc, #4]	@ (800b458 <__malloc_unlock+0x8>)
 800b452:	f7ff befc 	b.w	800b24e <__retarget_lock_release_recursive>
 800b456:	bf00      	nop
 800b458:	240015f4 	.word	0x240015f4

0800b45c <__ssputs_r>:
 800b45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b460:	688e      	ldr	r6, [r1, #8]
 800b462:	461f      	mov	r7, r3
 800b464:	42be      	cmp	r6, r7
 800b466:	680b      	ldr	r3, [r1, #0]
 800b468:	4682      	mov	sl, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	4690      	mov	r8, r2
 800b46e:	d82d      	bhi.n	800b4cc <__ssputs_r+0x70>
 800b470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b478:	d026      	beq.n	800b4c8 <__ssputs_r+0x6c>
 800b47a:	6965      	ldr	r5, [r4, #20]
 800b47c:	6909      	ldr	r1, [r1, #16]
 800b47e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b482:	eba3 0901 	sub.w	r9, r3, r1
 800b486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b48a:	1c7b      	adds	r3, r7, #1
 800b48c:	444b      	add	r3, r9
 800b48e:	106d      	asrs	r5, r5, #1
 800b490:	429d      	cmp	r5, r3
 800b492:	bf38      	it	cc
 800b494:	461d      	movcc	r5, r3
 800b496:	0553      	lsls	r3, r2, #21
 800b498:	d527      	bpl.n	800b4ea <__ssputs_r+0x8e>
 800b49a:	4629      	mov	r1, r5
 800b49c:	f7ff ff52 	bl	800b344 <_malloc_r>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	b360      	cbz	r0, 800b4fe <__ssputs_r+0xa2>
 800b4a4:	6921      	ldr	r1, [r4, #16]
 800b4a6:	464a      	mov	r2, r9
 800b4a8:	f7ff fed2 	bl	800b250 <memcpy>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	6126      	str	r6, [r4, #16]
 800b4ba:	6165      	str	r5, [r4, #20]
 800b4bc:	444e      	add	r6, r9
 800b4be:	eba5 0509 	sub.w	r5, r5, r9
 800b4c2:	6026      	str	r6, [r4, #0]
 800b4c4:	60a5      	str	r5, [r4, #8]
 800b4c6:	463e      	mov	r6, r7
 800b4c8:	42be      	cmp	r6, r7
 800b4ca:	d900      	bls.n	800b4ce <__ssputs_r+0x72>
 800b4cc:	463e      	mov	r6, r7
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	4632      	mov	r2, r6
 800b4d2:	4641      	mov	r1, r8
 800b4d4:	f000 faa6 	bl	800ba24 <memmove>
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	1b9b      	subs	r3, r3, r6
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	4433      	add	r3, r6
 800b4e2:	6023      	str	r3, [r4, #0]
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	f000 fac4 	bl	800ba78 <_realloc_r>
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d1e0      	bne.n	800b4b8 <__ssputs_r+0x5c>
 800b4f6:	6921      	ldr	r1, [r4, #16]
 800b4f8:	4650      	mov	r0, sl
 800b4fa:	f7ff feb7 	bl	800b26c <_free_r>
 800b4fe:	230c      	movs	r3, #12
 800b500:	f8ca 3000 	str.w	r3, [sl]
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	e7e9      	b.n	800b4e6 <__ssputs_r+0x8a>
	...

0800b514 <_svfiprintf_r>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	4698      	mov	r8, r3
 800b51a:	898b      	ldrh	r3, [r1, #12]
 800b51c:	061b      	lsls	r3, r3, #24
 800b51e:	b09d      	sub	sp, #116	@ 0x74
 800b520:	4607      	mov	r7, r0
 800b522:	460d      	mov	r5, r1
 800b524:	4614      	mov	r4, r2
 800b526:	d510      	bpl.n	800b54a <_svfiprintf_r+0x36>
 800b528:	690b      	ldr	r3, [r1, #16]
 800b52a:	b973      	cbnz	r3, 800b54a <_svfiprintf_r+0x36>
 800b52c:	2140      	movs	r1, #64	@ 0x40
 800b52e:	f7ff ff09 	bl	800b344 <_malloc_r>
 800b532:	6028      	str	r0, [r5, #0]
 800b534:	6128      	str	r0, [r5, #16]
 800b536:	b930      	cbnz	r0, 800b546 <_svfiprintf_r+0x32>
 800b538:	230c      	movs	r3, #12
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	b01d      	add	sp, #116	@ 0x74
 800b542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b546:	2340      	movs	r3, #64	@ 0x40
 800b548:	616b      	str	r3, [r5, #20]
 800b54a:	2300      	movs	r3, #0
 800b54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54e:	2320      	movs	r3, #32
 800b550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b554:	f8cd 800c 	str.w	r8, [sp, #12]
 800b558:	2330      	movs	r3, #48	@ 0x30
 800b55a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6f8 <_svfiprintf_r+0x1e4>
 800b55e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b562:	f04f 0901 	mov.w	r9, #1
 800b566:	4623      	mov	r3, r4
 800b568:	469a      	mov	sl, r3
 800b56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b56e:	b10a      	cbz	r2, 800b574 <_svfiprintf_r+0x60>
 800b570:	2a25      	cmp	r2, #37	@ 0x25
 800b572:	d1f9      	bne.n	800b568 <_svfiprintf_r+0x54>
 800b574:	ebba 0b04 	subs.w	fp, sl, r4
 800b578:	d00b      	beq.n	800b592 <_svfiprintf_r+0x7e>
 800b57a:	465b      	mov	r3, fp
 800b57c:	4622      	mov	r2, r4
 800b57e:	4629      	mov	r1, r5
 800b580:	4638      	mov	r0, r7
 800b582:	f7ff ff6b 	bl	800b45c <__ssputs_r>
 800b586:	3001      	adds	r0, #1
 800b588:	f000 80a7 	beq.w	800b6da <_svfiprintf_r+0x1c6>
 800b58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b58e:	445a      	add	r2, fp
 800b590:	9209      	str	r2, [sp, #36]	@ 0x24
 800b592:	f89a 3000 	ldrb.w	r3, [sl]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 809f 	beq.w	800b6da <_svfiprintf_r+0x1c6>
 800b59c:	2300      	movs	r3, #0
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a6:	f10a 0a01 	add.w	sl, sl, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	9307      	str	r3, [sp, #28]
 800b5ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5b4:	4654      	mov	r4, sl
 800b5b6:	2205      	movs	r2, #5
 800b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5bc:	484e      	ldr	r0, [pc, #312]	@ (800b6f8 <_svfiprintf_r+0x1e4>)
 800b5be:	f7f4 fe97 	bl	80002f0 <memchr>
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	b9d8      	cbnz	r0, 800b5fe <_svfiprintf_r+0xea>
 800b5c6:	06d0      	lsls	r0, r2, #27
 800b5c8:	bf44      	itt	mi
 800b5ca:	2320      	movmi	r3, #32
 800b5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5d0:	0711      	lsls	r1, r2, #28
 800b5d2:	bf44      	itt	mi
 800b5d4:	232b      	movmi	r3, #43	@ 0x2b
 800b5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5da:	f89a 3000 	ldrb.w	r3, [sl]
 800b5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e0:	d015      	beq.n	800b60e <_svfiprintf_r+0xfa>
 800b5e2:	9a07      	ldr	r2, [sp, #28]
 800b5e4:	4654      	mov	r4, sl
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f04f 0c0a 	mov.w	ip, #10
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f2:	3b30      	subs	r3, #48	@ 0x30
 800b5f4:	2b09      	cmp	r3, #9
 800b5f6:	d94b      	bls.n	800b690 <_svfiprintf_r+0x17c>
 800b5f8:	b1b0      	cbz	r0, 800b628 <_svfiprintf_r+0x114>
 800b5fa:	9207      	str	r2, [sp, #28]
 800b5fc:	e014      	b.n	800b628 <_svfiprintf_r+0x114>
 800b5fe:	eba0 0308 	sub.w	r3, r0, r8
 800b602:	fa09 f303 	lsl.w	r3, r9, r3
 800b606:	4313      	orrs	r3, r2
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	46a2      	mov	sl, r4
 800b60c:	e7d2      	b.n	800b5b4 <_svfiprintf_r+0xa0>
 800b60e:	9b03      	ldr	r3, [sp, #12]
 800b610:	1d19      	adds	r1, r3, #4
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	9103      	str	r1, [sp, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	bfbb      	ittet	lt
 800b61a:	425b      	neglt	r3, r3
 800b61c:	f042 0202 	orrlt.w	r2, r2, #2
 800b620:	9307      	strge	r3, [sp, #28]
 800b622:	9307      	strlt	r3, [sp, #28]
 800b624:	bfb8      	it	lt
 800b626:	9204      	strlt	r2, [sp, #16]
 800b628:	7823      	ldrb	r3, [r4, #0]
 800b62a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b62c:	d10a      	bne.n	800b644 <_svfiprintf_r+0x130>
 800b62e:	7863      	ldrb	r3, [r4, #1]
 800b630:	2b2a      	cmp	r3, #42	@ 0x2a
 800b632:	d132      	bne.n	800b69a <_svfiprintf_r+0x186>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	1d1a      	adds	r2, r3, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	9203      	str	r2, [sp, #12]
 800b63c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b640:	3402      	adds	r4, #2
 800b642:	9305      	str	r3, [sp, #20]
 800b644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b708 <_svfiprintf_r+0x1f4>
 800b648:	7821      	ldrb	r1, [r4, #0]
 800b64a:	2203      	movs	r2, #3
 800b64c:	4650      	mov	r0, sl
 800b64e:	f7f4 fe4f 	bl	80002f0 <memchr>
 800b652:	b138      	cbz	r0, 800b664 <_svfiprintf_r+0x150>
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	eba0 000a 	sub.w	r0, r0, sl
 800b65a:	2240      	movs	r2, #64	@ 0x40
 800b65c:	4082      	lsls	r2, r0
 800b65e:	4313      	orrs	r3, r2
 800b660:	3401      	adds	r4, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b668:	4824      	ldr	r0, [pc, #144]	@ (800b6fc <_svfiprintf_r+0x1e8>)
 800b66a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b66e:	2206      	movs	r2, #6
 800b670:	f7f4 fe3e 	bl	80002f0 <memchr>
 800b674:	2800      	cmp	r0, #0
 800b676:	d036      	beq.n	800b6e6 <_svfiprintf_r+0x1d2>
 800b678:	4b21      	ldr	r3, [pc, #132]	@ (800b700 <_svfiprintf_r+0x1ec>)
 800b67a:	bb1b      	cbnz	r3, 800b6c4 <_svfiprintf_r+0x1b0>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	3307      	adds	r3, #7
 800b680:	f023 0307 	bic.w	r3, r3, #7
 800b684:	3308      	adds	r3, #8
 800b686:	9303      	str	r3, [sp, #12]
 800b688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68a:	4433      	add	r3, r6
 800b68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b68e:	e76a      	b.n	800b566 <_svfiprintf_r+0x52>
 800b690:	fb0c 3202 	mla	r2, ip, r2, r3
 800b694:	460c      	mov	r4, r1
 800b696:	2001      	movs	r0, #1
 800b698:	e7a8      	b.n	800b5ec <_svfiprintf_r+0xd8>
 800b69a:	2300      	movs	r3, #0
 800b69c:	3401      	adds	r4, #1
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f04f 0c0a 	mov.w	ip, #10
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ac:	3a30      	subs	r2, #48	@ 0x30
 800b6ae:	2a09      	cmp	r2, #9
 800b6b0:	d903      	bls.n	800b6ba <_svfiprintf_r+0x1a6>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0c6      	beq.n	800b644 <_svfiprintf_r+0x130>
 800b6b6:	9105      	str	r1, [sp, #20]
 800b6b8:	e7c4      	b.n	800b644 <_svfiprintf_r+0x130>
 800b6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6be:	4604      	mov	r4, r0
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e7f0      	b.n	800b6a6 <_svfiprintf_r+0x192>
 800b6c4:	ab03      	add	r3, sp, #12
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b704 <_svfiprintf_r+0x1f0>)
 800b6cc:	a904      	add	r1, sp, #16
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f3af 8000 	nop.w
 800b6d4:	1c42      	adds	r2, r0, #1
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	d1d6      	bne.n	800b688 <_svfiprintf_r+0x174>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	065b      	lsls	r3, r3, #25
 800b6de:	f53f af2d 	bmi.w	800b53c <_svfiprintf_r+0x28>
 800b6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6e4:	e72c      	b.n	800b540 <_svfiprintf_r+0x2c>
 800b6e6:	ab03      	add	r3, sp, #12
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4b05      	ldr	r3, [pc, #20]	@ (800b704 <_svfiprintf_r+0x1f0>)
 800b6ee:	a904      	add	r1, sp, #16
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	f000 f879 	bl	800b7e8 <_printf_i>
 800b6f6:	e7ed      	b.n	800b6d4 <_svfiprintf_r+0x1c0>
 800b6f8:	0800bbe8 	.word	0x0800bbe8
 800b6fc:	0800bbf2 	.word	0x0800bbf2
 800b700:	00000000 	.word	0x00000000
 800b704:	0800b45d 	.word	0x0800b45d
 800b708:	0800bbee 	.word	0x0800bbee

0800b70c <_printf_common>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	4616      	mov	r6, r2
 800b712:	4698      	mov	r8, r3
 800b714:	688a      	ldr	r2, [r1, #8]
 800b716:	690b      	ldr	r3, [r1, #16]
 800b718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	bfb8      	it	lt
 800b720:	4613      	movlt	r3, r2
 800b722:	6033      	str	r3, [r6, #0]
 800b724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b728:	4607      	mov	r7, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	b10a      	cbz	r2, 800b732 <_printf_common+0x26>
 800b72e:	3301      	adds	r3, #1
 800b730:	6033      	str	r3, [r6, #0]
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	0699      	lsls	r1, r3, #26
 800b736:	bf42      	ittt	mi
 800b738:	6833      	ldrmi	r3, [r6, #0]
 800b73a:	3302      	addmi	r3, #2
 800b73c:	6033      	strmi	r3, [r6, #0]
 800b73e:	6825      	ldr	r5, [r4, #0]
 800b740:	f015 0506 	ands.w	r5, r5, #6
 800b744:	d106      	bne.n	800b754 <_printf_common+0x48>
 800b746:	f104 0a19 	add.w	sl, r4, #25
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	6832      	ldr	r2, [r6, #0]
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	42ab      	cmp	r3, r5
 800b752:	dc26      	bgt.n	800b7a2 <_printf_common+0x96>
 800b754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b758:	6822      	ldr	r2, [r4, #0]
 800b75a:	3b00      	subs	r3, #0
 800b75c:	bf18      	it	ne
 800b75e:	2301      	movne	r3, #1
 800b760:	0692      	lsls	r2, r2, #26
 800b762:	d42b      	bmi.n	800b7bc <_printf_common+0xb0>
 800b764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b768:	4641      	mov	r1, r8
 800b76a:	4638      	mov	r0, r7
 800b76c:	47c8      	blx	r9
 800b76e:	3001      	adds	r0, #1
 800b770:	d01e      	beq.n	800b7b0 <_printf_common+0xa4>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	f003 0306 	and.w	r3, r3, #6
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	bf02      	ittt	eq
 800b77e:	68e5      	ldreq	r5, [r4, #12]
 800b780:	6833      	ldreq	r3, [r6, #0]
 800b782:	1aed      	subeq	r5, r5, r3
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	bf0c      	ite	eq
 800b788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b78c:	2500      	movne	r5, #0
 800b78e:	4293      	cmp	r3, r2
 800b790:	bfc4      	itt	gt
 800b792:	1a9b      	subgt	r3, r3, r2
 800b794:	18ed      	addgt	r5, r5, r3
 800b796:	2600      	movs	r6, #0
 800b798:	341a      	adds	r4, #26
 800b79a:	42b5      	cmp	r5, r6
 800b79c:	d11a      	bne.n	800b7d4 <_printf_common+0xc8>
 800b79e:	2000      	movs	r0, #0
 800b7a0:	e008      	b.n	800b7b4 <_printf_common+0xa8>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	47c8      	blx	r9
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d103      	bne.n	800b7b8 <_printf_common+0xac>
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	e7c6      	b.n	800b74a <_printf_common+0x3e>
 800b7bc:	18e1      	adds	r1, r4, r3
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	2030      	movs	r0, #48	@ 0x30
 800b7c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7c6:	4422      	add	r2, r4
 800b7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7d0:	3302      	adds	r3, #2
 800b7d2:	e7c7      	b.n	800b764 <_printf_common+0x58>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	4641      	mov	r1, r8
 800b7da:	4638      	mov	r0, r7
 800b7dc:	47c8      	blx	r9
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d0e6      	beq.n	800b7b0 <_printf_common+0xa4>
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7d9      	b.n	800b79a <_printf_common+0x8e>
	...

0800b7e8 <_printf_i>:
 800b7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ec:	7e0f      	ldrb	r7, [r1, #24]
 800b7ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7f0:	2f78      	cmp	r7, #120	@ 0x78
 800b7f2:	4691      	mov	r9, r2
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7fe:	d807      	bhi.n	800b810 <_printf_i+0x28>
 800b800:	2f62      	cmp	r7, #98	@ 0x62
 800b802:	d80a      	bhi.n	800b81a <_printf_i+0x32>
 800b804:	2f00      	cmp	r7, #0
 800b806:	f000 80d1 	beq.w	800b9ac <_printf_i+0x1c4>
 800b80a:	2f58      	cmp	r7, #88	@ 0x58
 800b80c:	f000 80b8 	beq.w	800b980 <_printf_i+0x198>
 800b810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b818:	e03a      	b.n	800b890 <_printf_i+0xa8>
 800b81a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b81e:	2b15      	cmp	r3, #21
 800b820:	d8f6      	bhi.n	800b810 <_printf_i+0x28>
 800b822:	a101      	add	r1, pc, #4	@ (adr r1, 800b828 <_printf_i+0x40>)
 800b824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b828:	0800b881 	.word	0x0800b881
 800b82c:	0800b895 	.word	0x0800b895
 800b830:	0800b811 	.word	0x0800b811
 800b834:	0800b811 	.word	0x0800b811
 800b838:	0800b811 	.word	0x0800b811
 800b83c:	0800b811 	.word	0x0800b811
 800b840:	0800b895 	.word	0x0800b895
 800b844:	0800b811 	.word	0x0800b811
 800b848:	0800b811 	.word	0x0800b811
 800b84c:	0800b811 	.word	0x0800b811
 800b850:	0800b811 	.word	0x0800b811
 800b854:	0800b993 	.word	0x0800b993
 800b858:	0800b8bf 	.word	0x0800b8bf
 800b85c:	0800b94d 	.word	0x0800b94d
 800b860:	0800b811 	.word	0x0800b811
 800b864:	0800b811 	.word	0x0800b811
 800b868:	0800b9b5 	.word	0x0800b9b5
 800b86c:	0800b811 	.word	0x0800b811
 800b870:	0800b8bf 	.word	0x0800b8bf
 800b874:	0800b811 	.word	0x0800b811
 800b878:	0800b811 	.word	0x0800b811
 800b87c:	0800b955 	.word	0x0800b955
 800b880:	6833      	ldr	r3, [r6, #0]
 800b882:	1d1a      	adds	r2, r3, #4
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6032      	str	r2, [r6, #0]
 800b888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b88c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b890:	2301      	movs	r3, #1
 800b892:	e09c      	b.n	800b9ce <_printf_i+0x1e6>
 800b894:	6833      	ldr	r3, [r6, #0]
 800b896:	6820      	ldr	r0, [r4, #0]
 800b898:	1d19      	adds	r1, r3, #4
 800b89a:	6031      	str	r1, [r6, #0]
 800b89c:	0606      	lsls	r6, r0, #24
 800b89e:	d501      	bpl.n	800b8a4 <_printf_i+0xbc>
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	e003      	b.n	800b8ac <_printf_i+0xc4>
 800b8a4:	0645      	lsls	r5, r0, #25
 800b8a6:	d5fb      	bpl.n	800b8a0 <_printf_i+0xb8>
 800b8a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8ac:	2d00      	cmp	r5, #0
 800b8ae:	da03      	bge.n	800b8b8 <_printf_i+0xd0>
 800b8b0:	232d      	movs	r3, #45	@ 0x2d
 800b8b2:	426d      	negs	r5, r5
 800b8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8b8:	4858      	ldr	r0, [pc, #352]	@ (800ba1c <_printf_i+0x234>)
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	e011      	b.n	800b8e2 <_printf_i+0xfa>
 800b8be:	6821      	ldr	r1, [r4, #0]
 800b8c0:	6833      	ldr	r3, [r6, #0]
 800b8c2:	0608      	lsls	r0, r1, #24
 800b8c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8c8:	d402      	bmi.n	800b8d0 <_printf_i+0xe8>
 800b8ca:	0649      	lsls	r1, r1, #25
 800b8cc:	bf48      	it	mi
 800b8ce:	b2ad      	uxthmi	r5, r5
 800b8d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8d2:	4852      	ldr	r0, [pc, #328]	@ (800ba1c <_printf_i+0x234>)
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	bf14      	ite	ne
 800b8d8:	230a      	movne	r3, #10
 800b8da:	2308      	moveq	r3, #8
 800b8dc:	2100      	movs	r1, #0
 800b8de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8e2:	6866      	ldr	r6, [r4, #4]
 800b8e4:	60a6      	str	r6, [r4, #8]
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	db05      	blt.n	800b8f6 <_printf_i+0x10e>
 800b8ea:	6821      	ldr	r1, [r4, #0]
 800b8ec:	432e      	orrs	r6, r5
 800b8ee:	f021 0104 	bic.w	r1, r1, #4
 800b8f2:	6021      	str	r1, [r4, #0]
 800b8f4:	d04b      	beq.n	800b98e <_printf_i+0x1a6>
 800b8f6:	4616      	mov	r6, r2
 800b8f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b900:	5dc7      	ldrb	r7, [r0, r7]
 800b902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b906:	462f      	mov	r7, r5
 800b908:	42bb      	cmp	r3, r7
 800b90a:	460d      	mov	r5, r1
 800b90c:	d9f4      	bls.n	800b8f8 <_printf_i+0x110>
 800b90e:	2b08      	cmp	r3, #8
 800b910:	d10b      	bne.n	800b92a <_printf_i+0x142>
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	07df      	lsls	r7, r3, #31
 800b916:	d508      	bpl.n	800b92a <_printf_i+0x142>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	6861      	ldr	r1, [r4, #4]
 800b91c:	4299      	cmp	r1, r3
 800b91e:	bfde      	ittt	le
 800b920:	2330      	movle	r3, #48	@ 0x30
 800b922:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b926:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b92a:	1b92      	subs	r2, r2, r6
 800b92c:	6122      	str	r2, [r4, #16]
 800b92e:	f8cd a000 	str.w	sl, [sp]
 800b932:	464b      	mov	r3, r9
 800b934:	aa03      	add	r2, sp, #12
 800b936:	4621      	mov	r1, r4
 800b938:	4640      	mov	r0, r8
 800b93a:	f7ff fee7 	bl	800b70c <_printf_common>
 800b93e:	3001      	adds	r0, #1
 800b940:	d14a      	bne.n	800b9d8 <_printf_i+0x1f0>
 800b942:	f04f 30ff 	mov.w	r0, #4294967295
 800b946:	b004      	add	sp, #16
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	f043 0320 	orr.w	r3, r3, #32
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	4832      	ldr	r0, [pc, #200]	@ (800ba20 <_printf_i+0x238>)
 800b956:	2778      	movs	r7, #120	@ 0x78
 800b958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	6831      	ldr	r1, [r6, #0]
 800b960:	061f      	lsls	r7, r3, #24
 800b962:	f851 5b04 	ldr.w	r5, [r1], #4
 800b966:	d402      	bmi.n	800b96e <_printf_i+0x186>
 800b968:	065f      	lsls	r7, r3, #25
 800b96a:	bf48      	it	mi
 800b96c:	b2ad      	uxthmi	r5, r5
 800b96e:	6031      	str	r1, [r6, #0]
 800b970:	07d9      	lsls	r1, r3, #31
 800b972:	bf44      	itt	mi
 800b974:	f043 0320 	orrmi.w	r3, r3, #32
 800b978:	6023      	strmi	r3, [r4, #0]
 800b97a:	b11d      	cbz	r5, 800b984 <_printf_i+0x19c>
 800b97c:	2310      	movs	r3, #16
 800b97e:	e7ad      	b.n	800b8dc <_printf_i+0xf4>
 800b980:	4826      	ldr	r0, [pc, #152]	@ (800ba1c <_printf_i+0x234>)
 800b982:	e7e9      	b.n	800b958 <_printf_i+0x170>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	f023 0320 	bic.w	r3, r3, #32
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	e7f6      	b.n	800b97c <_printf_i+0x194>
 800b98e:	4616      	mov	r6, r2
 800b990:	e7bd      	b.n	800b90e <_printf_i+0x126>
 800b992:	6833      	ldr	r3, [r6, #0]
 800b994:	6825      	ldr	r5, [r4, #0]
 800b996:	6961      	ldr	r1, [r4, #20]
 800b998:	1d18      	adds	r0, r3, #4
 800b99a:	6030      	str	r0, [r6, #0]
 800b99c:	062e      	lsls	r6, r5, #24
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	d501      	bpl.n	800b9a6 <_printf_i+0x1be>
 800b9a2:	6019      	str	r1, [r3, #0]
 800b9a4:	e002      	b.n	800b9ac <_printf_i+0x1c4>
 800b9a6:	0668      	lsls	r0, r5, #25
 800b9a8:	d5fb      	bpl.n	800b9a2 <_printf_i+0x1ba>
 800b9aa:	8019      	strh	r1, [r3, #0]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	4616      	mov	r6, r2
 800b9b2:	e7bc      	b.n	800b92e <_printf_i+0x146>
 800b9b4:	6833      	ldr	r3, [r6, #0]
 800b9b6:	1d1a      	adds	r2, r3, #4
 800b9b8:	6032      	str	r2, [r6, #0]
 800b9ba:	681e      	ldr	r6, [r3, #0]
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7f4 fc95 	bl	80002f0 <memchr>
 800b9c6:	b108      	cbz	r0, 800b9cc <_printf_i+0x1e4>
 800b9c8:	1b80      	subs	r0, r0, r6
 800b9ca:	6060      	str	r0, [r4, #4]
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9d6:	e7aa      	b.n	800b92e <_printf_i+0x146>
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	4632      	mov	r2, r6
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4640      	mov	r0, r8
 800b9e0:	47d0      	blx	sl
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d0ad      	beq.n	800b942 <_printf_i+0x15a>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	079b      	lsls	r3, r3, #30
 800b9ea:	d413      	bmi.n	800ba14 <_printf_i+0x22c>
 800b9ec:	68e0      	ldr	r0, [r4, #12]
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	4298      	cmp	r0, r3
 800b9f2:	bfb8      	it	lt
 800b9f4:	4618      	movlt	r0, r3
 800b9f6:	e7a6      	b.n	800b946 <_printf_i+0x15e>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4640      	mov	r0, r8
 800ba00:	47d0      	blx	sl
 800ba02:	3001      	adds	r0, #1
 800ba04:	d09d      	beq.n	800b942 <_printf_i+0x15a>
 800ba06:	3501      	adds	r5, #1
 800ba08:	68e3      	ldr	r3, [r4, #12]
 800ba0a:	9903      	ldr	r1, [sp, #12]
 800ba0c:	1a5b      	subs	r3, r3, r1
 800ba0e:	42ab      	cmp	r3, r5
 800ba10:	dcf2      	bgt.n	800b9f8 <_printf_i+0x210>
 800ba12:	e7eb      	b.n	800b9ec <_printf_i+0x204>
 800ba14:	2500      	movs	r5, #0
 800ba16:	f104 0619 	add.w	r6, r4, #25
 800ba1a:	e7f5      	b.n	800ba08 <_printf_i+0x220>
 800ba1c:	0800bbf9 	.word	0x0800bbf9
 800ba20:	0800bc0a 	.word	0x0800bc0a

0800ba24 <memmove>:
 800ba24:	4288      	cmp	r0, r1
 800ba26:	b510      	push	{r4, lr}
 800ba28:	eb01 0402 	add.w	r4, r1, r2
 800ba2c:	d902      	bls.n	800ba34 <memmove+0x10>
 800ba2e:	4284      	cmp	r4, r0
 800ba30:	4623      	mov	r3, r4
 800ba32:	d807      	bhi.n	800ba44 <memmove+0x20>
 800ba34:	1e43      	subs	r3, r0, #1
 800ba36:	42a1      	cmp	r1, r4
 800ba38:	d008      	beq.n	800ba4c <memmove+0x28>
 800ba3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba42:	e7f8      	b.n	800ba36 <memmove+0x12>
 800ba44:	4402      	add	r2, r0
 800ba46:	4601      	mov	r1, r0
 800ba48:	428a      	cmp	r2, r1
 800ba4a:	d100      	bne.n	800ba4e <memmove+0x2a>
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba56:	e7f7      	b.n	800ba48 <memmove+0x24>

0800ba58 <_sbrk_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d06      	ldr	r5, [pc, #24]	@ (800ba74 <_sbrk_r+0x1c>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	f7f6 fdda 	bl	800261c <_sbrk>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_sbrk_r+0x1a>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_sbrk_r+0x1a>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	240015f0 	.word	0x240015f0

0800ba78 <_realloc_r>:
 800ba78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	4614      	mov	r4, r2
 800ba80:	460d      	mov	r5, r1
 800ba82:	b921      	cbnz	r1, 800ba8e <_realloc_r+0x16>
 800ba84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	4611      	mov	r1, r2
 800ba8a:	f7ff bc5b 	b.w	800b344 <_malloc_r>
 800ba8e:	b92a      	cbnz	r2, 800ba9c <_realloc_r+0x24>
 800ba90:	f7ff fbec 	bl	800b26c <_free_r>
 800ba94:	4625      	mov	r5, r4
 800ba96:	4628      	mov	r0, r5
 800ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9c:	f000 f81a 	bl	800bad4 <_malloc_usable_size_r>
 800baa0:	4284      	cmp	r4, r0
 800baa2:	4606      	mov	r6, r0
 800baa4:	d802      	bhi.n	800baac <_realloc_r+0x34>
 800baa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baaa:	d8f4      	bhi.n	800ba96 <_realloc_r+0x1e>
 800baac:	4621      	mov	r1, r4
 800baae:	4638      	mov	r0, r7
 800bab0:	f7ff fc48 	bl	800b344 <_malloc_r>
 800bab4:	4680      	mov	r8, r0
 800bab6:	b908      	cbnz	r0, 800babc <_realloc_r+0x44>
 800bab8:	4645      	mov	r5, r8
 800baba:	e7ec      	b.n	800ba96 <_realloc_r+0x1e>
 800babc:	42b4      	cmp	r4, r6
 800babe:	4622      	mov	r2, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	bf28      	it	cs
 800bac4:	4632      	movcs	r2, r6
 800bac6:	f7ff fbc3 	bl	800b250 <memcpy>
 800baca:	4629      	mov	r1, r5
 800bacc:	4638      	mov	r0, r7
 800bace:	f7ff fbcd 	bl	800b26c <_free_r>
 800bad2:	e7f1      	b.n	800bab8 <_realloc_r+0x40>

0800bad4 <_malloc_usable_size_r>:
 800bad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad8:	1f18      	subs	r0, r3, #4
 800bada:	2b00      	cmp	r3, #0
 800badc:	bfbc      	itt	lt
 800bade:	580b      	ldrlt	r3, [r1, r0]
 800bae0:	18c0      	addlt	r0, r0, r3
 800bae2:	4770      	bx	lr

0800bae4 <_init>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr

0800baf0 <_fini>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	bf00      	nop
 800baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf6:	bc08      	pop	{r3}
 800baf8:	469e      	mov	lr, r3
 800bafa:	4770      	bx	lr
