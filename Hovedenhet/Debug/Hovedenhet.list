
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000accc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800af6c  0800af6c  0000bf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0c8  0800b0c8  0000c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b0cc  0800b0cc  0000c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000106c  24000000  0800b0d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  2400106c  0800c13c  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001414  0800c13c  0000e414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001986d  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e40  00000000  00000000  00027907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d31  00000000  00000000  0002b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a78  00000000  00000000  0002c591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000182fc  00000000  00000000  00066009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a43f  00000000  00000000  0007e305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8744  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d90  00000000  00000000  001e8788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ed518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400106c 	.word	0x2400106c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800af54 	.word	0x0800af54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001070 	.word	0x24001070
 80002dc:	0800af54 	.word	0x0800af54

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f002 fc88 	bl	8003016 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 ff8a 	bl	8001624 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010e0 	.word	0x240010e0
 800071c:	24001098 	.word	0x24001098
 8000720:	24001104 	.word	0x24001104

08000724 <Flash_Init>:


//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800072e:	f000 fcad 	bl	800108c <W25N_WaitForReady>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000738:	4b5a      	ldr	r3, [pc, #360]	@ (80008a4 <Flash_Init+0x180>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fab9 	bl	8000cb4 <Read_Status_Register>
 8000742:	4603      	mov	r3, r0
 8000744:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR_2_Addr, data);
 800074e:	4b55      	ldr	r3, [pc, #340]	@ (80008a4 <Flash_Init+0x180>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	7eba      	ldrb	r2, [r7, #26]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fadc 	bl	8000d14 <Write_Status_Register>
 800075c:	e011      	b.n	8000782 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800075e:	4b51      	ldr	r3, [pc, #324]	@ (80008a4 <Flash_Init+0x180>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 faa6 	bl	8000cb4 <Read_Status_Register>
 8000768:	4603      	mov	r3, r0
 800076a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR_2_Addr, data);
 8000774:	4b4b      	ldr	r3, [pc, #300]	@ (80008a4 <Flash_Init+0x180>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fac9 	bl	8000d14 <Write_Status_Register>
	}
	//Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0
	//This unlocks every block for writing and activates write protect switch
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000782:	4b49      	ldr	r3, [pc, #292]	@ (80008a8 <Flash_Init+0x184>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fa94 	bl	8000cb4 <Read_Status_Register>
 800078c:	4603      	mov	r3, r0
 800078e:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000790:	7e7b      	ldrb	r3, [r7, #25]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 8000798:	7e7b      	ldrb	r3, [r7, #25]
 800079a:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800079e:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR_1_Addr, data);
 80007a0:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <Flash_Init+0x184>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	7e7a      	ldrb	r2, [r7, #25]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fab3 	bl	8000d14 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	//While loop running through first page of each block. When the first 16 bytes = 0xFF,
	//go back to previous page (Temp_Page -= 64) and exit while loop.
	while(Page_Bit!=0xFFFF){
 80007c4:	e02e      	b.n	8000824 <Flash_Init+0x100>

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007c6:	f107 0108 	add.w	r1, r7, #8
 80007ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007cc:	2210      	movs	r2, #16
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f92a 	bl	8000a28 <Read_Data>
		Page_Bit = 0x0000;
 80007d4:	2300      	movs	r3, #0
 80007d6:	84fb      	strh	r3, [r7, #38]	@ 0x26

		for(int i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e013      	b.n	8000806 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d109      	bne.n	8000800 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007ec:	2201      	movs	r2, #1
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	dde8      	ble.n	80007de <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000818:	3340      	adds	r3, #64	@ 0x40
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800081c:	e002      	b.n	8000824 <Flash_Init+0x100>
		}

		else{
			Temp_Page -= 64;
 800081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000820:	3b40      	subs	r3, #64	@ 0x40
 8000822:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800082a:	4293      	cmp	r3, r2
 800082c:	d1cb      	bne.n	80007c6 <Flash_Init+0xa2>
		}
	}
	//While loop running through every page of the block. When the first 16 bytes = 0xFF,
	//exit while loop. This page will be the first available page on flash IC.
	Page_Bit=0x0000;
 800082e:	2300      	movs	r3, #0
 8000830:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(Page_Bit!=0xFFFF){
 8000832:	e025      	b.n	8000880 <Flash_Init+0x15c>

		Temp_Page++;
 8000834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000836:	3301      	adds	r3, #1
 8000838:	84bb      	strh	r3, [r7, #36]	@ 0x24
		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800083a:	f107 0108 	add.w	r1, r7, #8
 800083e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000840:	2210      	movs	r2, #16
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f8f0 	bl	8000a28 <Read_Data>
		Page_Bit = 0x0000;
 8000848:	2300      	movs	r3, #0
 800084a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		for(int i = 0; i < 16; i++){
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	e013      	b.n	800087a <Flash_Init+0x156>
			if(Page_Data[i]==0xFF){
 8000852:	f107 0208 	add.w	r2, r7, #8
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2bff      	cmp	r3, #255	@ 0xff
 800085e:	d109      	bne.n	8000874 <Flash_Init+0x150>
				Page_Bit |= 0x01 << i;
 8000860:	2201      	movs	r2, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	b21a      	sxth	r2, r3
 800086a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	3301      	adds	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	dde8      	ble.n	8000852 <Flash_Init+0x12e>
	while(Page_Bit!=0xFFFF){
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000886:	4293      	cmp	r3, r2
 8000888:	d1d4      	bne.n	8000834 <Flash_Init+0x110>
			}
		}

	}
	//Update global variables
	Page_Index=Temp_Page;
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <Flash_Init+0x188>)
 800088c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800088e:	8013      	strh	r3, [r2, #0]
	Block_Mem=(Page_Index/64);
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <Flash_Init+0x188>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	099b      	lsrs	r3, r3, #6
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <Flash_Init+0x18c>)
 800089a:	801a      	strh	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	24001009 	.word	0x24001009
 80008a8:	24001008 	.word	0x24001008
 80008ac:	24001096 	.word	0x24001096
 80008b0:	240010b2 	.word	0x240010b2

080008b4 <Read_Register>:

//Read all status registers
void Read_Register(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <Read_Register+0x50>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9f9 	bl	8000cb4 <Read_Status_Register>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <Read_Register+0x54>)
 80008c8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80008ca:	2064      	movs	r0, #100	@ 0x64
 80008cc:	f000 fb8e 	bl	8000fec <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <Read_Register+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f9ed 	bl	8000cb4 <Read_Status_Register>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <Read_Register+0x5c>)
 80008e0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80008e2:	2064      	movs	r0, #100	@ 0x64
 80008e4:	f000 fb82 	bl	8000fec <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <Read_Register+0x60>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9e1 	bl	8000cb4 <Read_Status_Register>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <Read_Register+0x64>)
 80008f8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80008fa:	2064      	movs	r0, #100	@ 0x64
 80008fc:	f000 fb76 	bl	8000fec <delay_ns>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24001008 	.word	0x24001008
 8000908:	240010b5 	.word	0x240010b5
 800090c:	24001009 	.word	0x24001009
 8000910:	240010b6 	.word	0x240010b6
 8000914:	2400100a 	.word	0x2400100a
 8000918:	240010b7 	.word	0x240010b7

0800091c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <Write_Data+0x74>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d106      	bne.n	800093e <Write_Data+0x22>
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <Write_Data+0x78>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <Write_Data+0x22>
		Block_Erase(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fb23 	bl	8000f84 <Block_Erase>
	}
	uint16_t count=0;
 800093e:	2300      	movs	r3, #0
 8000940:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000942:	e01c      	b.n	800097e <Write_Data+0x62>
		*Buffer_p=*data;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <Write_Data+0x7c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <Write_Data+0x7c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <Write_Data+0x7c>)
 8000956:	6013      	str	r3, [r2, #0]
		data++;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <Write_Data+0x78>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <Write_Data+0x78>)
 8000968:	801a      	strh	r2, [r3, #0]
		count++;
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	3301      	adds	r3, #1
 800096e:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <Write_Data+0x78>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000978:	d301      	bcc.n	800097e <Write_Data+0x62>
			Write_to_page();
 800097a:	f000 f80f 	bl	800099c <Write_to_page>
	while(count<lenght){
 800097e:	89fa      	ldrh	r2, [r7, #14]
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	429a      	cmp	r2, r3
 8000984:	d3de      	bcc.n	8000944 <Write_Data+0x28>
		}
	}
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24001096 	.word	0x24001096
 8000994:	240010b0 	.word	0x240010b0
 8000998:	24000000 	.word	0x24000000

0800099c <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <Write_to_page+0x74>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10f      	bne.n	80009c8 <Write_to_page+0x2c>
		Buffer_flip=1;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <Write_to_page+0x74>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_1[0];
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <Write_to_page+0x78>)
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <Write_to_page+0x7c>)
 80009b2:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <Write_to_page+0x80>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 80009ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009be:	4918      	ldr	r1, [pc, #96]	@ (8000a20 <Write_to_page+0x84>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 fa09 	bl	8000dd8 <Write_Data_Buffer>
 80009c6:	e00e      	b.n	80009e6 <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <Write_to_page+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <Write_to_page+0x78>)
 80009d0:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <Write_to_page+0x84>)
 80009d2:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <Write_to_page+0x80>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 80009da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009de:	490e      	ldr	r1, [pc, #56]	@ (8000a18 <Write_to_page+0x7c>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f9f9 	bl	8000dd8 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <Write_to_page+0x88>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fa30 	bl	8000e50 <Write_Data_Flash>
	Page_Index++;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <Write_to_page+0x88>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <Write_to_page+0x88>)
 80009fa:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <Write_to_page+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <Write_to_page+0x88>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f824 	bl	8000a54 <Automatic_Block_Managment>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	240010b4 	.word	0x240010b4
 8000a14:	24000000 	.word	0x24000000
 8000a18:	24000808 	.word	0x24000808
 8000a1c:	240010b0 	.word	0x240010b0
 8000a20:	24000008 	.word	0x24000008
 8000a24:	24001096 	.word	0x24001096

08000a28 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	80fb      	strh	r3, [r7, #6]
 8000a34:	4613      	mov	r3, r2
 8000a36:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa3c 	bl	8000eb8 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	4619      	mov	r1, r3
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f000 fa69 	bl	8000f1c <Read_Data_Buffer>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	099b      	lsrs	r3, r3, #6
 8000a62:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <Automatic_Block_Managment+0x38>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	89fa      	ldrh	r2, [r7, #14]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d007      	beq.n	8000a7e <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fa87 	bl	8000f84 <Block_Erase>
		Block_Mem=Block;
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <Automatic_Block_Managment+0x38>)
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000a7c:	e002      	b.n	8000a84 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000a7e:	4a03      	ldr	r2, [pc, #12]	@ (8000a8c <Automatic_Block_Managment+0x38>)
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	8013      	strh	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	240010b2 	.word	0x240010b2

08000a90 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000a96:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <Chip_Erase+0x94>)
 8000a98:	f000 fad2 	bl	8001040 <USART3_Printf>
	HAL_UART_Receive(&huart3, &UART_buffer,1, HAL_MAX_DELAY);
 8000a9c:	1cf9      	adds	r1, r7, #3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4820      	ldr	r0, [pc, #128]	@ (8000b28 <Chip_Erase+0x98>)
 8000aa6:	f007 f966 	bl	8007d76 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2b59      	cmp	r3, #89	@ 0x59
 8000aae:	d132      	bne.n	8000b16 <Chip_Erase+0x86>
		USART3_Printf("Sletter minne ...\r\n");
 8000ab0:	481e      	ldr	r0, [pc, #120]	@ (8000b2c <Chip_Erase+0x9c>)
 8000ab2:	f000 fac5 	bl	8001040 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	e009      	b.n	8000ad0 <Chip_Erase+0x40>
			Block_Erase(i*64);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa5d 	bl	8000f84 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3301      	adds	r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ad6:	ddf1      	ble.n	8000abc <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <Chip_Erase+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <Chip_Erase+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <Chip_Erase+0xa8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <Chip_Erase+0xac>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <Chip_Erase+0xb0>)
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <Chip_Erase+0xb4>)
 8000af4:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 8000af6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000afa:	21ff      	movs	r1, #255	@ 0xff
 8000afc:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <Chip_Erase+0xb4>)
 8000afe:	f009 fdab 	bl	800a658 <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 8000b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b06:	21ff      	movs	r1, #255	@ 0xff
 8000b08:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <Chip_Erase+0xb8>)
 8000b0a:	f009 fda5 	bl	800a658 <memset>
		USART3_Printf("Ferdig\r\n");
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <Chip_Erase+0xbc>)
 8000b10:	f000 fa96 	bl	8001040 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b14:	e002      	b.n	8000b1c <Chip_Erase+0x8c>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b16:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <Chip_Erase+0xc0>)
 8000b18:	f000 fa92 	bl	8001040 <USART3_Printf>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	0800af6c 	.word	0x0800af6c
 8000b28:	2400122c 	.word	0x2400122c
 8000b2c:	0800afa0 	.word	0x0800afa0
 8000b30:	240010b0 	.word	0x240010b0
 8000b34:	24001096 	.word	0x24001096
 8000b38:	240010b2 	.word	0x240010b2
 8000b3c:	240010b4 	.word	0x240010b4
 8000b40:	24000000 	.word	0x24000000
 8000b44:	24000008 	.word	0x24000008
 8000b48:	24000808 	.word	0x24000808
 8000b4c:	0800afb4 	.word	0x0800afb4
 8000b50:	0800afc0 	.word	0x0800afc0

08000b54 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b58:	b089      	sub	sp, #36	@ 0x24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	466b      	mov	r3, sp
 8000b62:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f9a7 	bl	8000eb8 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000b6a:	88f9      	ldrh	r1, [r7, #6]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	b28b      	uxth	r3, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	4698      	mov	r8, r3
 8000b78:	4691      	mov	r9, r2
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b8e:	b28b      	uxth	r3, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	461c      	mov	r4, r3
 8000b94:	4615      	mov	r5, r2
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	00eb      	lsls	r3, r5, #3
 8000ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ba4:	00e2      	lsls	r2, r4, #3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	3307      	adds	r3, #7
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb2:	466b      	mov	r3, sp
 8000bb4:	3300      	adds	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <Read_Data_Cont+0x114>)
 8000bba:	2203      	movs	r2, #3
 8000bbc:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <Read_Data_Cont+0x114>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <Read_Data_Cont+0x114>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000bca:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <Read_Data_Cont+0x114>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4825      	ldr	r0, [pc, #148]	@ (8000c6c <Read_Data_Cont+0x118>)
 8000bd6:	f003 fb1d 	bl	8004214 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4922      	ldr	r1, [pc, #136]	@ (8000c68 <Read_Data_Cont+0x114>)
 8000be0:	4823      	ldr	r0, [pc, #140]	@ (8000c70 <Read_Data_Cont+0x11c>)
 8000be2:	f006 faa1 	bl	8007128 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	68f9      	ldr	r1, [r7, #12]
 8000bee:	4820      	ldr	r0, [pc, #128]	@ (8000c70 <Read_Data_Cont+0x11c>)
 8000bf0:	f006 fc88 	bl	8007504 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	330b      	adds	r3, #11
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c0c:	e018      	b.n	8000c40 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c0e:	8bf9      	ldrh	r1, [r7, #30]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <Read_Data_Cont+0x120>)
 8000c16:	f000 fa13 	bl	8001040 <USART3_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	4813      	ldr	r0, [pc, #76]	@ (8000c70 <Read_Data_Cont+0x11c>)
 8000c24:	f006 fc6e 	bl	8007504 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3303      	adds	r3, #3
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	330b      	adds	r3, #11
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c46:	d103      	bne.n	8000c50 <Read_Data_Cont+0xfc>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d0de      	beq.n	8000c0e <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <Read_Data_Cont+0x118>)
 8000c56:	f003 fadd 	bl	8004214 <HAL_GPIO_WritePin>
 8000c5a:	46b5      	mov	sp, r6
}
 8000c5c:	bf00      	nop
 8000c5e:	3724      	adds	r7, #36	@ 0x24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c66:	bf00      	nop
 8000c68:	24001088 	.word	0x24001088
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	240011a4 	.word	0x240011a4
 8000c74:	0800afd8 	.word	0x0800afd8

08000c78 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	csLOW();
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <Write_Enable+0x30>)
 8000c82:	f003 fac7 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000c86:	2364      	movs	r3, #100	@ 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <Write_Enable+0x34>)
 8000c8c:	4808      	ldr	r0, [pc, #32]	@ (8000cb0 <Write_Enable+0x38>)
 8000c8e:	f006 fa4b 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000c92:	2201      	movs	r2, #1
 8000c94:	2110      	movs	r1, #16
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <Write_Enable+0x30>)
 8000c98:	f003 fabc 	bl	8004214 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000c9c:	2064      	movs	r0, #100	@ 0x64
 8000c9e:	f000 f9a5 	bl	8000fec <delay_ns>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	58020000 	.word	0x58020000
 8000cac:	24000006 	.word	0x24000006
 8000cb0:	240011a4 	.word	0x240011a4

08000cb4 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <Read_Status_Register+0x50>)
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <Read_Status_Register+0x50>)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <Read_Status_Register+0x54>)
 8000cd0:	f003 faa0 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000cd4:	2364      	movs	r3, #100	@ 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	490a      	ldr	r1, [pc, #40]	@ (8000d04 <Read_Status_Register+0x50>)
 8000cda:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <Read_Status_Register+0x58>)
 8000cdc:	f006 fa24 	bl	8007128 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000ce0:	2364      	movs	r3, #100	@ 0x64
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	490a      	ldr	r1, [pc, #40]	@ (8000d10 <Read_Status_Register+0x5c>)
 8000ce6:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <Read_Status_Register+0x58>)
 8000ce8:	f006 fc0c 	bl	8007504 <HAL_SPI_Receive>
	csHIGH();
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <Read_Status_Register+0x54>)
 8000cf2:	f003 fa8f 	bl	8004214 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <Read_Status_Register+0x5c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24001088 	.word	0x24001088
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	240011a4 	.word	0x240011a4
 8000d10:	24001090 	.word	0x24001090

08000d14 <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <Write_Status_Register+0x50>)
 8000d26:	221f      	movs	r2, #31
 8000d28:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <Write_Status_Register+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <Write_Status_Register+0x50>)
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <Write_Status_Register+0x54>)
 8000d3c:	f003 fa6a 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000d40:	2364      	movs	r3, #100	@ 0x64
 8000d42:	2203      	movs	r2, #3
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <Write_Status_Register+0x50>)
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <Write_Status_Register+0x58>)
 8000d48:	f006 f9ee 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <Write_Status_Register+0x54>)
 8000d52:	f003 fa5f 	bl	8004214 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d56:	2064      	movs	r0, #100	@ 0x64
 8000d58:	f000 f948 	bl	8000fec <delay_ns>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24001088 	.word	0x24001088
 8000d68:	58020000 	.word	0x58020000
 8000d6c:	240011a4 	.word	0x240011a4

08000d70 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	460a      	mov	r2, r1
 8000d80:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	4811      	ldr	r0, [pc, #68]	@ (8000dcc <Read_ID+0x5c>)
 8000d88:	f003 fa44 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000d8c:	2364      	movs	r3, #100	@ 0x64
 8000d8e:	2202      	movs	r2, #2
 8000d90:	490f      	ldr	r1, [pc, #60]	@ (8000dd0 <Read_ID+0x60>)
 8000d92:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <Read_ID+0x64>)
 8000d94:	f006 f9c8 	bl	8007128 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000d98:	1d39      	adds	r1, r7, #4
 8000d9a:	2364      	movs	r3, #100	@ 0x64
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <Read_ID+0x64>)
 8000da0:	f006 fbb0 	bl	8007504 <HAL_SPI_Receive>
	csHIGH();
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <Read_ID+0x5c>)
 8000daa:	f003 fa33 	bl	8004214 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dae:	2064      	movs	r0, #100	@ 0x64
 8000db0:	f000 f91c 	bl	8000fec <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000db4:	793b      	ldrb	r3, [r7, #4]
 8000db6:	041a      	lsls	r2, r3, #16
 8000db8:	797b      	ldrb	r3, [r7, #5]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	79b9      	ldrb	r1, [r7, #6]
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	4313      	orrs	r3, r2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	24000004 	.word	0x24000004
 8000dd4:	240011a4 	.word	0x240011a4

08000dd8 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	4613      	mov	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000de8:	f7ff ff46 	bl	8000c78 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <Write_Data_Buffer+0x6c>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <Write_Data_Buffer+0x6c>)
 8000dfc:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <Write_Data_Buffer+0x6c>)
 8000e04:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <Write_Data_Buffer+0x70>)
 8000e0c:	f003 fa02 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000e10:	2364      	movs	r3, #100	@ 0x64
 8000e12:	2203      	movs	r2, #3
 8000e14:	490b      	ldr	r1, [pc, #44]	@ (8000e44 <Write_Data_Buffer+0x6c>)
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <Write_Data_Buffer+0x74>)
 8000e18:	f006 f986 	bl	8007128 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000e1c:	88ba      	ldrh	r2, [r7, #4]
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <Write_Data_Buffer+0x74>)
 8000e26:	f006 f97f 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <Write_Data_Buffer+0x70>)
 8000e30:	f003 f9f0 	bl	8004214 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e34:	2064      	movs	r0, #100	@ 0x64
 8000e36:	f000 f8d9 	bl	8000fec <delay_ns>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24001088 	.word	0x24001088
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	240011a4 	.word	0x240011a4

08000e50 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000e5a:	f7ff ff0d 	bl	8000c78 <Write_Enable>
	Tx_Buffer[0]=OP_Program_Ex;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <Write_Data_Flash+0x5c>)
 8000e60:	2210      	movs	r2, #16
 8000e62:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <Write_Data_Flash+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <Write_Data_Flash+0x5c>)
 8000e74:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <Write_Data_Flash+0x5c>)
 8000e7c:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <Write_Data_Flash+0x60>)
 8000e84:	f003 f9c6 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000e88:	2364      	movs	r3, #100	@ 0x64
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <Write_Data_Flash+0x5c>)
 8000e8e:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <Write_Data_Flash+0x64>)
 8000e90:	f006 f94a 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000e94:	2201      	movs	r2, #1
 8000e96:	2110      	movs	r1, #16
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <Write_Data_Flash+0x60>)
 8000e9a:	f003 f9bb 	bl	8004214 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000e9e:	f000 f8f5 	bl	800108c <W25N_WaitForReady>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24001088 	.word	0x24001088
 8000eb0:	58020000 	.word	0x58020000
 8000eb4:	240011a4 	.word	0x240011a4

08000eb8 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <Select_Page_Read+0x58>)
 8000ec4:	2213      	movs	r2, #19
 8000ec6:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <Select_Page_Read+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <Select_Page_Read+0x58>)
 8000ed8:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <Select_Page_Read+0x58>)
 8000ee0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <Select_Page_Read+0x5c>)
 8000ee8:	f003 f994 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000eec:	2364      	movs	r3, #100	@ 0x64
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4907      	ldr	r1, [pc, #28]	@ (8000f10 <Select_Page_Read+0x58>)
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <Select_Page_Read+0x60>)
 8000ef4:	f006 f918 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2110      	movs	r1, #16
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <Select_Page_Read+0x5c>)
 8000efe:	f003 f989 	bl	8004214 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f02:	f000 f8c3 	bl	800108c <W25N_WaitForReady>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24001088 	.word	0x24001088
 8000f14:	58020000 	.word	0x58020000
 8000f18:	240011a4 	.word	0x240011a4

08000f1c <Read_Data_Buffer>:

//Read data from selected page
//NB: First use Select_Page_Read to select page
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <Read_Data_Buffer+0x5c>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <Read_Data_Buffer+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <Read_Data_Buffer+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <Read_Data_Buffer+0x5c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f40:	2200      	movs	r2, #0
 8000f42:	2110      	movs	r1, #16
 8000f44:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <Read_Data_Buffer+0x60>)
 8000f46:	f003 f965 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000f4a:	2364      	movs	r3, #100	@ 0x64
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	490a      	ldr	r1, [pc, #40]	@ (8000f78 <Read_Data_Buffer+0x5c>)
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <Read_Data_Buffer+0x64>)
 8000f52:	f006 f8e9 	bl	8007128 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <Read_Data_Buffer+0x64>)
 8000f60:	f006 fad0 	bl	8007504 <HAL_SPI_Receive>
	csHIGH();
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <Read_Data_Buffer+0x60>)
 8000f6a:	f003 f953 	bl	8004214 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24001088 	.word	0x24001088
 8000f7c:	58020000 	.word	0x58020000
 8000f80:	240011a4 	.word	0x240011a4

08000f84 <Block_Erase>:

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000f8e:	f7ff fe73 	bl	8000c78 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <Block_Erase+0x5c>)
 8000f94:	22d8      	movs	r2, #216	@ 0xd8
 8000f96:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <Block_Erase+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <Block_Erase+0x5c>)
 8000fa8:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <Block_Erase+0x5c>)
 8000fb0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <Block_Erase+0x60>)
 8000fb8:	f003 f92c 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <Block_Erase+0x5c>)
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <Block_Erase+0x64>)
 8000fc4:	f006 f8b0 	bl	8007128 <HAL_SPI_Transmit>
	csHIGH();
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <Block_Erase+0x60>)
 8000fce:	f003 f921 	bl	8004214 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000fd2:	f000 f85b 	bl	800108c <W25N_WaitForReady>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24001088 	.word	0x24001088
 8000fe4:	58020000 	.word	0x58020000
 8000fe8:	240011a4 	.word	0x240011a4

08000fec <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <delay_ns+0x48>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0a5b      	lsrs	r3, r3, #9
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <delay_ns+0x4c>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	09db      	lsrs	r3, r3, #7
 8001002:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <delay_ns+0x50>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001014:	bf00      	nop
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <delay_ns+0x50>)
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f8      	bhi.n	8001016 <delay_ns+0x2a>
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2400100c 	.word	0x2400100c
 8001038:	00044b83 	.word	0x00044b83
 800103c:	e0001000 	.word	0xe0001000

08001040 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 8001040:	b40f      	push	{r0, r1, r2, r3}
 8001042:	b580      	push	{r7, lr}
 8001044:	b0a2      	sub	sp, #136	@ 0x88
 8001046:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001048:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800104c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800104e:	f107 0008 	add.w	r0, r7, #8
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	f009 faef 	bl	800a63c <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f93c 	bl	80002e0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f107 0108 	add.w	r1, r7, #8
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <USART3_Printf+0x48>)
 8001076:	f006 fdf0 	bl	8007c5a <HAL_UART_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3788      	adds	r7, #136	@ 0x88
 800107e:	46bd      	mov	sp, r7
 8001080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001084:	b004      	add	sp, #16
 8001086:	4770      	bx	lr
 8001088:	2400122c 	.word	0x2400122c

0800108c <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001090:	2064      	movs	r0, #100	@ 0x64
 8001092:	f7ff ffab 	bl	8000fec <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8001096:	e002      	b.n	800109e <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8001098:	2064      	movs	r0, #100	@ 0x64
 800109a:	f7ff ffa7 	bl	8000fec <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <W25N_WaitForReady+0x2c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe06 	bl	8000cb4 <Read_Status_Register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f2      	bne.n	8001098 <W25N_WaitForReady+0xc>
    }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2400100a 	.word	0x2400100a

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010c0:	f000 fa84 	bl	80015cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fe14 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f860 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 fa06 	bl	80014dc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80010d0:	f000 f8d8 	bl	8001284 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80010d4:	f000 f960 	bl	8001398 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80010d8:	f000 f9b4 	bl	8001444 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &command,1);
 80010dc:	2201      	movs	r2, #1
 80010de:	4925      	ldr	r1, [pc, #148]	@ (8001174 <main+0xb8>)
 80010e0:	4825      	ldr	r0, [pc, #148]	@ (8001178 <main+0xbc>)
 80010e2:	f006 ff11 	bl	8007f08 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80010e6:	4b25      	ldr	r3, [pc, #148]	@ (800117c <main+0xc0>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a24      	ldr	r2, [pc, #144]	@ (800117c <main+0xc0>)
 80010ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010f0:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 80010f2:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <main+0xc4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <main+0xc4>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fb10 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8001104:	f7ff fe34 	bl	8000d70 <Read_ID>
 8001108:	4603      	mov	r3, r0
 800110a:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <main+0xc8>)
 800110c:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  Read_Register();
 800110e:	f7ff fbd1 	bl	80008b4 <Read_Register>

	  //Read
	  if(command==0x31){
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <main+0xb8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b31      	cmp	r3, #49	@ 0x31
 8001118:	d105      	bne.n	8001126 <main+0x6a>
		  Read_Data_Cont(16);
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff fd1a 	bl	8000b54 <Read_Data_Cont>
		  command = 0;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <main+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <main+0xb8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b32      	cmp	r3, #50	@ 0x32
 800112c:	d109      	bne.n	8001142 <main+0x86>
		  Start_Flight_Recording=1;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <main+0xcc>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8001134:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001138:	f7ff fac0 	bl	80006bc <CAN_SendMessage>
		  command=0;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <main+0xb8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <main+0xb8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b33      	cmp	r3, #51	@ 0x33
 8001148:	d109      	bne.n	800115e <main+0xa2>
		  Start_Flight_Recording=0;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <main+0xcc>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8001150:	f240 1001 	movw	r0, #257	@ 0x101
 8001154:	f7ff fab2 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <main+0xb8>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <main+0xb8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b34      	cmp	r3, #52	@ 0x34
 8001164:	d1d3      	bne.n	800110e <main+0x52>
		  Chip_Erase();
 8001166:	f7ff fc93 	bl	8000a90 <Chip_Erase>
		  command=0;
 800116a:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <main+0xb8>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8001170:	e7cd      	b.n	800110e <main+0x52>
 8001172:	bf00      	nop
 8001174:	240010a8 	.word	0x240010a8
 8001178:	2400122c 	.word	0x2400122c
 800117c:	e000edf0 	.word	0xe000edf0
 8001180:	e0001000 	.word	0xe0001000
 8001184:	240010ac 	.word	0x240010ac
 8001188:	24001095 	.word	0x24001095

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09c      	sub	sp, #112	@ 0x70
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	224c      	movs	r2, #76	@ 0x4c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f009 fa5c 	bl	800a658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f009 fa56 	bl	800a658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f003 f84b 	bl	8004248 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <SystemClock_Config+0xf0>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a30      	ldr	r2, [pc, #192]	@ (800127c <SystemClock_Config+0xf0>)
 80011bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <SystemClock_Config+0xf0>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <SystemClock_Config+0xf4>)
 80011ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001280 <SystemClock_Config+0xf4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <SystemClock_Config+0xf4>)
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e4:	bf00      	nop
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <SystemClock_Config+0xf0>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f2:	d1f8      	bne.n	80011e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800120c:	233c      	movs	r3, #60	@ 0x3c
 800120e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001214:	230a      	movs	r3, #10
 8001216:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800121c:	230c      	movs	r3, #12
 800121e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001220:	2300      	movs	r3, #0
 8001222:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f845 	bl	80042bc <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001238:	f000 f9f4 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	233f      	movs	r3, #63	@ 0x3f
 800123e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2303      	movs	r3, #3
 8001242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001248:	2308      	movs	r3, #8
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800124c:	2340      	movs	r3, #64	@ 0x40
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001250:	2340      	movs	r3, #64	@ 0x40
 8001252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2104      	movs	r1, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fc84 	bl	8004b70 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800126e:	f000 f9d9 	bl	8001624 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3770      	adds	r7, #112	@ 0x70
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	58024800 	.word	0x58024800
 8001280:	58000400 	.word	0x58000400

08001284 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800128a:	4b40      	ldr	r3, [pc, #256]	@ (800138c <MX_FDCAN1_Init+0x108>)
 800128c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001290:	4a3e      	ldr	r2, [pc, #248]	@ (800138c <MX_FDCAN1_Init+0x108>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001296:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800129a:	4b3c      	ldr	r3, [pc, #240]	@ (800138c <MX_FDCAN1_Init+0x108>)
 800129c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001394 <MX_FDCAN1_Init+0x110>)
 80012ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012c0:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012c6:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012da:	2205      	movs	r2, #5
 80012dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012de:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012f2:	2204      	movs	r2, #4
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80012f6:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012f8:	2203      	movs	r2, #3
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 800130a:	2200      	movs	r2, #0
 800130c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001316:	2204      	movs	r2, #4
 8001318:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 800131c:	2200      	movs	r2, #0
 800131e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001322:	2204      	movs	r2, #4
 8001324:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001328:	2200      	movs	r2, #0
 800132a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 800132e:	2204      	movs	r2, #4
 8001330:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001334:	2200      	movs	r2, #0
 8001336:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 800133a:	2200      	movs	r2, #0
 800133c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001340:	2202      	movs	r2, #2
 8001342:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001346:	2200      	movs	r2, #0
 8001348:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 800134c:	2204      	movs	r2, #4
 800134e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001350:	480f      	ldr	r0, [pc, #60]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001352:	f001 fc57 	bl	8002c04 <HAL_FDCAN_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 800135c:	f000 f962 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001360:	480b      	ldr	r0, [pc, #44]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001362:	f001 fe2d 	bl	8002fc0 <HAL_FDCAN_Start>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 800136c:	f000 f95a 	bl	8001624 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	4806      	ldr	r0, [pc, #24]	@ (8001390 <MX_FDCAN1_Init+0x10c>)
 8001376:	f002 f815 	bl	80033a4 <HAL_FDCAN_ActivateNotification>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001380:	f000 f950 	bl	8001624 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	24001104 	.word	0x24001104
 8001394:	4000a000 	.word	0x4000a000

08001398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <MX_SPI1_Init+0xa4>)
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <MX_SPI1_Init+0xa8>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013b2:	2207      	movs	r2, #7
 80013b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_SPI1_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_SPI1_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <MX_SPI1_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_SPI1_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_SPI1_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_SPI1_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_SPI1_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_SPI1_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_SPI1_Init+0xa4>)
 800142a:	f005 fd59 	bl	8006ee0 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001434:	f000 f8f6 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	240011a4 	.word	0x240011a4
 8001440:	40013000 	.word	0x40013000

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <MX_USART3_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 800148e:	f006 fb94 	bl	8007bba <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 f8c4 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 80014a0:	f008 ffd3 	bl	800a44a <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 f8bb 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 80014b2:	f009 f808 	bl	800a4c6 <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 f8b2 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <MX_USART3_UART_Init+0x90>)
 80014c2:	f008 ff89 	bl	800a3d8 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f8aa 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2400122c 	.word	0x2400122c
 80014d8:	40004800 	.word	0x40004800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	4a31      	ldr	r2, [pc, #196]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001502:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a22      	ldr	r2, [pc, #136]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_GPIO_Init+0xe4>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2110      	movs	r1, #16
 800156e:	4815      	ldr	r0, [pc, #84]	@ (80015c4 <MX_GPIO_Init+0xe8>)
 8001570:	f002 fe50 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	4813      	ldr	r0, [pc, #76]	@ (80015c8 <MX_GPIO_Init+0xec>)
 800157a:	f002 fe4b 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 800157e:	2310      	movs	r3, #16
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <MX_GPIO_Init+0xe8>)
 8001596:	f002 fc8d 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800159a:	2310      	movs	r3, #16
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_GPIO_Init+0xec>)
 80015b2:	f002 fc7f 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020000 	.word	0x58020000
 80015c8:	58021800 	.word	0x58021800

080015cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80015de:	f000 fd35 	bl	800204c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015ee:	231f      	movs	r3, #31
 80015f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80015f2:	2387      	movs	r3, #135	@ 0x87
 80015f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015fa:	2300      	movs	r3, #0
 80015fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001602:	2301      	movs	r3, #1
 8001604:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd53 	bl	80020bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001616:	2004      	movs	r0, #4
 8001618:	f000 fd30 	bl	800207c <HAL_MPU_Enable>

}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <Error_Handler+0x10>)
 800162a:	f001 fcc9 	bl	8002fc0 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24001104 	.word	0x24001104

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_MspInit+0x30>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001644:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <HAL_MspInit+0x30>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_MspInit+0x30>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ba      	sub	sp, #232	@ 0xe8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	22c0      	movs	r2, #192	@ 0xc0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f008 ffe3 	bl	800a658 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a33      	ldr	r2, [pc, #204]	@ (8001764 <HAL_FDCAN_MspInit+0xf8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d15f      	bne.n	800175c <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800169c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80016ac:	230a      	movs	r3, #10
 80016ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80016b4:	2314      	movs	r3, #20
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016bc:	23c0      	movs	r3, #192	@ 0xc0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80016c0:	2320      	movs	r3, #32
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80016c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fdd7 	bl	8005288 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80016e0:	f7ff ffa0 	bl	8001624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 80016e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 80016f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001708:	4a17      	ldr	r2, [pc, #92]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_FDCAN_MspInit+0xfc>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001720:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001724:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800173a:	2309      	movs	r3, #9
 800173c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001744:	4619      	mov	r1, r3
 8001746:	4809      	ldr	r0, [pc, #36]	@ (800176c <HAL_FDCAN_MspInit+0x100>)
 8001748:	f002 fbb4 	bl	8003eb4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	2013      	movs	r0, #19
 8001752:	f000 fc46 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001756:	2013      	movs	r0, #19
 8001758:	f000 fc5d 	bl	8002016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800175c:	bf00      	nop
 800175e:	37e8      	adds	r7, #232	@ 0xe8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	4000a000 	.word	0x4000a000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020400 	.word	0x58020400

08001770 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0ba      	sub	sp, #232	@ 0xe8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	22c0      	movs	r2, #192	@ 0xc0
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f008 ff61 	bl	800a658 <memset>
  if(hspi->Instance==SPI1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a26      	ldr	r2, [pc, #152]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d144      	bne.n	800182a <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fd67 	bl	8005288 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017c0:	f7ff ff30 	bl	8001624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001800:	23e0      	movs	r3, #224	@ 0xe0
 8001802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001818:	2305      	movs	r3, #5
 800181a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_SPI_MspInit+0xcc>)
 8001826:	f002 fb45 	bl	8003eb4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800182a:	bf00      	nop
 800182c:	37e8      	adds	r7, #232	@ 0xe8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40013000 	.word	0x40013000
 8001838:	58024400 	.word	0x58024400
 800183c:	58020000 	.word	0x58020000

08001840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ba      	sub	sp, #232	@ 0xe8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	22c0      	movs	r2, #192	@ 0xc0
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f008 fef9 	bl	800a658 <memset>
  if(huart->Instance==USART3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2b      	ldr	r2, [pc, #172]	@ (8001918 <HAL_UART_MspInit+0xd8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d14e      	bne.n	800190e <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001870:	f04f 0202 	mov.w	r2, #2
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fcfe 	bl	8005288 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001892:	f7ff fec7 	bl	8001624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <HAL_UART_MspInit+0xdc>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800189c:	4a1f      	ldr	r2, [pc, #124]	@ (800191c <HAL_UART_MspInit+0xdc>)
 800189e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <HAL_UART_MspInit+0xdc>)
 80018a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_UART_MspInit+0xdc>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	4a18      	ldr	r2, [pc, #96]	@ (800191c <HAL_UART_MspInit+0xdc>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_UART_MspInit+0xdc>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ec:	2307      	movs	r3, #7
 80018ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4809      	ldr	r0, [pc, #36]	@ (8001920 <HAL_UART_MspInit+0xe0>)
 80018fa:	f002 fadb 	bl	8003eb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2027      	movs	r0, #39	@ 0x27
 8001904:	f000 fb6d 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001908:	2027      	movs	r0, #39	@ 0x27
 800190a:	f000 fb84 	bl	8002016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800190e:	bf00      	nop
 8001910:	37e8      	adds	r7, #232	@ 0xe8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004800 	.word	0x40004800
 800191c:	58024400 	.word	0x58024400
 8001920:	58020c00 	.word	0x58020c00

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 fa2a 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <SysTick_Handler+0x28>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SysTick_Handler+0x2c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SysTick_Handler+0x2c>)
 8001990:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	e002      	b.n	800199a <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <SysTick_Handler+0x2c>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	24001095 	.word	0x24001095
 80019a4:	240012c0 	.word	0x240012c0

080019a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80019ae:	f001 fd73 	bl	8003498 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	24001104 	.word	0x24001104

080019bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <USART3_IRQHandler+0x10>)
 80019c2:	f006 faed 	bl	8007fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2400122c 	.word	0x2400122c

080019d0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80019da:	e03f      	b.n	8001a5c <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 80019dc:	23f0      	movs	r3, #240	@ 0xf0
 80019de:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	3301      	adds	r3, #1
 80019ea:	b292      	uxth	r2, r2
 80019ec:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80019fc:	789b      	ldrb	r3, [r3, #2]
 80019fe:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a0e:	795b      	ldrb	r3, [r3, #5]
 8001a10:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a14:	799b      	ldrb	r3, [r3, #6]
 8001a16:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001a18:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a1a:	79db      	ldrb	r3, [r3, #7]
 8001a1c:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e1b      	lsrs	r3, r3, #24
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8001a44:	230f      	movs	r3, #15
 8001a46:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	2110      	movs	r1, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe ff60 	bl	800091c <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001a5e:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001a60:	2140      	movs	r1, #64	@ 0x40
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001a64:	f001 fb32 	bl	80030cc <HAL_FDCAN_GetRxMessage>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0b6      	beq.n	80019dc <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	240010b8 	.word	0x240010b8
 8001a7c:	240010a0 	.word	0x240010a0
 8001a80:	240012c0 	.word	0x240012c0
 8001a84:	24001095 	.word	0x24001095
 8001a88:	24001104 	.word	0x24001104

08001a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <HAL_UART_RxCpltCallback+0x24>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d104      	bne.n	8001aa8 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart3, &command,1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4904      	ldr	r1, [pc, #16]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x28>)
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x2c>)
 8001aa4:	f006 fa30 	bl	8007f08 <HAL_UART_Receive_IT>
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	240010a8 	.word	0x240010a8
 8001ab8:	2400122c 	.word	0x2400122c

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f008 fdbc 	bl	800a668 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	24080000 	.word	0x24080000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	240012c4 	.word	0x240012c4
 8001b24:	24001418 	.word	0x24001418

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b43      	ldr	r3, [pc, #268]	@ (8001c3c <SystemInit+0x114>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a42      	ldr	r2, [pc, #264]	@ (8001c3c <SystemInit+0x114>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b3c:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <SystemInit+0x118>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	2b06      	cmp	r3, #6
 8001b46:	d807      	bhi.n	8001b58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b48:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <SystemInit+0x118>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 030f 	bic.w	r3, r3, #15
 8001b50:	4a3b      	ldr	r2, [pc, #236]	@ (8001c40 <SystemInit+0x118>)
 8001b52:	f043 0307 	orr.w	r3, r3, #7
 8001b56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <SystemInit+0x11c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a39      	ldr	r2, [pc, #228]	@ (8001c44 <SystemInit+0x11c>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b64:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <SystemInit+0x11c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b6a:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <SystemInit+0x11c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <SystemInit+0x11c>)
 8001b70:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <SystemInit+0x120>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b76:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <SystemInit+0x118>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <SystemInit+0x118>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 030f 	bic.w	r3, r3, #15
 8001b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <SystemInit+0x118>)
 8001b8c:	f043 0307 	orr.w	r3, r3, #7
 8001b90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <SystemInit+0x11c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <SystemInit+0x11c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <SystemInit+0x11c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <SystemInit+0x11c>)
 8001ba6:	4a29      	ldr	r2, [pc, #164]	@ (8001c4c <SystemInit+0x124>)
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <SystemInit+0x11c>)
 8001bac:	4a28      	ldr	r2, [pc, #160]	@ (8001c50 <SystemInit+0x128>)
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <SystemInit+0x11c>)
 8001bb2:	4a28      	ldr	r2, [pc, #160]	@ (8001c54 <SystemInit+0x12c>)
 8001bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <SystemInit+0x11c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <SystemInit+0x11c>)
 8001bbe:	4a25      	ldr	r2, [pc, #148]	@ (8001c54 <SystemInit+0x12c>)
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <SystemInit+0x11c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <SystemInit+0x11c>)
 8001bca:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <SystemInit+0x12c>)
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <SystemInit+0x11c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <SystemInit+0x11c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <SystemInit+0x11c>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <SystemInit+0x11c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <SystemInit+0x130>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <SystemInit+0x134>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bf2:	d202      	bcs.n	8001bfa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <SystemInit+0x138>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <SystemInit+0x11c>)
 8001bfc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d113      	bne.n	8001c30 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <SystemInit+0x11c>)
 8001c0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <SystemInit+0x11c>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <SystemInit+0x13c>)
 8001c1a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <SystemInit+0x11c>)
 8001c22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c26:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <SystemInit+0x11c>)
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00
 8001c40:	52002000 	.word	0x52002000
 8001c44:	58024400 	.word	0x58024400
 8001c48:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c4c:	02020200 	.word	0x02020200
 8001c50:	01ff0000 	.word	0x01ff0000
 8001c54:	01010280 	.word	0x01010280
 8001c58:	5c001000 	.word	0x5c001000
 8001c5c:	ffff0000 	.word	0xffff0000
 8001c60:	51008108 	.word	0x51008108
 8001c64:	52004000 	.word	0x52004000

08001c68 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <ExitRun0Mode+0x2c>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <ExitRun0Mode+0x2c>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c78:	bf00      	nop
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <ExitRun0Mode+0x2c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f9      	beq.n	8001c7a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	58024800 	.word	0x58024800

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001cd4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001c9c:	f7ff ffe4 	bl	8001c68 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca0:	f7ff ff42 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f008 fcd3 	bl	800a674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff f9f5 	bl	80010bc <main>
  bx  lr
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cdc:	2400106c 	.word	0x2400106c
  ldr r2, =_sidata
 8001ce0:	0800b0d0 	.word	0x0800b0d0
  ldr r2, =_sbss
 8001ce4:	2400106c 	.word	0x2400106c
  ldr r4, =_ebss
 8001ce8:	24001414 	.word	0x24001414

08001cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC3_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f000 f968 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cfc:	f003 f8ee 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_Init+0x68>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	4913      	ldr	r1, [pc, #76]	@ (8001d5c <HAL_Init+0x6c>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <HAL_Init+0x68>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_Init+0x6c>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_Init+0x70>)
 8001d32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_Init+0x74>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f814 	bl	8001d68 <HAL_InitTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e002      	b.n	8001d50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4a:	f7ff fc75 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	0800b044 	.word	0x0800b044
 8001d60:	24001010 	.word	0x24001010
 8001d64:	2400100c 	.word	0x2400100c

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_InitTick+0x60>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e021      	b.n	8001dc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_InitTick+0x64>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_InitTick+0x60>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f94d 	bl	8002032 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f917 	bl	8001fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_InitTick+0x68>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24001018 	.word	0x24001018
 8001dcc:	2400100c 	.word	0x2400100c
 8001dd0:	24001014 	.word	0x24001014

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	24001018 	.word	0x24001018
 8001df8:	240012c8 	.word	0x240012c8

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	240012c8 	.word	0x240012c8

08001e14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetREVID+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	5c001000 	.word	0x5c001000

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x40>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x40>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	05fa0000 	.word	0x05fa0000

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4907      	ldr	r1, [pc, #28]	@ (8001ec8 <__NVIC_EnableIRQ+0x38>)
 8001eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff29 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff40 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff33 	bl	8001e90 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa4 	bl	8001f88 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002050:	f3bf 8f5f 	dmb	sy
}
 8002054:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_MPU_Disable+0x28>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_MPU_Disable+0x28>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002060:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_MPU_Disable+0x2c>)
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	e000ed90 	.word	0xe000ed90

0800207c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002084:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <HAL_MPU_Enable+0x38>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_MPU_Enable+0x3c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_MPU_Enable+0x3c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800209a:	f3bf 8f4f 	dsb	sy
}
 800209e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020a0:	f3bf 8f6f 	isb	sy
}
 80020a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed90 	.word	0xe000ed90
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	785a      	ldrb	r2, [r3, #1]
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_MPU_ConfigRegion+0x7c>)
 80020ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_MPU_ConfigRegion+0x7c>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_MPU_ConfigRegion+0x7c>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_MPU_ConfigRegion+0x7c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7b1b      	ldrb	r3, [r3, #12]
 80020e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7adb      	ldrb	r3, [r3, #11]
 80020ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7a9b      	ldrb	r3, [r3, #10]
 80020f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b5b      	ldrb	r3, [r3, #13]
 80020fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7b9b      	ldrb	r3, [r3, #14]
 8002102:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7bdb      	ldrb	r3, [r3, #15]
 800210a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800210c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a5b      	ldrb	r3, [r3, #9]
 8002112:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7a1b      	ldrb	r3, [r3, #8]
 800211a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800211c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002124:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002126:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002128:	6113      	str	r3, [r2, #16]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed90 	.word	0xe000ed90

0800213c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fe5a 	bl	8001dfc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e2dc      	b.n	800270e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e2cd      	b.n	800270e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a76      	ldr	r2, [pc, #472]	@ (8002350 <HAL_DMA_Abort+0x214>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a74      	ldr	r2, [pc, #464]	@ (8002354 <HAL_DMA_Abort+0x218>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a73      	ldr	r2, [pc, #460]	@ (8002358 <HAL_DMA_Abort+0x21c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a71      	ldr	r2, [pc, #452]	@ (800235c <HAL_DMA_Abort+0x220>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a70      	ldr	r2, [pc, #448]	@ (8002360 <HAL_DMA_Abort+0x224>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002364 <HAL_DMA_Abort+0x228>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6d      	ldr	r2, [pc, #436]	@ (8002368 <HAL_DMA_Abort+0x22c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6b      	ldr	r2, [pc, #428]	@ (800236c <HAL_DMA_Abort+0x230>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002370 <HAL_DMA_Abort+0x234>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a68      	ldr	r2, [pc, #416]	@ (8002374 <HAL_DMA_Abort+0x238>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	@ (8002378 <HAL_DMA_Abort+0x23c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a65      	ldr	r2, [pc, #404]	@ (800237c <HAL_DMA_Abort+0x240>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a64      	ldr	r2, [pc, #400]	@ (8002380 <HAL_DMA_Abort+0x244>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a62      	ldr	r2, [pc, #392]	@ (8002384 <HAL_DMA_Abort+0x248>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a61      	ldr	r2, [pc, #388]	@ (8002388 <HAL_DMA_Abort+0x24c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort+0xd6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5f      	ldr	r2, [pc, #380]	@ (800238c <HAL_DMA_Abort+0x250>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Abort+0xda>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_DMA_Abort+0xdc>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 021e 	bic.w	r2, r2, #30
 800222a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800223a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e00a      	b.n	800225a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020e 	bic.w	r2, r2, #14
 8002252:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_DMA_Abort+0x214>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d072      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3a      	ldr	r2, [pc, #232]	@ (8002354 <HAL_DMA_Abort+0x218>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d06d      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a39      	ldr	r2, [pc, #228]	@ (8002358 <HAL_DMA_Abort+0x21c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d068      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a37      	ldr	r2, [pc, #220]	@ (800235c <HAL_DMA_Abort+0x220>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d063      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a36      	ldr	r2, [pc, #216]	@ (8002360 <HAL_DMA_Abort+0x224>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d05e      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_DMA_Abort+0x228>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d059      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <HAL_DMA_Abort+0x22c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d054      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a31      	ldr	r2, [pc, #196]	@ (800236c <HAL_DMA_Abort+0x230>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d04f      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a30      	ldr	r2, [pc, #192]	@ (8002370 <HAL_DMA_Abort+0x234>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04a      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_DMA_Abort+0x238>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d045      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <HAL_DMA_Abort+0x23c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d040      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2b      	ldr	r2, [pc, #172]	@ (800237c <HAL_DMA_Abort+0x240>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d03b      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002380 <HAL_DMA_Abort+0x244>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d036      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_DMA_Abort+0x248>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d031      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_DMA_Abort+0x24c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d02c      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	@ (800238c <HAL_DMA_Abort+0x250>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d027      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <HAL_DMA_Abort+0x254>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a22      	ldr	r2, [pc, #136]	@ (8002394 <HAL_DMA_Abort+0x258>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01d      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	@ (8002398 <HAL_DMA_Abort+0x25c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d018      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <HAL_DMA_Abort+0x260>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_DMA_Abort+0x264>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1c      	ldr	r2, [pc, #112]	@ (80023a4 <HAL_DMA_Abort+0x268>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_DMA_Abort+0x26c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_DMA_Abort+0x20e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_DMA_Abort+0x270>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d132      	bne.n	80023b0 <HAL_DMA_Abort+0x274>
 800234a:	2301      	movs	r3, #1
 800234c:	e031      	b.n	80023b2 <HAL_DMA_Abort+0x276>
 800234e:	bf00      	nop
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
 8002390:	58025408 	.word	0x58025408
 8002394:	5802541c 	.word	0x5802541c
 8002398:	58025430 	.word	0x58025430
 800239c:	58025444 	.word	0x58025444
 80023a0:	58025458 	.word	0x58025458
 80023a4:	5802546c 	.word	0x5802546c
 80023a8:	58025480 	.word	0x58025480
 80023ac:	58025494 	.word	0x58025494
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002580 <HAL_DMA_Abort+0x444>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04a      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002584 <HAL_DMA_Abort+0x448>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d045      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6a      	ldr	r2, [pc, #424]	@ (8002588 <HAL_DMA_Abort+0x44c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d040      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a68      	ldr	r2, [pc, #416]	@ (800258c <HAL_DMA_Abort+0x450>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d03b      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a67      	ldr	r2, [pc, #412]	@ (8002590 <HAL_DMA_Abort+0x454>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d036      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_DMA_Abort+0x458>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a64      	ldr	r2, [pc, #400]	@ (8002598 <HAL_DMA_Abort+0x45c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d02c      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a62      	ldr	r2, [pc, #392]	@ (800259c <HAL_DMA_Abort+0x460>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d027      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a61      	ldr	r2, [pc, #388]	@ (80025a0 <HAL_DMA_Abort+0x464>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5f      	ldr	r2, [pc, #380]	@ (80025a4 <HAL_DMA_Abort+0x468>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01d      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5e      	ldr	r2, [pc, #376]	@ (80025a8 <HAL_DMA_Abort+0x46c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d018      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5c      	ldr	r2, [pc, #368]	@ (80025ac <HAL_DMA_Abort+0x470>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5b      	ldr	r2, [pc, #364]	@ (80025b0 <HAL_DMA_Abort+0x474>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <HAL_DMA_Abort+0x478>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a58      	ldr	r2, [pc, #352]	@ (80025b8 <HAL_DMA_Abort+0x47c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_DMA_Abort+0x32a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a56      	ldr	r2, [pc, #344]	@ (80025bc <HAL_DMA_Abort+0x480>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <HAL_DMA_Abort+0x33c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e007      	b.n	8002488 <HAL_DMA_Abort+0x34c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002488:	e013      	b.n	80024b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248a:	f7ff fcb7 	bl	8001dfc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b05      	cmp	r3, #5
 8002496:	d90c      	bls.n	80024b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12d      	b.n	800270e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e5      	bne.n	800248a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002580 <HAL_DMA_Abort+0x444>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04a      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <HAL_DMA_Abort+0x448>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d045      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002588 <HAL_DMA_Abort+0x44c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d040      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	@ (800258c <HAL_DMA_Abort+0x450>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d03b      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a29      	ldr	r2, [pc, #164]	@ (8002590 <HAL_DMA_Abort+0x454>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d036      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <HAL_DMA_Abort+0x458>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d031      	beq.n	800255e <HAL_DMA_Abort+0x422>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <HAL_DMA_Abort+0x45c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d02c      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_DMA_Abort+0x460>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d027      	beq.n	800255e <HAL_DMA_Abort+0x422>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a23      	ldr	r2, [pc, #140]	@ (80025a0 <HAL_DMA_Abort+0x464>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <HAL_DMA_Abort+0x468>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_DMA_Abort+0x46c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_DMA_Abort+0x422>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <HAL_DMA_Abort+0x470>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_DMA_Abort+0x474>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1b      	ldr	r2, [pc, #108]	@ (80025b4 <HAL_DMA_Abort+0x478>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_DMA_Abort+0x422>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <HAL_DMA_Abort+0x47c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Abort+0x422>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <HAL_DMA_Abort+0x480>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Abort+0x426>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_DMA_Abort+0x428>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02b      	beq.n	80025c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	223f      	movs	r2, #63	@ 0x3f
 8002578:	409a      	lsls	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e02a      	b.n	80025d6 <HAL_DMA_Abort+0x49a>
 8002580:	40020010 	.word	0x40020010
 8002584:	40020028 	.word	0x40020028
 8002588:	40020040 	.word	0x40020040
 800258c:	40020058 	.word	0x40020058
 8002590:	40020070 	.word	0x40020070
 8002594:	40020088 	.word	0x40020088
 8002598:	400200a0 	.word	0x400200a0
 800259c:	400200b8 	.word	0x400200b8
 80025a0:	40020410 	.word	0x40020410
 80025a4:	40020428 	.word	0x40020428
 80025a8:	40020440 	.word	0x40020440
 80025ac:	40020458 	.word	0x40020458
 80025b0:	40020470 	.word	0x40020470
 80025b4:	40020488 	.word	0x40020488
 80025b8:	400204a0 	.word	0x400204a0
 80025bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2201      	movs	r2, #1
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <HAL_DMA_Abort+0x5dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d072      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_DMA_Abort+0x5e0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d06d      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002720 <HAL_DMA_Abort+0x5e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d068      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002724 <HAL_DMA_Abort+0x5e8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d063      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a49      	ldr	r2, [pc, #292]	@ (8002728 <HAL_DMA_Abort+0x5ec>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d05e      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a47      	ldr	r2, [pc, #284]	@ (800272c <HAL_DMA_Abort+0x5f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d059      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a46      	ldr	r2, [pc, #280]	@ (8002730 <HAL_DMA_Abort+0x5f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d054      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <HAL_DMA_Abort+0x5f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04f      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_DMA_Abort+0x5fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a41      	ldr	r2, [pc, #260]	@ (800273c <HAL_DMA_Abort+0x600>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a40      	ldr	r2, [pc, #256]	@ (8002740 <HAL_DMA_Abort+0x604>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3e      	ldr	r2, [pc, #248]	@ (8002744 <HAL_DMA_Abort+0x608>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3d      	ldr	r2, [pc, #244]	@ (8002748 <HAL_DMA_Abort+0x60c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3b      	ldr	r2, [pc, #236]	@ (800274c <HAL_DMA_Abort+0x610>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	@ (8002750 <HAL_DMA_Abort+0x614>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a38      	ldr	r2, [pc, #224]	@ (8002754 <HAL_DMA_Abort+0x618>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a37      	ldr	r2, [pc, #220]	@ (8002758 <HAL_DMA_Abort+0x61c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a35      	ldr	r2, [pc, #212]	@ (800275c <HAL_DMA_Abort+0x620>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a34      	ldr	r2, [pc, #208]	@ (8002760 <HAL_DMA_Abort+0x624>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a32      	ldr	r2, [pc, #200]	@ (8002764 <HAL_DMA_Abort+0x628>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a31      	ldr	r2, [pc, #196]	@ (8002768 <HAL_DMA_Abort+0x62c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	@ (800276c <HAL_DMA_Abort+0x630>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002770 <HAL_DMA_Abort+0x634>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort+0x58a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002774 <HAL_DMA_Abort+0x638>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Abort+0x58e>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Abort+0x590>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020010 	.word	0x40020010
 800271c:	40020028 	.word	0x40020028
 8002720:	40020040 	.word	0x40020040
 8002724:	40020058 	.word	0x40020058
 8002728:	40020070 	.word	0x40020070
 800272c:	40020088 	.word	0x40020088
 8002730:	400200a0 	.word	0x400200a0
 8002734:	400200b8 	.word	0x400200b8
 8002738:	40020410 	.word	0x40020410
 800273c:	40020428 	.word	0x40020428
 8002740:	40020440 	.word	0x40020440
 8002744:	40020458 	.word	0x40020458
 8002748:	40020470 	.word	0x40020470
 800274c:	40020488 	.word	0x40020488
 8002750:	400204a0 	.word	0x400204a0
 8002754:	400204b8 	.word	0x400204b8
 8002758:	58025408 	.word	0x58025408
 800275c:	5802541c 	.word	0x5802541c
 8002760:	58025430 	.word	0x58025430
 8002764:	58025444 	.word	0x58025444
 8002768:	58025458 	.word	0x58025458
 800276c:	5802546c 	.word	0x5802546c
 8002770:	58025480 	.word	0x58025480
 8002774:	58025494 	.word	0x58025494

08002778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e237      	b.n	8002bfa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e22c      	b.n	8002bfa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_DMA_Abort_IT+0x1a0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5b      	ldr	r2, [pc, #364]	@ (800291c <HAL_DMA_Abort_IT+0x1a4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a59      	ldr	r2, [pc, #356]	@ (8002920 <HAL_DMA_Abort_IT+0x1a8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a58      	ldr	r2, [pc, #352]	@ (8002924 <HAL_DMA_Abort_IT+0x1ac>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a56      	ldr	r2, [pc, #344]	@ (8002928 <HAL_DMA_Abort_IT+0x1b0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a55      	ldr	r2, [pc, #340]	@ (800292c <HAL_DMA_Abort_IT+0x1b4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a53      	ldr	r2, [pc, #332]	@ (8002930 <HAL_DMA_Abort_IT+0x1b8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_DMA_Abort_IT+0x1bc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a50      	ldr	r2, [pc, #320]	@ (8002938 <HAL_DMA_Abort_IT+0x1c0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a4f      	ldr	r2, [pc, #316]	@ (800293c <HAL_DMA_Abort_IT+0x1c4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a4d      	ldr	r2, [pc, #308]	@ (8002940 <HAL_DMA_Abort_IT+0x1c8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4c      	ldr	r2, [pc, #304]	@ (8002944 <HAL_DMA_Abort_IT+0x1cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_DMA_Abort_IT+0x1d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a49      	ldr	r2, [pc, #292]	@ (800294c <HAL_DMA_Abort_IT+0x1d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a47      	ldr	r2, [pc, #284]	@ (8002950 <HAL_DMA_Abort_IT+0x1d8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Abort_IT+0xc8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a46      	ldr	r2, [pc, #280]	@ (8002954 <HAL_DMA_Abort_IT+0x1dc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Abort_IT+0xcc>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_DMA_Abort_IT+0xce>
 8002844:	2300      	movs	r3, #0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8086 	beq.w	8002958 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <HAL_DMA_Abort_IT+0x1a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d04a      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2e      	ldr	r2, [pc, #184]	@ (800291c <HAL_DMA_Abort_IT+0x1a4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d045      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2c      	ldr	r2, [pc, #176]	@ (8002920 <HAL_DMA_Abort_IT+0x1a8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d040      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2b      	ldr	r2, [pc, #172]	@ (8002924 <HAL_DMA_Abort_IT+0x1ac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d03b      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a29      	ldr	r2, [pc, #164]	@ (8002928 <HAL_DMA_Abort_IT+0x1b0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d036      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a28      	ldr	r2, [pc, #160]	@ (800292c <HAL_DMA_Abort_IT+0x1b4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a26      	ldr	r2, [pc, #152]	@ (8002930 <HAL_DMA_Abort_IT+0x1b8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02c      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_DMA_Abort_IT+0x1bc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d027      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a23      	ldr	r2, [pc, #140]	@ (8002938 <HAL_DMA_Abort_IT+0x1c0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d022      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a22      	ldr	r2, [pc, #136]	@ (800293c <HAL_DMA_Abort_IT+0x1c4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01d      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a20      	ldr	r2, [pc, #128]	@ (8002940 <HAL_DMA_Abort_IT+0x1c8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d018      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002944 <HAL_DMA_Abort_IT+0x1cc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002948 <HAL_DMA_Abort_IT+0x1d0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1c      	ldr	r2, [pc, #112]	@ (800294c <HAL_DMA_Abort_IT+0x1d4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002950 <HAL_DMA_Abort_IT+0x1d8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <HAL_DMA_Abort_IT+0x1dc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <HAL_DMA_Abort_IT+0x18e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e178      	b.n	8002bf8 <HAL_DMA_Abort_IT+0x480>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e16f      	b.n	8002bf8 <HAL_DMA_Abort_IT+0x480>
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	40020058 	.word	0x40020058
 8002928:	40020070 	.word	0x40020070
 800292c:	40020088 	.word	0x40020088
 8002930:	400200a0 	.word	0x400200a0
 8002934:	400200b8 	.word	0x400200b8
 8002938:	40020410 	.word	0x40020410
 800293c:	40020428 	.word	0x40020428
 8002940:	40020440 	.word	0x40020440
 8002944:	40020458 	.word	0x40020458
 8002948:	40020470 	.word	0x40020470
 800294c:	40020488 	.word	0x40020488
 8002950:	400204a0 	.word	0x400204a0
 8002954:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020e 	bic.w	r2, r2, #14
 8002966:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6c      	ldr	r2, [pc, #432]	@ (8002b20 <HAL_DMA_Abort_IT+0x3a8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d04a      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_DMA_Abort_IT+0x3ac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d045      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a69      	ldr	r2, [pc, #420]	@ (8002b28 <HAL_DMA_Abort_IT+0x3b0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d040      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a68      	ldr	r2, [pc, #416]	@ (8002b2c <HAL_DMA_Abort_IT+0x3b4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d03b      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a66      	ldr	r2, [pc, #408]	@ (8002b30 <HAL_DMA_Abort_IT+0x3b8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d036      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a65      	ldr	r2, [pc, #404]	@ (8002b34 <HAL_DMA_Abort_IT+0x3bc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d031      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a63      	ldr	r2, [pc, #396]	@ (8002b38 <HAL_DMA_Abort_IT+0x3c0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02c      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a62      	ldr	r2, [pc, #392]	@ (8002b3c <HAL_DMA_Abort_IT+0x3c4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d027      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a60      	ldr	r2, [pc, #384]	@ (8002b40 <HAL_DMA_Abort_IT+0x3c8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d022      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b44 <HAL_DMA_Abort_IT+0x3cc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d01d      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b48 <HAL_DMA_Abort_IT+0x3d0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5c      	ldr	r2, [pc, #368]	@ (8002b4c <HAL_DMA_Abort_IT+0x3d4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b50 <HAL_DMA_Abort_IT+0x3d8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a59      	ldr	r2, [pc, #356]	@ (8002b54 <HAL_DMA_Abort_IT+0x3dc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a57      	ldr	r2, [pc, #348]	@ (8002b58 <HAL_DMA_Abort_IT+0x3e0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x290>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <HAL_DMA_Abort_IT+0x3e4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d108      	bne.n	8002a1a <HAL_DMA_Abort_IT+0x2a2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e007      	b.n	8002a2a <HAL_DMA_Abort_IT+0x2b2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b20 <HAL_DMA_Abort_IT+0x3a8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d072      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a3a      	ldr	r2, [pc, #232]	@ (8002b24 <HAL_DMA_Abort_IT+0x3ac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d06d      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a39      	ldr	r2, [pc, #228]	@ (8002b28 <HAL_DMA_Abort_IT+0x3b0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d068      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a37      	ldr	r2, [pc, #220]	@ (8002b2c <HAL_DMA_Abort_IT+0x3b4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d063      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a36      	ldr	r2, [pc, #216]	@ (8002b30 <HAL_DMA_Abort_IT+0x3b8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d05e      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a34      	ldr	r2, [pc, #208]	@ (8002b34 <HAL_DMA_Abort_IT+0x3bc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d059      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a33      	ldr	r2, [pc, #204]	@ (8002b38 <HAL_DMA_Abort_IT+0x3c0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d054      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a31      	ldr	r2, [pc, #196]	@ (8002b3c <HAL_DMA_Abort_IT+0x3c4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d04f      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a30      	ldr	r2, [pc, #192]	@ (8002b40 <HAL_DMA_Abort_IT+0x3c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2e      	ldr	r2, [pc, #184]	@ (8002b44 <HAL_DMA_Abort_IT+0x3cc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2d      	ldr	r2, [pc, #180]	@ (8002b48 <HAL_DMA_Abort_IT+0x3d0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b4c <HAL_DMA_Abort_IT+0x3d4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b50 <HAL_DMA_Abort_IT+0x3d8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	@ (8002b54 <HAL_DMA_Abort_IT+0x3dc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a27      	ldr	r2, [pc, #156]	@ (8002b58 <HAL_DMA_Abort_IT+0x3e0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a25      	ldr	r2, [pc, #148]	@ (8002b5c <HAL_DMA_Abort_IT+0x3e4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <HAL_DMA_Abort_IT+0x3e8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <HAL_DMA_Abort_IT+0x3ec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <HAL_DMA_Abort_IT+0x3f0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_DMA_Abort_IT+0x3f4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <HAL_DMA_Abort_IT+0x3f8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <HAL_DMA_Abort_IT+0x3fc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <HAL_DMA_Abort_IT+0x400>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x3a2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <HAL_DMA_Abort_IT+0x404>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d132      	bne.n	8002b80 <HAL_DMA_Abort_IT+0x408>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e031      	b.n	8002b82 <HAL_DMA_Abort_IT+0x40a>
 8002b1e:	bf00      	nop
 8002b20:	40020010 	.word	0x40020010
 8002b24:	40020028 	.word	0x40020028
 8002b28:	40020040 	.word	0x40020040
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	40020070 	.word	0x40020070
 8002b34:	40020088 	.word	0x40020088
 8002b38:	400200a0 	.word	0x400200a0
 8002b3c:	400200b8 	.word	0x400200b8
 8002b40:	40020410 	.word	0x40020410
 8002b44:	40020428 	.word	0x40020428
 8002b48:	40020440 	.word	0x40020440
 8002b4c:	40020458 	.word	0x40020458
 8002b50:	40020470 	.word	0x40020470
 8002b54:	40020488 	.word	0x40020488
 8002b58:	400204a0 	.word	0x400204a0
 8002b5c:	400204b8 	.word	0x400204b8
 8002b60:	58025408 	.word	0x58025408
 8002b64:	5802541c 	.word	0x5802541c
 8002b68:	58025430 	.word	0x58025430
 8002b6c:	58025444 	.word	0x58025444
 8002b70:	58025458 	.word	0x58025458
 8002b74:	5802546c 	.word	0x5802546c
 8002b78:	58025480 	.word	0x58025480
 8002b7c:	58025494 	.word	0x58025494
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d028      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002bb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b098      	sub	sp, #96	@ 0x60
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002c0c:	4a84      	ldr	r2, [pc, #528]	@ (8002e20 <HAL_FDCAN_Init+0x21c>)
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4611      	mov	r1, r2
 8002c14:	224c      	movs	r2, #76	@ 0x4c
 8002c16:	4618      	mov	r0, r3
 8002c18:	f007 fd52 	bl	800a6c0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c6      	b.n	8002fb4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e24 <HAL_FDCAN_Init+0x220>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d106      	bne.n	8002c3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c38:	461a      	mov	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe fd0a 	bl	800166c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0210 	bic.w	r2, r2, #16
 8002c66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff f8c8 	bl	8001dfc <HAL_GetTick>
 8002c6c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c6e:	e014      	b.n	8002c9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c70:	f7ff f8c4 	bl	8001dfc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	d90d      	bls.n	8002c9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e18c      	b.n	8002fb4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d0e3      	beq.n	8002c70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7ff f8a0 	bl	8001dfc <HAL_GetTick>
 8002cbc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cbe:	e014      	b.n	8002cea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cc0:	f7ff f89c 	bl	8001dfc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b0a      	cmp	r3, #10
 8002ccc:	d90d      	bls.n	8002cea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e164      	b.n	8002fb4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0e3      	beq.n	8002cc0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0202 	orr.w	r2, r2, #2
 8002d06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7c1b      	ldrb	r3, [r3, #16]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	e007      	b.n	8002d32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7c5b      	ldrb	r3, [r3, #17]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e007      	b.n	8002d5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7c9b      	ldrb	r3, [r3, #18]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d72:	619a      	str	r2, [r3, #24]
 8002d74:	e007      	b.n	8002d86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002daa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0210 	bic.w	r2, r2, #16
 8002dba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0204 	orr.w	r2, r2, #4
 8002dd2:	619a      	str	r2, [r3, #24]
 8002dd4:	e030      	b.n	8002e38 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d02c      	beq.n	8002e38 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d020      	beq.n	8002e28 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002df4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0210 	orr.w	r2, r2, #16
 8002e04:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d114      	bne.n	8002e38 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	e00b      	b.n	8002e38 <HAL_FDCAN_Init+0x234>
 8002e20:	0800aff8 	.word	0x0800aff8
 8002e24:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e48:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e50:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e60:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e62:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e6c:	d115      	bne.n	8002e9a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e7c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	3b01      	subs	r3, #1
 8002e84:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e86:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002e96:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e98:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002ece:	f023 0107 	bic.w	r1, r3, #7
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3360      	adds	r3, #96	@ 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002efa:	f023 0107 	bic.w	r1, r3, #7
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3360      	adds	r3, #96	@ 0x60
 8002f06:	443b      	add	r3, r7
 8002f08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002f26:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3360      	adds	r3, #96	@ 0x60
 8002f32:	443b      	add	r3, r7
 8002f34:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f38:	011a      	lsls	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002f54:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	3360      	adds	r3, #96	@ 0x60
 8002f60:	443b      	add	r3, r7
 8002f62:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_FDCAN_Init+0x3b8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d107      	bne.n	8002f8c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f022 0203 	bic.w	r2, r2, #3
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fd81 	bl	8003aac <FDCAN_CalcultateRamBlockAddresses>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002fb0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3760      	adds	r7, #96	@ 0x60
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	4000a000 	.word	0x4000a000

08002fc0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d111      	bne.n	8002ff8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e008      	b.n	800300a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d141      	bne.n	80030b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003036:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e038      	b.n	80030c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800305a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003068:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e026      	b.n	80030c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fe93 	bl	8003db8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2101      	movs	r1, #1
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80030a2:	2201      	movs	r2, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e008      	b.n	80030c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b8:	f043 0208 	orr.w	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b08b      	sub	sp, #44	@ 0x2c
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80030e4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80030e6:	7efb      	ldrb	r3, [r7, #27]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f040 8149 	bne.w	8003380 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b40      	cmp	r3, #64	@ 0x40
 80030f2:	d14c      	bne.n	800318e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800310a:	f043 0220 	orr.w	r2, r3, #32
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e13c      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e12a      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d10a      	bne.n	8003164 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800315a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800315e:	d101      	bne.n	8003164 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003160:	2301      	movs	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	69f9      	ldr	r1, [r7, #28]
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
 800318c:	e068      	b.n	8003260 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b41      	cmp	r3, #65	@ 0x41
 8003192:	d14c      	bne.n	800322e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800319c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0ec      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0da      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ec:	d10a      	bne.n	8003204 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031fe:	d101      	bne.n	8003204 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003200:	2301      	movs	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	69f9      	ldr	r1, [r7, #28]
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
 800322c:	e018      	b.n	8003260 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	d309      	bcc.n	800324c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0a2      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e005      	b.n	8003290 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	3304      	adds	r3, #4
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e1b      	lsrs	r3, r3, #24
 80032e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0fda      	lsrs	r2, r3, #31
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	3304      	adds	r3, #4
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	e00a      	b.n	800331c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	441a      	add	r2, r3
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	440b      	add	r3, r1
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	3301      	adds	r3, #1
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	461a      	mov	r2, r3
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	4293      	cmp	r3, r2
 800332a:	d3ec      	bcc.n	8003306 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b40      	cmp	r3, #64	@ 0x40
 8003330:	d105      	bne.n	800333e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800333c:	e01e      	b.n	800337c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b41      	cmp	r3, #65	@ 0x41
 8003342:	d105      	bne.n	8003350 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800334e:	e015      	b.n	800337c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b1f      	cmp	r3, #31
 8003354:	d808      	bhi.n	8003368 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003366:	e009      	b.n	800337c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e008      	b.n	8003392 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	372c      	adds	r7, #44	@ 0x2c
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0800b054 	.word	0x0800b054

080033a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80033b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d002      	beq.n	80033c4 <HAL_FDCAN_ActivateNotification+0x20>
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d155      	bne.n	8003470 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033e2:	e014      	b.n	800340e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d108      	bne.n	8003406 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0202 	orr.w	r2, r2, #2
 8003402:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003404:	e003      	b.n	800340e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2203      	movs	r2, #3
 800340c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	430a      	orrs	r2, r1
 8003428:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	430a      	orrs	r2, r1
 8003446:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_FDCAN_ActivateNotification+0xec>)
 8003454:	4013      	ands	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	6553      	str	r3, [r2, #84]	@ 0x54
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0f9b      	lsrs	r3, r3, #30
 8003466:	490b      	ldr	r1, [pc, #44]	@ (8003494 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003468:	4313      	orrs	r3, r2
 800346a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e008      	b.n	8003482 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	3fcfffff 	.word	0x3fcfffff
 8003494:	4000a800 	.word	0x4000a800

08003498 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b096      	sub	sp, #88	@ 0x58
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80034a0:	4b9a      	ldr	r3, [pc, #616]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	079b      	lsls	r3, r3, #30
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80034a8:	4b98      	ldr	r3, [pc, #608]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	079b      	lsls	r3, r3, #30
 80034ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034b0:	4013      	ands	r3, r2
 80034b2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80034be:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80034c8:	4013      	ands	r3, r2
 80034ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034e0:	4013      	ands	r3, r2
 80034e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f8:	4013      	ands	r3, r2
 80034fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003502:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003506:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003510:	4013      	ands	r3, r2
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800351e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003528:	4013      	ands	r3, r2
 800352a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355c:	651a      	str	r2, [r3, #80]	@ 0x50
 800355e:	4b6b      	ldr	r3, [pc, #428]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa54 	bl	8003a12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800356a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356c:	0a9b      	lsrs	r3, r3, #10
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01d      	beq.n	80035b2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	0a9b      	lsrs	r3, r3, #10
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003596:	4013      	ands	r3, r2
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80035a4:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80035aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa07 	bl	80039c0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035be:	4b54      	ldr	r3, [pc, #336]	@ (8003710 <HAL_FDCAN_IRQHandler+0x278>)
 80035c0:	400b      	ands	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c4:	4a51      	ldr	r2, [pc, #324]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	0f9b      	lsrs	r3, r3, #30
 80035ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80035cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9c0 	bl	8003954 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80035d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003710 <HAL_FDCAN_IRQHandler+0x278>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e6:	4a49      	ldr	r2, [pc, #292]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80035e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ea:	0f9b      	lsrs	r3, r3, #30
 80035ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80035ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9ba 	bl	800396a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80035f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_FDCAN_IRQHandler+0x278>)
 8003604:	400b      	ands	r3, r1
 8003606:	6513      	str	r3, [r2, #80]	@ 0x50
 8003608:	4a40      	ldr	r2, [pc, #256]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 800360a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360c:	0f9b      	lsrs	r3, r3, #30
 800360e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003610:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe f9dc 	bl	80019d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003624:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <HAL_FDCAN_IRQHandler+0x278>)
 8003626:	400b      	ands	r3, r1
 8003628:	6513      	str	r3, [r2, #80]	@ 0x50
 800362a:	4a38      	ldr	r2, [pc, #224]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 800362c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362e:	0f9b      	lsrs	r3, r3, #30
 8003630:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003632:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9a3 	bl	8003980 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363c:	0adb      	lsrs	r3, r3, #11
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	0adb      	lsrs	r3, r3, #11
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f997 	bl	8003996 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366a:	0a5b      	lsrs	r3, r3, #9
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01d      	beq.n	80036b0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	0a5b      	lsrs	r3, r3, #9
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003688:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003694:	4013      	ands	r3, r2
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80036a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f97d 	bl	80039aa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80036b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b2:	0cdb      	lsrs	r3, r3, #19
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80036bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036be:	0cdb      	lsrs	r3, r3, #19
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80036d2:	4b0e      	ldr	r3, [pc, #56]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f97c 	bl	80039d6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80036de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003700:	4b02      	ldr	r3, [pc, #8]	@ (800370c <HAL_FDCAN_IRQHandler+0x274>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	e004      	b.n	8003714 <HAL_FDCAN_IRQHandler+0x27c>
 800370a:	bf00      	nop
 800370c:	4000a800 	.word	0x4000a800
 8003710:	3fcfffff 	.word	0x3fcfffff
 8003714:	f000 f969 	bl	80039ea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003738:	651a      	str	r2, [r3, #80]	@ 0x50
 800373a:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <HAL_FDCAN_IRQHandler+0x4b0>)
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f95c 	bl	80039fe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003748:	0c5b      	lsrs	r3, r3, #17
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	0c5b      	lsrs	r3, r3, #17
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00f      	beq.n	800377e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003766:	651a      	str	r2, [r3, #80]	@ 0x50
 8003768:	4b77      	ldr	r3, [pc, #476]	@ (8003948 <HAL_FDCAN_IRQHandler+0x4b0>)
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003774:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800378a:	4b70      	ldr	r3, [pc, #448]	@ (800394c <HAL_FDCAN_IRQHandler+0x4b4>)
 800378c:	400b      	ands	r3, r1
 800378e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003790:	4a6d      	ldr	r2, [pc, #436]	@ (8003948 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003794:	0f9b      	lsrs	r3, r3, #30
 8003796:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f94d 	bl	8003a3a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80037a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037ac:	4b67      	ldr	r3, [pc, #412]	@ (800394c <HAL_FDCAN_IRQHandler+0x4b4>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b2:	4a65      	ldr	r2, [pc, #404]	@ (8003948 <HAL_FDCAN_IRQHandler+0x4b0>)
 80037b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b6:	0f9b      	lsrs	r3, r3, #30
 80037b8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80037c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a60      	ldr	r2, [pc, #384]	@ (8003950 <HAL_FDCAN_IRQHandler+0x4b8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	f040 80ac 	bne.w	800392e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a4 	beq.w	800392e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fa:	4013      	ands	r3, r2
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003812:	4013      	ands	r3, r2
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382a:	4013      	ands	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003838:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	6a3a      	ldr	r2, [r7, #32]
 8003842:	4013      	ands	r3, r2
 8003844:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003850:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	4013      	ands	r3, r2
 800385c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800387c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8e6 	bl	8003a50 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003890:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8e6 	bl	8003a66 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01a      	beq.n	80038dc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038c8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2240      	movs	r2, #64	@ 0x40
 80038d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6939      	ldr	r1, [r7, #16]
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8d0 	bl	8003a7c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80038ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8d1 	bl	8003a94 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f874 	bl	8003a26 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800393e:	bf00      	nop
 8003940:	3758      	adds	r7, #88	@ 0x58
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	4000a800 	.word	0x4000a800
 800394c:	3fcfffff 	.word	0x3fcfffff
 8003950:	4000a000 	.word	0x4000a000

08003954 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	0091      	lsls	r1, r2, #2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003adc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	041a      	lsls	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	4413      	add	r3, r2
 8003af8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b02:	4b97      	ldr	r3, [pc, #604]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	0091      	lsls	r1, r2, #2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4413      	add	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003b44:	4b86      	ldr	r3, [pc, #536]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	0091      	lsls	r1, r2, #2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	041a      	lsls	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b8c:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	0091      	lsls	r1, r2, #2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ba6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	041a      	lsls	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4413      	add	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003bd4:	4b62      	ldr	r3, [pc, #392]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	0091      	lsls	r1, r2, #2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003c00:	4b57      	ldr	r3, [pc, #348]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	0091      	lsls	r1, r2, #2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c1a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4413      	add	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c42:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0091      	lsls	r1, r2, #2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c5c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c78:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c80:	061a      	lsls	r2, r3, #24
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c90:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003c92:	4413      	add	r3, r2
 8003c94:	009a      	lsls	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003cfc:	441a      	add	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	441a      	add	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003d48:	441a      	add	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d915      	bls.n	8003d88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003d5c:	e006      	b.n	8003d6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003d5e:	bf00      	nop
 8003d60:	ffff0003 	.word	0xffff0003
 8003d64:	10002b00 	.word	0x10002b00
 8003d68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e010      	b.n	8003daa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e005      	b.n	8003d9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d3f3      	bcc.n	8003d90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	@ 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003dd6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e00a      	b.n	8003dfa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003dec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003df2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003df8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e04:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e0a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e10:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e26:	6839      	ldr	r1, [r7, #0]
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3304      	adds	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e020      	b.n	8003e92 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3303      	adds	r3, #3
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3302      	adds	r3, #2
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	440b      	add	r3, r1
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e68:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	440b      	add	r3, r1
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e76:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e80:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4a06      	ldr	r2, [pc, #24]	@ (8003eb0 <FDCAN_CopyMessageToRAM+0xf8>)
 8003e98:	5cd3      	ldrb	r3, [r2, r3]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d3d6      	bcc.n	8003e50 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	3724      	adds	r7, #36	@ 0x24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	0800b054 	.word	0x0800b054

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ec2:	4b89      	ldr	r3, [pc, #548]	@ (80040e8 <HAL_GPIO_Init+0x234>)
 8003ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ec6:	e194      	b.n	80041f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8186 	beq.w	80041ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d005      	beq.n	8003ef8 <HAL_GPIO_Init+0x44>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d130      	bne.n	8003f5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	2203      	movs	r2, #3
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f2e:	2201      	movs	r2, #1
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 0201 	and.w	r2, r3, #1
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d017      	beq.n	8003f96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	2203      	movs	r2, #3
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d123      	bne.n	8003fea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	08da      	lsrs	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3208      	adds	r2, #8
 8003faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	08da      	lsrs	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3208      	adds	r2, #8
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0203 	and.w	r2, r3, #3
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80e0 	beq.w	80041ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402c:	4b2f      	ldr	r3, [pc, #188]	@ (80040ec <HAL_GPIO_Init+0x238>)
 800402e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004032:	4a2e      	ldr	r2, [pc, #184]	@ (80040ec <HAL_GPIO_Init+0x238>)
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800403c:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_GPIO_Init+0x238>)
 800403e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404a:	4a29      	ldr	r2, [pc, #164]	@ (80040f0 <HAL_GPIO_Init+0x23c>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <HAL_GPIO_Init+0x240>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d052      	beq.n	800411c <HAL_GPIO_Init+0x268>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_GPIO_Init+0x244>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_GPIO_Init+0x22e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_GPIO_Init+0x248>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02b      	beq.n	80040de <HAL_GPIO_Init+0x22a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1d      	ldr	r2, [pc, #116]	@ (8004100 <HAL_GPIO_Init+0x24c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d025      	beq.n	80040da <HAL_GPIO_Init+0x226>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <HAL_GPIO_Init+0x250>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01f      	beq.n	80040d6 <HAL_GPIO_Init+0x222>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <HAL_GPIO_Init+0x254>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d019      	beq.n	80040d2 <HAL_GPIO_Init+0x21e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1a      	ldr	r2, [pc, #104]	@ (800410c <HAL_GPIO_Init+0x258>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <HAL_GPIO_Init+0x21a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <HAL_GPIO_Init+0x25c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00d      	beq.n	80040ca <HAL_GPIO_Init+0x216>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_GPIO_Init+0x260>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <HAL_GPIO_Init+0x212>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_GPIO_Init+0x264>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_GPIO_Init+0x20e>
 80040be:	2309      	movs	r3, #9
 80040c0:	e02d      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040c2:	230a      	movs	r3, #10
 80040c4:	e02b      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040c6:	2308      	movs	r3, #8
 80040c8:	e029      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040ca:	2307      	movs	r3, #7
 80040cc:	e027      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040ce:	2306      	movs	r3, #6
 80040d0:	e025      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040d2:	2305      	movs	r3, #5
 80040d4:	e023      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040d6:	2304      	movs	r3, #4
 80040d8:	e021      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040da:	2303      	movs	r3, #3
 80040dc:	e01f      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040de:	2302      	movs	r3, #2
 80040e0:	e01d      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01b      	b.n	800411e <HAL_GPIO_Init+0x26a>
 80040e6:	bf00      	nop
 80040e8:	58000080 	.word	0x58000080
 80040ec:	58024400 	.word	0x58024400
 80040f0:	58000400 	.word	0x58000400
 80040f4:	58020000 	.word	0x58020000
 80040f8:	58020400 	.word	0x58020400
 80040fc:	58020800 	.word	0x58020800
 8004100:	58020c00 	.word	0x58020c00
 8004104:	58021000 	.word	0x58021000
 8004108:	58021400 	.word	0x58021400
 800410c:	58021800 	.word	0x58021800
 8004110:	58021c00 	.word	0x58021c00
 8004114:	58022000 	.word	0x58022000
 8004118:	58022400 	.word	0x58022400
 800411c:	2300      	movs	r3, #0
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412e:	4938      	ldr	r1, [pc, #224]	@ (8004210 <HAL_GPIO_Init+0x35c>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f ae63 	bne.w	8003ec8 <HAL_GPIO_Init+0x14>
  }
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	3724      	adds	r7, #36	@ 0x24
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	58000400 	.word	0x58000400

08004214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
 8004220:	4613      	mov	r3, r2
 8004222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004224:	787b      	ldrb	r3, [r7, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004230:	e003      	b.n	800423a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d00a      	beq.n	8004272 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800425c:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <HAL_PWREx_ConfigSupply+0x70>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d001      	beq.n	800426e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e01f      	b.n	80042ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e01d      	b.n	80042ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	490f      	ldr	r1, [pc, #60]	@ (80042b8 <HAL_PWREx_ConfigSupply+0x70>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4313      	orrs	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004282:	f7fd fdbb 	bl	8001dfc <HAL_GetTick>
 8004286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004288:	e009      	b.n	800429e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800428a:	f7fd fdb7 	bl	8001dfc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004298:	d901      	bls.n	800429e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e007      	b.n	80042ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_PWREx_ConfigSupply+0x70>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042aa:	d1ee      	bne.n	800428a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	58024800 	.word	0x58024800

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	@ 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f000 bc48 	b.w	8004b60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8088 	beq.w	80043ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b99      	ldr	r3, [pc, #612]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e8:	4b96      	ldr	r3, [pc, #600]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d007      	beq.n	8004304 <HAL_RCC_OscConfig+0x48>
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	d111      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d10c      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b8f      	ldr	r3, [pc, #572]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d06d      	beq.n	80043ec <HAL_RCC_OscConfig+0x130>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d169      	bne.n	80043ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f000 bc21 	b.w	8004b60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x7a>
 8004328:	4b86      	ldr	r3, [pc, #536]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a85      	ldr	r2, [pc, #532]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e02e      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x9c>
 800433e:	4b81      	ldr	r3, [pc, #516]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a80      	ldr	r2, [pc, #512]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b7e      	ldr	r3, [pc, #504]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7d      	ldr	r2, [pc, #500]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0xc0>
 8004362:	4b78      	ldr	r3, [pc, #480]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a77      	ldr	r2, [pc, #476]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b75      	ldr	r3, [pc, #468]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a74      	ldr	r2, [pc, #464]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 800437c:	4b71      	ldr	r3, [pc, #452]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a70      	ldr	r2, [pc, #448]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b6e      	ldr	r3, [pc, #440]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6d      	ldr	r2, [pc, #436]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fd2e 	bl	8001dfc <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd fd2a 	bl	8001dfc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e3d4      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043b6:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fd1a 	bl	8001dfc <HAL_GetTick>
 80043c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fd fd16 	bl	8001dfc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	@ 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e3c0      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043de:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x110>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80ca 	beq.w	8004590 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fc:	4b51      	ldr	r3, [pc, #324]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004404:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004406:	4b4f      	ldr	r3, [pc, #316]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_RCC_OscConfig+0x166>
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2b18      	cmp	r3, #24
 8004416:	d156      	bne.n	80044c6 <HAL_RCC_OscConfig+0x20a>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d151      	bne.n	80044c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004422:	4b48      	ldr	r3, [pc, #288]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e392      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800443a:	4b42      	ldr	r3, [pc, #264]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0219 	bic.w	r2, r3, #25
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	493f      	ldr	r1, [pc, #252]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fcd6 	bl	8001dfc <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fd fcd2 	bl	8001dfc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e37c      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004466:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	f7fd fccf 	bl	8001e14 <HAL_GetREVID>
 8004476:	4603      	mov	r3, r0
 8004478:	f241 0203 	movw	r2, #4099	@ 0x1003
 800447c:	4293      	cmp	r3, r2
 800447e:	d817      	bhi.n	80044b0 <HAL_RCC_OscConfig+0x1f4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b40      	cmp	r3, #64	@ 0x40
 8004486:	d108      	bne.n	800449a <HAL_RCC_OscConfig+0x1de>
 8004488:	4b2e      	ldr	r3, [pc, #184]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004490:	4a2c      	ldr	r2, [pc, #176]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004496:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	e07a      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	4926      	ldr	r1, [pc, #152]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ae:	e06f      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	4921      	ldr	r1, [pc, #132]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c4:	e064      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d047      	beq.n	800455e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 0219 	bic.w	r2, r3, #25
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	491a      	ldr	r1, [pc, #104]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd fc8c 	bl	8001dfc <HAL_GetTick>
 80044e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd fc88 	bl	8001dfc <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e332      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	f7fd fc85 	bl	8001e14 <HAL_GetREVID>
 800450a:	4603      	mov	r3, r0
 800450c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004510:	4293      	cmp	r3, r2
 8004512:	d819      	bhi.n	8004548 <HAL_RCC_OscConfig+0x28c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	d108      	bne.n	800452e <HAL_RCC_OscConfig+0x272>
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004524:	4a07      	ldr	r2, [pc, #28]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452a:	6053      	str	r3, [r2, #4]
 800452c:	e030      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	031b      	lsls	r3, r3, #12
 800453c:	4901      	ldr	r1, [pc, #4]	@ (8004544 <HAL_RCC_OscConfig+0x288>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
 8004544:	58024400 	.word	0x58024400
 8004548:	4b9a      	ldr	r3, [pc, #616]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	4997      	ldr	r1, [pc, #604]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	e018      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455e:	4b95      	ldr	r3, [pc, #596]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a94      	ldr	r2, [pc, #592]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd fc47 	bl	8001dfc <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004572:	f7fd fc43 	bl	8001dfc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e2ed      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004584:	4b8b      	ldr	r3, [pc, #556]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a9 	beq.w	80046f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459e:	4b85      	ldr	r3, [pc, #532]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045a8:	4b82      	ldr	r3, [pc, #520]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_OscConfig+0x308>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b18      	cmp	r3, #24
 80045b8:	d13a      	bne.n	8004630 <HAL_RCC_OscConfig+0x374>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d135      	bne.n	8004630 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c4:	4b7b      	ldr	r3, [pc, #492]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x320>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e2c1      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045dc:	f7fd fc1a 	bl	8001e14 <HAL_GetREVID>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d817      	bhi.n	800461a <HAL_RCC_OscConfig+0x35e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x348>
 80045f2:	4b70      	ldr	r3, [pc, #448]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045fa:	4a6e      	ldr	r2, [pc, #440]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004600:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004602:	e075      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004604:	4b6b      	ldr	r3, [pc, #428]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	069b      	lsls	r3, r3, #26
 8004612:	4968      	ldr	r1, [pc, #416]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004618:	e06a      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461a:	4b66      	ldr	r3, [pc, #408]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	4962      	ldr	r1, [pc, #392]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800462e:	e05f      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d042      	beq.n	80046be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004638:	4b5e      	ldr	r3, [pc, #376]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5d      	ldr	r2, [pc, #372]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fbda 	bl	8001dfc <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800464c:	f7fd fbd6 	bl	8001dfc <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e280      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800465e:	4b55      	ldr	r3, [pc, #340]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800466a:	f7fd fbd3 	bl	8001e14 <HAL_GetREVID>
 800466e:	4603      	mov	r3, r0
 8004670:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004674:	4293      	cmp	r3, r2
 8004676:	d817      	bhi.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	2b20      	cmp	r3, #32
 800467e:	d108      	bne.n	8004692 <HAL_RCC_OscConfig+0x3d6>
 8004680:	4b4c      	ldr	r3, [pc, #304]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004688:	4a4a      	ldr	r2, [pc, #296]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800468e:	6053      	str	r3, [r2, #4]
 8004690:	e02e      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
 8004692:	4b48      	ldr	r3, [pc, #288]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	069b      	lsls	r3, r3, #26
 80046a0:	4944      	ldr	r1, [pc, #272]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	e023      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
 80046a8:	4b42      	ldr	r3, [pc, #264]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	493f      	ldr	r1, [pc, #252]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e018      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046be:	4b3d      	ldr	r3, [pc, #244]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fb97 	bl	8001dfc <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046d2:	f7fd fb93 	bl	8001dfc <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e23d      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046e4:	4b33      	ldr	r3, [pc, #204]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d036      	beq.n	800476a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d019      	beq.n	8004738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004704:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004708:	4a2a      	ldr	r2, [pc, #168]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd fb74 	bl	8001dfc <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd fb70 	bl	8001dfc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e21a      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800472a:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x45c>
 8004736:	e018      	b.n	800476a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd fb5a 	bl	8001dfc <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd fb56 	bl	8001dfc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e200      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d039      	beq.n	80047ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800478a:	f7fd fb37 	bl	8001dfc <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd fb33 	bl	8001dfc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1dd      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x4d6>
 80047b0:	e01b      	b.n	80047ea <HAL_RCC_OscConfig+0x52e>
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047b8:	4b9b      	ldr	r3, [pc, #620]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a9a      	ldr	r2, [pc, #616]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047c4:	f7fd fb1a 	bl	8001dfc <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047cc:	f7fd fb16 	bl	8001dfc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1c0      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047de:	4b92      	ldr	r3, [pc, #584]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8081 	beq.w	80048fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a2c <HAL_RCC_OscConfig+0x770>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a8b      	ldr	r2, [pc, #556]	@ (8004a2c <HAL_RCC_OscConfig+0x770>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004804:	f7fd fafa 	bl	8001dfc <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fd faf6 	bl	8001dfc <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e1a0      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800481e:	4b83      	ldr	r3, [pc, #524]	@ (8004a2c <HAL_RCC_OscConfig+0x770>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d106      	bne.n	8004840 <HAL_RCC_OscConfig+0x584>
 8004832:	4b7d      	ldr	r3, [pc, #500]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	4a7c      	ldr	r2, [pc, #496]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	@ 0x70
 800483e:	e02d      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0x5a6>
 8004848:	4b77      	ldr	r3, [pc, #476]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a76      	ldr	r2, [pc, #472]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
 8004854:	4b74      	ldr	r3, [pc, #464]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004858:	4a73      	ldr	r2, [pc, #460]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004860:	e01c      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x5c8>
 800486a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6713      	str	r3, [r2, #112]	@ 0x70
 8004876:	4b6c      	ldr	r3, [pc, #432]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	4a6b      	ldr	r2, [pc, #428]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6713      	str	r3, [r2, #112]	@ 0x70
 8004882:	e00b      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004884:	4b68      	ldr	r3, [pc, #416]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004888:	4a67      	ldr	r2, [pc, #412]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004890:	4b65      	ldr	r3, [pc, #404]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	4a64      	ldr	r2, [pc, #400]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd faaa 	bl	8001dfc <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd faa6 	bl	8001dfc <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e14e      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c2:	4b59      	ldr	r3, [pc, #356]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ee      	beq.n	80048ac <HAL_RCC_OscConfig+0x5f0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd fa94 	bl	8001dfc <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fd fa90 	bl	8001dfc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e138      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ee      	bne.n	80048d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 812d 	beq.w	8004b5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004904:	4b48      	ldr	r3, [pc, #288]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800490c:	2b18      	cmp	r3, #24
 800490e:	f000 80bd 	beq.w	8004a8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	2b02      	cmp	r3, #2
 8004918:	f040 809e 	bne.w	8004a58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491c:	4b42      	ldr	r3, [pc, #264]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a41      	ldr	r2, [pc, #260]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fa68 	bl	8001dfc <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004930:	f7fd fa64 	bl	8001dfc <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e10e      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494e:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCC_OscConfig+0x774>)
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	430a      	orrs	r2, r1
 8004962:	4931      	ldr	r1, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	628b      	str	r3, [r1, #40]	@ 0x28
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	3b01      	subs	r3, #1
 800496e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004976:	3b01      	subs	r3, #1
 8004978:	025b      	lsls	r3, r3, #9
 800497a:	b29b      	uxth	r3, r3
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	3b01      	subs	r3, #1
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004998:	4923      	ldr	r1, [pc, #140]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800499e:	4b22      	ldr	r3, [pc, #136]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	4a21      	ldr	r2, [pc, #132]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ae:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <HAL_RCC_OscConfig+0x778>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049b6:	00d2      	lsls	r2, r2, #3
 80049b8:	491b      	ldr	r1, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	f023 020c 	bic.w	r2, r3, #12
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	4917      	ldr	r1, [pc, #92]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049d0:	4b15      	ldr	r3, [pc, #84]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	f023 0202 	bic.w	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	4912      	ldr	r1, [pc, #72]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049e2:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	4a07      	ldr	r2, [pc, #28]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a12:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a04      	ldr	r2, [pc, #16]	@ (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fd f9ed 	bl	8001dfc <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a24:	e011      	b.n	8004a4a <HAL_RCC_OscConfig+0x78e>
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	58024800 	.word	0x58024800
 8004a30:	fffffc0c 	.word	0xfffffc0c
 8004a34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd f9e0 	bl	8001dfc <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e08a      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a4a:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x77c>
 8004a56:	e082      	b.n	8004b5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b43      	ldr	r3, [pc, #268]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a42      	ldr	r2, [pc, #264]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd f9ca 	bl	8001dfc <HAL_GetTick>
 8004a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd f9c6 	bl	8001dfc <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e070      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x7b0>
 8004a8a:	e068      	b.n	8004b5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a8c:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a92:	4b35      	ldr	r3, [pc, #212]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d031      	beq.n	8004b04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d122      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d11a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0a5b      	lsrs	r3, r3, #9
 8004ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d111      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d108      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0e1b      	lsrs	r3, r3, #24
 8004af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e02b      	b.n	8004b60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b08:	4b17      	ldr	r3, [pc, #92]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d01f      	beq.n	8004b5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	4a11      	ldr	r2, [pc, #68]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b2a:	f7fd f967 	bl	8001dfc <HAL_GetTick>
 8004b2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b30:	bf00      	nop
 8004b32:	f7fd f963 	bl	8001dfc <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d0f9      	beq.n	8004b32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b42:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <HAL_RCC_OscConfig+0x8b0>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b4a:	00d2      	lsls	r2, r2, #3
 8004b4c:	4906      	ldr	r1, [pc, #24]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <HAL_RCC_OscConfig+0x8ac>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3730      	adds	r7, #48	@ 0x30
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	ffff0007 	.word	0xffff0007

08004b70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e19c      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b8a      	ldr	r3, [pc, #552]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d910      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b87      	ldr	r3, [pc, #540]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 020f 	bic.w	r2, r3, #15
 8004b9a:	4985      	ldr	r1, [pc, #532]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b83      	ldr	r3, [pc, #524]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e184      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d908      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bd0:	4b78      	ldr	r3, [pc, #480]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	4975      	ldr	r1, [pc, #468]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	4b70      	ldr	r3, [pc, #448]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d908      	bls.n	8004c10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	496a      	ldr	r1, [pc, #424]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	4b64      	ldr	r3, [pc, #400]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d908      	bls.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c2c:	4b61      	ldr	r3, [pc, #388]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	495e      	ldr	r1, [pc, #376]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d010      	beq.n	8004c6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	4b59      	ldr	r3, [pc, #356]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d908      	bls.n	8004c6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c5a:	4b56      	ldr	r3, [pc, #344]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4953      	ldr	r1, [pc, #332]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b4a      	ldr	r3, [pc, #296]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f023 020f 	bic.w	r2, r3, #15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4947      	ldr	r1, [pc, #284]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d055      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ca6:	4b43      	ldr	r3, [pc, #268]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4940      	ldr	r1, [pc, #256]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d121      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0f6      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd8:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d115      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0ea      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cf0:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0de      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d00:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0d6      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d10:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f023 0207 	bic.w	r2, r3, #7
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4925      	ldr	r1, [pc, #148]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fd f86b 	bl	8001dfc <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2a:	f7fd f867 	bl	8001dfc <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0be      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d40:	4b1c      	ldr	r3, [pc, #112]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d1eb      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	4b14      	ldr	r3, [pc, #80]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d208      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6e:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f023 020f 	bic.w	r2, r3, #15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	490e      	ldr	r1, [pc, #56]	@ (8004db4 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d214      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 020f 	bic.w	r2, r3, #15
 8004d96:	4906      	ldr	r1, [pc, #24]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <HAL_RCC_ClockConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e086      	b.n	8004ebe <HAL_RCC_ClockConfig+0x34e>
 8004db0:	52002000 	.word	0x52002000
 8004db4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d010      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d208      	bcs.n	8004de6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	4939      	ldr	r1, [pc, #228]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d010      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d208      	bcs.n	8004e14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	492e      	ldr	r1, [pc, #184]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d010      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d208      	bcs.n	8004e42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e30:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	4922      	ldr	r1, [pc, #136]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d208      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4917      	ldr	r1, [pc, #92]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e70:	f000 f834 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	4912      	ldr	r1, [pc, #72]	@ (8004ecc <HAL_RCC_ClockConfig+0x35c>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <HAL_RCC_ClockConfig+0x358>)
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ecc <HAL_RCC_ClockConfig+0x35c>)
 8004e98:	5cd3      	ldrb	r3, [r2, r3]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <HAL_RCC_ClockConfig+0x360>)
 8004ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed4 <HAL_RCC_ClockConfig+0x364>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004eae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <HAL_RCC_ClockConfig+0x368>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fc ff58 	bl	8001d68 <HAL_InitTick>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	0800b044 	.word	0x0800b044
 8004ed0:	24001010 	.word	0x24001010
 8004ed4:	2400100c 	.word	0x2400100c
 8004ed8:	24001014 	.word	0x24001014

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ee2:	4bb3      	ldr	r3, [pc, #716]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eea:	2b18      	cmp	r3, #24
 8004eec:	f200 8155 	bhi.w	800519a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef6:	bf00      	nop
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	0800519b 	.word	0x0800519b
 8004f00:	0800519b 	.word	0x0800519b
 8004f04:	0800519b 	.word	0x0800519b
 8004f08:	0800519b 	.word	0x0800519b
 8004f0c:	0800519b 	.word	0x0800519b
 8004f10:	0800519b 	.word	0x0800519b
 8004f14:	0800519b 	.word	0x0800519b
 8004f18:	08004f83 	.word	0x08004f83
 8004f1c:	0800519b 	.word	0x0800519b
 8004f20:	0800519b 	.word	0x0800519b
 8004f24:	0800519b 	.word	0x0800519b
 8004f28:	0800519b 	.word	0x0800519b
 8004f2c:	0800519b 	.word	0x0800519b
 8004f30:	0800519b 	.word	0x0800519b
 8004f34:	0800519b 	.word	0x0800519b
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	0800519b 	.word	0x0800519b
 8004f40:	0800519b 	.word	0x0800519b
 8004f44:	0800519b 	.word	0x0800519b
 8004f48:	0800519b 	.word	0x0800519b
 8004f4c:	0800519b 	.word	0x0800519b
 8004f50:	0800519b 	.word	0x0800519b
 8004f54:	0800519b 	.word	0x0800519b
 8004f58:	08004f8f 	.word	0x08004f8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f5c:	4b94      	ldr	r3, [pc, #592]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f68:	4b91      	ldr	r3, [pc, #580]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	4a90      	ldr	r2, [pc, #576]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f7a:	e111      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f7c:	4b8d      	ldr	r3, [pc, #564]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f7e:	61bb      	str	r3, [r7, #24]
      break;
 8004f80:	e10e      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f82:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f84:	61bb      	str	r3, [r7, #24]
      break;
 8004f86:	e10b      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f88:	4b8c      	ldr	r3, [pc, #560]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f8a:	61bb      	str	r3, [r7, #24]
      break;
 8004f8c:	e108      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f8e:	4b88      	ldr	r3, [pc, #544]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f98:	4b85      	ldr	r3, [pc, #532]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fa2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fa4:	4b82      	ldr	r3, [pc, #520]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004fae:	4b80      	ldr	r3, [pc, #512]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	08db      	lsrs	r3, r3, #3
 8004fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80e1 	beq.w	8005194 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	f000 8083 	beq.w	80050e0 <HAL_RCC_GetSysClockFreq+0x204>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	f200 80a1 	bhi.w	8005124 <HAL_RCC_GetSysClockFreq+0x248>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x114>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d056      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fee:	e099      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02d      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	08db      	lsrs	r3, r3, #3
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	4a6b      	ldr	r2, [pc, #428]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
 800500c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005026:	4b62      	ldr	r3, [pc, #392]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005036:	ed97 6a02 	vldr	s12, [r7, #8]
 800503a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005056:	e087      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506a:	4b51      	ldr	r3, [pc, #324]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507a:	ed97 6a02 	vldr	s12, [r7, #8]
 800507e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800509a:	e065      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ae:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050be:	ed97 6a02 	vldr	s12, [r7, #8]
 80050c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050de:	e043      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80050ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f2:	4b2f      	ldr	r3, [pc, #188]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005102:	ed97 6a02 	vldr	s12, [r7, #8]
 8005106:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800510a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005122:	e021      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a02 	vldr	s12, [r7, #8]
 800514a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005166:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516c:	0a5b      	lsrs	r3, r3, #9
 800516e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005172:	3301      	adds	r3, #1
 8005174:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005180:	edd7 6a07 	vldr	s13, [r7, #28]
 8005184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800518c:	ee17 3a90 	vmov	r3, s15
 8005190:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005192:	e005      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
      break;
 8005198:	e002      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800519c:	61bb      	str	r3, [r7, #24]
      break;
 800519e:	bf00      	nop
  }

  return sysclockfreq;
 80051a0:	69bb      	ldr	r3, [r7, #24]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3724      	adds	r7, #36	@ 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
 80051b4:	03d09000 	.word	0x03d09000
 80051b8:	003d0900 	.word	0x003d0900
 80051bc:	017d7840 	.word	0x017d7840
 80051c0:	46000000 	.word	0x46000000
 80051c4:	4c742400 	.word	0x4c742400
 80051c8:	4a742400 	.word	0x4a742400
 80051cc:	4bbebc20 	.word	0x4bbebc20

080051d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051d6:	f7ff fe81 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <HAL_RCC_GetHCLKFreq+0x50>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490f      	ldr	r1, [pc, #60]	@ (8005224 <HAL_RCC_GetHCLKFreq+0x54>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCC_GetHCLKFreq+0x50>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <HAL_RCC_GetHCLKFreq+0x54>)
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	4a07      	ldr	r2, [pc, #28]	@ (8005228 <HAL_RCC_GetHCLKFreq+0x58>)
 800520c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800520e:	4a07      	ldr	r2, [pc, #28]	@ (800522c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005214:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <HAL_RCC_GetHCLKFreq+0x58>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	58024400 	.word	0x58024400
 8005224:	0800b044 	.word	0x0800b044
 8005228:	24001010 	.word	0x24001010
 800522c:	2400100c 	.word	0x2400100c

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005234:	f7ff ffcc 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4904      	ldr	r1, [pc, #16]	@ (8005258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	58024400 	.word	0x58024400
 8005258:	0800b044 	.word	0x0800b044

0800525c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005260:	f7ff ffb6 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4904      	ldr	r1, [pc, #16]	@ (8005284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	58024400 	.word	0x58024400
 8005284:	0800b044 	.word	0x0800b044

08005288 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b0ca      	sub	sp, #296	@ 0x128
 800528e:	af00      	add	r7, sp, #0
 8005290:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80052ac:	2500      	movs	r5, #0
 80052ae:	ea54 0305 	orrs.w	r3, r4, r5
 80052b2:	d049      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80052c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052c4:	d828      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052ca:	d01a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052d0:	d822      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052da:	d007      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052dc:	e01c      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4bb8      	ldr	r3, [pc, #736]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4ab7      	ldr	r2, [pc, #732]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052ea:	e01a      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f0:	3308      	adds	r3, #8
 80052f2:	2102      	movs	r1, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fc8f 	bl	8006c18 <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005300:	e00f      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005306:	3328      	adds	r3, #40	@ 0x28
 8005308:	2102      	movs	r1, #2
 800530a:	4618      	mov	r0, r3
 800530c:	f001 fd36 	bl	8006d7c <RCCEx_PLL3_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005316:	e004      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800532a:	4ba5      	ldr	r3, [pc, #660]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005338:	4aa1      	ldr	r2, [pc, #644]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533a:	430b      	orrs	r3, r1
 800533c:	6513      	str	r3, [r2, #80]	@ 0x50
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005354:	f04f 0900 	mov.w	r9, #0
 8005358:	ea58 0309 	orrs.w	r3, r8, r9
 800535c:	d047      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	2b04      	cmp	r3, #4
 8005366:	d82a      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005368:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005385 	.word	0x08005385
 8005374:	08005393 	.word	0x08005393
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053c7 	.word	0x080053c7
 8005380:	080053c7 	.word	0x080053c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4b8e      	ldr	r3, [pc, #568]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4a8d      	ldr	r2, [pc, #564]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005390:	e01a      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005396:	3308      	adds	r3, #8
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fc3c 	bl	8006c18 <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053a6:	e00f      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	3328      	adds	r3, #40	@ 0x28
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fce3 	bl	8006d7c <RCCEx_PLL3_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80053c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d0:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d4:	f023 0107 	bic.w	r1, r3, #7
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	4a78      	ldr	r2, [pc, #480]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80053fa:	f04f 0b00 	mov.w	fp, #0
 80053fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005402:	d04c      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540e:	d030      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005414:	d829      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005416:	2bc0      	cmp	r3, #192	@ 0xc0
 8005418:	d02d      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800541a:	2bc0      	cmp	r3, #192	@ 0xc0
 800541c:	d825      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d018      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005422:	2b80      	cmp	r3, #128	@ 0x80
 8005424:	d821      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800542a:	2b40      	cmp	r3, #64	@ 0x40
 800542c:	d007      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800542e:	e01c      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b63      	ldr	r3, [pc, #396]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4a62      	ldr	r2, [pc, #392]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800543a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800543c:	e01c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3308      	adds	r3, #8
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fbe6 	bl	8006c18 <RCCEx_PLL2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005452:	e011      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005458:	3328      	adds	r3, #40	@ 0x28
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f001 fc8d 	bl	8006d7c <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005468:	e006      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005470:	e002      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005480:	4b4f      	ldr	r3, [pc, #316]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005484:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548e:	4a4c      	ldr	r2, [pc, #304]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6513      	str	r3, [r2, #80]	@ 0x50
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80054b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d053      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054ca:	d035      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80054cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054d0:	d82e      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054d6:	d031      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054dc:	d828      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054e2:	d01a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054e8:	d822      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4b32      	ldr	r3, [pc, #200]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005502:	e01c      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3308      	adds	r3, #8
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fb83 	bl	8006c18 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005518:	e011      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fc2a 	bl	8006d7c <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800552e:	e006      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005536:	e002      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005546:	4b1e      	ldr	r3, [pc, #120]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005556:	4a1a      	ldr	r2, [pc, #104]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005558:	430b      	orrs	r3, r1
 800555a:	6593      	str	r3, [r2, #88]	@ 0x58
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005572:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800557c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d056      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800558e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005592:	d038      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005598:	d831      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800559a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800559e:	d034      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80055a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055a4:	d82b      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055aa:	d01d      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80055ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b0:	d825      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055bc:	e01f      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4ba2      	ldr	r3, [pc, #648]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d0:	e01c      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	3308      	adds	r3, #8
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fb1c 	bl	8006c18 <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	3328      	adds	r3, #40	@ 0x28
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fbc3 	bl	8006d7c <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005614:	4b8e      	ldr	r3, [pc, #568]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005624:	4a8a      	ldr	r2, [pc, #552]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005626:	430b      	orrs	r3, r1
 8005628:	6593      	str	r3, [r2, #88]	@ 0x58
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800564a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d03a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	2b30      	cmp	r3, #48	@ 0x30
 800565c:	d01f      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800565e:	2b30      	cmp	r3, #48	@ 0x30
 8005660:	d819      	bhi.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005662:	2b20      	cmp	r3, #32
 8005664:	d00c      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005666:	2b20      	cmp	r3, #32
 8005668:	d815      	bhi.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800566e:	2b10      	cmp	r3, #16
 8005670:	d111      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005672:	4b77      	ldr	r3, [pc, #476]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	4a76      	ldr	r2, [pc, #472]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800567c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800567e:	e011      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	3308      	adds	r3, #8
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fac5 	bl	8006c18 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056ac:	4b68      	ldr	r3, [pc, #416]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ba:	4a65      	ldr	r2, [pc, #404]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80056d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056da:	2300      	movs	r3, #0
 80056dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d051      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f4:	d035      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056fa:	d82e      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005700:	d031      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005702:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005706:	d828      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570c:	d01a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005712:	d822      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571c:	d007      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800571e:	e01c      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4b4b      	ldr	r3, [pc, #300]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	4a4a      	ldr	r2, [pc, #296]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fa6e 	bl	8006c18 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	3328      	adds	r3, #40	@ 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fb15 	bl	8006d7c <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005770:	4b37      	ldr	r3, [pc, #220]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577e:	4a34      	ldr	r2, [pc, #208]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005780:	430b      	orrs	r3, r1
 8005782:	6513      	str	r3, [r2, #80]	@ 0x50
 8005784:	e003      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800579a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800579e:	2300      	movs	r3, #0
 80057a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d056      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057b8:	d033      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80057ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057be:	d82c      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057c4:	d02f      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80057c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057ca:	d826      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057d0:	d02b      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80057d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057d6:	d820      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057dc:	d012      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80057de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057e2:	d81a      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d115      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fa0e 	bl	8006c18 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3328      	adds	r3, #40	@ 0x28
 800580a:	2101      	movs	r1, #1
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fab5 	bl	8006d7c <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005818:	e00a      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005822:	bf00      	nop
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005846:	4a02      	ldr	r2, [pc, #8]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6513      	str	r3, [r2, #80]	@ 0x50
 800584c:	e006      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800584e:	bf00      	nop
 8005850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005872:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d055      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005888:	d033      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800588a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588e:	d82c      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d02f      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589a:	d826      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800589c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058a0:	d02b      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80058a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058a6:	d820      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ac:	d012      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80058ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b2:	d81a      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d022      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80058b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058bc:	d115      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	3308      	adds	r3, #8
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f9a6 	bl	8006c18 <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058d2:	e015      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	3328      	adds	r3, #40	@ 0x28
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fa4d 	bl	8006d7c <RCCEx_PLL3_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058e8:	e00a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058f0:	e006      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058f2:	bf00      	nop
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005908:	4ba3      	ldr	r3, [pc, #652]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005918:	4a9f      	ldr	r2, [pc, #636]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800591a:	430b      	orrs	r3, r1
 800591c:	6593      	str	r3, [r2, #88]	@ 0x58
 800591e:	e003      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005934:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005938:	2300      	movs	r3, #0
 800593a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800593e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005942:	460b      	mov	r3, r1
 8005944:	4313      	orrs	r3, r2
 8005946:	d037      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005952:	d00e      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005958:	d816      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800595e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005962:	d111      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005964:	4b8c      	ldr	r3, [pc, #560]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005968:	4a8b      	ldr	r2, [pc, #556]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800596a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005970:	e00f      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	3308      	adds	r3, #8
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f001 f94c 	bl	8006c18 <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800598e:	e000      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800599a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a8:	4a7b      	ldr	r2, [pc, #492]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059aa:	430b      	orrs	r3, r1
 80059ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80059c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80059ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d039      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d81c      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a25 	.word	0x08005a25
 80059ec:	080059f9 	.word	0x080059f9
 80059f0:	08005a07 	.word	0x08005a07
 80059f4:	08005a25 	.word	0x08005a25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f8:	4b67      	ldr	r3, [pc, #412]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	4a66      	ldr	r2, [pc, #408]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a04:	e00f      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f902 	bl	8006c18 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a32:	f023 0103 	bic.w	r1, r3, #3
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3c:	4a56      	ldr	r2, [pc, #344]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a42:	e003      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f000 809f 	beq.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a4a      	ldr	r2, [pc, #296]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7a:	f7fc f9bf 	bl	8001dfc <HAL_GetTick>
 8005a7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a82:	e00b      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fc f9ba 	bl	8001dfc <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b64      	cmp	r3, #100	@ 0x64
 8005a92:	d903      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ed      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d179      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ab0:	4b39      	ldr	r3, [pc, #228]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005abc:	4053      	eors	r3, r2
 8005abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d015      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac6:	4b34      	ldr	r3, [pc, #208]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ace:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad6:	4a30      	ldr	r2, [pc, #192]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005adc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ade:	4b2e      	ldr	r3, [pc, #184]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aea:	4a2b      	ldr	r2, [pc, #172]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afe:	d118      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fc f97c 	bl	8001dfc <HAL_GetTick>
 8005b04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b08:	e00d      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fc f977 	bl	8001dfc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d903      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005b24:	e005      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b26:	4b1c      	ldr	r3, [pc, #112]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0eb      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d129      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4a:	d10e      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005b4c:	4b12      	ldr	r3, [pc, #72]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b5c:	091a      	lsrs	r2, r3, #4
 8005b5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	4a0d      	ldr	r2, [pc, #52]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6113      	str	r3, [r2, #16]
 8005b68:	e005      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b74:	6113      	str	r3, [r2, #16]
 8005b76:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b86:	4a04      	ldr	r2, [pc, #16]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b8c:	e00e      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005b96:	e009      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	58024800 	.word	0x58024800
 8005ba0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f002 0301 	and.w	r3, r2, #1
 8005bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f000 8089 	beq.w	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bd4:	2b28      	cmp	r3, #40	@ 0x28
 8005bd6:	d86b      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005cb9 	.word	0x08005cb9
 8005be4:	08005cb1 	.word	0x08005cb1
 8005be8:	08005cb1 	.word	0x08005cb1
 8005bec:	08005cb1 	.word	0x08005cb1
 8005bf0:	08005cb1 	.word	0x08005cb1
 8005bf4:	08005cb1 	.word	0x08005cb1
 8005bf8:	08005cb1 	.word	0x08005cb1
 8005bfc:	08005cb1 	.word	0x08005cb1
 8005c00:	08005c85 	.word	0x08005c85
 8005c04:	08005cb1 	.word	0x08005cb1
 8005c08:	08005cb1 	.word	0x08005cb1
 8005c0c:	08005cb1 	.word	0x08005cb1
 8005c10:	08005cb1 	.word	0x08005cb1
 8005c14:	08005cb1 	.word	0x08005cb1
 8005c18:	08005cb1 	.word	0x08005cb1
 8005c1c:	08005cb1 	.word	0x08005cb1
 8005c20:	08005c9b 	.word	0x08005c9b
 8005c24:	08005cb1 	.word	0x08005cb1
 8005c28:	08005cb1 	.word	0x08005cb1
 8005c2c:	08005cb1 	.word	0x08005cb1
 8005c30:	08005cb1 	.word	0x08005cb1
 8005c34:	08005cb1 	.word	0x08005cb1
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005cb1 	.word	0x08005cb1
 8005c40:	08005cb9 	.word	0x08005cb9
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005cb1 	.word	0x08005cb1
 8005c54:	08005cb1 	.word	0x08005cb1
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005cb1 	.word	0x08005cb1
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005cb1 	.word	0x08005cb1
 8005c70:	08005cb1 	.word	0x08005cb1
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005cb1 	.word	0x08005cb1
 8005c7c:	08005cb1 	.word	0x08005cb1
 8005c80:	08005cb9 	.word	0x08005cb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	3308      	adds	r3, #8
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ffc3 	bl	8006c18 <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c98:	e00f      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	3328      	adds	r3, #40	@ 0x28
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f86a 	bl	8006d7c <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cae:	e004      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cc2:	4bbf      	ldr	r3, [pc, #764]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd0:	4abb      	ldr	r2, [pc, #748]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f002 0302 	and.w	r3, r2, #2
 8005cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d041      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d824      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d29 	.word	0x08005d29
 8005d18:	08005d3f 	.word	0x08005d3f
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	2101      	movs	r1, #1
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 ff71 	bl	8006c18 <RCCEx_PLL2_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	3328      	adds	r3, #40	@ 0x28
 8005d44:	2101      	movs	r1, #1
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f818 	bl	8006d7c <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d66:	4b96      	ldr	r3, [pc, #600]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6a:	f023 0107 	bic.w	r1, r3, #7
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d74:	4a92      	ldr	r2, [pc, #584]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 0304 	and.w	r3, r2, #4
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d044      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d825      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005e05 	.word	0x08005e05
 8005dbc:	08005dd1 	.word	0x08005dd1
 8005dc0:	08005de7 	.word	0x08005de7
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e05 	.word	0x08005e05
 8005dcc:	08005e05 	.word	0x08005e05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 ff1d 	bl	8006c18 <RCCEx_PLL2_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005de4:	e00f      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	3328      	adds	r3, #40	@ 0x28
 8005dec:	2101      	movs	r1, #1
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 ffc4 	bl	8006d7c <RCCEx_PLL3_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dfa:	e004      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e02:	e000      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e12:	f023 0107 	bic.w	r1, r3, #7
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e1e:	4a68      	ldr	r2, [pc, #416]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f002 0320 	and.w	r3, r2, #32
 8005e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d055      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e5a:	d033      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e60:	d82c      	bhi.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d02f      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6c:	d826      	bhi.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e72:	d02b      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005e74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e78:	d820      	bhi.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7e:	d012      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e84:	d81a      	bhi.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d022      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e8e:	d115      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e94:	3308      	adds	r3, #8
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 febd 	bl	8006c18 <RCCEx_PLL2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e015      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	3328      	adds	r3, #40	@ 0x28
 8005eac:	2102      	movs	r1, #2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 ff64 	bl	8006d7c <RCCEx_PLL3_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ec2:	e006      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ec4:	bf00      	nop
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ec8:	bf00      	nop
 8005eca:	e002      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eda:	4b39      	ldr	r3, [pc, #228]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eea:	4a35      	ldr	r2, [pc, #212]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d058      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f26:	d033      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005f28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f2c:	d82c      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f32:	d02f      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d826      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f3e:	d02b      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f44:	d820      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4a:	d012      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d81a      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d022      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5a:	d115      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	3308      	adds	r3, #8
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fe57 	bl	8006c18 <RCCEx_PLL2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f70:	e015      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f76:	3328      	adds	r3, #40	@ 0x28
 8005f78:	2102      	movs	r1, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fefe 	bl	8006d7c <RCCEx_PLL3_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f86:	e00a      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f8e:	e006      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f90:	bf00      	nop
 8005f92:	e004      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f94:	bf00      	nop
 8005f96:	e002      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005faa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb6:	4a02      	ldr	r2, [pc, #8]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fbc:	e006      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005fbe:	bf00      	nop
 8005fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d055      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ff4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ff8:	d033      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ffa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ffe:	d82c      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d02f      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600a:	d826      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800600c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006010:	d02b      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006012:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006016:	d820      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800601c:	d012      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800601e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006022:	d81a      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d022      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602c:	d115      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	3308      	adds	r3, #8
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fdee 	bl	8006c18 <RCCEx_PLL2_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006042:	e015      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	3328      	adds	r3, #40	@ 0x28
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fe95 	bl	8006d7c <RCCEx_PLL3_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006058:	e00a      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800606e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006078:	4ba1      	ldr	r3, [pc, #644]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006088:	4a9d      	ldr	r2, [pc, #628]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800608a:	430b      	orrs	r3, r1
 800608c:	6593      	str	r3, [r2, #88]	@ 0x58
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f002 0308 	and.w	r3, r2, #8
 80060a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d01e      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	3328      	adds	r3, #40	@ 0x28
 80060cc:	2102      	movs	r1, #2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fe54 	bl	8006d7c <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060e0:	4b87      	ldr	r3, [pc, #540]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f0:	4a83      	ldr	r2, [pc, #524]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f002 0310 	and.w	r3, r2, #16
 8006102:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800610c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d01e      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800611e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006122:	d10c      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	3328      	adds	r3, #40	@ 0x28
 800612a:	2102      	movs	r1, #2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fe25 	bl	8006d7c <RCCEx_PLL3_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800613e:	4b70      	ldr	r3, [pc, #448]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800614e:	4a6c      	ldr	r2, [pc, #432]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800616a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d03e      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d022      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006186:	d81b      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006190:	d00b      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006192:	e015      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	3308      	adds	r3, #8
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fd3b 	bl	8006c18 <RCCEx_PLL2_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061a8:	e00f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	3328      	adds	r3, #40	@ 0x28
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fde2 	bl	8006d7c <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061e2:	4a47      	ldr	r2, [pc, #284]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006200:	2300      	movs	r3, #0
 8006202:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006204:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d03b      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006216:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800621a:	d01f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800621c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006220:	d818      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800622c:	d007      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800622e:	e011      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4b33      	ldr	r3, [pc, #204]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	4a32      	ldr	r2, [pc, #200]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd98 	bl	8006d7c <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006266:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006278:	430b      	orrs	r3, r1
 800627a:	6553      	str	r3, [r2, #84]	@ 0x54
 800627c:	e003      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006292:	673b      	str	r3, [r7, #112]	@ 0x70
 8006294:	2300      	movs	r3, #0
 8006296:	677b      	str	r3, [r7, #116]	@ 0x74
 8006298:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d034      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b0:	d007      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	4a11      	ldr	r2, [pc, #68]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062c0:	e00e      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	3308      	adds	r3, #8
 80062c8:	2102      	movs	r1, #2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fca4 	bl	8006c18 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10d      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f6:	4a02      	ldr	r2, [pc, #8]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800631a:	2300      	movs	r3, #0
 800631c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800631e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006322:	460b      	mov	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	d00c      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	3328      	adds	r3, #40	@ 0x28
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd23 	bl	8006d7c <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800634e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006350:	2300      	movs	r3, #0
 8006352:	667b      	str	r3, [r7, #100]	@ 0x64
 8006354:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d038      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800636a:	d018      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800636c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006370:	d811      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006376:	d014      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637c:	d80b      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006386:	d106      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006388:	4bc3      	ldr	r3, [pc, #780]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	4ac2      	ldr	r2, [pc, #776]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800638e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006394:	e008      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80063a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063b0:	4bb9      	ldr	r3, [pc, #740]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063c0:	4ab5      	ldr	r2, [pc, #724]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80063dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063de:	2300      	movs	r3, #0
 80063e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063ec:	4baa      	ldr	r3, [pc, #680]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fa:	4aa7      	ldr	r2, [pc, #668]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800640c:	653b      	str	r3, [r7, #80]	@ 0x50
 800640e:	2300      	movs	r3, #0
 8006410:	657b      	str	r3, [r7, #84]	@ 0x54
 8006412:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800641c:	4b9e      	ldr	r3, [pc, #632]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800642c:	4a9a      	ldr	r2, [pc, #616]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800642e:	430b      	orrs	r3, r1
 8006430:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006440:	2300      	movs	r3, #0
 8006442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006444:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800644e:	4b92      	ldr	r3, [pc, #584]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006452:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645c:	4a8e      	ldr	r2, [pc, #568]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800646e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006470:	2300      	movs	r3, #0
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
 8006474:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d00e      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800647e:	4b86      	ldr	r3, [pc, #536]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	4a85      	ldr	r2, [pc, #532]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006484:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006488:	6113      	str	r3, [r2, #16]
 800648a:	4b83      	ldr	r3, [pc, #524]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800648c:	6919      	ldr	r1, [r3, #16]
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006496:	4a80      	ldr	r2, [pc, #512]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006498:	430b      	orrs	r3, r1
 800649a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064aa:	2300      	movs	r3, #0
 80064ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d009      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064b8:	4b77      	ldr	r3, [pc, #476]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	4a74      	ldr	r2, [pc, #464]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80064d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064da:	2300      	movs	r3, #0
 80064dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d00a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064e8:	4b6b      	ldr	r3, [pc, #428]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064f8:	4a67      	ldr	r2, [pc, #412]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	2100      	movs	r1, #0
 8006508:	62b9      	str	r1, [r7, #40]	@ 0x28
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006510:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006514:	460b      	mov	r3, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	d011      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	3308      	adds	r3, #8
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fb78 	bl	8006c18 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	2100      	movs	r1, #0
 8006548:	6239      	str	r1, [r7, #32]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006550:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d011      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	3308      	adds	r3, #8
 8006560:	2101      	movs	r1, #1
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fb58 	bl	8006c18 <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	2100      	movs	r1, #0
 8006588:	61b9      	str	r1, [r7, #24]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006594:	460b      	mov	r3, r1
 8006596:	4313      	orrs	r3, r2
 8006598:	d011      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	3308      	adds	r3, #8
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fb38 	bl	8006c18 <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	2100      	movs	r1, #0
 80065c8:	6139      	str	r1, [r7, #16]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d011      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	3328      	adds	r3, #40	@ 0x28
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fbca 	bl	8006d7c <RCCEx_PLL3_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	2100      	movs	r1, #0
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006614:	460b      	mov	r3, r1
 8006616:	4313      	orrs	r3, r2
 8006618:	d011      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	3328      	adds	r3, #40	@ 0x28
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fbaa 	bl	8006d7c <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	2100      	movs	r1, #0
 8006648:	6039      	str	r1, [r7, #0]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006654:	460b      	mov	r3, r1
 8006656:	4313      	orrs	r3, r2
 8006658:	d011      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	3328      	adds	r3, #40	@ 0x28
 8006660:	2102      	movs	r1, #2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fb8a 	bl	8006d7c <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800667e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
}
 800668c:	4618      	mov	r0, r3
 800668e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006692:	46bd      	mov	sp, r7
 8006694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006698:	58024400 	.word	0x58024400

0800669c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066a0:	f7fe fd96 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80066a4:	4602      	mov	r2, r0
 80066a6:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	091b      	lsrs	r3, r3, #4
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	4904      	ldr	r1, [pc, #16]	@ (80066c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066b2:	5ccb      	ldrb	r3, [r1, r3]
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	58024400 	.word	0x58024400
 80066c4:	0800b044 	.word	0x0800b044

080066c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	@ 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80066da:	4b9f      	ldr	r3, [pc, #636]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	0b1b      	lsrs	r3, r3, #12
 80066e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80066e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80066f2:	4b99      	ldr	r3, [pc, #612]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f6:	08db      	lsrs	r3, r3, #3
 80066f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8111 	beq.w	8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b02      	cmp	r3, #2
 800671a:	f000 8083 	beq.w	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b02      	cmp	r3, #2
 8006722:	f200 80a1 	bhi.w	8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d056      	beq.n	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006732:	e099      	b.n	8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006734:	4b88      	ldr	r3, [pc, #544]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02d      	beq.n	800679c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006740:	4b85      	ldr	r3, [pc, #532]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	08db      	lsrs	r3, r3, #3
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	4a84      	ldr	r2, [pc, #528]	@ (800695c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
 8006750:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676a:	4b7b      	ldr	r3, [pc, #492]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677a:	ed97 6a03 	vldr	s12, [r7, #12]
 800677e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800679a:	e087      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067de:	e065      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b59      	ldr	r3, [pc, #356]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006822:	e043      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800696c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b48      	ldr	r3, [pc, #288]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a03 	vldr	s12, [r7, #12]
 800684a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006866:	e021      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b37      	ldr	r3, [pc, #220]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a03 	vldr	s12, [r7, #12]
 800688e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80068ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b0:	0a5b      	lsrs	r3, r3, #9
 80068b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d2:	ee17 2a90 	vmov	r2, s15
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80068da:	4b1f      	ldr	r3, [pc, #124]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006900:	ee17 2a90 	vmov	r2, s15
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006908:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	0e1b      	lsrs	r3, r3, #24
 800690e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800691e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006922:	edd7 6a07 	vldr	s13, [r7, #28]
 8006926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800692a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800692e:	ee17 2a90 	vmov	r2, s15
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006936:	e008      	b.n	800694a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
}
 800694a:	bf00      	nop
 800694c:	3724      	adds	r7, #36	@ 0x24
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	03d09000 	.word	0x03d09000
 8006960:	46000000 	.word	0x46000000
 8006964:	4c742400 	.word	0x4c742400
 8006968:	4a742400 	.word	0x4a742400
 800696c:	4bbebc20 	.word	0x4bbebc20

08006970 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006970:	b480      	push	{r7}
 8006972:	b089      	sub	sp, #36	@ 0x24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006978:	4ba1      	ldr	r3, [pc, #644]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006982:	4b9f      	ldr	r3, [pc, #636]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	0d1b      	lsrs	r3, r3, #20
 8006988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800698c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800698e:	4b9c      	ldr	r3, [pc, #624]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800699a:	4b99      	ldr	r3, [pc, #612]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800699c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699e:	08db      	lsrs	r3, r3, #3
 80069a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8111 	beq.w	8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	f000 8083 	beq.w	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	f200 80a1 	bhi.w	8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d056      	beq.n	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069da:	e099      	b.n	8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069dc:	4b88      	ldr	r3, [pc, #544]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02d      	beq.n	8006a44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069e8:	4b85      	ldr	r3, [pc, #532]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a84      	ldr	r2, [pc, #528]	@ (8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	4b7b      	ldr	r3, [pc, #492]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a42:	e087      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a86:	e065      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b59      	ldr	r3, [pc, #356]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aca:	e043      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b48      	ldr	r3, [pc, #288]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0e:	e021      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b54:	4b2a      	ldr	r3, [pc, #168]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	0a5b      	lsrs	r3, r3, #9
 8006b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b7a:	ee17 2a90 	vmov	r2, s15
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b82:	4b1f      	ldr	r3, [pc, #124]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	0c1b      	lsrs	r3, r3, #16
 8006b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba8:	ee17 2a90 	vmov	r2, s15
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006bb0:	4b13      	ldr	r3, [pc, #76]	@ (8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	0e1b      	lsrs	r3, r3, #24
 8006bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd6:	ee17 2a90 	vmov	r2, s15
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bde:	e008      	b.n	8006bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	609a      	str	r2, [r3, #8]
}
 8006bf2:	bf00      	nop
 8006bf4:	3724      	adds	r7, #36	@ 0x24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	58024400 	.word	0x58024400
 8006c04:	03d09000 	.word	0x03d09000
 8006c08:	46000000 	.word	0x46000000
 8006c0c:	4c742400 	.word	0x4c742400
 8006c10:	4a742400 	.word	0x4a742400
 8006c14:	4bbebc20 	.word	0x4bbebc20

08006c18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c26:	4b53      	ldr	r3, [pc, #332]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d101      	bne.n	8006c36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e099      	b.n	8006d6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c36:	4b4f      	ldr	r3, [pc, #316]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c42:	f7fb f8db 	bl	8001dfc <HAL_GetTick>
 8006c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c48:	e008      	b.n	8006c5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c4a:	f7fb f8d7 	bl	8001dfc <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e086      	b.n	8006d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c5c:	4b45      	ldr	r3, [pc, #276]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f0      	bne.n	8006c4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c68:	4b42      	ldr	r3, [pc, #264]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	493f      	ldr	r1, [pc, #252]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	025b      	lsls	r3, r3, #9
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	061b      	lsls	r3, r3, #24
 8006ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cac:	4931      	ldr	r1, [pc, #196]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cb2:	4b30      	ldr	r3, [pc, #192]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	492d      	ldr	r1, [pc, #180]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	f023 0220 	bic.w	r2, r3, #32
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	4928      	ldr	r1, [pc, #160]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cd6:	4b27      	ldr	r3, [pc, #156]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	4a26      	ldr	r2, [pc, #152]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ce2:	4b24      	ldr	r3, [pc, #144]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ce6:	4b24      	ldr	r3, [pc, #144]	@ (8006d78 <RCCEx_PLL2_Config+0x160>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	69d2      	ldr	r2, [r2, #28]
 8006cee:	00d2      	lsls	r2, r2, #3
 8006cf0:	4920      	ldr	r1, [pc, #128]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	f043 0310 	orr.w	r3, r3, #16
 8006d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d08:	4b1a      	ldr	r3, [pc, #104]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	4a19      	ldr	r2, [pc, #100]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d14:	e00f      	b.n	8006d36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d106      	bne.n	8006d2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d1c:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d28:	e005      	b.n	8006d36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d36:	4b0f      	ldr	r3, [pc, #60]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d42:	f7fb f85b 	bl	8001dfc <HAL_GetTick>
 8006d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d48:	e008      	b.n	8006d5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d4a:	f7fb f857 	bl	8001dfc <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e006      	b.n	8006d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d5c:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <RCCEx_PLL2_Config+0x15c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f0      	beq.n	8006d4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	58024400 	.word	0x58024400
 8006d78:	ffff0007 	.word	0xffff0007

08006d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d8a:	4b53      	ldr	r3, [pc, #332]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d101      	bne.n	8006d9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e099      	b.n	8006ece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da6:	f7fb f829 	bl	8001dfc <HAL_GetTick>
 8006daa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dac:	e008      	b.n	8006dc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dae:	f7fb f825 	bl	8001dfc <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e086      	b.n	8006ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dc0:	4b45      	ldr	r3, [pc, #276]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006dcc:	4b42      	ldr	r3, [pc, #264]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	493f      	ldr	r1, [pc, #252]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	628b      	str	r3, [r1, #40]	@ 0x28
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	025b      	lsls	r3, r3, #9
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e10:	4931      	ldr	r1, [pc, #196]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e16:	4b30      	ldr	r3, [pc, #192]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	492d      	ldr	r1, [pc, #180]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e28:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4928      	ldr	r1, [pc, #160]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e3a:	4b27      	ldr	r3, [pc, #156]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	4a26      	ldr	r2, [pc, #152]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e46:	4b24      	ldr	r3, [pc, #144]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <RCCEx_PLL3_Config+0x160>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	69d2      	ldr	r2, [r2, #28]
 8006e52:	00d2      	lsls	r2, r2, #3
 8006e54:	4920      	ldr	r1, [pc, #128]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	4a19      	ldr	r2, [pc, #100]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e78:	e00f      	b.n	8006e9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e80:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e8c:	e005      	b.n	8006e9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e8e:	4b12      	ldr	r3, [pc, #72]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	4a11      	ldr	r2, [pc, #68]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea6:	f7fa ffa9 	bl	8001dfc <HAL_GetTick>
 8006eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006eac:	e008      	b.n	8006ec0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006eae:	f7fa ffa5 	bl	8001dfc <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ec0:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <RCCEx_PLL3_Config+0x15c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	58024400 	.word	0x58024400
 8006edc:	ffff0007 	.word	0xffff0007

08006ee0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e10f      	b.n	8007112 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a87      	ldr	r2, [pc, #540]	@ (800711c <HAL_SPI_Init+0x23c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00f      	beq.n	8006f22 <HAL_SPI_Init+0x42>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a86      	ldr	r2, [pc, #536]	@ (8007120 <HAL_SPI_Init+0x240>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00a      	beq.n	8006f22 <HAL_SPI_Init+0x42>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a84      	ldr	r2, [pc, #528]	@ (8007124 <HAL_SPI_Init+0x244>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d005      	beq.n	8006f22 <HAL_SPI_Init+0x42>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b0f      	cmp	r3, #15
 8006f1c:	d901      	bls.n	8006f22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e0f7      	b.n	8007112 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fe2e 	bl	8007b84 <SPI_GetPacketSize>
 8006f28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800711c <HAL_SPI_Init+0x23c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00c      	beq.n	8006f4e <HAL_SPI_Init+0x6e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a79      	ldr	r2, [pc, #484]	@ (8007120 <HAL_SPI_Init+0x240>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d007      	beq.n	8006f4e <HAL_SPI_Init+0x6e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a78      	ldr	r2, [pc, #480]	@ (8007124 <HAL_SPI_Init+0x244>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_Init+0x6e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d811      	bhi.n	8006f72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f52:	4a72      	ldr	r2, [pc, #456]	@ (800711c <HAL_SPI_Init+0x23c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d009      	beq.n	8006f6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a70      	ldr	r2, [pc, #448]	@ (8007120 <HAL_SPI_Init+0x240>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_SPI_Init+0x8c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a6f      	ldr	r2, [pc, #444]	@ (8007124 <HAL_SPI_Init+0x244>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d104      	bne.n	8006f76 <HAL_SPI_Init+0x96>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d901      	bls.n	8006f76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e0cd      	b.n	8007112 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fbf0 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006fb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fbc:	d119      	bne.n	8006ff2 <HAL_SPI_Init+0x112>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fc6:	d103      	bne.n	8006fd0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d008      	beq.n	8006fe2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fe0:	d107      	bne.n	8006ff2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ff0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00f      	beq.n	800701e <HAL_SPI_Init+0x13e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	2b06      	cmp	r3, #6
 8007004:	d90b      	bls.n	800701e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e007      	b.n	800702e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69da      	ldr	r2, [r3, #28]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	431a      	orrs	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007040:	ea42 0103 	orr.w	r1, r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800708e:	ea42 0103 	orr.w	r1, r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d113      	bne.n	80070ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0201 	bic.w	r2, r2, #1
 80070dc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40013000 	.word	0x40013000
 8007120:	40003800 	.word	0x40003800
 8007124:	40003c00 	.word	0x40003c00

08007128 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3320      	adds	r3, #32
 800713e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007140:	f7fa fe5c 	bl	8001dfc <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007152:	2302      	movs	r3, #2
 8007154:	e1d1      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_SPI_Transmit+0x3a>
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e1c9      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_SPI_Transmit+0x4c>
 8007170:	2302      	movs	r3, #2
 8007172:	e1c2      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2203      	movs	r2, #3
 8007180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	88fa      	ldrh	r2, [r7, #6]
 800719e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80071cc:	d108      	bne.n	80071e0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e009      	b.n	80071f4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80071f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	4b96      	ldr	r3, [pc, #600]	@ (8007454 <HAL_SPI_Transmit+0x32c>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	88f9      	ldrh	r1, [r7, #6]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	430b      	orrs	r3, r1
 8007206:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007220:	d107      	bne.n	8007232 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b0f      	cmp	r3, #15
 8007238:	d947      	bls.n	80072ca <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800723a:	e03f      	b.n	80072bc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d114      	bne.n	8007274 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007272:	e023      	b.n	80072bc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007274:	f7fa fdc2 	bl	8001dfc <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d803      	bhi.n	800728c <HAL_SPI_Transmit+0x164>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d102      	bne.n	8007292 <HAL_SPI_Transmit+0x16a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d114      	bne.n	80072bc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fba8 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800729e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e11e      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1b9      	bne.n	800723c <HAL_SPI_Transmit+0x114>
 80072c8:	e0f1      	b.n	80074ae <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b07      	cmp	r3, #7
 80072d0:	f240 80e6 	bls.w	80074a0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072d4:	e05d      	b.n	8007392 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d132      	bne.n	800734a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d918      	bls.n	8007322 <HAL_SPI_Transmit+0x1fa>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d014      	beq.n	8007322 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b02      	subs	r3, #2
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007320:	e037      	b.n	8007392 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007330:	1c9a      	adds	r2, r3, #2
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007348:	e023      	b.n	8007392 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800734a:	f7fa fd57 	bl	8001dfc <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d803      	bhi.n	8007362 <HAL_SPI_Transmit+0x23a>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d102      	bne.n	8007368 <HAL_SPI_Transmit+0x240>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d114      	bne.n	8007392 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fb3d 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007374:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e0b3      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d19b      	bne.n	80072d6 <HAL_SPI_Transmit+0x1ae>
 800739e:	e086      	b.n	80074ae <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d154      	bne.n	8007458 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d918      	bls.n	80073ec <HAL_SPI_Transmit+0x2c4>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d914      	bls.n	80073ec <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b04      	subs	r3, #4
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073ea:	e059      	b.n	80074a0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d917      	bls.n	8007428 <HAL_SPI_Transmit+0x300>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d013      	beq.n	8007428 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007404:	881a      	ldrh	r2, [r3, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b02      	subs	r3, #2
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007426:	e03b      	b.n	80074a0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3320      	adds	r3, #32
 8007432:	7812      	ldrb	r2, [r2, #0]
 8007434:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007452:	e025      	b.n	80074a0 <HAL_SPI_Transmit+0x378>
 8007454:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007458:	f7fa fcd0 	bl	8001dfc <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d803      	bhi.n	8007470 <HAL_SPI_Transmit+0x348>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d102      	bne.n	8007476 <HAL_SPI_Transmit+0x34e>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d114      	bne.n	80074a0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fab6 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e02c      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af79 	bne.w	80073a0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2108      	movs	r1, #8
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fb35 	bl	8007b28 <SPI_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fa87 	bl	80079e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80074f8:	2300      	movs	r3, #0
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop

08007504 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	b29b      	uxth	r3, r3
 800751c:	3301      	adds	r3, #1
 800751e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3330      	adds	r3, #48	@ 0x30
 8007526:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007528:	f7fa fc68 	bl	8001dfc <HAL_GetTick>
 800752c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b01      	cmp	r3, #1
 8007538:	d001      	beq.n	800753e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
 800753c:	e250      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_Receive+0x46>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e248      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_SPI_Receive+0x58>
 8007558:	2302      	movs	r3, #2
 800755a:	e241      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2204      	movs	r2, #4
 8007568:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80075b4:	d108      	bne.n	80075c8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e009      	b.n	80075dc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80075da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	4b95      	ldr	r3, [pc, #596]	@ (8007838 <HAL_SPI_Receive+0x334>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	88f9      	ldrh	r1, [r7, #6]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007608:	d107      	bne.n	800761a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007618:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b0f      	cmp	r3, #15
 8007620:	d96c      	bls.n	80076fc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007622:	e064      	b.n	80076ee <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d114      	bne.n	8007664 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007642:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007644:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007662:	e044      	b.n	80076ee <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800766a:	b29b      	uxth	r3, r3
 800766c:	8bfa      	ldrh	r2, [r7, #30]
 800766e:	429a      	cmp	r2, r3
 8007670:	d919      	bls.n	80076a6 <HAL_SPI_Receive+0x1a2>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d014      	beq.n	80076a6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007686:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800768c:	1d1a      	adds	r2, r3, #4
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076a4:	e023      	b.n	80076ee <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a6:	f7fa fba9 	bl	8001dfc <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d803      	bhi.n	80076be <HAL_SPI_Receive+0x1ba>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Receive+0x1c0>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d114      	bne.n	80076ee <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 f98f 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e178      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d194      	bne.n	8007624 <HAL_SPI_Receive+0x120>
 80076fa:	e15e      	b.n	80079ba <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b07      	cmp	r3, #7
 8007702:	f240 8153 	bls.w	80079ac <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007706:	e08f      	b.n	8007828 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b01      	cmp	r3, #1
 800771c:	d114      	bne.n	8007748 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	8812      	ldrh	r2, [r2, #0]
 8007726:	b292      	uxth	r2, r2
 8007728:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800772e:	1c9a      	adds	r2, r3, #2
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007746:	e06f      	b.n	8007828 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800774e:	b29b      	uxth	r3, r3
 8007750:	8bfa      	ldrh	r2, [r7, #30]
 8007752:	429a      	cmp	r2, r3
 8007754:	d924      	bls.n	80077a0 <HAL_SPI_Receive+0x29c>
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01f      	beq.n	80077a0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	8812      	ldrh	r2, [r2, #0]
 8007768:	b292      	uxth	r2, r2
 800776a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007770:	1c9a      	adds	r2, r3, #2
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	b292      	uxth	r2, r2
 8007780:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007786:	1c9a      	adds	r2, r3, #2
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b02      	subs	r3, #2
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800779e:	e043      	b.n	8007828 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d119      	bne.n	80077e0 <HAL_SPI_Receive+0x2dc>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d014      	beq.n	80077e0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	8812      	ldrh	r2, [r2, #0]
 80077be:	b292      	uxth	r2, r2
 80077c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077de:	e023      	b.n	8007828 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e0:	f7fa fb0c 	bl	8001dfc <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d803      	bhi.n	80077f8 <HAL_SPI_Receive+0x2f4>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d102      	bne.n	80077fe <HAL_SPI_Receive+0x2fa>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d114      	bne.n	8007828 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f8f2 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0db      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	f47f af69 	bne.w	8007708 <HAL_SPI_Receive+0x204>
 8007836:	e0c0      	b.n	80079ba <HAL_SPI_Receive+0x4b6>
 8007838:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d117      	bne.n	8007882 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007880:	e094      	b.n	80079ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007888:	b29b      	uxth	r3, r3
 800788a:	8bfa      	ldrh	r2, [r7, #30]
 800788c:	429a      	cmp	r2, r3
 800788e:	d946      	bls.n	800791e <HAL_SPI_Receive+0x41a>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d041      	beq.n	800791e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c2:	7812      	ldrb	r2, [r2, #0]
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b04      	subs	r3, #4
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800791c:	e046      	b.n	80079ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d81c      	bhi.n	8007964 <HAL_SPI_Receive+0x460>
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d017      	beq.n	8007964 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007962:	e023      	b.n	80079ac <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007964:	f7fa fa4a 	bl	8001dfc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d803      	bhi.n	800797c <HAL_SPI_Receive+0x478>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d102      	bne.n	8007982 <HAL_SPI_Receive+0x47e>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d114      	bne.n	80079ac <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f830 	bl	80079e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800798e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e019      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f47f af41 	bne.w	800783c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f814 	bl	80079e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80079de:	2300      	movs	r3, #0
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0210 	orr.w	r2, r2, #16
 8007a16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6919      	ldr	r1, [r3, #16]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b3c      	ldr	r3, [pc, #240]	@ (8007b24 <SPI_CloseTransfer+0x13c>)
 8007a34:	400b      	ands	r3, r1
 8007a36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007a46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d014      	beq.n	8007a7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00f      	beq.n	8007a7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0220 	orr.w	r2, r2, #32
 8007a7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d014      	beq.n	8007ab4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00f      	beq.n	8007ab4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a9a:	f043 0204 	orr.w	r2, r3, #4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ab2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00f      	beq.n	8007ade <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac4:	f043 0201 	orr.w	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007adc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00f      	beq.n	8007b08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	fffffc90 	.word	0xfffffc90

08007b28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b38:	e010      	b.n	8007b5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b3a:	f7fa f95f 	bl	8001dfc <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d803      	bhi.n	8007b52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d102      	bne.n	8007b58 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e00f      	b.n	8007b7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4013      	ands	r3, r2
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2301      	moveq	r3, #1
 8007b6e:	2300      	movne	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d0df      	beq.n	8007b3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3307      	adds	r3, #7
 8007ba2:	08db      	lsrs	r3, r3, #3
 8007ba4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e042      	b.n	8007c52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7f9 fe2e 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	@ 0x24
 8007be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fb29 	bl	800925c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fdbe 	bl	800878c <UART_SetConfig>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e01b      	b.n	8007c52 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0201 	orr.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fba8 	bl	80093a0 <UART_CheckIdleState>
 8007c50:	4603      	mov	r3, r0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b08a      	sub	sp, #40	@ 0x28
 8007c5e:	af02      	add	r7, sp, #8
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d17b      	bne.n	8007d6c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_UART_Transmit+0x26>
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e074      	b.n	8007d6e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2221      	movs	r2, #33	@ 0x21
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c94:	f7fa f8b2 	bl	8001dfc <HAL_GetTick>
 8007c98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	88fa      	ldrh	r2, [r7, #6]
 8007ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb2:	d108      	bne.n	8007cc6 <HAL_UART_Transmit+0x6c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	e003      	b.n	8007cce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cce:	e030      	b.n	8007d32 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	@ 0x80
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f001 fc0a 	bl	80094f4 <UART_WaitOnFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e03d      	b.n	8007d6e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	e007      	b.n	8007d20 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1c8      	bne.n	8007cd0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	2140      	movs	r1, #64	@ 0x40
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 fbd3 	bl	80094f4 <UART_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e006      	b.n	8007d6e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e000      	b.n	8007d6e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b08a      	sub	sp, #40	@ 0x28
 8007d7a:	af02      	add	r7, sp, #8
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	f040 80b5 	bne.w	8007efc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_UART_Receive+0x28>
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e0ad      	b.n	8007efe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2222      	movs	r2, #34	@ 0x22
 8007dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db8:	f7fa f820 	bl	8001dfc <HAL_GetTick>
 8007dbc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	88fa      	ldrh	r2, [r7, #6]
 8007dca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd6:	d10e      	bne.n	8007df6 <HAL_UART_Receive+0x80>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d105      	bne.n	8007dec <HAL_UART_Receive+0x76>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007de6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dea:	e02d      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	22ff      	movs	r2, #255	@ 0xff
 8007df0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007df4:	e028      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <HAL_UART_Receive+0xa4>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d104      	bne.n	8007e10 <HAL_UART_Receive+0x9a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	22ff      	movs	r2, #255	@ 0xff
 8007e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e0e:	e01b      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	227f      	movs	r2, #127	@ 0x7f
 8007e14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e18:	e016      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e22:	d10d      	bne.n	8007e40 <HAL_UART_Receive+0xca>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <HAL_UART_Receive+0xc0>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	227f      	movs	r2, #127	@ 0x7f
 8007e30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e34:	e008      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	223f      	movs	r2, #63	@ 0x3f
 8007e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e3e:	e003      	b.n	8007e48 <HAL_UART_Receive+0xd2>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d108      	bne.n	8007e6c <HAL_UART_Receive+0xf6>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e003      	b.n	8007e74 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007e74:	e036      	b.n	8007ee4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2120      	movs	r1, #32
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fb37 	bl	80094f4 <UART_WaitOnFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e032      	b.n	8007efe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	8a7b      	ldrh	r3, [r7, #18]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	e00c      	b.n	8007ed2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	8a7b      	ldrh	r3, [r7, #18]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1c2      	bne.n	8007e76 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	@ 0x28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d137      	bne.n	8007f90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <HAL_UART_Receive_IT+0x24>
 8007f26:	88fb      	ldrh	r3, [r7, #6]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e030      	b.n	8007f92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <HAL_UART_Receive_IT+0x94>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d01f      	beq.n	8007f80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d018      	beq.n	8007f80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	623b      	str	r3, [r7, #32]
 8007f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	6a3a      	ldr	r2, [r7, #32]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f001 fb22 	bl	80095d0 <UART_Start_Receive_IT>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	e000      	b.n	8007f92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3728      	adds	r7, #40	@ 0x28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	58000c00 	.word	0x58000c00

08007fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fce:	4013      	ands	r3, r2
 8007fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11b      	bne.n	8008014 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d015      	beq.n	8008014 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d105      	bne.n	8008000 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d009      	beq.n	8008014 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8393 	beq.w	8008730 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
      }
      return;
 8008012:	e38d      	b.n	8008730 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8123 	beq.w	8008264 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800801e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008022:	4b8d      	ldr	r3, [pc, #564]	@ (8008258 <HAL_UART_IRQHandler+0x2b8>)
 8008024:	4013      	ands	r3, r2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800802a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800802e:	4b8b      	ldr	r3, [pc, #556]	@ (800825c <HAL_UART_IRQHandler+0x2bc>)
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8116 	beq.w	8008264 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d011      	beq.n	8008068 <HAL_UART_IRQHandler+0xc8>
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805e:	f043 0201 	orr.w	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d011      	beq.n	8008098 <HAL_UART_IRQHandler+0xf8>
 8008074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2202      	movs	r2, #2
 8008086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	f043 0204 	orr.w	r2, r3, #4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d011      	beq.n	80080c8 <HAL_UART_IRQHandler+0x128>
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2204      	movs	r2, #4
 80080b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080be:	f043 0202 	orr.w	r2, r3, #2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d017      	beq.n	8008104 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d105      	bne.n	80080ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080e4:	4b5c      	ldr	r3, [pc, #368]	@ (8008258 <HAL_UART_IRQHandler+0x2b8>)
 80080e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fa:	f043 0208 	orr.w	r2, r3, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <HAL_UART_IRQHandler+0x196>
 8008110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812c:	f043 0220 	orr.w	r2, r3, #32
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 82f9 	beq.w	8008734 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d013      	beq.n	8008176 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800814e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800815a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818a:	2b40      	cmp	r3, #64	@ 0x40
 800818c:	d005      	beq.n	800819a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800818e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008196:	2b00      	cmp	r3, #0
 8008198:	d054      	beq.n	8008244 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 fb3a 	bl	8009814 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d146      	bne.n	800823c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1d9      	bne.n	80081ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008200:	2b00      	cmp	r3, #0
 8008202:	d017      	beq.n	8008234 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820a:	4a15      	ldr	r2, [pc, #84]	@ (8008260 <HAL_UART_IRQHandler+0x2c0>)
 800820c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008214:	4618      	mov	r0, r3
 8008216:	f7fa faaf 	bl	8002778 <HAL_DMA_Abort_IT>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d019      	beq.n	8008254 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800822e:	4610      	mov	r0, r2
 8008230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008232:	e00f      	b.n	8008254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa93 	bl	8008760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	e00b      	b.n	8008254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa8f 	bl	8008760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008242:	e007      	b.n	8008254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fa8b 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008252:	e26f      	b.n	8008734 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	bf00      	nop
    return;
 8008256:	e26d      	b.n	8008734 <HAL_UART_IRQHandler+0x794>
 8008258:	10000001 	.word	0x10000001
 800825c:	04000120 	.word	0x04000120
 8008260:	080098e1 	.word	0x080098e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 8203 	bne.w	8008674 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008272:	f003 0310 	and.w	r3, r3, #16
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 81fc 	beq.w	8008674 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 81f5 	beq.w	8008674 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2210      	movs	r2, #16
 8008290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829c:	2b40      	cmp	r3, #64	@ 0x40
 800829e:	f040 816d 	bne.w	800857c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4aa4      	ldr	r2, [pc, #656]	@ (800853c <HAL_UART_IRQHandler+0x59c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d068      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4aa1      	ldr	r2, [pc, #644]	@ (8008540 <HAL_UART_IRQHandler+0x5a0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d061      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a9f      	ldr	r2, [pc, #636]	@ (8008544 <HAL_UART_IRQHandler+0x5a4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d05a      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a9c      	ldr	r2, [pc, #624]	@ (8008548 <HAL_UART_IRQHandler+0x5a8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d053      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a9a      	ldr	r2, [pc, #616]	@ (800854c <HAL_UART_IRQHandler+0x5ac>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d04c      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a97      	ldr	r2, [pc, #604]	@ (8008550 <HAL_UART_IRQHandler+0x5b0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d045      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a95      	ldr	r2, [pc, #596]	@ (8008554 <HAL_UART_IRQHandler+0x5b4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d03e      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a92      	ldr	r2, [pc, #584]	@ (8008558 <HAL_UART_IRQHandler+0x5b8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d037      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a90      	ldr	r2, [pc, #576]	@ (800855c <HAL_UART_IRQHandler+0x5bc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d030      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a8d      	ldr	r2, [pc, #564]	@ (8008560 <HAL_UART_IRQHandler+0x5c0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d029      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a8b      	ldr	r2, [pc, #556]	@ (8008564 <HAL_UART_IRQHandler+0x5c4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a88      	ldr	r2, [pc, #544]	@ (8008568 <HAL_UART_IRQHandler+0x5c8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01b      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a86      	ldr	r2, [pc, #536]	@ (800856c <HAL_UART_IRQHandler+0x5cc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d014      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a83      	ldr	r2, [pc, #524]	@ (8008570 <HAL_UART_IRQHandler+0x5d0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00d      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a81      	ldr	r2, [pc, #516]	@ (8008574 <HAL_UART_IRQHandler+0x5d4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d006      	beq.n	8008382 <HAL_UART_IRQHandler+0x3e2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a7e      	ldr	r2, [pc, #504]	@ (8008578 <HAL_UART_IRQHandler+0x5d8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d106      	bne.n	8008390 <HAL_UART_IRQHandler+0x3f0>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	b29b      	uxth	r3, r3
 800838e:	e005      	b.n	800839c <HAL_UART_IRQHandler+0x3fc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80ad 	beq.w	8008504 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083b4:	429a      	cmp	r2, r3
 80083b6:	f080 80a5 	bcs.w	8008504 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d0:	f000 8087 	beq.w	80084e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008402:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800840a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1da      	bne.n	80083d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800842e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800844a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e1      	bne.n	800841e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800846a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800846c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800847e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800848c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e3      	bne.n	800845a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e4      	bne.n	80084a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f9 fe2d 	bl	800213c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f939 	bl	8008774 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008502:	e119      	b.n	8008738 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800850a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800850e:	429a      	cmp	r2, r3
 8008510:	f040 8112 	bne.w	8008738 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008520:	f040 810a 	bne.w	8008738 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f91e 	bl	8008774 <HAL_UARTEx_RxEventCallback>
      return;
 8008538:	e0fe      	b.n	8008738 <HAL_UART_IRQHandler+0x798>
 800853a:	bf00      	nop
 800853c:	40020010 	.word	0x40020010
 8008540:	40020028 	.word	0x40020028
 8008544:	40020040 	.word	0x40020040
 8008548:	40020058 	.word	0x40020058
 800854c:	40020070 	.word	0x40020070
 8008550:	40020088 	.word	0x40020088
 8008554:	400200a0 	.word	0x400200a0
 8008558:	400200b8 	.word	0x400200b8
 800855c:	40020410 	.word	0x40020410
 8008560:	40020428 	.word	0x40020428
 8008564:	40020440 	.word	0x40020440
 8008568:	40020458 	.word	0x40020458
 800856c:	40020470 	.word	0x40020470
 8008570:	40020488 	.word	0x40020488
 8008574:	400204a0 	.word	0x400204a0
 8008578:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008588:	b29b      	uxth	r3, r3
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80cf 	beq.w	800873c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800859e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80ca 	beq.w	800873c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80085cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e4      	bne.n	80085a8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	623b      	str	r3, [r7, #32]
   return(result);
 80085ee:	6a3a      	ldr	r2, [r7, #32]
 80085f0:	4b55      	ldr	r3, [pc, #340]	@ (8008748 <HAL_UART_IRQHandler+0x7a8>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008602:	633a      	str	r2, [r7, #48]	@ 0x30
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e3      	bne.n	80085de <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	60fb      	str	r3, [r7, #12]
   return(result);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0310 	bic.w	r3, r3, #16
 800863e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	69b9      	ldr	r1, [r7, #24]
 8008652:	69fa      	ldr	r2, [r7, #28]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	617b      	str	r3, [r7, #20]
   return(result);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e4      	bne.n	800862a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f881 	bl	8008774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008672:	e063      	b.n	800873c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <HAL_UART_IRQHandler+0x6fe>
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d008      	beq.n	800869e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fe80 	bl	800a39c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800869c:	e051      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d014      	beq.n	80086d4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d105      	bne.n	80086c2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d008      	beq.n	80086d4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d03a      	beq.n	8008740 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
    }
    return;
 80086d2:	e035      	b.n	8008740 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <HAL_UART_IRQHandler+0x754>
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f909 	bl	8009904 <UART_EndTransmit_IT>
    return;
 80086f2:	e026      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <HAL_UART_IRQHandler+0x774>
 8008700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008704:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fe59 	bl	800a3c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008712:	e016      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d010      	beq.n	8008742 <HAL_UART_IRQHandler+0x7a2>
 8008720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008724:	2b00      	cmp	r3, #0
 8008726:	da0c      	bge.n	8008742 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fe41 	bl	800a3b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800872e:	e008      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008730:	bf00      	nop
 8008732:	e006      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008734:	bf00      	nop
 8008736:	e004      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008738:	bf00      	nop
 800873a:	e002      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
      return;
 800873c:	bf00      	nop
 800873e:	e000      	b.n	8008742 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008740:	bf00      	nop
  }
}
 8008742:	37e8      	adds	r7, #232	@ 0xe8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	effffffe 	.word	0xeffffffe

0800874c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b092      	sub	sp, #72	@ 0x48
 8008792:	af00      	add	r7, sp, #0
 8008794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4bbe      	ldr	r3, [pc, #760]	@ (8008ab4 <UART_SetConfig+0x328>)
 80087bc:	4013      	ands	r3, r2
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4ab3      	ldr	r2, [pc, #716]	@ (8008ab8 <UART_SetConfig+0x32c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087f4:	4313      	orrs	r3, r2
 80087f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	4baf      	ldr	r3, [pc, #700]	@ (8008abc <UART_SetConfig+0x330>)
 8008800:	4013      	ands	r3, r2
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008808:	430b      	orrs	r3, r1
 800880a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008812:	f023 010f 	bic.w	r1, r3, #15
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4aa6      	ldr	r2, [pc, #664]	@ (8008ac0 <UART_SetConfig+0x334>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d177      	bne.n	800891c <UART_SetConfig+0x190>
 800882c:	4ba5      	ldr	r3, [pc, #660]	@ (8008ac4 <UART_SetConfig+0x338>)
 800882e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008834:	2b28      	cmp	r3, #40	@ 0x28
 8008836:	d86d      	bhi.n	8008914 <UART_SetConfig+0x188>
 8008838:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <UART_SetConfig+0xb4>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	080088e5 	.word	0x080088e5
 8008844:	08008915 	.word	0x08008915
 8008848:	08008915 	.word	0x08008915
 800884c:	08008915 	.word	0x08008915
 8008850:	08008915 	.word	0x08008915
 8008854:	08008915 	.word	0x08008915
 8008858:	08008915 	.word	0x08008915
 800885c:	08008915 	.word	0x08008915
 8008860:	080088ed 	.word	0x080088ed
 8008864:	08008915 	.word	0x08008915
 8008868:	08008915 	.word	0x08008915
 800886c:	08008915 	.word	0x08008915
 8008870:	08008915 	.word	0x08008915
 8008874:	08008915 	.word	0x08008915
 8008878:	08008915 	.word	0x08008915
 800887c:	08008915 	.word	0x08008915
 8008880:	080088f5 	.word	0x080088f5
 8008884:	08008915 	.word	0x08008915
 8008888:	08008915 	.word	0x08008915
 800888c:	08008915 	.word	0x08008915
 8008890:	08008915 	.word	0x08008915
 8008894:	08008915 	.word	0x08008915
 8008898:	08008915 	.word	0x08008915
 800889c:	08008915 	.word	0x08008915
 80088a0:	080088fd 	.word	0x080088fd
 80088a4:	08008915 	.word	0x08008915
 80088a8:	08008915 	.word	0x08008915
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008915 	.word	0x08008915
 80088b4:	08008915 	.word	0x08008915
 80088b8:	08008915 	.word	0x08008915
 80088bc:	08008915 	.word	0x08008915
 80088c0:	08008905 	.word	0x08008905
 80088c4:	08008915 	.word	0x08008915
 80088c8:	08008915 	.word	0x08008915
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008915 	.word	0x08008915
 80088dc:	08008915 	.word	0x08008915
 80088e0:	0800890d 	.word	0x0800890d
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e222      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e21e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e21a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e216      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008904:	2320      	movs	r3, #32
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e212      	b.n	8008d32 <UART_SetConfig+0x5a6>
 800890c:	2340      	movs	r3, #64	@ 0x40
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e20e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008914:	2380      	movs	r3, #128	@ 0x80
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e20a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a69      	ldr	r2, [pc, #420]	@ (8008ac8 <UART_SetConfig+0x33c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d130      	bne.n	8008988 <UART_SetConfig+0x1fc>
 8008926:	4b67      	ldr	r3, [pc, #412]	@ (8008ac4 <UART_SetConfig+0x338>)
 8008928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	2b05      	cmp	r3, #5
 8008930:	d826      	bhi.n	8008980 <UART_SetConfig+0x1f4>
 8008932:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <UART_SetConfig+0x1ac>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	08008951 	.word	0x08008951
 800893c:	08008959 	.word	0x08008959
 8008940:	08008961 	.word	0x08008961
 8008944:	08008969 	.word	0x08008969
 8008948:	08008971 	.word	0x08008971
 800894c:	08008979 	.word	0x08008979
 8008950:	2300      	movs	r3, #0
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1ec      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008958:	2304      	movs	r3, #4
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e1e8      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008960:	2308      	movs	r3, #8
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e1e4      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008968:	2310      	movs	r3, #16
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e1e0      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008970:	2320      	movs	r3, #32
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e1dc      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008978:	2340      	movs	r3, #64	@ 0x40
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e1d8      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008980:	2380      	movs	r3, #128	@ 0x80
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e1d4      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a4f      	ldr	r2, [pc, #316]	@ (8008acc <UART_SetConfig+0x340>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d130      	bne.n	80089f4 <UART_SetConfig+0x268>
 8008992:	4b4c      	ldr	r3, [pc, #304]	@ (8008ac4 <UART_SetConfig+0x338>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b05      	cmp	r3, #5
 800899c:	d826      	bhi.n	80089ec <UART_SetConfig+0x260>
 800899e:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <UART_SetConfig+0x218>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089c5 	.word	0x080089c5
 80089ac:	080089cd 	.word	0x080089cd
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089dd 	.word	0x080089dd
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e1b6      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089c4:	2304      	movs	r3, #4
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e1b2      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089cc:	2308      	movs	r3, #8
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e1ae      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089d4:	2310      	movs	r3, #16
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e1aa      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089dc:	2320      	movs	r3, #32
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e1a6      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089e4:	2340      	movs	r3, #64	@ 0x40
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e1a2      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089ec:	2380      	movs	r3, #128	@ 0x80
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e19e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a35      	ldr	r2, [pc, #212]	@ (8008ad0 <UART_SetConfig+0x344>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d130      	bne.n	8008a60 <UART_SetConfig+0x2d4>
 80089fe:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <UART_SetConfig+0x338>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d826      	bhi.n	8008a58 <UART_SetConfig+0x2cc>
 8008a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <UART_SetConfig+0x284>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a29 	.word	0x08008a29
 8008a14:	08008a31 	.word	0x08008a31
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e180      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e17c      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e178      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e174      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e170      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a50:	2340      	movs	r3, #64	@ 0x40
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e16c      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a58:	2380      	movs	r3, #128	@ 0x80
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e168      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad4 <UART_SetConfig+0x348>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d142      	bne.n	8008af0 <UART_SetConfig+0x364>
 8008a6a:	4b16      	ldr	r3, [pc, #88]	@ (8008ac4 <UART_SetConfig+0x338>)
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b05      	cmp	r3, #5
 8008a74:	d838      	bhi.n	8008ae8 <UART_SetConfig+0x35c>
 8008a76:	a201      	add	r2, pc, #4	@ (adr r2, 8008a7c <UART_SetConfig+0x2f0>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a95 	.word	0x08008a95
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008aa5 	.word	0x08008aa5
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ae1 	.word	0x08008ae1
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e14a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e146      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e142      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e13e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008ab4:	cfff69f3 	.word	0xcfff69f3
 8008ab8:	58000c00 	.word	0x58000c00
 8008abc:	11fff4ff 	.word	0x11fff4ff
 8008ac0:	40011000 	.word	0x40011000
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	40004400 	.word	0x40004400
 8008acc:	40004800 	.word	0x40004800
 8008ad0:	40004c00 	.word	0x40004c00
 8008ad4:	40005000 	.word	0x40005000
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ade:	e128      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008ae0:	2340      	movs	r3, #64	@ 0x40
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae6:	e124      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008ae8:	2380      	movs	r3, #128	@ 0x80
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aee:	e120      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4acb      	ldr	r2, [pc, #812]	@ (8008e24 <UART_SetConfig+0x698>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d176      	bne.n	8008be8 <UART_SetConfig+0x45c>
 8008afa:	4bcb      	ldr	r3, [pc, #812]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b02:	2b28      	cmp	r3, #40	@ 0x28
 8008b04:	d86c      	bhi.n	8008be0 <UART_SetConfig+0x454>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <UART_SetConfig+0x380>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008bb1 	.word	0x08008bb1
 8008b10:	08008be1 	.word	0x08008be1
 8008b14:	08008be1 	.word	0x08008be1
 8008b18:	08008be1 	.word	0x08008be1
 8008b1c:	08008be1 	.word	0x08008be1
 8008b20:	08008be1 	.word	0x08008be1
 8008b24:	08008be1 	.word	0x08008be1
 8008b28:	08008be1 	.word	0x08008be1
 8008b2c:	08008bb9 	.word	0x08008bb9
 8008b30:	08008be1 	.word	0x08008be1
 8008b34:	08008be1 	.word	0x08008be1
 8008b38:	08008be1 	.word	0x08008be1
 8008b3c:	08008be1 	.word	0x08008be1
 8008b40:	08008be1 	.word	0x08008be1
 8008b44:	08008be1 	.word	0x08008be1
 8008b48:	08008be1 	.word	0x08008be1
 8008b4c:	08008bc1 	.word	0x08008bc1
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008be1 	.word	0x08008be1
 8008b5c:	08008be1 	.word	0x08008be1
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008bc9 	.word	0x08008bc9
 8008b70:	08008be1 	.word	0x08008be1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008bd9 	.word	0x08008bd9
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e0bc      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e0b8      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e0b4      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e0b0      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008bd0:	2320      	movs	r3, #32
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e0ac      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008bd8:	2340      	movs	r3, #64	@ 0x40
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e0a8      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008be0:	2380      	movs	r3, #128	@ 0x80
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e0a4      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a8f      	ldr	r2, [pc, #572]	@ (8008e2c <UART_SetConfig+0x6a0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d130      	bne.n	8008c54 <UART_SetConfig+0x4c8>
 8008bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d826      	bhi.n	8008c4c <UART_SetConfig+0x4c0>
 8008bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <UART_SetConfig+0x478>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	08008c2d 	.word	0x08008c2d
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c3d 	.word	0x08008c3d
 8008c18:	08008c45 	.word	0x08008c45
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e086      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c24:	2304      	movs	r3, #4
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e082      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e07e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e07a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e076      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c44:	2340      	movs	r3, #64	@ 0x40
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e072      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c4c:	2380      	movs	r3, #128	@ 0x80
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e06e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a75      	ldr	r2, [pc, #468]	@ (8008e30 <UART_SetConfig+0x6a4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d130      	bne.n	8008cc0 <UART_SetConfig+0x534>
 8008c5e:	4b72      	ldr	r3, [pc, #456]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	d826      	bhi.n	8008cb8 <UART_SetConfig+0x52c>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <UART_SetConfig+0x4e4>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c89 	.word	0x08008c89
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008c99 	.word	0x08008c99
 8008c7c:	08008ca1 	.word	0x08008ca1
 8008c80:	08008ca9 	.word	0x08008ca9
 8008c84:	08008cb1 	.word	0x08008cb1
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e050      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c90:	2304      	movs	r3, #4
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e04c      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008c98:	2308      	movs	r3, #8
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e048      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e044      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008ca8:	2320      	movs	r3, #32
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e040      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008cb0:	2340      	movs	r3, #64	@ 0x40
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e03c      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008cb8:	2380      	movs	r3, #128	@ 0x80
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e038      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a5b      	ldr	r2, [pc, #364]	@ (8008e34 <UART_SetConfig+0x6a8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d130      	bne.n	8008d2c <UART_SetConfig+0x5a0>
 8008cca:	4b57      	ldr	r3, [pc, #348]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	d826      	bhi.n	8008d24 <UART_SetConfig+0x598>
 8008cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cdc <UART_SetConfig+0x550>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008cf5 	.word	0x08008cf5
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	08008d05 	.word	0x08008d05
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d15 	.word	0x08008d15
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e01a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e016      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d04:	2308      	movs	r3, #8
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e012      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e00e      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d14:	2320      	movs	r3, #32
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e00a      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d1c:	2340      	movs	r3, #64	@ 0x40
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e006      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d24:	2380      	movs	r3, #128	@ 0x80
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e002      	b.n	8008d32 <UART_SetConfig+0x5a6>
 8008d2c:	2380      	movs	r3, #128	@ 0x80
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a3f      	ldr	r2, [pc, #252]	@ (8008e34 <UART_SetConfig+0x6a8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f040 80f8 	bne.w	8008f2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	dc46      	bgt.n	8008dd4 <UART_SetConfig+0x648>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	f2c0 8082 	blt.w	8008e50 <UART_SetConfig+0x6c4>
 8008d4c:	3b02      	subs	r3, #2
 8008d4e:	2b1e      	cmp	r3, #30
 8008d50:	d87e      	bhi.n	8008e50 <UART_SetConfig+0x6c4>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <UART_SetConfig+0x5cc>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008ddb 	.word	0x08008ddb
 8008d5c:	08008e51 	.word	0x08008e51
 8008d60:	08008de3 	.word	0x08008de3
 8008d64:	08008e51 	.word	0x08008e51
 8008d68:	08008e51 	.word	0x08008e51
 8008d6c:	08008e51 	.word	0x08008e51
 8008d70:	08008df3 	.word	0x08008df3
 8008d74:	08008e51 	.word	0x08008e51
 8008d78:	08008e51 	.word	0x08008e51
 8008d7c:	08008e51 	.word	0x08008e51
 8008d80:	08008e51 	.word	0x08008e51
 8008d84:	08008e51 	.word	0x08008e51
 8008d88:	08008e51 	.word	0x08008e51
 8008d8c:	08008e51 	.word	0x08008e51
 8008d90:	08008e03 	.word	0x08008e03
 8008d94:	08008e51 	.word	0x08008e51
 8008d98:	08008e51 	.word	0x08008e51
 8008d9c:	08008e51 	.word	0x08008e51
 8008da0:	08008e51 	.word	0x08008e51
 8008da4:	08008e51 	.word	0x08008e51
 8008da8:	08008e51 	.word	0x08008e51
 8008dac:	08008e51 	.word	0x08008e51
 8008db0:	08008e51 	.word	0x08008e51
 8008db4:	08008e51 	.word	0x08008e51
 8008db8:	08008e51 	.word	0x08008e51
 8008dbc:	08008e51 	.word	0x08008e51
 8008dc0:	08008e51 	.word	0x08008e51
 8008dc4:	08008e51 	.word	0x08008e51
 8008dc8:	08008e51 	.word	0x08008e51
 8008dcc:	08008e51 	.word	0x08008e51
 8008dd0:	08008e43 	.word	0x08008e43
 8008dd4:	2b40      	cmp	r3, #64	@ 0x40
 8008dd6:	d037      	beq.n	8008e48 <UART_SetConfig+0x6bc>
 8008dd8:	e03a      	b.n	8008e50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dda:	f7fd fc5f 	bl	800669c <HAL_RCCEx_GetD3PCLK1Freq>
 8008dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008de0:	e03c      	b.n	8008e5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fc6e 	bl	80066c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df0:	e034      	b.n	8008e5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df2:	f107 0318 	add.w	r3, r7, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd fdba 	bl	8006970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e00:	e02c      	b.n	8008e5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e02:	4b09      	ldr	r3, [pc, #36]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e0e:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <UART_SetConfig+0x69c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	08db      	lsrs	r3, r3, #3
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	4a07      	ldr	r2, [pc, #28]	@ (8008e38 <UART_SetConfig+0x6ac>)
 8008e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e20:	e01c      	b.n	8008e5c <UART_SetConfig+0x6d0>
 8008e22:	bf00      	nop
 8008e24:	40011400 	.word	0x40011400
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	40007800 	.word	0x40007800
 8008e30:	40007c00 	.word	0x40007c00
 8008e34:	58000c00 	.word	0x58000c00
 8008e38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e3c:	4b9d      	ldr	r3, [pc, #628]	@ (80090b4 <UART_SetConfig+0x928>)
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e40:	e00c      	b.n	8008e5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e42:	4b9d      	ldr	r3, [pc, #628]	@ (80090b8 <UART_SetConfig+0x92c>)
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e46:	e009      	b.n	8008e5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4e:	e005      	b.n	8008e5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 81de 	beq.w	8009220 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	4a94      	ldr	r2, [pc, #592]	@ (80090bc <UART_SetConfig+0x930>)
 8008e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	4413      	add	r3, r2
 8008e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d305      	bcc.n	8008e94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e9a:	e1c1      	b.n	8009220 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	60bb      	str	r3, [r7, #8]
 8008ea2:	60fa      	str	r2, [r7, #12]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	4a84      	ldr	r2, [pc, #528]	@ (80090bc <UART_SetConfig+0x930>)
 8008eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ebe:	f7f7 fa67 	bl	8000390 <__aeabi_uldivmod>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	020b      	lsls	r3, r1, #8
 8008ed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ed8:	0202      	lsls	r2, r0, #8
 8008eda:	6979      	ldr	r1, [r7, #20]
 8008edc:	6849      	ldr	r1, [r1, #4]
 8008ede:	0849      	lsrs	r1, r1, #1
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	eb12 0804 	adds.w	r8, r2, r4
 8008eea:	eb43 0905 	adc.w	r9, r3, r5
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	469a      	mov	sl, r3
 8008ef6:	4693      	mov	fp, r2
 8008ef8:	4652      	mov	r2, sl
 8008efa:	465b      	mov	r3, fp
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fa46 	bl	8000390 <__aeabi_uldivmod>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4613      	mov	r3, r2
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f12:	d308      	bcc.n	8008f26 <UART_SetConfig+0x79a>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1a:	d204      	bcs.n	8008f26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f22:	60da      	str	r2, [r3, #12]
 8008f24:	e17c      	b.n	8009220 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f2c:	e178      	b.n	8009220 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f36:	f040 80c5 	bne.w	80090c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	dc48      	bgt.n	8008fd4 <UART_SetConfig+0x848>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	db7b      	blt.n	800903e <UART_SetConfig+0x8b2>
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d879      	bhi.n	800903e <UART_SetConfig+0x8b2>
 8008f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f50 <UART_SetConfig+0x7c4>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008fdb 	.word	0x08008fdb
 8008f54:	08008fe3 	.word	0x08008fe3
 8008f58:	0800903f 	.word	0x0800903f
 8008f5c:	0800903f 	.word	0x0800903f
 8008f60:	08008feb 	.word	0x08008feb
 8008f64:	0800903f 	.word	0x0800903f
 8008f68:	0800903f 	.word	0x0800903f
 8008f6c:	0800903f 	.word	0x0800903f
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	0800903f 	.word	0x0800903f
 8008f78:	0800903f 	.word	0x0800903f
 8008f7c:	0800903f 	.word	0x0800903f
 8008f80:	0800903f 	.word	0x0800903f
 8008f84:	0800903f 	.word	0x0800903f
 8008f88:	0800903f 	.word	0x0800903f
 8008f8c:	0800903f 	.word	0x0800903f
 8008f90:	0800900b 	.word	0x0800900b
 8008f94:	0800903f 	.word	0x0800903f
 8008f98:	0800903f 	.word	0x0800903f
 8008f9c:	0800903f 	.word	0x0800903f
 8008fa0:	0800903f 	.word	0x0800903f
 8008fa4:	0800903f 	.word	0x0800903f
 8008fa8:	0800903f 	.word	0x0800903f
 8008fac:	0800903f 	.word	0x0800903f
 8008fb0:	0800903f 	.word	0x0800903f
 8008fb4:	0800903f 	.word	0x0800903f
 8008fb8:	0800903f 	.word	0x0800903f
 8008fbc:	0800903f 	.word	0x0800903f
 8008fc0:	0800903f 	.word	0x0800903f
 8008fc4:	0800903f 	.word	0x0800903f
 8008fc8:	0800903f 	.word	0x0800903f
 8008fcc:	0800903f 	.word	0x0800903f
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d02e      	beq.n	8009036 <UART_SetConfig+0x8aa>
 8008fd8:	e031      	b.n	800903e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fda:	f7fc f929 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fe0:	e033      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe2:	f7fc f93b 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8008fe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fe8:	e02f      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fd fb6a 	bl	80066c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	e027      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 0318 	add.w	r3, r7, #24
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fd fcb6 	bl	8006970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009008:	e01f      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900a:	4b2d      	ldr	r3, [pc, #180]	@ (80090c0 <UART_SetConfig+0x934>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009016:	4b2a      	ldr	r3, [pc, #168]	@ (80090c0 <UART_SetConfig+0x934>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	4a24      	ldr	r2, [pc, #144]	@ (80090b4 <UART_SetConfig+0x928>)
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009028:	e00f      	b.n	800904a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800902a:	4b22      	ldr	r3, [pc, #136]	@ (80090b4 <UART_SetConfig+0x928>)
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902e:	e00c      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009030:	4b21      	ldr	r3, [pc, #132]	@ (80090b8 <UART_SetConfig+0x92c>)
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	e009      	b.n	800904a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903c:	e005      	b.n	800904a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800904a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80e7 	beq.w	8009220 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009056:	4a19      	ldr	r2, [pc, #100]	@ (80090bc <UART_SetConfig+0x930>)
 8009058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905c:	461a      	mov	r2, r3
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	fbb3 f3f2 	udiv	r3, r3, r2
 8009064:	005a      	lsls	r2, r3, #1
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	441a      	add	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	fbb2 f3f3 	udiv	r3, r2, r3
 8009076:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d916      	bls.n	80090ac <UART_SetConfig+0x920>
 800907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009084:	d212      	bcs.n	80090ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	b29b      	uxth	r3, r3
 800908a:	f023 030f 	bic.w	r3, r3, #15
 800908e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	b29b      	uxth	r3, r3
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	b29a      	uxth	r2, r3
 800909c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800909e:	4313      	orrs	r3, r2
 80090a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80090a8:	60da      	str	r2, [r3, #12]
 80090aa:	e0b9      	b.n	8009220 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090b2:	e0b5      	b.n	8009220 <UART_SetConfig+0xa94>
 80090b4:	03d09000 	.word	0x03d09000
 80090b8:	003d0900 	.word	0x003d0900
 80090bc:	0800b064 	.word	0x0800b064
 80090c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	dc49      	bgt.n	8009160 <UART_SetConfig+0x9d4>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	db7c      	blt.n	80091ca <UART_SetConfig+0xa3e>
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d87a      	bhi.n	80091ca <UART_SetConfig+0xa3e>
 80090d4:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <UART_SetConfig+0x950>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	08009167 	.word	0x08009167
 80090e0:	0800916f 	.word	0x0800916f
 80090e4:	080091cb 	.word	0x080091cb
 80090e8:	080091cb 	.word	0x080091cb
 80090ec:	08009177 	.word	0x08009177
 80090f0:	080091cb 	.word	0x080091cb
 80090f4:	080091cb 	.word	0x080091cb
 80090f8:	080091cb 	.word	0x080091cb
 80090fc:	08009187 	.word	0x08009187
 8009100:	080091cb 	.word	0x080091cb
 8009104:	080091cb 	.word	0x080091cb
 8009108:	080091cb 	.word	0x080091cb
 800910c:	080091cb 	.word	0x080091cb
 8009110:	080091cb 	.word	0x080091cb
 8009114:	080091cb 	.word	0x080091cb
 8009118:	080091cb 	.word	0x080091cb
 800911c:	08009197 	.word	0x08009197
 8009120:	080091cb 	.word	0x080091cb
 8009124:	080091cb 	.word	0x080091cb
 8009128:	080091cb 	.word	0x080091cb
 800912c:	080091cb 	.word	0x080091cb
 8009130:	080091cb 	.word	0x080091cb
 8009134:	080091cb 	.word	0x080091cb
 8009138:	080091cb 	.word	0x080091cb
 800913c:	080091cb 	.word	0x080091cb
 8009140:	080091cb 	.word	0x080091cb
 8009144:	080091cb 	.word	0x080091cb
 8009148:	080091cb 	.word	0x080091cb
 800914c:	080091cb 	.word	0x080091cb
 8009150:	080091cb 	.word	0x080091cb
 8009154:	080091cb 	.word	0x080091cb
 8009158:	080091cb 	.word	0x080091cb
 800915c:	080091bd 	.word	0x080091bd
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d02e      	beq.n	80091c2 <UART_SetConfig+0xa36>
 8009164:	e031      	b.n	80091ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009166:	f7fc f863 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 800916a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800916c:	e033      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800916e:	f7fc f875 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8009172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009174:	e02f      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd faa4 	bl	80066c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009184:	e027      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009186:	f107 0318 	add.w	r3, r7, #24
 800918a:	4618      	mov	r0, r3
 800918c:	f7fd fbf0 	bl	8006970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009194:	e01f      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009196:	4b2d      	ldr	r3, [pc, #180]	@ (800924c <UART_SetConfig+0xac0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091a2:	4b2a      	ldr	r3, [pc, #168]	@ (800924c <UART_SetConfig+0xac0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	4a28      	ldr	r2, [pc, #160]	@ (8009250 <UART_SetConfig+0xac4>)
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091b4:	e00f      	b.n	80091d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80091b6:	4b26      	ldr	r3, [pc, #152]	@ (8009250 <UART_SetConfig+0xac4>)
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ba:	e00c      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091bc:	4b25      	ldr	r3, [pc, #148]	@ (8009254 <UART_SetConfig+0xac8>)
 80091be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c0:	e009      	b.n	80091d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e005      	b.n	80091d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091d4:	bf00      	nop
    }

    if (pclk != 0U)
 80091d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d021      	beq.n	8009220 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009258 <UART_SetConfig+0xacc>)
 80091e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e6:	461a      	mov	r2, r3
 80091e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	2b0f      	cmp	r3, #15
 8009204:	d909      	bls.n	800921a <UART_SetConfig+0xa8e>
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920c:	d205      	bcs.n	800921a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	b29a      	uxth	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60da      	str	r2, [r3, #12]
 8009218:	e002      	b.n	8009220 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2201      	movs	r2, #1
 8009224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2201      	movs	r2, #1
 800922c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800923c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009240:	4618      	mov	r0, r3
 8009242:	3748      	adds	r7, #72	@ 0x48
 8009244:	46bd      	mov	sp, r7
 8009246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	03d09000 	.word	0x03d09000
 8009254:	003d0900 	.word	0x003d0900
 8009258:	0800b064 	.word	0x0800b064

0800925c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ce:	f003 0304 	and.w	r3, r3, #4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00a      	beq.n	800930e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01a      	beq.n	8009372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800935a:	d10a      	bne.n	8009372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	605a      	str	r2, [r3, #4]
  }
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b098      	sub	sp, #96	@ 0x60
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093b0:	f7f8 fd24 	bl	8001dfc <HAL_GetTick>
 80093b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0308 	and.w	r3, r3, #8
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d12f      	bne.n	8009424 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093cc:	2200      	movs	r2, #0
 80093ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f88e 	bl	80094f4 <UART_WaitOnFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d022      	beq.n	8009424 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800940a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e6      	bne.n	80093de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e063      	b.n	80094ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b04      	cmp	r3, #4
 8009430:	d149      	bne.n	80094c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009432:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800943a:	2200      	movs	r2, #0
 800943c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f857 	bl	80094f4 <UART_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d03c      	beq.n	80094c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	623b      	str	r3, [r7, #32]
   return(result);
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30
 800946c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e6      	bne.n	800944c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	60fb      	str	r3, [r7, #12]
   return(result);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800949e:	61fa      	str	r2, [r7, #28]
 80094a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	69b9      	ldr	r1, [r7, #24]
 80094a4:	69fa      	ldr	r2, [r7, #28]
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	617b      	str	r3, [r7, #20]
   return(result);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e012      	b.n	80094ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3758      	adds	r7, #88	@ 0x58
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009504:	e04f      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d04b      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800950e:	f7f8 fc75 	bl	8001dfc <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <UART_WaitOnFlagUntilTimeout+0x30>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e04e      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	d037      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b80      	cmp	r3, #128	@ 0x80
 800953a:	d034      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b40      	cmp	r3, #64	@ 0x40
 8009540:	d031      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b08      	cmp	r3, #8
 800954e:	d110      	bne.n	8009572 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 f95b 	bl	8009814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2208      	movs	r2, #8
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e029      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800957c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009580:	d111      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f941 	bl	8009814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e00f      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d0a0      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b0a3      	sub	sp, #140	@ 0x8c
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009602:	d10e      	bne.n	8009622 <UART_Start_Receive_IT+0x52>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <UART_Start_Receive_IT+0x48>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009616:	e02d      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	22ff      	movs	r2, #255	@ 0xff
 800961c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009620:	e028      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10d      	bne.n	8009646 <UART_Start_Receive_IT+0x76>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <UART_Start_Receive_IT+0x6c>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22ff      	movs	r2, #255	@ 0xff
 8009636:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800963a:	e01b      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	227f      	movs	r2, #127	@ 0x7f
 8009640:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009644:	e016      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800964e:	d10d      	bne.n	800966c <UART_Start_Receive_IT+0x9c>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d104      	bne.n	8009662 <UART_Start_Receive_IT+0x92>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	227f      	movs	r2, #127	@ 0x7f
 800965c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009660:	e008      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	223f      	movs	r2, #63	@ 0x3f
 8009666:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800966a:	e003      	b.n	8009674 <UART_Start_Receive_IT+0xa4>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2222      	movs	r2, #34	@ 0x22
 8009680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80096a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80096aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80096ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80096b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c4:	d14f      	bne.n	8009766 <UART_Start_Receive_IT+0x196>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d349      	bcc.n	8009766 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096da:	d107      	bne.n	80096ec <UART_Start_Receive_IT+0x11c>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4a47      	ldr	r2, [pc, #284]	@ (8009804 <UART_Start_Receive_IT+0x234>)
 80096e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80096ea:	e002      	b.n	80096f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a46      	ldr	r2, [pc, #280]	@ (8009808 <UART_Start_Receive_IT+0x238>)
 80096f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01a      	beq.n	8009730 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800970a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800970e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800971c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800971e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009722:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800972a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e4      	bne.n	80096fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009746:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009750:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009752:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800975e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e5      	bne.n	8009730 <UART_Start_Receive_IT+0x160>
 8009764:	e046      	b.n	80097f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800976e:	d107      	bne.n	8009780 <UART_Start_Receive_IT+0x1b0>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d103      	bne.n	8009780 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a24      	ldr	r2, [pc, #144]	@ (800980c <UART_Start_Receive_IT+0x23c>)
 800977c:	675a      	str	r2, [r3, #116]	@ 0x74
 800977e:	e002      	b.n	8009786 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a23      	ldr	r2, [pc, #140]	@ (8009810 <UART_Start_Receive_IT+0x240>)
 8009784:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d019      	beq.n	80097c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80097a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <UART_Start_Receive_IT+0x1be>
 80097c0:	e018      	b.n	80097f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	613b      	str	r3, [r7, #16]
   return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f043 0320 	orr.w	r3, r3, #32
 80097d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097e0:	623b      	str	r3, [r7, #32]
 80097e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69f9      	ldr	r1, [r7, #28]
 80097e6:	6a3a      	ldr	r2, [r7, #32]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	378c      	adds	r7, #140	@ 0x8c
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	0800a031 	.word	0x0800a031
 8009808:	08009ccd 	.word	0x08009ccd
 800980c:	08009b15 	.word	0x08009b15
 8009810:	0800995d 	.word	0x0800995d

08009814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b095      	sub	sp, #84	@ 0x54
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800983a:	643b      	str	r3, [r7, #64]	@ 0x40
 800983c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	61fb      	str	r3, [r7, #28]
   return(result);
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	4b1e      	ldr	r3, [pc, #120]	@ (80098dc <UART_EndRxTransfer+0xc8>)
 8009862:	4013      	ands	r3, r2
 8009864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e5      	bne.n	800984e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009886:	2b01      	cmp	r3, #1
 8009888:	d118      	bne.n	80098bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	60bb      	str	r3, [r7, #8]
   return(result);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f023 0310 	bic.w	r3, r3, #16
 800989e:	647b      	str	r3, [r7, #68]	@ 0x44
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6979      	ldr	r1, [r7, #20]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	613b      	str	r3, [r7, #16]
   return(result);
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e6      	bne.n	800988a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098d0:	bf00      	nop
 80098d2:	3754      	adds	r7, #84	@ 0x54
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	effffffe 	.word	0xeffffffe

080098e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7fe ff32 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	60bb      	str	r3, [r7, #8]
   return(result);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	613b      	str	r3, [r7, #16]
   return(result);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e6      	bne.n	800990c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2220      	movs	r2, #32
 8009942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7fe fefd 	bl	800874c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009952:	bf00      	nop
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b09c      	sub	sp, #112	@ 0x70
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800996a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009974:	2b22      	cmp	r3, #34	@ 0x22
 8009976:	f040 80be 	bne.w	8009af6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009980:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009984:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009988:	b2d9      	uxtb	r1, r3
 800998a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800998e:	b2da      	uxtb	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009994:	400a      	ands	r2, r1
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 80a1 	bne.w	8009b06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e6      	bne.n	80099c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e5      	bne.n	80099f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a33      	ldr	r2, [pc, #204]	@ (8009b10 <UART_RxISR_8BIT+0x1b4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d01f      	beq.n	8009a88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d018      	beq.n	8009a88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	623b      	str	r3, [r7, #32]
   return(result);
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e6      	bne.n	8009a56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d12e      	bne.n	8009aee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0310 	bic.w	r3, r3, #16
 8009aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	69b9      	ldr	r1, [r7, #24]
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b10      	cmp	r3, #16
 8009ad4:	d103      	bne.n	8009ade <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2210      	movs	r2, #16
 8009adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fe fe44 	bl	8008774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009aec:	e00b      	b.n	8009b06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7f7 ffcc 	bl	8001a8c <HAL_UART_RxCpltCallback>
}
 8009af4:	e007      	b.n	8009b06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699a      	ldr	r2, [r3, #24]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f042 0208 	orr.w	r2, r2, #8
 8009b04:	619a      	str	r2, [r3, #24]
}
 8009b06:	bf00      	nop
 8009b08:	3770      	adds	r7, #112	@ 0x70
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	58000c00 	.word	0x58000c00

08009b14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b09c      	sub	sp, #112	@ 0x70
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b2c:	2b22      	cmp	r3, #34	@ 0x22
 8009b2e:	f040 80be 	bne.w	8009cae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b56:	1c9a      	adds	r2, r3, #2
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	3b01      	subs	r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f040 80a1 	bne.w	8009cbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e6      	bne.n	8009b7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bce:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a33      	ldr	r2, [pc, #204]	@ (8009cc8 <UART_RxISR_16BIT+0x1b4>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d01f      	beq.n	8009c40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d018      	beq.n	8009c40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e6      	bne.n	8009c0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d12e      	bne.n	8009ca6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f023 0310 	bic.w	r3, r3, #16
 8009c62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c6c:	61bb      	str	r3, [r7, #24]
 8009c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	6979      	ldr	r1, [r7, #20]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	e841 2300 	strex	r3, r2, [r1]
 8009c78:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e6      	bne.n	8009c4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b10      	cmp	r3, #16
 8009c8c:	d103      	bne.n	8009c96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2210      	movs	r2, #16
 8009c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7fe fd68 	bl	8008774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ca4:	e00b      	b.n	8009cbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7f7 fef0 	bl	8001a8c <HAL_UART_RxCpltCallback>
}
 8009cac:	e007      	b.n	8009cbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	699a      	ldr	r2, [r3, #24]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 0208 	orr.w	r2, r2, #8
 8009cbc:	619a      	str	r2, [r3, #24]
}
 8009cbe:	bf00      	nop
 8009cc0:	3770      	adds	r7, #112	@ 0x70
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	58000c00 	.word	0x58000c00

08009ccc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b0ac      	sub	sp, #176	@ 0xb0
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d02:	2b22      	cmp	r3, #34	@ 0x22
 8009d04:	f040 8181 	bne.w	800a00a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d12:	e124      	b.n	8009f5e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009d22:	b2d9      	uxtb	r1, r3
 8009d24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2e:	400a      	ands	r2, r1
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d053      	beq.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d011      	beq.n	8009d96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d8c:	f043 0201 	orr.w	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2202      	movs	r2, #2
 8009db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dbc:	f043 0204 	orr.w	r2, r3, #4
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d011      	beq.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2204      	movs	r2, #4
 8009de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dec:	f043 0202 	orr.w	r2, r3, #2
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe fcad 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 80a1 	bne.w	8009f5e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e40:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009e44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e4      	bne.n	8009e1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009e62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e64:	4b6f      	ldr	r3, [pc, #444]	@ (800a024 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009e66:	4013      	ands	r3, r2
 8009e68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e76:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009e78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e3      	bne.n	8009e52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a61      	ldr	r2, [pc, #388]	@ (800a028 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d021      	beq.n	8009eec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01a      	beq.n	8009eec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ed8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ede:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e4      	bne.n	8009eb6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d130      	bne.n	8009f56 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f023 0310 	bic.w	r3, r3, #16
 8009f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f24:	e841 2300 	strex	r3, r2, [r1]
 8009f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1e4      	bne.n	8009efa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	f003 0310 	and.w	r3, r3, #16
 8009f3a:	2b10      	cmp	r3, #16
 8009f3c:	d103      	bne.n	8009f46 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2210      	movs	r2, #16
 8009f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7fe fc10 	bl	8008774 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009f54:	e00e      	b.n	8009f74 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7f7 fd98 	bl	8001a8c <HAL_UART_RxCpltCallback>
        break;
 8009f5c:	e00a      	b.n	8009f74 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f5e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f47f aed0 	bne.w	8009d14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d049      	beq.n	800a01a <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f8c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d242      	bcs.n	800a01a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e3      	bne.n	8009f94 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a17      	ldr	r2, [pc, #92]	@ (800a02c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009fd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f043 0320 	orr.w	r3, r3, #32
 8009fe6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6979      	ldr	r1, [r7, #20]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	613b      	str	r3, [r7, #16]
   return(result);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e4      	bne.n	8009fd2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a008:	e007      	b.n	800a01a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699a      	ldr	r2, [r3, #24]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0208 	orr.w	r2, r2, #8
 800a018:	619a      	str	r2, [r3, #24]
}
 800a01a:	bf00      	nop
 800a01c:	37b0      	adds	r7, #176	@ 0xb0
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	effffffe 	.word	0xeffffffe
 800a028:	58000c00 	.word	0x58000c00
 800a02c:	0800995d 	.word	0x0800995d

0800a030 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b0ae      	sub	sp, #184	@ 0xb8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a03e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a066:	2b22      	cmp	r3, #34	@ 0x22
 800a068:	f040 8185 	bne.w	800a376 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a072:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a076:	e128      	b.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a08a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a08e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a092:	4013      	ands	r3, r2
 800a094:	b29a      	uxth	r2, r3
 800a096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a09a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a0:	1c9a      	adds	r2, r3, #2
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d053      	beq.n	800a176 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d011      	beq.n	800a0fe <UART_RxISR_16BIT_FIFOEN+0xce>
 800a0da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0f4:	f043 0201 	orr.w	r2, r3, #1
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d011      	beq.n	800a12e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a10a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2202      	movs	r2, #2
 800a11c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a124:	f043 0204 	orr.w	r2, r3, #4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a12e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d011      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a13a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2204      	movs	r2, #4
 800a14c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a154:	f043 0202 	orr.w	r2, r3, #2
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a164:	2b00      	cmp	r3, #0
 800a166:	d006      	beq.n	800a176 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fe faf9 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 80a3 	bne.w	800a2ca <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1e2      	bne.n	800a184 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1d0:	4b6f      	ldr	r3, [pc, #444]	@ (800a390 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a1e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1ea:	e841 2300 	strex	r3, r2, [r1]
 800a1ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1e3      	bne.n	800a1be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a61      	ldr	r2, [pc, #388]	@ (800a394 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d021      	beq.n	800a258 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d01a      	beq.n	800a258 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a244:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a246:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a24a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e4      	bne.n	800a222 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d130      	bne.n	800a2c2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a276:	f023 0310 	bic.w	r3, r3, #16
 800a27a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a288:	647b      	str	r3, [r7, #68]	@ 0x44
 800a28a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a290:	e841 2300 	strex	r3, r2, [r1]
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1e4      	bne.n	800a266 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f003 0310 	and.w	r3, r3, #16
 800a2a6:	2b10      	cmp	r3, #16
 800a2a8:	d103      	bne.n	800a2b2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fe fa5a 	bl	8008774 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a2c0:	e00e      	b.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7f7 fbe2 	bl	8001a8c <HAL_UART_RxCpltCallback>
        break;
 800a2c8:	e00a      	b.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2ca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a2d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f47f aecc 	bne.w	800a078 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2e6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d049      	beq.n	800a386 <UART_RxISR_16BIT_FIFOEN+0x356>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2f8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d242      	bcs.n	800a386 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	623b      	str	r3, [r7, #32]
   return(result);
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a316:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3308      	adds	r3, #8
 800a320:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a324:	633a      	str	r2, [r7, #48]	@ 0x30
 800a326:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e3      	bne.n	800a300 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a17      	ldr	r2, [pc, #92]	@ (800a398 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a33c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f043 0320 	orr.w	r3, r3, #32
 800a352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	69b9      	ldr	r1, [r7, #24]
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	617b      	str	r3, [r7, #20]
   return(result);
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e4      	bne.n	800a33e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a374:	e007      	b.n	800a386 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	699a      	ldr	r2, [r3, #24]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f042 0208 	orr.w	r2, r2, #8
 800a384:	619a      	str	r2, [r3, #24]
}
 800a386:	bf00      	nop
 800a388:	37b8      	adds	r7, #184	@ 0xb8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	effffffe 	.word	0xeffffffe
 800a394:	58000c00 	.word	0x58000c00
 800a398:	08009b15 	.word	0x08009b15

0800a39c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <HAL_UARTEx_DisableFifoMode+0x16>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e027      	b.n	800a43e <HAL_UARTEx_DisableFifoMode+0x66>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2224      	movs	r2, #36	@ 0x24
 800a3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a41c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a45e:	2302      	movs	r3, #2
 800a460:	e02d      	b.n	800a4be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2224      	movs	r2, #36	@ 0x24
 800a46e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0201 	bic.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f850 	bl	800a544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e02d      	b.n	800a53a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2224      	movs	r2, #36	@ 0x24
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f812 	bl	800a544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a550:	2b00      	cmp	r3, #0
 800a552:	d108      	bne.n	800a566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a564:	e031      	b.n	800a5ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a566:	2310      	movs	r3, #16
 800a568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a56a:	2310      	movs	r3, #16
 800a56c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	0e5b      	lsrs	r3, r3, #25
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 0307 	and.w	r3, r3, #7
 800a57c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	0f5b      	lsrs	r3, r3, #29
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0307 	and.w	r3, r3, #7
 800a58c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	7b3a      	ldrb	r2, [r7, #12]
 800a592:	4911      	ldr	r1, [pc, #68]	@ (800a5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a594:	5c8a      	ldrb	r2, [r1, r2]
 800a596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a59a:	7b3a      	ldrb	r2, [r7, #12]
 800a59c:	490f      	ldr	r1, [pc, #60]	@ (800a5dc <UARTEx_SetNbDataToProcess+0x98>)
 800a59e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	7b7a      	ldrb	r2, [r7, #13]
 800a5b0:	4909      	ldr	r1, [pc, #36]	@ (800a5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a5b2:	5c8a      	ldrb	r2, [r1, r2]
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5b8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ba:	4908      	ldr	r1, [pc, #32]	@ (800a5dc <UARTEx_SetNbDataToProcess+0x98>)
 800a5bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5ca:	bf00      	nop
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	0800b07c 	.word	0x0800b07c
 800a5dc:	0800b084 	.word	0x0800b084

0800a5e0 <_vsniprintf_r>:
 800a5e0:	b530      	push	{r4, r5, lr}
 800a5e2:	4614      	mov	r4, r2
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	b09b      	sub	sp, #108	@ 0x6c
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	da05      	bge.n	800a5fa <_vsniprintf_r+0x1a>
 800a5ee:	238b      	movs	r3, #139	@ 0x8b
 800a5f0:	6003      	str	r3, [r0, #0]
 800a5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f6:	b01b      	add	sp, #108	@ 0x6c
 800a5f8:	bd30      	pop	{r4, r5, pc}
 800a5fa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	9319      	str	r3, [sp, #100]	@ 0x64
 800a608:	bf14      	ite	ne
 800a60a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a60e:	4623      	moveq	r3, r4
 800a610:	9302      	str	r3, [sp, #8]
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a618:	9100      	str	r1, [sp, #0]
 800a61a:	9104      	str	r1, [sp, #16]
 800a61c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a620:	4669      	mov	r1, sp
 800a622:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a624:	f000 f9ae 	bl	800a984 <_svfiprintf_r>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	bfbc      	itt	lt
 800a62c:	238b      	movlt	r3, #139	@ 0x8b
 800a62e:	602b      	strlt	r3, [r5, #0]
 800a630:	2c00      	cmp	r4, #0
 800a632:	d0e0      	beq.n	800a5f6 <_vsniprintf_r+0x16>
 800a634:	9b00      	ldr	r3, [sp, #0]
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	e7dc      	b.n	800a5f6 <_vsniprintf_r+0x16>

0800a63c <vsniprintf>:
 800a63c:	b507      	push	{r0, r1, r2, lr}
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4613      	mov	r3, r2
 800a642:	460a      	mov	r2, r1
 800a644:	4601      	mov	r1, r0
 800a646:	4803      	ldr	r0, [pc, #12]	@ (800a654 <vsniprintf+0x18>)
 800a648:	6800      	ldr	r0, [r0, #0]
 800a64a:	f7ff ffc9 	bl	800a5e0 <_vsniprintf_r>
 800a64e:	b003      	add	sp, #12
 800a650:	f85d fb04 	ldr.w	pc, [sp], #4
 800a654:	2400101c 	.word	0x2400101c

0800a658 <memset>:
 800a658:	4402      	add	r2, r0
 800a65a:	4603      	mov	r3, r0
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d100      	bne.n	800a662 <memset+0xa>
 800a660:	4770      	bx	lr
 800a662:	f803 1b01 	strb.w	r1, [r3], #1
 800a666:	e7f9      	b.n	800a65c <memset+0x4>

0800a668 <__errno>:
 800a668:	4b01      	ldr	r3, [pc, #4]	@ (800a670 <__errno+0x8>)
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	2400101c 	.word	0x2400101c

0800a674 <__libc_init_array>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4d0d      	ldr	r5, [pc, #52]	@ (800a6ac <__libc_init_array+0x38>)
 800a678:	4c0d      	ldr	r4, [pc, #52]	@ (800a6b0 <__libc_init_array+0x3c>)
 800a67a:	1b64      	subs	r4, r4, r5
 800a67c:	10a4      	asrs	r4, r4, #2
 800a67e:	2600      	movs	r6, #0
 800a680:	42a6      	cmp	r6, r4
 800a682:	d109      	bne.n	800a698 <__libc_init_array+0x24>
 800a684:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b4 <__libc_init_array+0x40>)
 800a686:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b8 <__libc_init_array+0x44>)
 800a688:	f000 fc64 	bl	800af54 <_init>
 800a68c:	1b64      	subs	r4, r4, r5
 800a68e:	10a4      	asrs	r4, r4, #2
 800a690:	2600      	movs	r6, #0
 800a692:	42a6      	cmp	r6, r4
 800a694:	d105      	bne.n	800a6a2 <__libc_init_array+0x2e>
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69c:	4798      	blx	r3
 800a69e:	3601      	adds	r6, #1
 800a6a0:	e7ee      	b.n	800a680 <__libc_init_array+0xc>
 800a6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a6:	4798      	blx	r3
 800a6a8:	3601      	adds	r6, #1
 800a6aa:	e7f2      	b.n	800a692 <__libc_init_array+0x1e>
 800a6ac:	0800b0c8 	.word	0x0800b0c8
 800a6b0:	0800b0c8 	.word	0x0800b0c8
 800a6b4:	0800b0c8 	.word	0x0800b0c8
 800a6b8:	0800b0cc 	.word	0x0800b0cc

0800a6bc <__retarget_lock_acquire_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_release_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <memcpy>:
 800a6c0:	440a      	add	r2, r1
 800a6c2:	4291      	cmp	r1, r2
 800a6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c8:	d100      	bne.n	800a6cc <memcpy+0xc>
 800a6ca:	4770      	bx	lr
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d6:	4291      	cmp	r1, r2
 800a6d8:	d1f9      	bne.n	800a6ce <memcpy+0xe>
 800a6da:	bd10      	pop	{r4, pc}

0800a6dc <_free_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4605      	mov	r5, r0
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	d041      	beq.n	800a768 <_free_r+0x8c>
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f0c      	subs	r4, r1, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfb8      	it	lt
 800a6ee:	18e4      	addlt	r4, r4, r3
 800a6f0:	f000 f8e0 	bl	800a8b4 <__malloc_lock>
 800a6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a76c <_free_r+0x90>)
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	b933      	cbnz	r3, 800a708 <_free_r+0x2c>
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	6014      	str	r4, [r2, #0]
 800a6fe:	4628      	mov	r0, r5
 800a700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a704:	f000 b8dc 	b.w	800a8c0 <__malloc_unlock>
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d908      	bls.n	800a71e <_free_r+0x42>
 800a70c:	6820      	ldr	r0, [r4, #0]
 800a70e:	1821      	adds	r1, r4, r0
 800a710:	428b      	cmp	r3, r1
 800a712:	bf01      	itttt	eq
 800a714:	6819      	ldreq	r1, [r3, #0]
 800a716:	685b      	ldreq	r3, [r3, #4]
 800a718:	1809      	addeq	r1, r1, r0
 800a71a:	6021      	streq	r1, [r4, #0]
 800a71c:	e7ed      	b.n	800a6fa <_free_r+0x1e>
 800a71e:	461a      	mov	r2, r3
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	b10b      	cbz	r3, 800a728 <_free_r+0x4c>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d9fa      	bls.n	800a71e <_free_r+0x42>
 800a728:	6811      	ldr	r1, [r2, #0]
 800a72a:	1850      	adds	r0, r2, r1
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d10b      	bne.n	800a748 <_free_r+0x6c>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	4401      	add	r1, r0
 800a734:	1850      	adds	r0, r2, r1
 800a736:	4283      	cmp	r3, r0
 800a738:	6011      	str	r1, [r2, #0]
 800a73a:	d1e0      	bne.n	800a6fe <_free_r+0x22>
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	6053      	str	r3, [r2, #4]
 800a742:	4408      	add	r0, r1
 800a744:	6010      	str	r0, [r2, #0]
 800a746:	e7da      	b.n	800a6fe <_free_r+0x22>
 800a748:	d902      	bls.n	800a750 <_free_r+0x74>
 800a74a:	230c      	movs	r3, #12
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	e7d6      	b.n	800a6fe <_free_r+0x22>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	1821      	adds	r1, r4, r0
 800a754:	428b      	cmp	r3, r1
 800a756:	bf04      	itt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	6063      	str	r3, [r4, #4]
 800a75e:	bf04      	itt	eq
 800a760:	1809      	addeq	r1, r1, r0
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	6054      	str	r4, [r2, #4]
 800a766:	e7ca      	b.n	800a6fe <_free_r+0x22>
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	24001410 	.word	0x24001410

0800a770 <sbrk_aligned>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4e0f      	ldr	r6, [pc, #60]	@ (800a7b0 <sbrk_aligned+0x40>)
 800a774:	460c      	mov	r4, r1
 800a776:	6831      	ldr	r1, [r6, #0]
 800a778:	4605      	mov	r5, r0
 800a77a:	b911      	cbnz	r1, 800a782 <sbrk_aligned+0x12>
 800a77c:	f000 fba4 	bl	800aec8 <_sbrk_r>
 800a780:	6030      	str	r0, [r6, #0]
 800a782:	4621      	mov	r1, r4
 800a784:	4628      	mov	r0, r5
 800a786:	f000 fb9f 	bl	800aec8 <_sbrk_r>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d103      	bne.n	800a796 <sbrk_aligned+0x26>
 800a78e:	f04f 34ff 	mov.w	r4, #4294967295
 800a792:	4620      	mov	r0, r4
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	1cc4      	adds	r4, r0, #3
 800a798:	f024 0403 	bic.w	r4, r4, #3
 800a79c:	42a0      	cmp	r0, r4
 800a79e:	d0f8      	beq.n	800a792 <sbrk_aligned+0x22>
 800a7a0:	1a21      	subs	r1, r4, r0
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 fb90 	bl	800aec8 <_sbrk_r>
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d1f2      	bne.n	800a792 <sbrk_aligned+0x22>
 800a7ac:	e7ef      	b.n	800a78e <sbrk_aligned+0x1e>
 800a7ae:	bf00      	nop
 800a7b0:	2400140c 	.word	0x2400140c

0800a7b4 <_malloc_r>:
 800a7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b8:	1ccd      	adds	r5, r1, #3
 800a7ba:	f025 0503 	bic.w	r5, r5, #3
 800a7be:	3508      	adds	r5, #8
 800a7c0:	2d0c      	cmp	r5, #12
 800a7c2:	bf38      	it	cc
 800a7c4:	250c      	movcc	r5, #12
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	db01      	blt.n	800a7d0 <_malloc_r+0x1c>
 800a7cc:	42a9      	cmp	r1, r5
 800a7ce:	d904      	bls.n	800a7da <_malloc_r+0x26>
 800a7d0:	230c      	movs	r3, #12
 800a7d2:	6033      	str	r3, [r6, #0]
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8b0 <_malloc_r+0xfc>
 800a7de:	f000 f869 	bl	800a8b4 <__malloc_lock>
 800a7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7e6:	461c      	mov	r4, r3
 800a7e8:	bb44      	cbnz	r4, 800a83c <_malloc_r+0x88>
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7ff ffbf 	bl	800a770 <sbrk_aligned>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	d158      	bne.n	800a8aa <_malloc_r+0xf6>
 800a7f8:	f8d8 4000 	ldr.w	r4, [r8]
 800a7fc:	4627      	mov	r7, r4
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	d143      	bne.n	800a88a <_malloc_r+0xd6>
 800a802:	2c00      	cmp	r4, #0
 800a804:	d04b      	beq.n	800a89e <_malloc_r+0xea>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	4639      	mov	r1, r7
 800a80a:	4630      	mov	r0, r6
 800a80c:	eb04 0903 	add.w	r9, r4, r3
 800a810:	f000 fb5a 	bl	800aec8 <_sbrk_r>
 800a814:	4581      	cmp	r9, r0
 800a816:	d142      	bne.n	800a89e <_malloc_r+0xea>
 800a818:	6821      	ldr	r1, [r4, #0]
 800a81a:	1a6d      	subs	r5, r5, r1
 800a81c:	4629      	mov	r1, r5
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ffa6 	bl	800a770 <sbrk_aligned>
 800a824:	3001      	adds	r0, #1
 800a826:	d03a      	beq.n	800a89e <_malloc_r+0xea>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	442b      	add	r3, r5
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	f8d8 3000 	ldr.w	r3, [r8]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	bb62      	cbnz	r2, 800a890 <_malloc_r+0xdc>
 800a836:	f8c8 7000 	str.w	r7, [r8]
 800a83a:	e00f      	b.n	800a85c <_malloc_r+0xa8>
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	1b52      	subs	r2, r2, r5
 800a840:	d420      	bmi.n	800a884 <_malloc_r+0xd0>
 800a842:	2a0b      	cmp	r2, #11
 800a844:	d917      	bls.n	800a876 <_malloc_r+0xc2>
 800a846:	1961      	adds	r1, r4, r5
 800a848:	42a3      	cmp	r3, r4
 800a84a:	6025      	str	r5, [r4, #0]
 800a84c:	bf18      	it	ne
 800a84e:	6059      	strne	r1, [r3, #4]
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	bf08      	it	eq
 800a854:	f8c8 1000 	streq.w	r1, [r8]
 800a858:	5162      	str	r2, [r4, r5]
 800a85a:	604b      	str	r3, [r1, #4]
 800a85c:	4630      	mov	r0, r6
 800a85e:	f000 f82f 	bl	800a8c0 <__malloc_unlock>
 800a862:	f104 000b 	add.w	r0, r4, #11
 800a866:	1d23      	adds	r3, r4, #4
 800a868:	f020 0007 	bic.w	r0, r0, #7
 800a86c:	1ac2      	subs	r2, r0, r3
 800a86e:	bf1c      	itt	ne
 800a870:	1a1b      	subne	r3, r3, r0
 800a872:	50a3      	strne	r3, [r4, r2]
 800a874:	e7af      	b.n	800a7d6 <_malloc_r+0x22>
 800a876:	6862      	ldr	r2, [r4, #4]
 800a878:	42a3      	cmp	r3, r4
 800a87a:	bf0c      	ite	eq
 800a87c:	f8c8 2000 	streq.w	r2, [r8]
 800a880:	605a      	strne	r2, [r3, #4]
 800a882:	e7eb      	b.n	800a85c <_malloc_r+0xa8>
 800a884:	4623      	mov	r3, r4
 800a886:	6864      	ldr	r4, [r4, #4]
 800a888:	e7ae      	b.n	800a7e8 <_malloc_r+0x34>
 800a88a:	463c      	mov	r4, r7
 800a88c:	687f      	ldr	r7, [r7, #4]
 800a88e:	e7b6      	b.n	800a7fe <_malloc_r+0x4a>
 800a890:	461a      	mov	r2, r3
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	42a3      	cmp	r3, r4
 800a896:	d1fb      	bne.n	800a890 <_malloc_r+0xdc>
 800a898:	2300      	movs	r3, #0
 800a89a:	6053      	str	r3, [r2, #4]
 800a89c:	e7de      	b.n	800a85c <_malloc_r+0xa8>
 800a89e:	230c      	movs	r3, #12
 800a8a0:	6033      	str	r3, [r6, #0]
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f000 f80c 	bl	800a8c0 <__malloc_unlock>
 800a8a8:	e794      	b.n	800a7d4 <_malloc_r+0x20>
 800a8aa:	6005      	str	r5, [r0, #0]
 800a8ac:	e7d6      	b.n	800a85c <_malloc_r+0xa8>
 800a8ae:	bf00      	nop
 800a8b0:	24001410 	.word	0x24001410

0800a8b4 <__malloc_lock>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__malloc_lock+0x8>)
 800a8b6:	f7ff bf01 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	24001408 	.word	0x24001408

0800a8c0 <__malloc_unlock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__malloc_unlock+0x8>)
 800a8c2:	f7ff befc 	b.w	800a6be <__retarget_lock_release_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	24001408 	.word	0x24001408

0800a8cc <__ssputs_r>:
 800a8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d0:	688e      	ldr	r6, [r1, #8]
 800a8d2:	461f      	mov	r7, r3
 800a8d4:	42be      	cmp	r6, r7
 800a8d6:	680b      	ldr	r3, [r1, #0]
 800a8d8:	4682      	mov	sl, r0
 800a8da:	460c      	mov	r4, r1
 800a8dc:	4690      	mov	r8, r2
 800a8de:	d82d      	bhi.n	800a93c <__ssputs_r+0x70>
 800a8e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8e8:	d026      	beq.n	800a938 <__ssputs_r+0x6c>
 800a8ea:	6965      	ldr	r5, [r4, #20]
 800a8ec:	6909      	ldr	r1, [r1, #16]
 800a8ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8f2:	eba3 0901 	sub.w	r9, r3, r1
 800a8f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8fa:	1c7b      	adds	r3, r7, #1
 800a8fc:	444b      	add	r3, r9
 800a8fe:	106d      	asrs	r5, r5, #1
 800a900:	429d      	cmp	r5, r3
 800a902:	bf38      	it	cc
 800a904:	461d      	movcc	r5, r3
 800a906:	0553      	lsls	r3, r2, #21
 800a908:	d527      	bpl.n	800a95a <__ssputs_r+0x8e>
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7ff ff52 	bl	800a7b4 <_malloc_r>
 800a910:	4606      	mov	r6, r0
 800a912:	b360      	cbz	r0, 800a96e <__ssputs_r+0xa2>
 800a914:	6921      	ldr	r1, [r4, #16]
 800a916:	464a      	mov	r2, r9
 800a918:	f7ff fed2 	bl	800a6c0 <memcpy>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	6126      	str	r6, [r4, #16]
 800a92a:	6165      	str	r5, [r4, #20]
 800a92c:	444e      	add	r6, r9
 800a92e:	eba5 0509 	sub.w	r5, r5, r9
 800a932:	6026      	str	r6, [r4, #0]
 800a934:	60a5      	str	r5, [r4, #8]
 800a936:	463e      	mov	r6, r7
 800a938:	42be      	cmp	r6, r7
 800a93a:	d900      	bls.n	800a93e <__ssputs_r+0x72>
 800a93c:	463e      	mov	r6, r7
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	4632      	mov	r2, r6
 800a942:	4641      	mov	r1, r8
 800a944:	f000 faa6 	bl	800ae94 <memmove>
 800a948:	68a3      	ldr	r3, [r4, #8]
 800a94a:	1b9b      	subs	r3, r3, r6
 800a94c:	60a3      	str	r3, [r4, #8]
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	4433      	add	r3, r6
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	2000      	movs	r0, #0
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	462a      	mov	r2, r5
 800a95c:	f000 fac4 	bl	800aee8 <_realloc_r>
 800a960:	4606      	mov	r6, r0
 800a962:	2800      	cmp	r0, #0
 800a964:	d1e0      	bne.n	800a928 <__ssputs_r+0x5c>
 800a966:	6921      	ldr	r1, [r4, #16]
 800a968:	4650      	mov	r0, sl
 800a96a:	f7ff feb7 	bl	800a6dc <_free_r>
 800a96e:	230c      	movs	r3, #12
 800a970:	f8ca 3000 	str.w	r3, [sl]
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e7e9      	b.n	800a956 <__ssputs_r+0x8a>
	...

0800a984 <_svfiprintf_r>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	4698      	mov	r8, r3
 800a98a:	898b      	ldrh	r3, [r1, #12]
 800a98c:	061b      	lsls	r3, r3, #24
 800a98e:	b09d      	sub	sp, #116	@ 0x74
 800a990:	4607      	mov	r7, r0
 800a992:	460d      	mov	r5, r1
 800a994:	4614      	mov	r4, r2
 800a996:	d510      	bpl.n	800a9ba <_svfiprintf_r+0x36>
 800a998:	690b      	ldr	r3, [r1, #16]
 800a99a:	b973      	cbnz	r3, 800a9ba <_svfiprintf_r+0x36>
 800a99c:	2140      	movs	r1, #64	@ 0x40
 800a99e:	f7ff ff09 	bl	800a7b4 <_malloc_r>
 800a9a2:	6028      	str	r0, [r5, #0]
 800a9a4:	6128      	str	r0, [r5, #16]
 800a9a6:	b930      	cbnz	r0, 800a9b6 <_svfiprintf_r+0x32>
 800a9a8:	230c      	movs	r3, #12
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	b01d      	add	sp, #116	@ 0x74
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	2340      	movs	r3, #64	@ 0x40
 800a9b8:	616b      	str	r3, [r5, #20]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9be:	2320      	movs	r3, #32
 800a9c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c8:	2330      	movs	r3, #48	@ 0x30
 800a9ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab68 <_svfiprintf_r+0x1e4>
 800a9ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9d2:	f04f 0901 	mov.w	r9, #1
 800a9d6:	4623      	mov	r3, r4
 800a9d8:	469a      	mov	sl, r3
 800a9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9de:	b10a      	cbz	r2, 800a9e4 <_svfiprintf_r+0x60>
 800a9e0:	2a25      	cmp	r2, #37	@ 0x25
 800a9e2:	d1f9      	bne.n	800a9d8 <_svfiprintf_r+0x54>
 800a9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e8:	d00b      	beq.n	800aa02 <_svfiprintf_r+0x7e>
 800a9ea:	465b      	mov	r3, fp
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f7ff ff6b 	bl	800a8cc <__ssputs_r>
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f000 80a7 	beq.w	800ab4a <_svfiprintf_r+0x1c6>
 800a9fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9fe:	445a      	add	r2, fp
 800aa00:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa02:	f89a 3000 	ldrb.w	r3, [sl]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 809f 	beq.w	800ab4a <_svfiprintf_r+0x1c6>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa16:	f10a 0a01 	add.w	sl, sl, #1
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	9307      	str	r3, [sp, #28]
 800aa1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa22:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa24:	4654      	mov	r4, sl
 800aa26:	2205      	movs	r2, #5
 800aa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2c:	484e      	ldr	r0, [pc, #312]	@ (800ab68 <_svfiprintf_r+0x1e4>)
 800aa2e:	f7f5 fc5f 	bl	80002f0 <memchr>
 800aa32:	9a04      	ldr	r2, [sp, #16]
 800aa34:	b9d8      	cbnz	r0, 800aa6e <_svfiprintf_r+0xea>
 800aa36:	06d0      	lsls	r0, r2, #27
 800aa38:	bf44      	itt	mi
 800aa3a:	2320      	movmi	r3, #32
 800aa3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa40:	0711      	lsls	r1, r2, #28
 800aa42:	bf44      	itt	mi
 800aa44:	232b      	movmi	r3, #43	@ 0x2b
 800aa46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa4a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa50:	d015      	beq.n	800aa7e <_svfiprintf_r+0xfa>
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	4654      	mov	r4, sl
 800aa56:	2000      	movs	r0, #0
 800aa58:	f04f 0c0a 	mov.w	ip, #10
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa62:	3b30      	subs	r3, #48	@ 0x30
 800aa64:	2b09      	cmp	r3, #9
 800aa66:	d94b      	bls.n	800ab00 <_svfiprintf_r+0x17c>
 800aa68:	b1b0      	cbz	r0, 800aa98 <_svfiprintf_r+0x114>
 800aa6a:	9207      	str	r2, [sp, #28]
 800aa6c:	e014      	b.n	800aa98 <_svfiprintf_r+0x114>
 800aa6e:	eba0 0308 	sub.w	r3, r0, r8
 800aa72:	fa09 f303 	lsl.w	r3, r9, r3
 800aa76:	4313      	orrs	r3, r2
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	46a2      	mov	sl, r4
 800aa7c:	e7d2      	b.n	800aa24 <_svfiprintf_r+0xa0>
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	1d19      	adds	r1, r3, #4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	9103      	str	r1, [sp, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfbb      	ittet	lt
 800aa8a:	425b      	neglt	r3, r3
 800aa8c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa90:	9307      	strge	r3, [sp, #28]
 800aa92:	9307      	strlt	r3, [sp, #28]
 800aa94:	bfb8      	it	lt
 800aa96:	9204      	strlt	r2, [sp, #16]
 800aa98:	7823      	ldrb	r3, [r4, #0]
 800aa9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa9c:	d10a      	bne.n	800aab4 <_svfiprintf_r+0x130>
 800aa9e:	7863      	ldrb	r3, [r4, #1]
 800aaa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa2:	d132      	bne.n	800ab0a <_svfiprintf_r+0x186>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9203      	str	r2, [sp, #12]
 800aaac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aab0:	3402      	adds	r4, #2
 800aab2:	9305      	str	r3, [sp, #20]
 800aab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab78 <_svfiprintf_r+0x1f4>
 800aab8:	7821      	ldrb	r1, [r4, #0]
 800aaba:	2203      	movs	r2, #3
 800aabc:	4650      	mov	r0, sl
 800aabe:	f7f5 fc17 	bl	80002f0 <memchr>
 800aac2:	b138      	cbz	r0, 800aad4 <_svfiprintf_r+0x150>
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	eba0 000a 	sub.w	r0, r0, sl
 800aaca:	2240      	movs	r2, #64	@ 0x40
 800aacc:	4082      	lsls	r2, r0
 800aace:	4313      	orrs	r3, r2
 800aad0:	3401      	adds	r4, #1
 800aad2:	9304      	str	r3, [sp, #16]
 800aad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad8:	4824      	ldr	r0, [pc, #144]	@ (800ab6c <_svfiprintf_r+0x1e8>)
 800aada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aade:	2206      	movs	r2, #6
 800aae0:	f7f5 fc06 	bl	80002f0 <memchr>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d036      	beq.n	800ab56 <_svfiprintf_r+0x1d2>
 800aae8:	4b21      	ldr	r3, [pc, #132]	@ (800ab70 <_svfiprintf_r+0x1ec>)
 800aaea:	bb1b      	cbnz	r3, 800ab34 <_svfiprintf_r+0x1b0>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	3307      	adds	r3, #7
 800aaf0:	f023 0307 	bic.w	r3, r3, #7
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aafa:	4433      	add	r3, r6
 800aafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aafe:	e76a      	b.n	800a9d6 <_svfiprintf_r+0x52>
 800ab00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab04:	460c      	mov	r4, r1
 800ab06:	2001      	movs	r0, #1
 800ab08:	e7a8      	b.n	800aa5c <_svfiprintf_r+0xd8>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	3401      	adds	r4, #1
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	4619      	mov	r1, r3
 800ab12:	f04f 0c0a 	mov.w	ip, #10
 800ab16:	4620      	mov	r0, r4
 800ab18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1c:	3a30      	subs	r2, #48	@ 0x30
 800ab1e:	2a09      	cmp	r2, #9
 800ab20:	d903      	bls.n	800ab2a <_svfiprintf_r+0x1a6>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0c6      	beq.n	800aab4 <_svfiprintf_r+0x130>
 800ab26:	9105      	str	r1, [sp, #20]
 800ab28:	e7c4      	b.n	800aab4 <_svfiprintf_r+0x130>
 800ab2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab2e:	4604      	mov	r4, r0
 800ab30:	2301      	movs	r3, #1
 800ab32:	e7f0      	b.n	800ab16 <_svfiprintf_r+0x192>
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	462a      	mov	r2, r5
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab74 <_svfiprintf_r+0x1f0>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f3af 8000 	nop.w
 800ab44:	1c42      	adds	r2, r0, #1
 800ab46:	4606      	mov	r6, r0
 800ab48:	d1d6      	bne.n	800aaf8 <_svfiprintf_r+0x174>
 800ab4a:	89ab      	ldrh	r3, [r5, #12]
 800ab4c:	065b      	lsls	r3, r3, #25
 800ab4e:	f53f af2d 	bmi.w	800a9ac <_svfiprintf_r+0x28>
 800ab52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab54:	e72c      	b.n	800a9b0 <_svfiprintf_r+0x2c>
 800ab56:	ab03      	add	r3, sp, #12
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	4b05      	ldr	r3, [pc, #20]	@ (800ab74 <_svfiprintf_r+0x1f0>)
 800ab5e:	a904      	add	r1, sp, #16
 800ab60:	4638      	mov	r0, r7
 800ab62:	f000 f879 	bl	800ac58 <_printf_i>
 800ab66:	e7ed      	b.n	800ab44 <_svfiprintf_r+0x1c0>
 800ab68:	0800b08c 	.word	0x0800b08c
 800ab6c:	0800b096 	.word	0x0800b096
 800ab70:	00000000 	.word	0x00000000
 800ab74:	0800a8cd 	.word	0x0800a8cd
 800ab78:	0800b092 	.word	0x0800b092

0800ab7c <_printf_common>:
 800ab7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab80:	4616      	mov	r6, r2
 800ab82:	4698      	mov	r8, r3
 800ab84:	688a      	ldr	r2, [r1, #8]
 800ab86:	690b      	ldr	r3, [r1, #16]
 800ab88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	bfb8      	it	lt
 800ab90:	4613      	movlt	r3, r2
 800ab92:	6033      	str	r3, [r6, #0]
 800ab94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab98:	4607      	mov	r7, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b10a      	cbz	r2, 800aba2 <_printf_common+0x26>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	0699      	lsls	r1, r3, #26
 800aba6:	bf42      	ittt	mi
 800aba8:	6833      	ldrmi	r3, [r6, #0]
 800abaa:	3302      	addmi	r3, #2
 800abac:	6033      	strmi	r3, [r6, #0]
 800abae:	6825      	ldr	r5, [r4, #0]
 800abb0:	f015 0506 	ands.w	r5, r5, #6
 800abb4:	d106      	bne.n	800abc4 <_printf_common+0x48>
 800abb6:	f104 0a19 	add.w	sl, r4, #25
 800abba:	68e3      	ldr	r3, [r4, #12]
 800abbc:	6832      	ldr	r2, [r6, #0]
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc26      	bgt.n	800ac12 <_printf_common+0x96>
 800abc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	3b00      	subs	r3, #0
 800abcc:	bf18      	it	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	0692      	lsls	r2, r2, #26
 800abd2:	d42b      	bmi.n	800ac2c <_printf_common+0xb0>
 800abd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abd8:	4641      	mov	r1, r8
 800abda:	4638      	mov	r0, r7
 800abdc:	47c8      	blx	r9
 800abde:	3001      	adds	r0, #1
 800abe0:	d01e      	beq.n	800ac20 <_printf_common+0xa4>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	6922      	ldr	r2, [r4, #16]
 800abe6:	f003 0306 	and.w	r3, r3, #6
 800abea:	2b04      	cmp	r3, #4
 800abec:	bf02      	ittt	eq
 800abee:	68e5      	ldreq	r5, [r4, #12]
 800abf0:	6833      	ldreq	r3, [r6, #0]
 800abf2:	1aed      	subeq	r5, r5, r3
 800abf4:	68a3      	ldr	r3, [r4, #8]
 800abf6:	bf0c      	ite	eq
 800abf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abfc:	2500      	movne	r5, #0
 800abfe:	4293      	cmp	r3, r2
 800ac00:	bfc4      	itt	gt
 800ac02:	1a9b      	subgt	r3, r3, r2
 800ac04:	18ed      	addgt	r5, r5, r3
 800ac06:	2600      	movs	r6, #0
 800ac08:	341a      	adds	r4, #26
 800ac0a:	42b5      	cmp	r5, r6
 800ac0c:	d11a      	bne.n	800ac44 <_printf_common+0xc8>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e008      	b.n	800ac24 <_printf_common+0xa8>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4652      	mov	r2, sl
 800ac16:	4641      	mov	r1, r8
 800ac18:	4638      	mov	r0, r7
 800ac1a:	47c8      	blx	r9
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d103      	bne.n	800ac28 <_printf_common+0xac>
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	3501      	adds	r5, #1
 800ac2a:	e7c6      	b.n	800abba <_printf_common+0x3e>
 800ac2c:	18e1      	adds	r1, r4, r3
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	2030      	movs	r0, #48	@ 0x30
 800ac32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac36:	4422      	add	r2, r4
 800ac38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac40:	3302      	adds	r3, #2
 800ac42:	e7c7      	b.n	800abd4 <_printf_common+0x58>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4622      	mov	r2, r4
 800ac48:	4641      	mov	r1, r8
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	47c8      	blx	r9
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d0e6      	beq.n	800ac20 <_printf_common+0xa4>
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7d9      	b.n	800ac0a <_printf_common+0x8e>
	...

0800ac58 <_printf_i>:
 800ac58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	7e0f      	ldrb	r7, [r1, #24]
 800ac5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac60:	2f78      	cmp	r7, #120	@ 0x78
 800ac62:	4691      	mov	r9, r2
 800ac64:	4680      	mov	r8, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac6e:	d807      	bhi.n	800ac80 <_printf_i+0x28>
 800ac70:	2f62      	cmp	r7, #98	@ 0x62
 800ac72:	d80a      	bhi.n	800ac8a <_printf_i+0x32>
 800ac74:	2f00      	cmp	r7, #0
 800ac76:	f000 80d1 	beq.w	800ae1c <_printf_i+0x1c4>
 800ac7a:	2f58      	cmp	r7, #88	@ 0x58
 800ac7c:	f000 80b8 	beq.w	800adf0 <_printf_i+0x198>
 800ac80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac88:	e03a      	b.n	800ad00 <_printf_i+0xa8>
 800ac8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac8e:	2b15      	cmp	r3, #21
 800ac90:	d8f6      	bhi.n	800ac80 <_printf_i+0x28>
 800ac92:	a101      	add	r1, pc, #4	@ (adr r1, 800ac98 <_printf_i+0x40>)
 800ac94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac98:	0800acf1 	.word	0x0800acf1
 800ac9c:	0800ad05 	.word	0x0800ad05
 800aca0:	0800ac81 	.word	0x0800ac81
 800aca4:	0800ac81 	.word	0x0800ac81
 800aca8:	0800ac81 	.word	0x0800ac81
 800acac:	0800ac81 	.word	0x0800ac81
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac81 	.word	0x0800ac81
 800acb8:	0800ac81 	.word	0x0800ac81
 800acbc:	0800ac81 	.word	0x0800ac81
 800acc0:	0800ac81 	.word	0x0800ac81
 800acc4:	0800ae03 	.word	0x0800ae03
 800acc8:	0800ad2f 	.word	0x0800ad2f
 800accc:	0800adbd 	.word	0x0800adbd
 800acd0:	0800ac81 	.word	0x0800ac81
 800acd4:	0800ac81 	.word	0x0800ac81
 800acd8:	0800ae25 	.word	0x0800ae25
 800acdc:	0800ac81 	.word	0x0800ac81
 800ace0:	0800ad2f 	.word	0x0800ad2f
 800ace4:	0800ac81 	.word	0x0800ac81
 800ace8:	0800ac81 	.word	0x0800ac81
 800acec:	0800adc5 	.word	0x0800adc5
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	1d1a      	adds	r2, r3, #4
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6032      	str	r2, [r6, #0]
 800acf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad00:	2301      	movs	r3, #1
 800ad02:	e09c      	b.n	800ae3e <_printf_i+0x1e6>
 800ad04:	6833      	ldr	r3, [r6, #0]
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	6031      	str	r1, [r6, #0]
 800ad0c:	0606      	lsls	r6, r0, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0xbc>
 800ad10:	681d      	ldr	r5, [r3, #0]
 800ad12:	e003      	b.n	800ad1c <_printf_i+0xc4>
 800ad14:	0645      	lsls	r5, r0, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0xb8>
 800ad18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	da03      	bge.n	800ad28 <_printf_i+0xd0>
 800ad20:	232d      	movs	r3, #45	@ 0x2d
 800ad22:	426d      	negs	r5, r5
 800ad24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad28:	4858      	ldr	r0, [pc, #352]	@ (800ae8c <_printf_i+0x234>)
 800ad2a:	230a      	movs	r3, #10
 800ad2c:	e011      	b.n	800ad52 <_printf_i+0xfa>
 800ad2e:	6821      	ldr	r1, [r4, #0]
 800ad30:	6833      	ldr	r3, [r6, #0]
 800ad32:	0608      	lsls	r0, r1, #24
 800ad34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad38:	d402      	bmi.n	800ad40 <_printf_i+0xe8>
 800ad3a:	0649      	lsls	r1, r1, #25
 800ad3c:	bf48      	it	mi
 800ad3e:	b2ad      	uxthmi	r5, r5
 800ad40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad42:	4852      	ldr	r0, [pc, #328]	@ (800ae8c <_printf_i+0x234>)
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	bf14      	ite	ne
 800ad48:	230a      	movne	r3, #10
 800ad4a:	2308      	moveq	r3, #8
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad52:	6866      	ldr	r6, [r4, #4]
 800ad54:	60a6      	str	r6, [r4, #8]
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	db05      	blt.n	800ad66 <_printf_i+0x10e>
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	432e      	orrs	r6, r5
 800ad5e:	f021 0104 	bic.w	r1, r1, #4
 800ad62:	6021      	str	r1, [r4, #0]
 800ad64:	d04b      	beq.n	800adfe <_printf_i+0x1a6>
 800ad66:	4616      	mov	r6, r2
 800ad68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad70:	5dc7      	ldrb	r7, [r0, r7]
 800ad72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad76:	462f      	mov	r7, r5
 800ad78:	42bb      	cmp	r3, r7
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	d9f4      	bls.n	800ad68 <_printf_i+0x110>
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d10b      	bne.n	800ad9a <_printf_i+0x142>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	07df      	lsls	r7, r3, #31
 800ad86:	d508      	bpl.n	800ad9a <_printf_i+0x142>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6861      	ldr	r1, [r4, #4]
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	bfde      	ittt	le
 800ad90:	2330      	movle	r3, #48	@ 0x30
 800ad92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad9a:	1b92      	subs	r2, r2, r6
 800ad9c:	6122      	str	r2, [r4, #16]
 800ad9e:	f8cd a000 	str.w	sl, [sp]
 800ada2:	464b      	mov	r3, r9
 800ada4:	aa03      	add	r2, sp, #12
 800ada6:	4621      	mov	r1, r4
 800ada8:	4640      	mov	r0, r8
 800adaa:	f7ff fee7 	bl	800ab7c <_printf_common>
 800adae:	3001      	adds	r0, #1
 800adb0:	d14a      	bne.n	800ae48 <_printf_i+0x1f0>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	b004      	add	sp, #16
 800adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	f043 0320 	orr.w	r3, r3, #32
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	4832      	ldr	r0, [pc, #200]	@ (800ae90 <_printf_i+0x238>)
 800adc6:	2778      	movs	r7, #120	@ 0x78
 800adc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	6831      	ldr	r1, [r6, #0]
 800add0:	061f      	lsls	r7, r3, #24
 800add2:	f851 5b04 	ldr.w	r5, [r1], #4
 800add6:	d402      	bmi.n	800adde <_printf_i+0x186>
 800add8:	065f      	lsls	r7, r3, #25
 800adda:	bf48      	it	mi
 800addc:	b2ad      	uxthmi	r5, r5
 800adde:	6031      	str	r1, [r6, #0]
 800ade0:	07d9      	lsls	r1, r3, #31
 800ade2:	bf44      	itt	mi
 800ade4:	f043 0320 	orrmi.w	r3, r3, #32
 800ade8:	6023      	strmi	r3, [r4, #0]
 800adea:	b11d      	cbz	r5, 800adf4 <_printf_i+0x19c>
 800adec:	2310      	movs	r3, #16
 800adee:	e7ad      	b.n	800ad4c <_printf_i+0xf4>
 800adf0:	4826      	ldr	r0, [pc, #152]	@ (800ae8c <_printf_i+0x234>)
 800adf2:	e7e9      	b.n	800adc8 <_printf_i+0x170>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	f023 0320 	bic.w	r3, r3, #32
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	e7f6      	b.n	800adec <_printf_i+0x194>
 800adfe:	4616      	mov	r6, r2
 800ae00:	e7bd      	b.n	800ad7e <_printf_i+0x126>
 800ae02:	6833      	ldr	r3, [r6, #0]
 800ae04:	6825      	ldr	r5, [r4, #0]
 800ae06:	6961      	ldr	r1, [r4, #20]
 800ae08:	1d18      	adds	r0, r3, #4
 800ae0a:	6030      	str	r0, [r6, #0]
 800ae0c:	062e      	lsls	r6, r5, #24
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	d501      	bpl.n	800ae16 <_printf_i+0x1be>
 800ae12:	6019      	str	r1, [r3, #0]
 800ae14:	e002      	b.n	800ae1c <_printf_i+0x1c4>
 800ae16:	0668      	lsls	r0, r5, #25
 800ae18:	d5fb      	bpl.n	800ae12 <_printf_i+0x1ba>
 800ae1a:	8019      	strh	r1, [r3, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	4616      	mov	r6, r2
 800ae22:	e7bc      	b.n	800ad9e <_printf_i+0x146>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	6032      	str	r2, [r6, #0]
 800ae2a:	681e      	ldr	r6, [r3, #0]
 800ae2c:	6862      	ldr	r2, [r4, #4]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	f7f5 fa5d 	bl	80002f0 <memchr>
 800ae36:	b108      	cbz	r0, 800ae3c <_printf_i+0x1e4>
 800ae38:	1b80      	subs	r0, r0, r6
 800ae3a:	6060      	str	r0, [r4, #4]
 800ae3c:	6863      	ldr	r3, [r4, #4]
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	2300      	movs	r3, #0
 800ae42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae46:	e7aa      	b.n	800ad9e <_printf_i+0x146>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4640      	mov	r0, r8
 800ae50:	47d0      	blx	sl
 800ae52:	3001      	adds	r0, #1
 800ae54:	d0ad      	beq.n	800adb2 <_printf_i+0x15a>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	079b      	lsls	r3, r3, #30
 800ae5a:	d413      	bmi.n	800ae84 <_printf_i+0x22c>
 800ae5c:	68e0      	ldr	r0, [r4, #12]
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	4298      	cmp	r0, r3
 800ae62:	bfb8      	it	lt
 800ae64:	4618      	movlt	r0, r3
 800ae66:	e7a6      	b.n	800adb6 <_printf_i+0x15e>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	4640      	mov	r0, r8
 800ae70:	47d0      	blx	sl
 800ae72:	3001      	adds	r0, #1
 800ae74:	d09d      	beq.n	800adb2 <_printf_i+0x15a>
 800ae76:	3501      	adds	r5, #1
 800ae78:	68e3      	ldr	r3, [r4, #12]
 800ae7a:	9903      	ldr	r1, [sp, #12]
 800ae7c:	1a5b      	subs	r3, r3, r1
 800ae7e:	42ab      	cmp	r3, r5
 800ae80:	dcf2      	bgt.n	800ae68 <_printf_i+0x210>
 800ae82:	e7eb      	b.n	800ae5c <_printf_i+0x204>
 800ae84:	2500      	movs	r5, #0
 800ae86:	f104 0619 	add.w	r6, r4, #25
 800ae8a:	e7f5      	b.n	800ae78 <_printf_i+0x220>
 800ae8c:	0800b09d 	.word	0x0800b09d
 800ae90:	0800b0ae 	.word	0x0800b0ae

0800ae94 <memmove>:
 800ae94:	4288      	cmp	r0, r1
 800ae96:	b510      	push	{r4, lr}
 800ae98:	eb01 0402 	add.w	r4, r1, r2
 800ae9c:	d902      	bls.n	800aea4 <memmove+0x10>
 800ae9e:	4284      	cmp	r4, r0
 800aea0:	4623      	mov	r3, r4
 800aea2:	d807      	bhi.n	800aeb4 <memmove+0x20>
 800aea4:	1e43      	subs	r3, r0, #1
 800aea6:	42a1      	cmp	r1, r4
 800aea8:	d008      	beq.n	800aebc <memmove+0x28>
 800aeaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeb2:	e7f8      	b.n	800aea6 <memmove+0x12>
 800aeb4:	4402      	add	r2, r0
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	428a      	cmp	r2, r1
 800aeba:	d100      	bne.n	800aebe <memmove+0x2a>
 800aebc:	bd10      	pop	{r4, pc}
 800aebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec6:	e7f7      	b.n	800aeb8 <memmove+0x24>

0800aec8 <_sbrk_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	@ (800aee4 <_sbrk_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7f6 fdf2 	bl	8001abc <_sbrk>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_sbrk_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_sbrk_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	24001404 	.word	0x24001404

0800aee8 <_realloc_r>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	4607      	mov	r7, r0
 800aeee:	4614      	mov	r4, r2
 800aef0:	460d      	mov	r5, r1
 800aef2:	b921      	cbnz	r1, 800aefe <_realloc_r+0x16>
 800aef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	4611      	mov	r1, r2
 800aefa:	f7ff bc5b 	b.w	800a7b4 <_malloc_r>
 800aefe:	b92a      	cbnz	r2, 800af0c <_realloc_r+0x24>
 800af00:	f7ff fbec 	bl	800a6dc <_free_r>
 800af04:	4625      	mov	r5, r4
 800af06:	4628      	mov	r0, r5
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	f000 f81a 	bl	800af44 <_malloc_usable_size_r>
 800af10:	4284      	cmp	r4, r0
 800af12:	4606      	mov	r6, r0
 800af14:	d802      	bhi.n	800af1c <_realloc_r+0x34>
 800af16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af1a:	d8f4      	bhi.n	800af06 <_realloc_r+0x1e>
 800af1c:	4621      	mov	r1, r4
 800af1e:	4638      	mov	r0, r7
 800af20:	f7ff fc48 	bl	800a7b4 <_malloc_r>
 800af24:	4680      	mov	r8, r0
 800af26:	b908      	cbnz	r0, 800af2c <_realloc_r+0x44>
 800af28:	4645      	mov	r5, r8
 800af2a:	e7ec      	b.n	800af06 <_realloc_r+0x1e>
 800af2c:	42b4      	cmp	r4, r6
 800af2e:	4622      	mov	r2, r4
 800af30:	4629      	mov	r1, r5
 800af32:	bf28      	it	cs
 800af34:	4632      	movcs	r2, r6
 800af36:	f7ff fbc3 	bl	800a6c0 <memcpy>
 800af3a:	4629      	mov	r1, r5
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7ff fbcd 	bl	800a6dc <_free_r>
 800af42:	e7f1      	b.n	800af28 <_realloc_r+0x40>

0800af44 <_malloc_usable_size_r>:
 800af44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af48:	1f18      	subs	r0, r3, #4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfbc      	itt	lt
 800af4e:	580b      	ldrlt	r3, [r1, r0]
 800af50:	18c0      	addlt	r0, r0, r3
 800af52:	4770      	bx	lr

0800af54 <_init>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr

0800af60 <_fini>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr
