
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008cec  08008cec  00009cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e48  08008e48  00009e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008e4c  08008e4c  00009e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001074  24000000  08008e50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  24001074  08009ec4  0000b074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001414  08009ec4  0000b414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018559  00000000  00000000  0000b0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b88  00000000  00000000  000235fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00026188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ca3  00000000  00000000  000271f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003976c  00000000  00000000  00027e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015a00  00000000  00000000  000615ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169c11  00000000  00000000  00076fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e0c10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a9c  00000000  00000000  001e0c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001e56f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001074 	.word	0x24001074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008cd4 	.word	0x08008cd4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001078 	.word	0x24001078
 80002dc:	08008cd4 	.word	0x08008cd4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART1_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f001 fe28 	bl	8002356 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 fe8c 	bl	8001428 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010d8 	.word	0x240010d8
 800071c:	24000008 	.word	0x24000008
 8000720:	240010fc 	.word	0x240010fc

08000724 <Flash_Init>:


//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f001 fa4f 	bl	8001bd4 <HAL_Delay>
	if(BUF){
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d012      	beq.n	8000762 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <Flash_Init+0x98>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f9f5 	bl	8000b30 <Read_Status_Register>
 8000746:	4603      	mov	r3, r0
 8000748:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <Flash_Init+0x98>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	7bba      	ldrb	r2, [r7, #14]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa18 	bl	8000b90 <Write_Status_Register>
 8000760:	e011      	b.n	8000786 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <Flash_Init+0x98>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f9e2 	bl	8000b30 <Read_Status_Register>
 800076c:	4603      	mov	r3, r0
 800076e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f023 0308 	bic.w	r3, r3, #8
 8000776:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <Flash_Init+0x98>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fa05 	bl	8000b90 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <Flash_Init+0x9c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f9d0 	bl	8000b30 <Read_Status_Register>
 8000790:	4603      	mov	r3, r0
 8000792:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007a2:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <Flash_Init+0x9c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7b7a      	ldrb	r2, [r7, #13]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f9ef 	bl	8000b90 <Write_Status_Register>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	24001011 	.word	0x24001011
 80007c0:	24001010 	.word	0x24001010

080007c4 <Write_Data>:
	SR_3 = Read_Status_Register(SR_3_Addr);
	delay_ns(DELAY_NS);
}

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <Write_Data+0x74>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <Write_Data+0x22>
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <Write_Data+0x78>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <Write_Data+0x22>
		Block_Erase(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fad3 	bl	8000d8c <Block_Erase>
	}
	uint16_t count=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 80007ea:	e01c      	b.n	8000826 <Write_Data+0x62>
		*Buffer_p=*data;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <Write_Data+0x7c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <Write_Data+0x7c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <Write_Data+0x7c>)
 80007fe:	6013      	str	r3, [r2, #0]
		data++;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <Write_Data+0x78>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <Write_Data+0x78>)
 8000810:	801a      	strh	r2, [r3, #0]
		count++;
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <Write_Data+0x78>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000820:	d301      	bcc.n	8000826 <Write_Data+0x62>
			Write_to_page();
 8000822:	f000 f80f 	bl	8000844 <Write_to_page>
	while(count<lenght){
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3de      	bcc.n	80007ec <Write_Data+0x28>
		}
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2400109e 	.word	0x2400109e
 800083c:	240010a8 	.word	0x240010a8
 8000840:	24000000 	.word	0x24000000

08000844 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <Write_to_page+0x74>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10f      	bne.n	8000870 <Write_to_page+0x2c>
		Buffer_flip=1;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <Write_to_page+0x74>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
		//memset(write_data_1, 0xFF, sizeof(write_data_1));
		Buffer_p=&write_data_1[0];
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <Write_to_page+0x78>)
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <Write_to_page+0x7c>)
 800085a:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <Write_to_page+0x80>)
 800085e:	2200      	movs	r2, #0
 8000860:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 8000862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000866:	4918      	ldr	r1, [pc, #96]	@ (80008c8 <Write_to_page+0x84>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f9ed 	bl	8000c48 <Write_Data_Buffer>
 800086e:	e00e      	b.n	800088e <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <Write_to_page+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		//memset(write_data_0, 0xFF, sizeof(write_data_0));
		Buffer_p=&write_data_0[0];
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <Write_to_page+0x78>)
 8000878:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <Write_to_page+0x84>)
 800087a:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <Write_to_page+0x80>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 8000882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000886:	490e      	ldr	r1, [pc, #56]	@ (80008c0 <Write_to_page+0x7c>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f9dd 	bl	8000c48 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <Write_to_page+0x88>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fa14 	bl	8000cc0 <Write_Data_Flash>
	Page_Index++;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <Write_to_page+0x88>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <Write_to_page+0x88>)
 80008a2:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <Write_to_page+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <Write_to_page+0x88>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f80e 	bl	80008d0 <Automatic_Block_Managment>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	240010ac 	.word	0x240010ac
 80008bc:	24000000 	.word	0x24000000
 80008c0:	24000810 	.word	0x24000810
 80008c4:	240010a8 	.word	0x240010a8
 80008c8:	24000010 	.word	0x24000010
 80008cc:	2400109e 	.word	0x2400109e

080008d0 <Automatic_Block_Managment>:
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	099b      	lsrs	r3, r3, #6
 80008de:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d007      	beq.n	80008fa <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa4d 	bl	8000d8c <Block_Erase>
		Block_Mem=Block;
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 80008f8:	e002      	b.n	8000900 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 80008fa:	4a03      	ldr	r2, [pc, #12]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	8013      	strh	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	240010aa 	.word	0x240010aa

0800090c <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000912:	4823      	ldr	r0, [pc, #140]	@ (80009a0 <Chip_Erase+0x94>)
 8000914:	f000 fa98 	bl	8000e48 <USART1_Printf>
	HAL_UART_Receive(&huart3, &UART_buffer,1, HAL_MAX_DELAY);
 8000918:	1cf9      	adds	r1, r7, #3
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	2201      	movs	r2, #1
 8000920:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <Chip_Erase+0x98>)
 8000922:	f006 fbc8 	bl	80070b6 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b59      	cmp	r3, #89	@ 0x59
 800092a:	d132      	bne.n	8000992 <Chip_Erase+0x86>
		USART1_Printf("Sletter minne...\r\n");
 800092c:	481e      	ldr	r0, [pc, #120]	@ (80009a8 <Chip_Erase+0x9c>)
 800092e:	f000 fa8b 	bl	8000e48 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	e009      	b.n	800094c <Chip_Erase+0x40>
			Block_Erase(i*64);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	b29b      	uxth	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fa23 	bl	8000d8c <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000952:	ddf1      	ble.n	8000938 <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <Chip_Erase+0xa0>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <Chip_Erase+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <Chip_Erase+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <Chip_Erase+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <Chip_Erase+0xb0>)
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <Chip_Erase+0xb4>)
 8000970:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 8000972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000976:	21ff      	movs	r1, #255	@ 0xff
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <Chip_Erase+0xb4>)
 800097a:	f007 fd2d 	bl	80083d8 <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 800097e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000982:	21ff      	movs	r1, #255	@ 0xff
 8000984:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <Chip_Erase+0xb8>)
 8000986:	f007 fd27 	bl	80083d8 <memset>
		USART1_Printf("Ferdig\r\n");
 800098a:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <Chip_Erase+0xbc>)
 800098c:	f000 fa5c 	bl	8000e48 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 8000990:	e002      	b.n	8000998 <Chip_Erase+0x8c>
		USART1_Printf("Sletter IKKE minne\r\n");
 8000992:	480e      	ldr	r0, [pc, #56]	@ (80009cc <Chip_Erase+0xc0>)
 8000994:	f000 fa58 	bl	8000e48 <USART1_Printf>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08008cec 	.word	0x08008cec
 80009a4:	24001224 	.word	0x24001224
 80009a8:	08008d20 	.word	0x08008d20
 80009ac:	240010a8 	.word	0x240010a8
 80009b0:	2400109e 	.word	0x2400109e
 80009b4:	240010aa 	.word	0x240010aa
 80009b8:	240010ac 	.word	0x240010ac
 80009bc:	24000000 	.word	0x24000000
 80009c0:	24000010 	.word	0x24000010
 80009c4:	24000810 	.word	0x24000810
 80009c8:	08008d34 	.word	0x08008d34
 80009cc:	08008d40 	.word	0x08008d40

080009d0 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 80009d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d4:	b089      	sub	sp, #36	@ 0x24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	466b      	mov	r3, sp
 80009de:	461e      	mov	r6, r3
	Select_Page_Read(0);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f9a1 	bl	8000d28 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 80009e6:	88f9      	ldrh	r1, [r7, #6]
 80009e8:	460b      	mov	r3, r1
 80009ea:	3b01      	subs	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	b28b      	uxth	r3, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	4698      	mov	r8, r3
 80009f4:	4691      	mov	r9, r2
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a0a:	b28b      	uxth	r3, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	461c      	mov	r4, r3
 8000a10:	4615      	mov	r5, r2
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	00eb      	lsls	r3, r5, #3
 8000a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a20:	00e2      	lsls	r2, r4, #3
 8000a22:	460b      	mov	r3, r1
 8000a24:	3307      	adds	r3, #7
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a2e:	466b      	mov	r3, sp
 8000a30:	3300      	adds	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4825      	ldr	r0, [pc, #148]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a52:	f002 fd7f 	bl	8003554 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000a56:	2364      	movs	r3, #100	@ 0x64
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4922      	ldr	r1, [pc, #136]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a5c:	4823      	ldr	r0, [pc, #140]	@ (8000aec <Read_Data_Cont+0x11c>)
 8000a5e:	f005 fd03 	bl	8006468 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	68f9      	ldr	r1, [r7, #12]
 8000a6a:	4820      	ldr	r0, [pc, #128]	@ (8000aec <Read_Data_Cont+0x11c>)
 8000a6c:	f005 feea 	bl	8006844 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3303      	adds	r3, #3
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	330b      	adds	r3, #11
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a88:	e018      	b.n	8000abc <Read_Data_Cont+0xec>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000a8a:	8bf9      	ldrh	r1, [r7, #30]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4817      	ldr	r0, [pc, #92]	@ (8000af0 <Read_Data_Cont+0x120>)
 8000a92:	f000 f9d9 	bl	8000e48 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a96:	88fa      	ldrh	r2, [r7, #6]
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	68f9      	ldr	r1, [r7, #12]
 8000a9e:	4813      	ldr	r0, [pc, #76]	@ (8000aec <Read_Data_Cont+0x11c>)
 8000aa0:	f005 fed0 	bl	8006844 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3303      	adds	r3, #3
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	330b      	adds	r3, #11
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2bff      	cmp	r3, #255	@ 0xff
 8000ac2:	d103      	bne.n	8000acc <Read_Data_Cont+0xfc>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	7bdb      	ldrb	r3, [r3, #15]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0de      	beq.n	8000a8a <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000ad2:	f002 fd3f 	bl	8003554 <HAL_GPIO_WritePin>
 8000ad6:	46b5      	mov	sp, r6
}
 8000ad8:	bf00      	nop
 8000ada:	3724      	adds	r7, #36	@ 0x24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24001090 	.word	0x24001090
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	2400119c 	.word	0x2400119c
 8000af0:	08008d58 	.word	0x08008d58

08000af4 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	csLOW();
 8000af8:	2200      	movs	r2, #0
 8000afa:	2110      	movs	r1, #16
 8000afc:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <Write_Enable+0x30>)
 8000afe:	f002 fd29 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000b02:	2364      	movs	r3, #100	@ 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <Write_Enable+0x34>)
 8000b08:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <Write_Enable+0x38>)
 8000b0a:	f005 fcad 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2110      	movs	r1, #16
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <Write_Enable+0x30>)
 8000b14:	f002 fd1e 	bl	8003554 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000b18:	2064      	movs	r0, #100	@ 0x64
 8000b1a:	f000 f96b 	bl	8000df4 <delay_ns>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	58020000 	.word	0x58020000
 8000b28:	24000006 	.word	0x24000006
 8000b2c:	2400119c 	.word	0x2400119c

08000b30 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <Read_Status_Register+0x50>)
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000b40:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <Read_Status_Register+0x50>)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <Read_Status_Register+0x54>)
 8000b4c:	f002 fd02 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	2202      	movs	r2, #2
 8000b54:	490a      	ldr	r1, [pc, #40]	@ (8000b80 <Read_Status_Register+0x50>)
 8000b56:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <Read_Status_Register+0x58>)
 8000b58:	f005 fc86 	bl	8006468 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	2201      	movs	r2, #1
 8000b60:	490a      	ldr	r1, [pc, #40]	@ (8000b8c <Read_Status_Register+0x5c>)
 8000b62:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <Read_Status_Register+0x58>)
 8000b64:	f005 fe6e 	bl	8006844 <HAL_SPI_Receive>
	csHIGH();
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <Read_Status_Register+0x54>)
 8000b6e:	f002 fcf1 	bl	8003554 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <Read_Status_Register+0x5c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24001090 	.word	0x24001090
 8000b84:	58020000 	.word	0x58020000
 8000b88:	2400119c 	.word	0x2400119c
 8000b8c:	24001098 	.word	0x24001098

08000b90 <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <Write_Status_Register+0x4c>)
 8000ba2:	221f      	movs	r2, #31
 8000ba4:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <Write_Status_Register+0x4c>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000bac:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <Write_Status_Register+0x4c>)
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	480a      	ldr	r0, [pc, #40]	@ (8000be0 <Write_Status_Register+0x50>)
 8000bb8:	f002 fccc 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	4906      	ldr	r1, [pc, #24]	@ (8000bdc <Write_Status_Register+0x4c>)
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <Write_Status_Register+0x54>)
 8000bc4:	f005 fc50 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <Write_Status_Register+0x50>)
 8000bce:	f002 fcc1 	bl	8003554 <HAL_GPIO_WritePin>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24001090 	.word	0x24001090
 8000be0:	58020000 	.word	0x58020000
 8000be4:	2400119c 	.word	0x2400119c

08000be8 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <Read_ID+0x54>)
 8000c00:	f002 fca8 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000c04:	2364      	movs	r3, #100	@ 0x64
 8000c06:	2202      	movs	r2, #2
 8000c08:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <Read_ID+0x58>)
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <Read_ID+0x5c>)
 8000c0c:	f005 fc2c 	bl	8006468 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000c10:	1d39      	adds	r1, r7, #4
 8000c12:	2364      	movs	r3, #100	@ 0x64
 8000c14:	2203      	movs	r2, #3
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <Read_ID+0x5c>)
 8000c18:	f005 fe14 	bl	8006844 <HAL_SPI_Receive>
	csHIGH();
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <Read_ID+0x54>)
 8000c22:	f002 fc97 	bl	8003554 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000c26:	793b      	ldrb	r3, [r7, #4]
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	79b9      	ldrb	r1, [r7, #6]
 8000c30:	430b      	orrs	r3, r1
 8000c32:	4313      	orrs	r3, r2
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58020000 	.word	0x58020000
 8000c40:	24000004 	.word	0x24000004
 8000c44:	2400119c 	.word	0x2400119c

08000c48 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	80fb      	strh	r3, [r7, #6]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000c58:	f7ff ff4c 	bl	8000af4 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <Write_Data_Buffer+0x6c>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <Write_Data_Buffer+0x6c>)
 8000c6c:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <Write_Data_Buffer+0x6c>)
 8000c74:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c76:	2200      	movs	r2, #0
 8000c78:	2110      	movs	r1, #16
 8000c7a:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <Write_Data_Buffer+0x70>)
 8000c7c:	f002 fc6a 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000c80:	2364      	movs	r3, #100	@ 0x64
 8000c82:	2203      	movs	r2, #3
 8000c84:	490b      	ldr	r1, [pc, #44]	@ (8000cb4 <Write_Data_Buffer+0x6c>)
 8000c86:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <Write_Data_Buffer+0x74>)
 8000c88:	f005 fbee 	bl	8006468 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&Flash, Data, len);
//	SPI_DMA=1;
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000c8c:	88ba      	ldrh	r2, [r7, #4]
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <Write_Data_Buffer+0x74>)
 8000c96:	f005 fbe7 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <Write_Data_Buffer+0x70>)
 8000ca0:	f002 fc58 	bl	8003554 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ca4:	2064      	movs	r0, #100	@ 0x64
 8000ca6:	f000 f8a5 	bl	8000df4 <delay_ns>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24001090 	.word	0x24001090
 8000cb8:	58020000 	.word	0x58020000
 8000cbc:	2400119c 	.word	0x2400119c

08000cc0 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000cca:	f7ff ff13 	bl	8000af4 <Write_Enable>
	Tx_Buffer[0]=OP_Program_Ex;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <Write_Data_Flash+0x5c>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <Write_Data_Flash+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <Write_Data_Flash+0x5c>)
 8000ce4:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <Write_Data_Flash+0x5c>)
 8000cec:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <Write_Data_Flash+0x60>)
 8000cf4:	f002 fc2e 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000cf8:	2364      	movs	r3, #100	@ 0x64
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <Write_Data_Flash+0x5c>)
 8000cfe:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <Write_Data_Flash+0x64>)
 8000d00:	f005 fbb2 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000d04:	2201      	movs	r2, #1
 8000d06:	2110      	movs	r1, #16
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <Write_Data_Flash+0x60>)
 8000d0a:	f002 fc23 	bl	8003554 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d0e:	f000 f8c1 	bl	8000e94 <W25N_WaitForReady>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	24001090 	.word	0x24001090
 8000d20:	58020000 	.word	0x58020000
 8000d24:	2400119c 	.word	0x2400119c

08000d28 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <Select_Page_Read+0x58>)
 8000d34:	2213      	movs	r2, #19
 8000d36:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <Select_Page_Read+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <Select_Page_Read+0x58>)
 8000d48:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <Select_Page_Read+0x58>)
 8000d50:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d52:	2200      	movs	r2, #0
 8000d54:	2110      	movs	r1, #16
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <Select_Page_Read+0x5c>)
 8000d58:	f002 fbfc 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000d5c:	2364      	movs	r3, #100	@ 0x64
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4907      	ldr	r1, [pc, #28]	@ (8000d80 <Select_Page_Read+0x58>)
 8000d62:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <Select_Page_Read+0x60>)
 8000d64:	f005 fb80 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <Select_Page_Read+0x5c>)
 8000d6e:	f002 fbf1 	bl	8003554 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d72:	f000 f88f 	bl	8000e94 <W25N_WaitForReady>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24001090 	.word	0x24001090
 8000d84:	58020000 	.word	0x58020000
 8000d88:	2400119c 	.word	0x2400119c

08000d8c <Block_Erase>:
	csHIGH();
}

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000d96:	f7ff fead 	bl	8000af4 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <Block_Erase+0x5c>)
 8000d9c:	22d8      	movs	r2, #216	@ 0xd8
 8000d9e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <Block_Erase+0x5c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <Block_Erase+0x5c>)
 8000db0:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <Block_Erase+0x5c>)
 8000db8:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <Block_Erase+0x60>)
 8000dc0:	f002 fbc8 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <Block_Erase+0x5c>)
 8000dca:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <Block_Erase+0x64>)
 8000dcc:	f005 fb4c 	bl	8006468 <HAL_SPI_Transmit>
	csHIGH();
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <Block_Erase+0x60>)
 8000dd6:	f002 fbbd 	bl	8003554 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000dda:	f000 f85b 	bl	8000e94 <W25N_WaitForReady>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24001090 	.word	0x24001090
 8000dec:	58020000 	.word	0x58020000
 8000df0:	2400119c 	.word	0x2400119c

08000df4 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <delay_ns+0x48>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0a5b      	lsrs	r3, r3, #9
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <delay_ns+0x4c>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	09db      	lsrs	r3, r3, #7
 8000e0a:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <delay_ns+0x50>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000e1c:	bf00      	nop
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <delay_ns+0x50>)
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f8      	bhi.n	8000e1e <delay_ns+0x2a>
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	24001014 	.word	0x24001014
 8000e40:	00044b83 	.word	0x00044b83
 8000e44:	e0001000 	.word	0xe0001000

08000e48 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e48:	b40f      	push	{r0, r1, r2, r3}
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b0a2      	sub	sp, #136	@ 0x88
 8000e4e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e54:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e56:	f107 0008 	add.w	r0, r7, #8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	f007 faab 	bl	80083bc <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fa38 	bl	80002e0 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <USART1_Printf+0x48>)
 8000e7e:	f006 f88c 	bl	8006f9a <HAL_UART_Transmit>
}
 8000e82:	bf00      	nop
 8000e84:	3788      	adds	r7, #136	@ 0x88
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e8c:	b004      	add	sp, #16
 8000e8e:	4770      	bx	lr
 8000e90:	24001224 	.word	0x24001224

08000e94 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000e98:	2064      	movs	r0, #100	@ 0x64
 8000e9a:	f7ff ffab 	bl	8000df4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000e9e:	e002      	b.n	8000ea6 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000ea0:	2064      	movs	r0, #100	@ 0x64
 8000ea2:	f7ff ffa7 	bl	8000df4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <W25N_WaitForReady+0x2c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe40 	bl	8000b30 <Read_Status_Register>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f2      	bne.n	8000ea0 <W25N_WaitForReady+0xc>
    }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24001012 	.word	0x24001012

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ec8:	f000 fa82 	bl	80013d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fdf0 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f85e 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 fa04 	bl	80012e0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000ed8:	f000 f8d6 	bl	8001088 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000edc:	f000 f95e 	bl	800119c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ee0:	f000 f9b2 	bl	8001248 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <main+0xb4>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <main+0xb4>)
 8000eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eee:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <main+0xb8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <main+0xb8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fc11 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8000f02:	f7ff fe71 	bl	8000be8 <Read_ID>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <main+0xbc>)
 8000f0a:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  //Read_Register();
	  HAL_UART_Receive(&huart3, &command,1, 100);
 8000f0c:	2364      	movs	r3, #100	@ 0x64
 8000f0e:	2201      	movs	r2, #1
 8000f10:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <main+0xc0>)
 8000f12:	481d      	ldr	r0, [pc, #116]	@ (8000f88 <main+0xc4>)
 8000f14:	f006 f8cf 	bl	80070b6 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <main+0xc0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b31      	cmp	r3, #49	@ 0x31
 8000f1e:	d105      	bne.n	8000f2c <main+0x68>
		  Read_Data_Cont(16);
 8000f20:	2010      	movs	r0, #16
 8000f22:	f7ff fd55 	bl	80009d0 <Read_Data_Cont>
		  command = 0;
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <main+0xc0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <main+0xc0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b32      	cmp	r3, #50	@ 0x32
 8000f32:	d109      	bne.n	8000f48 <main+0x84>
		  Start_Flight_Recording=1;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <main+0xc8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8000f3a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f3e:	f7ff fbbd 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <main+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <main+0xc0>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b33      	cmp	r3, #51	@ 0x33
 8000f4e:	d109      	bne.n	8000f64 <main+0xa0>
		  Start_Flight_Recording=0;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <main+0xc8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8000f56:	f240 1001 	movw	r0, #257	@ 0x101
 8000f5a:	f7ff fbaf 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <main+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <main+0xc0>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b34      	cmp	r3, #52	@ 0x34
 8000f6a:	d1cf      	bne.n	8000f0c <main+0x48>
		  Chip_Erase();
 8000f6c:	f7ff fcce 	bl	800090c <Chip_Erase>
		  command=0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <main+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart3, &command,1, 100);
 8000f76:	e7c9      	b.n	8000f0c <main+0x48>
 8000f78:	e000edf0 	.word	0xe000edf0
 8000f7c:	e0001000 	.word	0xe0001000
 8000f80:	240012b8 	.word	0x240012b8
 8000f84:	240012bc 	.word	0x240012bc
 8000f88:	24001224 	.word	0x24001224
 8000f8c:	2400109d 	.word	0x2400109d

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	224c      	movs	r2, #76	@ 0x4c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 fa1a 	bl	80083d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 fa14 	bl	80083d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f002 fae9 	bl	8003588 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a30      	ldr	r2, [pc, #192]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe8:	bf00      	nop
 8000fea:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ff6:	d1f8      	bne.n	8000fea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2340      	movs	r3, #64	@ 0x40
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001010:	233c      	movs	r3, #60	@ 0x3c
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001018:	230a      	movs	r3, #10
 800101a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001020:	230c      	movs	r3, #12
 8001022:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001024:	2300      	movs	r3, #0
 8001026:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fae3 	bl	80035fc <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800103c:	f000 f9f4 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	233f      	movs	r3, #63	@ 0x3f
 8001042:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2303      	movs	r3, #3
 8001046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800104c:	2308      	movs	r3, #8
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001050:	2340      	movs	r3, #64	@ 0x40
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001054:	2340      	movs	r3, #64	@ 0x40
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800105e:	2340      	movs	r3, #64	@ 0x40
 8001060:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f002 ff22 	bl	8003eb0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001072:	f000 f9d9 	bl	8001428 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3770      	adds	r7, #112	@ 0x70
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	58024800 	.word	0x58024800
 8001084:	58000400 	.word	0x58000400

08001088 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <MX_FDCAN1_Init+0x108>)
 8001090:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001094:	4a3e      	ldr	r2, [pc, #248]	@ (8001190 <MX_FDCAN1_Init+0x108>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_FDCAN1_Init+0x108>)
 80010a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010ac:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001198 <MX_FDCAN1_Init+0x110>)
 80010b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010b2:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010b8:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010be:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010c4:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010ca:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80010d0:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80010d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010d8:	2202      	movs	r2, #2
 80010da:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010de:	2205      	movs	r2, #5
 80010e0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80010ee:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010f0:	2203      	movs	r2, #3
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001108:	2200      	movs	r2, #0
 800110a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800110e:	2200      	movs	r2, #0
 8001110:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001114:	2240      	movs	r2, #64	@ 0x40
 8001116:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800111a:	2204      	movs	r2, #4
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001120:	2200      	movs	r2, #0
 8001122:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001126:	2204      	movs	r2, #4
 8001128:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800112c:	2200      	movs	r2, #0
 800112e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001132:	2204      	movs	r2, #4
 8001134:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800113e:	2200      	movs	r2, #0
 8001140:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001144:	2202      	movs	r2, #2
 8001146:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001150:	2204      	movs	r2, #4
 8001152:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001156:	f000 fef5 	bl	8001f44 <HAL_FDCAN_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001160:	f000 f962 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001164:	480b      	ldr	r0, [pc, #44]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 8001166:	f001 f8cb 	bl	8002300 <HAL_FDCAN_Start>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001170:	f000 f95a 	bl	8001428 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	4806      	ldr	r0, [pc, #24]	@ (8001194 <MX_FDCAN1_Init+0x10c>)
 800117a:	f001 fab3 	bl	80026e4 <HAL_FDCAN_ActivateNotification>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001184:	f000 f950 	bl	8001428 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024400 	.word	0x58024400
 8001194:	240010fc 	.word	0x240010fc
 8001198:	4000a000 	.word	0x4000a000

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011a2:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <MX_SPI1_Init+0xa8>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_SPI1_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_SPI1_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_SPI1_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_SPI1_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <MX_SPI1_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_SPI1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_SPI1_Init+0xa4>)
 800122e:	f004 fff7 	bl	8006220 <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001238:	f000 f8f6 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2400119c 	.word	0x2400119c
 8001244:	40013000 	.word	0x40013000

08001248 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <MX_USART3_UART_Init+0x94>)
 8001250:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001290:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 8001292:	f005 fe32 	bl	8006efa <HAL_UART_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f8c4 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 80012a4:	f006 ff91 	bl	80081ca <HAL_UARTEx_SetTxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012ae:	f000 f8bb 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 80012b6:	f006 ffc6 	bl	8008246 <HAL_UARTEx_SetRxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f8b2 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_USART3_UART_Init+0x90>)
 80012c6:	f006 ff47 	bl	8008158 <HAL_UARTEx_DisableFifoMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f8aa 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	24001224 	.word	0x24001224
 80012dc:	40004800 	.word	0x40004800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a31      	ldr	r2, [pc, #196]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a22      	ldr	r2, [pc, #136]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 800133a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_GPIO_Init+0xe4>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2110      	movs	r1, #16
 8001372:	4815      	ldr	r0, [pc, #84]	@ (80013c8 <MX_GPIO_Init+0xe8>)
 8001374:	f002 f8ee 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2110      	movs	r1, #16
 800137c:	4813      	ldr	r0, [pc, #76]	@ (80013cc <MX_GPIO_Init+0xec>)
 800137e:	f002 f8e9 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001382:	2310      	movs	r3, #16
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480b      	ldr	r0, [pc, #44]	@ (80013c8 <MX_GPIO_Init+0xe8>)
 800139a:	f001 ff2b 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_GPIO_Init+0xec>)
 80013b6:	f001 ff1d 	bl	80031f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58020000 	.word	0x58020000
 80013cc:	58021800 	.word	0x58021800

080013d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013e2:	f000 fd37 	bl	8001e54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013f2:	231f      	movs	r3, #31
 80013f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013f6:	2387      	movs	r3, #135	@ 0x87
 80013f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013fe:	2300      	movs	r3, #0
 8001400:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001402:	2301      	movs	r3, #1
 8001404:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001406:	2301      	movs	r3, #1
 8001408:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd55 	bl	8001ec4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800141a:	2004      	movs	r0, #4
 800141c:	f000 fd32 	bl	8001e84 <HAL_MPU_Enable>

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <Error_Handler+0x10>)
 800142e:	f000 ff67 	bl	8002300 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	240010fc 	.word	0x240010fc

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_MspInit+0x30>)
 8001444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001448:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x30>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x30>)
 8001454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	58024400 	.word	0x58024400

08001470 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	@ 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22c0      	movs	r2, #192	@ 0xc0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f006 ffa1 	bl	80083d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a33      	ldr	r2, [pc, #204]	@ (8001568 <HAL_FDCAN_MspInit+0xf8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d15f      	bne.n	8001560 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80014b0:	230a      	movs	r3, #10
 80014b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80014b8:	2314      	movs	r3, #20
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014c0:	23c0      	movs	r3, #192	@ 0xc0
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014c4:	2320      	movs	r3, #32
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80014cc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f875 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80014e4:	f7ff ffa0 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 80014ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014ee:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 80014fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_FDCAN_MspInit+0xfc>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001524:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800153e:	2309      	movs	r3, #9
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001548:	4619      	mov	r1, r3
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <HAL_FDCAN_MspInit+0x100>)
 800154c:	f001 fe52 	bl	80031f4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2013      	movs	r0, #19
 8001556:	f000 fc48 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800155a:	2013      	movs	r0, #19
 800155c:	f000 fc5f 	bl	8001e1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	37e8      	adds	r7, #232	@ 0xe8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	4000a000 	.word	0x4000a000
 800156c:	58024400 	.word	0x58024400
 8001570:	58020400 	.word	0x58020400

08001574 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ba      	sub	sp, #232	@ 0xe8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	22c0      	movs	r2, #192	@ 0xc0
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f006 ff1f 	bl	80083d8 <memset>
  if(hspi->Instance==SPI1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a26      	ldr	r2, [pc, #152]	@ (8001638 <HAL_SPI_MspInit+0xc4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d144      	bne.n	800162e <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 f805 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80015c4:	f7ff ff30 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ce:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ec:	4a13      	ldr	r2, [pc, #76]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_SPI_MspInit+0xc8>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001604:	23e0      	movs	r3, #224	@ 0xe0
 8001606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161c:	2305      	movs	r3, #5
 800161e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <HAL_SPI_MspInit+0xcc>)
 800162a:	f001 fde3 	bl	80031f4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	37e8      	adds	r7, #232	@ 0xe8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40013000 	.word	0x40013000
 800163c:	58024400 	.word	0x58024400
 8001640:	58020000 	.word	0x58020000

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0ba      	sub	sp, #232	@ 0xe8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	22c0      	movs	r2, #192	@ 0xc0
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f006 feb7 	bl	80083d8 <memset>
  if(huart->Instance==USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a27      	ldr	r2, [pc, #156]	@ (800170c <HAL_UART_MspInit+0xc8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d146      	bne.n	8001702 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001674:	f04f 0202 	mov.w	r2, #2
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f002 ff9c 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001696:	f7ff fec7 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 800169c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 80016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <HAL_UART_MspInit+0xcc>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f0:	2307      	movs	r3, #7
 80016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <HAL_UART_MspInit+0xd0>)
 80016fe:	f001 fd79 	bl	80031f4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	37e8      	adds	r7, #232	@ 0xe8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004800 	.word	0x40004800
 8001710:	58024400 	.word	0x58024400
 8001714:	58020c00 	.word	0x58020c00

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	GPIOG->ODR^=GPIO_PIN_0;
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <SysTick_Handler+0x34>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <SysTick_Handler+0x34>)
 8001776:	f083 0301 	eor.w	r3, r3, #1
 800177a:	6153      	str	r3, [r2, #20]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 fa0a 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <SysTick_Handler+0x38>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <SysTick_Handler+0x28>
	  CLK_SIM++;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <SysTick_Handler+0x3c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a06      	ldr	r2, [pc, #24]	@ (80017a8 <SysTick_Handler+0x3c>)
 8001790:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	e002      	b.n	800179a <SysTick_Handler+0x2e>
	  CLK_SIM=0;
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <SysTick_Handler+0x3c>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	58021800 	.word	0x58021800
 80017a4:	2400109d 	.word	0x2400109d
 80017a8:	240012c0 	.word	0x240012c0

080017ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <FDCAN1_IT0_IRQHandler+0x10>)
 80017b2:	f001 f811 	bl	80027d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	240010fc 	.word	0x240010fc

080017c0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80017ca:	e03f      	b.n	800184c <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xFF;
 80017cc:	23ff      	movs	r3, #255	@ 0xff
 80017ce:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	3301      	adds	r3, #1
 80017da:	b292      	uxth	r2, r2
 80017dc:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 80017de:	4b23      	ldr	r3, [pc, #140]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 80017f0:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017f2:	78db      	ldrb	r3, [r3, #3]
 80017f4:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017fe:	795b      	ldrb	r3, [r3, #5]
 8001800:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001804:	799b      	ldrb	r3, [r3, #6]
 8001806:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800180a:	79db      	ldrb	r3, [r3, #7]
 800180c:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	b2db      	uxtb	r3, r3
 8001828:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0e1b      	lsrs	r3, r3, #24
 8001830:	b2db      	uxtb	r3, r3
 8001832:	75bb      	strb	r3, [r7, #22]

		//Stop bytez
		Temp[15]=0x00;
 8001834:	2300      	movs	r3, #0
 8001836:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2110      	movs	r1, #16
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe ffbc 	bl	80007c4 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800184e:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001850:	2140      	movs	r1, #64	@ 0x40
 8001852:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001854:	f000 fdda 	bl	800240c <HAL_FDCAN_GetRxMessage>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0b6      	beq.n	80017cc <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	240010b0 	.word	0x240010b0
 800186c:	240010a0 	.word	0x240010a0
 8001870:	240012c0 	.word	0x240012c0
 8001874:	2400109d 	.word	0x2400109d
 8001878:	240010fc 	.word	0x240010fc

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f006 fd9c 	bl	80083e8 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	24080000 	.word	0x24080000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	240012c4 	.word	0x240012c4
 80018e4:	24001418 	.word	0x24001418

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ec:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <SystemInit+0x114>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <SystemInit+0x114>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018fc:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <SystemInit+0x118>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	2b06      	cmp	r3, #6
 8001906:	d807      	bhi.n	8001918 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001908:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <SystemInit+0x118>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 030f 	bic.w	r3, r3, #15
 8001910:	4a3b      	ldr	r2, [pc, #236]	@ (8001a00 <SystemInit+0x118>)
 8001912:	f043 0307 	orr.w	r3, r3, #7
 8001916:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001918:	4b3a      	ldr	r3, [pc, #232]	@ (8001a04 <SystemInit+0x11c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a39      	ldr	r2, [pc, #228]	@ (8001a04 <SystemInit+0x11c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001924:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <SystemInit+0x11c>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800192a:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <SystemInit+0x11c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4935      	ldr	r1, [pc, #212]	@ (8001a04 <SystemInit+0x11c>)
 8001930:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <SystemInit+0x120>)
 8001932:	4013      	ands	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001936:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <SystemInit+0x118>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001942:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <SystemInit+0x118>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 030f 	bic.w	r3, r3, #15
 800194a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a00 <SystemInit+0x118>)
 800194c:	f043 0307 	orr.w	r3, r3, #7
 8001950:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001952:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <SystemInit+0x11c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <SystemInit+0x11c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <SystemInit+0x11c>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <SystemInit+0x11c>)
 8001966:	4a29      	ldr	r2, [pc, #164]	@ (8001a0c <SystemInit+0x124>)
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <SystemInit+0x11c>)
 800196c:	4a28      	ldr	r2, [pc, #160]	@ (8001a10 <SystemInit+0x128>)
 800196e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <SystemInit+0x11c>)
 8001972:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <SystemInit+0x12c>)
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001976:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <SystemInit+0x11c>)
 8001978:	2200      	movs	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <SystemInit+0x11c>)
 800197e:	4a25      	ldr	r2, [pc, #148]	@ (8001a14 <SystemInit+0x12c>)
 8001980:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <SystemInit+0x11c>)
 8001984:	2200      	movs	r2, #0
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <SystemInit+0x11c>)
 800198a:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <SystemInit+0x12c>)
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <SystemInit+0x11c>)
 8001990:	2200      	movs	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <SystemInit+0x11c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1a      	ldr	r2, [pc, #104]	@ (8001a04 <SystemInit+0x11c>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <SystemInit+0x11c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <SystemInit+0x130>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <SystemInit+0x134>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019b2:	d202      	bcs.n	80019ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <SystemInit+0x138>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <SystemInit+0x11c>)
 80019bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d113      	bne.n	80019f0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <SystemInit+0x11c>)
 80019ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <SystemInit+0x11c>)
 80019d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <SystemInit+0x13c>)
 80019da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <SystemInit+0x11c>)
 80019e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019e6:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <SystemInit+0x11c>)
 80019e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	52002000 	.word	0x52002000
 8001a04:	58024400 	.word	0x58024400
 8001a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a0c:	02020200 	.word	0x02020200
 8001a10:	01ff0000 	.word	0x01ff0000
 8001a14:	01010280 	.word	0x01010280
 8001a18:	5c001000 	.word	0x5c001000
 8001a1c:	ffff0000 	.word	0xffff0000
 8001a20:	51008108 	.word	0x51008108
 8001a24:	52004000 	.word	0x52004000

08001a28 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <ExitRun0Mode+0x2c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <ExitRun0Mode+0x2c>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a38:	bf00      	nop
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <ExitRun0Mode+0x2c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f9      	beq.n	8001a3a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	58024800 	.word	0x58024800

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a94 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a5c:	f7ff ffe4 	bl	8001a28 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a60:	f7ff ff42 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f006 fcb3 	bl	80083f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7ff fa19 	bl	8000ec4 <main>
  bx  lr
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a9c:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 8001aa0:	08008e50 	.word	0x08008e50
  ldr r2, =_sbss
 8001aa4:	24001074 	.word	0x24001074
  ldr r4, =_ebss
 8001aa8:	24001414 	.word	0x24001414

08001aac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC3_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f98c 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001abc:	f002 fbae 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_Init+0x68>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	4913      	ldr	r1, [pc, #76]	@ (8001b1c <HAL_Init+0x6c>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_Init+0x68>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_Init+0x6c>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_Init+0x70>)
 8001af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_Init+0x74>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	200f      	movs	r0, #15
 8001afc:	f000 f814 	bl	8001b28 <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e002      	b.n	8001b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0a:	f7ff fc97 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	08008dc4 	.word	0x08008dc4
 8001b20:	24001018 	.word	0x24001018
 8001b24:	24001014 	.word	0x24001014

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_InitTick+0x60>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e021      	b.n	8001b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_InitTick+0x64>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_InitTick+0x60>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f971 	bl	8001e3a <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f93b 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <HAL_InitTick+0x68>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24001020 	.word	0x24001020
 8001b8c:	24001014 	.word	0x24001014
 8001b90:	2400101c 	.word	0x2400101c

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	24001020 	.word	0x24001020
 8001bb8:	240012c8 	.word	0x240012c8

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	240012c8 	.word	0x240012c8

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff ffee 	bl	8001bbc <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24001020 	.word	0x24001020

08001c1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetREVID+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0c1b      	lsrs	r3, r3, #16
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	5c001000 	.word	0x5c001000

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x40>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x40>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	05fa0000 	.word	0x05fa0000

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	@ (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff40 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff90 	bl	8001d28 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5f 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff33 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa4 	bl	8001d90 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e58:	f3bf 8f5f 	dmb	sy
}
 8001e5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_MPU_Disable+0x28>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <HAL_MPU_Disable+0x28>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e68:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_MPU_Disable+0x2c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00
 8001e80:	e000ed90 	.word	0xe000ed90

08001e84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_MPU_Enable+0x38>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_MPU_Enable+0x3c>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <HAL_MPU_Enable+0x3c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea2:	f3bf 8f4f 	dsb	sy
}
 8001ea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ea8:	f3bf 8f6f 	isb	sy
}
 8001eac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed90 	.word	0xe000ed90
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	785a      	ldrb	r2, [r3, #1]
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_MPU_ConfigRegion+0x7c>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ee0:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7b1b      	ldrb	r3, [r3, #12]
 8001eec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7adb      	ldrb	r3, [r3, #11]
 8001ef2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7a9b      	ldrb	r3, [r3, #10]
 8001efa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7b5b      	ldrb	r3, [r3, #13]
 8001f02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7b9b      	ldrb	r3, [r3, #14]
 8001f0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7bdb      	ldrb	r3, [r3, #15]
 8001f12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7a5b      	ldrb	r3, [r3, #9]
 8001f1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7a1b      	ldrb	r3, [r3, #8]
 8001f22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f30:	6113      	str	r3, [r2, #16]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed90 	.word	0xe000ed90

08001f44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b098      	sub	sp, #96	@ 0x60
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001f4c:	4a84      	ldr	r2, [pc, #528]	@ (8002160 <HAL_FDCAN_Init+0x21c>)
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4611      	mov	r1, r2
 8001f54:	224c      	movs	r2, #76	@ 0x4c
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 fa72 	bl	8008440 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1c6      	b.n	80022f4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002164 <HAL_FDCAN_Init+0x220>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fa6c 	bl	8001470 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa8:	f7ff fe08 	bl	8001bbc <HAL_GetTick>
 8001fac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001fae:	e014      	b.n	8001fda <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001fb0:	f7ff fe04 	bl	8001bbc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d90d      	bls.n	8001fda <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e18c      	b.n	80022f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d0e3      	beq.n	8001fb0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7ff fde0 	bl	8001bbc <HAL_GetTick>
 8001ffc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ffe:	e014      	b.n	800202a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002000:	f7ff fddc 	bl	8001bbc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b0a      	cmp	r3, #10
 800200c:	d90d      	bls.n	800202a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e164      	b.n	80022f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0e3      	beq.n	8002000 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0202 	orr.w	r2, r2, #2
 8002046:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7c1b      	ldrb	r3, [r3, #16]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	e007      	b.n	8002072 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002070:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7c5b      	ldrb	r3, [r3, #17]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002088:	619a      	str	r2, [r3, #24]
 800208a:	e007      	b.n	800209c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800209a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7c9b      	ldrb	r3, [r3, #18]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d108      	bne.n	80020b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020b2:	619a      	str	r2, [r3, #24]
 80020b4:	e007      	b.n	80020c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80020ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0204 	orr.w	r2, r2, #4
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	e030      	b.n	8002178 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02c      	beq.n	8002178 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d020      	beq.n	8002168 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002134:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0210 	orr.w	r2, r2, #16
 8002144:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d114      	bne.n	8002178 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	e00b      	b.n	8002178 <HAL_FDCAN_Init+0x234>
 8002160:	08008d78 	.word	0x08008d78
 8002164:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	3b01      	subs	r3, #1
 800217e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	3b01      	subs	r3, #1
 8002186:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002188:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002190:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	3b01      	subs	r3, #1
 800219a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80021a0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80021a2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80021ac:	d115      	bne.n	80021da <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	3b01      	subs	r3, #1
 80021ba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021bc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	3b01      	subs	r3, #1
 80021c4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80021d6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021d8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002200:	4413      	add	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800220e:	f023 0107 	bic.w	r1, r3, #7
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3360      	adds	r3, #96	@ 0x60
 800221a:	443b      	add	r3, r7
 800221c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800223a:	f023 0107 	bic.w	r1, r3, #7
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	3360      	adds	r3, #96	@ 0x60
 8002246:	443b      	add	r3, r7
 8002248:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002266:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	3360      	adds	r3, #96	@ 0x60
 8002272:	443b      	add	r3, r7
 8002274:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002278:	011a      	lsls	r2, r3, #4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002288:	2b00      	cmp	r3, #0
 800228a:	d012      	beq.n	80022b2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002294:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3360      	adds	r3, #96	@ 0x60
 80022a0:	443b      	add	r3, r7
 80022a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80022a6:	021a      	lsls	r2, r3, #8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <HAL_FDCAN_Init+0x3b8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d107      	bne.n	80022cc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f022 0203 	bic.w	r2, r2, #3
 80022ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fd81 	bl	8002dec <FDCAN_CalcultateRamBlockAddresses>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80022f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3760      	adds	r7, #96	@ 0x60
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	4000a000 	.word	0x4000a000

08002300 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d111      	bne.n	8002338 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e008      	b.n	800234a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800233e:	f043 0204 	orr.w	r2, r3, #4
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d141      	bne.n	80023f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002376:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e038      	b.n	8002404 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800239a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e026      	b.n	8002404 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fe93 	bl	80030f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80023e2:	2201      	movs	r2, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e008      	b.n	8002404 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023f8:	f043 0208 	orr.w	r2, r3, #8
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	@ 0x2c
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002424:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002426:	7efb      	ldrb	r3, [r7, #27]
 8002428:	2b02      	cmp	r3, #2
 800242a:	f040 8149 	bne.w	80026c0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b40      	cmp	r3, #64	@ 0x40
 8002432:	d14c      	bne.n	80024ce <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800243c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e13c      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800246e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e12a      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800248c:	d10a      	bne.n	80024a4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800249a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800249e:	d101      	bne.n	80024a4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	69f9      	ldr	r1, [r7, #28]
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80024cc:	e068      	b.n	80025a0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b41      	cmp	r3, #65	@ 0x41
 80024d2:	d14c      	bne.n	800256e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0ec      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800250e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0da      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252c:	d10a      	bne.n	8002544 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800253a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800253e:	d101      	bne.n	8002544 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002540:	2301      	movs	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	69f9      	ldr	r1, [r7, #28]
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
 800256c:	e018      	b.n	80025a0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	d309      	bcc.n	800258c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0a2      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0c9b      	lsrs	r3, r3, #18
 80025ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e005      	b.n	80025d0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	3304      	adds	r3, #4
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0e1b      	lsrs	r3, r3, #24
 8002624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0fda      	lsrs	r2, r3, #31
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	3304      	adds	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	e00a      	b.n	800265c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	441a      	add	r2, r3
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	440b      	add	r3, r1
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	3301      	adds	r3, #1
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	461a      	mov	r2, r3
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	4293      	cmp	r3, r2
 800266a:	d3ec      	bcc.n	8002646 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d105      	bne.n	800267e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800267c:	e01e      	b.n	80026bc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b41      	cmp	r3, #65	@ 0x41
 8002682:	d105      	bne.n	8002690 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800268e:	e015      	b.n	80026bc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b1f      	cmp	r3, #31
 8002694:	d808      	bhi.n	80026a8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80026a6:	e009      	b.n	80026bc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 021f 	and.w	r2, r3, #31
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e008      	b.n	80026d2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026c6:	f043 0208 	orr.w	r2, r3, #8
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	372c      	adds	r7, #44	@ 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	08008dd4 	.word	0x08008dd4

080026e4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80026f6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <HAL_FDCAN_ActivateNotification+0x20>
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d155      	bne.n	80027b0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002722:	e014      	b.n	800274e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d108      	bne.n	8002746 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0202 	orr.w	r2, r2, #2
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002744:	e003      	b.n	800274e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2203      	movs	r2, #3
 800274c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	430a      	orrs	r2, r1
 8002768:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	430a      	orrs	r2, r1
 8002786:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_FDCAN_ActivateNotification+0xec>)
 8002794:	4013      	ands	r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	430b      	orrs	r3, r1
 800279c:	6553      	str	r3, [r2, #84]	@ 0x54
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	0f9b      	lsrs	r3, r3, #30
 80027a6:	490b      	ldr	r1, [pc, #44]	@ (80027d4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e008      	b.n	80027c2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	3fcfffff 	.word	0x3fcfffff
 80027d4:	4000a800 	.word	0x4000a800

080027d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b096      	sub	sp, #88	@ 0x58
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80027e0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	079b      	lsls	r3, r3, #30
 80027e6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80027e8:	4b98      	ldr	r3, [pc, #608]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	079b      	lsls	r3, r3, #30
 80027ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027f0:	4013      	ands	r3, r2
 80027f2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80027fe:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002808:	4013      	ands	r3, r2
 800280a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002820:	4013      	ands	r3, r2
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002838:	4013      	ands	r3, r2
 800283a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002842:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8002846:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002850:	4013      	ands	r3, r2
 8002852:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800285e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002868:	4013      	ands	r3, r2
 800286a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800289c:	651a      	str	r2, [r3, #80]	@ 0x50
 800289e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fa54 	bl	8002d52 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	0a9b      	lsrs	r3, r3, #10
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01d      	beq.n	80028f2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	0a9b      	lsrs	r3, r3, #10
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d017      	beq.n	80028f2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80028d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028d6:	4013      	ands	r3, r2
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80028ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa07 	bl	8002d00 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80028f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028fe:	4b54      	ldr	r3, [pc, #336]	@ (8002a50 <HAL_FDCAN_IRQHandler+0x278>)
 8002900:	400b      	ands	r3, r1
 8002902:	6513      	str	r3, [r2, #80]	@ 0x50
 8002904:	4a51      	ldr	r2, [pc, #324]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 8002906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002908:	0f9b      	lsrs	r3, r3, #30
 800290a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800290c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9c0 	bl	8002c94 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002920:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <HAL_FDCAN_IRQHandler+0x278>)
 8002922:	400b      	ands	r3, r1
 8002924:	6513      	str	r3, [r2, #80]	@ 0x50
 8002926:	4a49      	ldr	r2, [pc, #292]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 8002928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800292a:	0f9b      	lsrs	r3, r3, #30
 800292c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800292e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9ba 	bl	8002caa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002942:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_FDCAN_IRQHandler+0x278>)
 8002944:	400b      	ands	r3, r1
 8002946:	6513      	str	r3, [r2, #80]	@ 0x50
 8002948:	4a40      	ldr	r2, [pc, #256]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 800294a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800294c:	0f9b      	lsrs	r3, r3, #30
 800294e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002950:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe ff34 	bl	80017c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002964:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_FDCAN_IRQHandler+0x278>)
 8002966:	400b      	ands	r3, r1
 8002968:	6513      	str	r3, [r2, #80]	@ 0x50
 800296a:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 800296c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800296e:	0f9b      	lsrs	r3, r3, #30
 8002970:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002972:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f9a3 	bl	8002cc0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800297a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800297c:	0adb      	lsrs	r3, r3, #11
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d010      	beq.n	80029a8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002988:	0adb      	lsrs	r3, r3, #11
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800299a:	651a      	str	r2, [r3, #80]	@ 0x50
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f997 	bl	8002cd6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80029a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80029b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b6:	0a5b      	lsrs	r3, r3, #9
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d4:	4013      	ands	r3, r2
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80029e2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80029e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f97d 	bl	8002cea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80029f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f2:	0cdb      	lsrs	r3, r3, #19
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80029fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fe:	0cdb      	lsrs	r3, r3, #19
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a10:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f97c 	bl	8002d16 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a40:	4b02      	ldr	r3, [pc, #8]	@ (8002a4c <HAL_FDCAN_IRQHandler+0x274>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	e004      	b.n	8002a54 <HAL_FDCAN_IRQHandler+0x27c>
 8002a4a:	bf00      	nop
 8002a4c:	4000a800 	.word	0x4000a800
 8002a50:	3fcfffff 	.word	0x3fcfffff
 8002a54:	f000 f969 	bl	8002d2a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5a:	0c9b      	lsrs	r3, r3, #18
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002a78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a7a:	4b83      	ldr	r3, [pc, #524]	@ (8002c88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f95c 	bl	8002d3e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a88:	0c5b      	lsrs	r3, r3, #17
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	0c5b      	lsrs	r3, r3, #17
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00f      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aa6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002aa8:	4b77      	ldr	r3, [pc, #476]	@ (8002c88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ab4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002aca:	4b70      	ldr	r3, [pc, #448]	@ (8002c8c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002acc:	400b      	ands	r3, r1
 8002ace:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad4:	0f9b      	lsrs	r3, r3, #30
 8002ad6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f94d 	bl	8002d7a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d011      	beq.n	8002b0a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002aec:	4b67      	ldr	r3, [pc, #412]	@ (8002c8c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002aee:	400b      	ands	r3, r1
 8002af0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002af2:	4a65      	ldr	r2, [pc, #404]	@ (8002c88 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af6:	0f9b      	lsrs	r3, r3, #30
 8002af8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a60      	ldr	r2, [pc, #384]	@ (8002c90 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f040 80ac 	bne.w	8002c6e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a4 	beq.w	8002c6e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b52:	4013      	ands	r3, r2
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002b78:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	4013      	ands	r3, r2
 8002b84:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002b90:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8e6 	bl	8002d90 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bd0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8e6 	bl	8002da6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01a      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c08:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6939      	ldr	r1, [r7, #16]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8d0 	bl	8002dbc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8d1 	bl	8002dd4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f874 	bl	8002d66 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3758      	adds	r7, #88	@ 0x58
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	4000a800 	.word	0x4000a800
 8002c8c:	3fcfffff 	.word	0x3fcfffff
 8002c90:	4000a000 	.word	0x4000a000

08002c94 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002e02:	4ba7      	ldr	r3, [pc, #668]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	0091      	lsls	r1, r2, #2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e1c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4413      	add	r3, r2
 8002e38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e42:	4b97      	ldr	r3, [pc, #604]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	0091      	lsls	r1, r2, #2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002e84:	4b86      	ldr	r3, [pc, #536]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	0091      	lsls	r1, r2, #2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e9e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ecc:	4b74      	ldr	r3, [pc, #464]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	0091      	lsls	r1, r2, #2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ee6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eee:	041a      	lsls	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002f14:	4b62      	ldr	r3, [pc, #392]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	0091      	lsls	r1, r2, #2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4413      	add	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f40:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	0091      	lsls	r1, r2, #2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f5a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	041a      	lsls	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	4413      	add	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	0091      	lsls	r1, r2, #2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f9c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fb8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	061a      	lsls	r2, r3, #24
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd0:	4b34      	ldr	r3, [pc, #208]	@ (80030a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009a      	lsls	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	4a04      	ldr	r2, [pc, #16]	@ (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d915      	bls.n	80030c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800309c:	e006      	b.n	80030ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800309e:	bf00      	nop
 80030a0:	ffff0003 	.word	0xffff0003
 80030a4:	10002b00 	.word	0x10002b00
 80030a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2203      	movs	r2, #3
 80030c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e010      	b.n	80030ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e005      	b.n	80030dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3f3      	bcc.n	80030d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	@ 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003116:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800311e:	4313      	orrs	r3, r2
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e00a      	b.n	800313a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800312c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003132:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003138:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003144:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800314a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003150:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	3304      	adds	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	3304      	adds	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e020      	b.n	80031d2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3303      	adds	r3, #3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3302      	adds	r3, #2
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	440b      	add	r3, r1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80031a8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	440b      	add	r3, r1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80031b6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	440a      	add	r2, r1
 80031be:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80031c0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3304      	adds	r3, #4
 80031ca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3304      	adds	r3, #4
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4a06      	ldr	r2, [pc, #24]	@ (80031f0 <FDCAN_CopyMessageToRAM+0xf8>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	461a      	mov	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4293      	cmp	r3, r2
 80031e0:	d3d6      	bcc.n	8003190 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	3724      	adds	r7, #36	@ 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	08008dd4 	.word	0x08008dd4

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003202:	4b89      	ldr	r3, [pc, #548]	@ (8003428 <HAL_GPIO_Init+0x234>)
 8003204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003206:	e194      	b.n	8003532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8186 	beq.w	800352c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d005      	beq.n	8003238 <HAL_GPIO_Init+0x44>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d130      	bne.n	800329a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326e:	2201      	movs	r2, #1
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 0201 	and.w	r2, r3, #1
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d017      	beq.n	80032d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d123      	bne.n	800332a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80e0 	beq.w	800352c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336c:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <HAL_GPIO_Init+0x238>)
 800336e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003372:	4a2e      	ldr	r2, [pc, #184]	@ (800342c <HAL_GPIO_Init+0x238>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800337c:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <HAL_GPIO_Init+0x238>)
 800337e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338a:	4a29      	ldr	r2, [pc, #164]	@ (8003430 <HAL_GPIO_Init+0x23c>)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <HAL_GPIO_Init+0x240>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d052      	beq.n	800345c <HAL_GPIO_Init+0x268>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <HAL_GPIO_Init+0x244>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d031      	beq.n	8003422 <HAL_GPIO_Init+0x22e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <HAL_GPIO_Init+0x248>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02b      	beq.n	800341e <HAL_GPIO_Init+0x22a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <HAL_GPIO_Init+0x24c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x226>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_GPIO_Init+0x250>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x222>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_GPIO_Init+0x254>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x21e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <HAL_GPIO_Init+0x258>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x21a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_GPIO_Init+0x25c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x216>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a18      	ldr	r2, [pc, #96]	@ (8003454 <HAL_GPIO_Init+0x260>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x212>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <HAL_GPIO_Init+0x264>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x20e>
 80033fe:	2309      	movs	r3, #9
 8003400:	e02d      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003402:	230a      	movs	r3, #10
 8003404:	e02b      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003406:	2308      	movs	r3, #8
 8003408:	e029      	b.n	800345e <HAL_GPIO_Init+0x26a>
 800340a:	2307      	movs	r3, #7
 800340c:	e027      	b.n	800345e <HAL_GPIO_Init+0x26a>
 800340e:	2306      	movs	r3, #6
 8003410:	e025      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003412:	2305      	movs	r3, #5
 8003414:	e023      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003416:	2304      	movs	r3, #4
 8003418:	e021      	b.n	800345e <HAL_GPIO_Init+0x26a>
 800341a:	2303      	movs	r3, #3
 800341c:	e01f      	b.n	800345e <HAL_GPIO_Init+0x26a>
 800341e:	2302      	movs	r3, #2
 8003420:	e01d      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003422:	2301      	movs	r3, #1
 8003424:	e01b      	b.n	800345e <HAL_GPIO_Init+0x26a>
 8003426:	bf00      	nop
 8003428:	58000080 	.word	0x58000080
 800342c:	58024400 	.word	0x58024400
 8003430:	58000400 	.word	0x58000400
 8003434:	58020000 	.word	0x58020000
 8003438:	58020400 	.word	0x58020400
 800343c:	58020800 	.word	0x58020800
 8003440:	58020c00 	.word	0x58020c00
 8003444:	58021000 	.word	0x58021000
 8003448:	58021400 	.word	0x58021400
 800344c:	58021800 	.word	0x58021800
 8003450:	58021c00 	.word	0x58021c00
 8003454:	58022000 	.word	0x58022000
 8003458:	58022400 	.word	0x58022400
 800345c:	2300      	movs	r3, #0
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4093      	lsls	r3, r2
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346e:	4938      	ldr	r1, [pc, #224]	@ (8003550 <HAL_GPIO_Init+0x35c>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae63 	bne.w	8003208 <HAL_GPIO_Init+0x14>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3724      	adds	r7, #36	@ 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	58000400 	.word	0x58000400

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003590:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <HAL_PWREx_ConfigSupply+0x70>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00a      	beq.n	80035b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800359c:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <HAL_PWREx_ConfigSupply+0x70>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e01f      	b.n	80035ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e01d      	b.n	80035ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_PWREx_ConfigSupply+0x70>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f023 0207 	bic.w	r2, r3, #7
 80035ba:	490f      	ldr	r1, [pc, #60]	@ (80035f8 <HAL_PWREx_ConfigSupply+0x70>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035c2:	f7fe fafb 	bl	8001bbc <HAL_GetTick>
 80035c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035c8:	e009      	b.n	80035de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035ca:	f7fe faf7 	bl	8001bbc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035d8:	d901      	bls.n	80035de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e007      	b.n	80035ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_PWREx_ConfigSupply+0x70>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ea:	d1ee      	bne.n	80035ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	58024800 	.word	0x58024800

080035fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f000 bc48 	b.w	8003ea0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8088 	beq.w	800372e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4b99      	ldr	r3, [pc, #612]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003628:	4b96      	ldr	r3, [pc, #600]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003630:	2b10      	cmp	r3, #16
 8003632:	d007      	beq.n	8003644 <HAL_RCC_OscConfig+0x48>
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003636:	2b18      	cmp	r3, #24
 8003638:	d111      	bne.n	800365e <HAL_RCC_OscConfig+0x62>
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	4b8f      	ldr	r3, [pc, #572]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d06d      	beq.n	800372c <HAL_RCC_OscConfig+0x130>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d169      	bne.n	800372c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f000 bc21 	b.w	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x7a>
 8003668:	4b86      	ldr	r3, [pc, #536]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a85      	ldr	r2, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e02e      	b.n	80036d4 <HAL_RCC_OscConfig+0xd8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x9c>
 800367e:	4b81      	ldr	r3, [pc, #516]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a80      	ldr	r2, [pc, #512]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7d      	ldr	r2, [pc, #500]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xc0>
 80036a2:	4b78      	ldr	r3, [pc, #480]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a77      	ldr	r2, [pc, #476]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b75      	ldr	r3, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a74      	ldr	r2, [pc, #464]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd8>
 80036bc:	4b71      	ldr	r3, [pc, #452]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a70      	ldr	r2, [pc, #448]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b6e      	ldr	r3, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6d      	ldr	r2, [pc, #436]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fa6e 	bl	8001bbc <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fa6a 	bl	8001bbc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e3d4      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f6:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe8>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe fa5a 	bl	8001bbc <HAL_GetTick>
 8003708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fa56 	bl	8001bbc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e3c0      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800371e:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x110>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80ca 	beq.w	80038d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373c:	4b51      	ldr	r3, [pc, #324]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003744:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003746:	4b4f      	ldr	r3, [pc, #316]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_RCC_OscConfig+0x166>
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2b18      	cmp	r3, #24
 8003756:	d156      	bne.n	8003806 <HAL_RCC_OscConfig+0x20a>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d151      	bne.n	8003806 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003762:	4b48      	ldr	r3, [pc, #288]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x17e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e392      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800377a:	4b42      	ldr	r3, [pc, #264]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0219 	bic.w	r2, r3, #25
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	493f      	ldr	r1, [pc, #252]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fa16 	bl	8001bbc <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe fa12 	bl	8001bbc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e37c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a6:	4b37      	ldr	r3, [pc, #220]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	f7fe fa33 	bl	8001c1c <HAL_GetREVID>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037bc:	4293      	cmp	r3, r2
 80037be:	d817      	bhi.n	80037f0 <HAL_RCC_OscConfig+0x1f4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	d108      	bne.n	80037da <HAL_RCC_OscConfig+0x1de>
 80037c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d8:	e07a      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b2a      	ldr	r3, [pc, #168]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	031b      	lsls	r3, r3, #12
 80037e8:	4926      	ldr	r1, [pc, #152]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ee:	e06f      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	4921      	ldr	r1, [pc, #132]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003804:	e064      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d047      	beq.n	800389e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800380e:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0219 	bic.w	r2, r3, #25
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	491a      	ldr	r1, [pc, #104]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe f9cc 	bl	8001bbc <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe f9c8 	bl	8001bbc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e332      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	f7fe f9e9 	bl	8001c1c <HAL_GetREVID>
 800384a:	4603      	mov	r3, r0
 800384c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003850:	4293      	cmp	r3, r2
 8003852:	d819      	bhi.n	8003888 <HAL_RCC_OscConfig+0x28c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d108      	bne.n	800386e <HAL_RCC_OscConfig+0x272>
 800385c:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003864:	4a07      	ldr	r2, [pc, #28]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	e030      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	031b      	lsls	r3, r3, #12
 800387c:	4901      	ldr	r1, [pc, #4]	@ (8003884 <HAL_RCC_OscConfig+0x288>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
 8003882:	e025      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
 8003884:	58024400 	.word	0x58024400
 8003888:	4b9a      	ldr	r3, [pc, #616]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	4997      	ldr	r1, [pc, #604]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	e018      	b.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389e:	4b95      	ldr	r3, [pc, #596]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a94      	ldr	r2, [pc, #592]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe f987 	bl	8001bbc <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe f983 	bl	8001bbc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e2ed      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038c4:	4b8b      	ldr	r3, [pc, #556]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a9 	beq.w	8003a30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b85      	ldr	r3, [pc, #532]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e8:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d007      	beq.n	8003904 <HAL_RCC_OscConfig+0x308>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b18      	cmp	r3, #24
 80038f8:	d13a      	bne.n	8003970 <HAL_RCC_OscConfig+0x374>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d135      	bne.n	8003970 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003904:	4b7b      	ldr	r3, [pc, #492]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_OscConfig+0x320>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b80      	cmp	r3, #128	@ 0x80
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e2c1      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800391c:	f7fe f97e 	bl	8001c1c <HAL_GetREVID>
 8003920:	4603      	mov	r3, r0
 8003922:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003926:	4293      	cmp	r3, r2
 8003928:	d817      	bhi.n	800395a <HAL_RCC_OscConfig+0x35e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d108      	bne.n	8003944 <HAL_RCC_OscConfig+0x348>
 8003932:	4b70      	ldr	r3, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800393a:	4a6e      	ldr	r2, [pc, #440]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800393c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003940:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003942:	e075      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003944:	4b6b      	ldr	r3, [pc, #428]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	069b      	lsls	r3, r3, #26
 8003952:	4968      	ldr	r1, [pc, #416]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003958:	e06a      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395a:	4b66      	ldr	r3, [pc, #408]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	4962      	ldr	r1, [pc, #392]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800396e:	e05f      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d042      	beq.n	80039fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003978:	4b5e      	ldr	r3, [pc, #376]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5d      	ldr	r2, [pc, #372]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe f91a 	bl	8001bbc <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800398c:	f7fe f916 	bl	8001bbc <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e280      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800399e:	4b55      	ldr	r3, [pc, #340]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039aa:	f7fe f937 	bl	8001c1c <HAL_GetREVID>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d817      	bhi.n	80039e8 <HAL_RCC_OscConfig+0x3ec>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d108      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3d6>
 80039c0:	4b4c      	ldr	r3, [pc, #304]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039c8:	4a4a      	ldr	r2, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039ce:	6053      	str	r3, [r2, #4]
 80039d0:	e02e      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
 80039d2:	4b48      	ldr	r3, [pc, #288]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	4944      	ldr	r1, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
 80039e6:	e023      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
 80039e8:	4b42      	ldr	r3, [pc, #264]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	493f      	ldr	r1, [pc, #252]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60cb      	str	r3, [r1, #12]
 80039fc:	e018      	b.n	8003a30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039fe:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe f8d7 	bl	8001bbc <HAL_GetTick>
 8003a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a12:	f7fe f8d3 	bl	8001bbc <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e23d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a24:	4b33      	ldr	r3, [pc, #204]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d036      	beq.n	8003aaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d019      	beq.n	8003a78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	4a2a      	ldr	r2, [pc, #168]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe f8b4 	bl	8001bbc <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fe f8b0 	bl	8001bbc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e21a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a6a:	4b22      	ldr	r3, [pc, #136]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x45c>
 8003a76:	e018      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fe f89a 	bl	8001bbc <HAL_GetTick>
 8003a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fe f896 	bl	8001bbc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e200      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a9e:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d039      	beq.n	8003b2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003abe:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aca:	f7fe f877 	bl	8001bbc <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad2:	f7fe f873 	bl	8001bbc <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1dd      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <HAL_RCC_OscConfig+0x4f8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4d6>
 8003af0:	e01b      	b.n	8003b2a <HAL_RCC_OscConfig+0x52e>
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af8:	4b9b      	ldr	r3, [pc, #620]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a9a      	ldr	r2, [pc, #616]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b04:	f7fe f85a 	bl	8001bbc <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0c:	f7fe f856 	bl	8001bbc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1c0      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b1e:	4b92      	ldr	r3, [pc, #584]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8081 	beq.w	8003c3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b38:	4b8c      	ldr	r3, [pc, #560]	@ (8003d6c <HAL_RCC_OscConfig+0x770>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a8b      	ldr	r2, [pc, #556]	@ (8003d6c <HAL_RCC_OscConfig+0x770>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b44:	f7fe f83a 	bl	8001bbc <HAL_GetTick>
 8003b48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fe f836 	bl	8001bbc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1a0      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5e:	4b83      	ldr	r3, [pc, #524]	@ (8003d6c <HAL_RCC_OscConfig+0x770>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x584>
 8003b72:	4b7d      	ldr	r3, [pc, #500]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a7c      	ldr	r2, [pc, #496]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7e:	e02d      	b.n	8003bdc <HAL_RCC_OscConfig+0x5e0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x5a6>
 8003b88:	4b77      	ldr	r3, [pc, #476]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	4a76      	ldr	r2, [pc, #472]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b94:	4b74      	ldr	r3, [pc, #464]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a73      	ldr	r2, [pc, #460]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCC_OscConfig+0x5e0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5c8>
 8003baa:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	4a6e      	ldr	r2, [pc, #440]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a6b      	ldr	r2, [pc, #428]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0x5e0>
 8003bc4:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	4a67      	ldr	r2, [pc, #412]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd0:	4b65      	ldr	r3, [pc, #404]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a64      	ldr	r2, [pc, #400]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d015      	beq.n	8003c10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd ffea 	bl	8001bbc <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fd ffe6 	bl	8001bbc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e14e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c02:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ee      	beq.n	8003bec <HAL_RCC_OscConfig+0x5f0>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd ffd4 	bl	8001bbc <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fd ffd0 	bl	8001bbc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e138      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ee      	bne.n	8003c18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 812d 	beq.w	8003e9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c44:	4b48      	ldr	r3, [pc, #288]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c4c:	2b18      	cmp	r3, #24
 8003c4e:	f000 80bd 	beq.w	8003dcc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	f040 809e 	bne.w	8003d98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b42      	ldr	r3, [pc, #264]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a41      	ldr	r2, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd ffa8 	bl	8001bbc <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd ffa4 	bl	8001bbc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e10e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c82:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c92:	4b37      	ldr	r3, [pc, #220]	@ (8003d70 <HAL_RCC_OscConfig+0x774>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	4931      	ldr	r1, [pc, #196]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	3b01      	subs	r3, #1
 8003cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	025b      	lsls	r3, r3, #9
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cd8:	4923      	ldr	r1, [pc, #140]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	4a21      	ldr	r2, [pc, #132]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cee:	4b21      	ldr	r3, [pc, #132]	@ (8003d74 <HAL_RCC_OscConfig+0x778>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cf6:	00d2      	lsls	r2, r2, #3
 8003cf8:	491b      	ldr	r1, [pc, #108]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	f023 020c 	bic.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	4917      	ldr	r1, [pc, #92]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	f023 0202 	bic.w	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	4912      	ldr	r1, [pc, #72]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d22:	4b11      	ldr	r3, [pc, #68]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	4a10      	ldr	r2, [pc, #64]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	4a0d      	ldr	r2, [pc, #52]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd ff2d 	bl	8001bbc <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d64:	e011      	b.n	8003d8a <HAL_RCC_OscConfig+0x78e>
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	58024800 	.word	0x58024800
 8003d70:	fffffc0c 	.word	0xfffffc0c
 8003d74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd ff20 	bl	8001bbc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e08a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x77c>
 8003d96:	e082      	b.n	8003e9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a42      	ldr	r2, [pc, #264]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd ff0a 	bl	8001bbc <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd ff06 	bl	8001bbc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e070      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x7b0>
 8003dca:	e068      	b.n	8003e9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dcc:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dd2:	4b35      	ldr	r3, [pc, #212]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d031      	beq.n	8003e44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f003 0203 	and.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d12a      	bne.n	8003e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d122      	bne.n	8003e44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d11a      	bne.n	8003e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	0a5b      	lsrs	r3, r3, #9
 8003e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d108      	bne.n	8003e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0e1b      	lsrs	r3, r3, #24
 8003e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e02b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e48:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d01f      	beq.n	8003e9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e6a:	f7fd fea7 	bl	8001bbc <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e70:	bf00      	nop
 8003e72:	f7fd fea3 	bl	8001bbc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d0f9      	beq.n	8003e72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <HAL_RCC_OscConfig+0x8b0>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e8a:	00d2      	lsls	r2, r2, #3
 8003e8c:	4906      	ldr	r1, [pc, #24]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <HAL_RCC_OscConfig+0x8ac>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3730      	adds	r7, #48	@ 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	ffff0007 	.word	0xffff0007

08003eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e19c      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d910      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b87      	ldr	r3, [pc, #540]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 020f 	bic.w	r2, r3, #15
 8003eda:	4985      	ldr	r1, [pc, #532]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b83      	ldr	r3, [pc, #524]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e184      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d010      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	4b7b      	ldr	r3, [pc, #492]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d908      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f10:	4b78      	ldr	r3, [pc, #480]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4975      	ldr	r1, [pc, #468]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	4b70      	ldr	r3, [pc, #448]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	496a      	ldr	r1, [pc, #424]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d908      	bls.n	8003f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f6c:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	495e      	ldr	r1, [pc, #376]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d010      	beq.n	8003fac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d908      	bls.n	8003fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f9a:	4b56      	ldr	r3, [pc, #344]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4953      	ldr	r1, [pc, #332]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d908      	bls.n	8003fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f023 020f 	bic.w	r2, r3, #15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4947      	ldr	r1, [pc, #284]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d055      	beq.n	8004092 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fe6:	4b43      	ldr	r3, [pc, #268]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4940      	ldr	r1, [pc, #256]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004000:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d121      	bne.n	8004050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0f6      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004018:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d115      	bne.n	8004050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0ea      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004030:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0de      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004040:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0d6      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004050:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f023 0207 	bic.w	r2, r3, #7
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4925      	ldr	r1, [pc, #148]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 800405e:	4313      	orrs	r3, r2
 8004060:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004062:	f7fd fdab 	bl	8001bbc <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004068:	e00a      	b.n	8004080 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406a:	f7fd fda7 	bl	8001bbc <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0be      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004080:	4b1c      	ldr	r3, [pc, #112]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	429a      	cmp	r2, r3
 8004090:	d1eb      	bne.n	800406a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d208      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ae:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f023 020f 	bic.w	r2, r3, #15
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	490e      	ldr	r1, [pc, #56]	@ (80040f4 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d214      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 020f 	bic.w	r2, r3, #15
 80040d6:	4906      	ldr	r1, [pc, #24]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <HAL_RCC_ClockConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e086      	b.n	80041fe <HAL_RCC_ClockConfig+0x34e>
 80040f0:	52002000 	.word	0x52002000
 80040f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	4b3f      	ldr	r3, [pc, #252]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004110:	429a      	cmp	r2, r3
 8004112:	d208      	bcs.n	8004126 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004114:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4939      	ldr	r1, [pc, #228]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004122:	4313      	orrs	r3, r2
 8004124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d010      	beq.n	8004154 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800413e:	429a      	cmp	r2, r3
 8004140:	d208      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004142:	4b31      	ldr	r3, [pc, #196]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	492e      	ldr	r1, [pc, #184]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004150:	4313      	orrs	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800416c:	429a      	cmp	r2, r3
 800416e:	d208      	bcs.n	8004182 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4922      	ldr	r1, [pc, #136]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 800417e:	4313      	orrs	r3, r2
 8004180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d010      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800419a:	429a      	cmp	r2, r3
 800419c:	d208      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800419e:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	4917      	ldr	r1, [pc, #92]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041b0:	f000 f834 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	4912      	ldr	r1, [pc, #72]	@ (800420c <HAL_RCC_ClockConfig+0x35c>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <HAL_RCC_ClockConfig+0x358>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	4a0d      	ldr	r2, [pc, #52]	@ (800420c <HAL_RCC_ClockConfig+0x35c>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004210 <HAL_RCC_ClockConfig+0x360>)
 80041e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x364>)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <HAL_RCC_ClockConfig+0x368>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fc98 	bl	8001b28 <HAL_InitTick>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	08008dc4 	.word	0x08008dc4
 8004210:	24001018 	.word	0x24001018
 8004214:	24001014 	.word	0x24001014
 8004218:	2400101c 	.word	0x2400101c

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	@ 0x24
 8004220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004222:	4bb3      	ldr	r3, [pc, #716]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800422a:	2b18      	cmp	r3, #24
 800422c:	f200 8155 	bhi.w	80044da <HAL_RCC_GetSysClockFreq+0x2be>
 8004230:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800429d 	.word	0x0800429d
 800423c:	080044db 	.word	0x080044db
 8004240:	080044db 	.word	0x080044db
 8004244:	080044db 	.word	0x080044db
 8004248:	080044db 	.word	0x080044db
 800424c:	080044db 	.word	0x080044db
 8004250:	080044db 	.word	0x080044db
 8004254:	080044db 	.word	0x080044db
 8004258:	080042c3 	.word	0x080042c3
 800425c:	080044db 	.word	0x080044db
 8004260:	080044db 	.word	0x080044db
 8004264:	080044db 	.word	0x080044db
 8004268:	080044db 	.word	0x080044db
 800426c:	080044db 	.word	0x080044db
 8004270:	080044db 	.word	0x080044db
 8004274:	080044db 	.word	0x080044db
 8004278:	080042c9 	.word	0x080042c9
 800427c:	080044db 	.word	0x080044db
 8004280:	080044db 	.word	0x080044db
 8004284:	080044db 	.word	0x080044db
 8004288:	080044db 	.word	0x080044db
 800428c:	080044db 	.word	0x080044db
 8004290:	080044db 	.word	0x080044db
 8004294:	080044db 	.word	0x080044db
 8004298:	080042cf 	.word	0x080042cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429c:	4b94      	ldr	r3, [pc, #592]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a8:	4b91      	ldr	r3, [pc, #580]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a90      	ldr	r2, [pc, #576]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042ba:	e111      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042bc:	4b8d      	ldr	r3, [pc, #564]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042be:	61bb      	str	r3, [r7, #24]
      break;
 80042c0:	e10e      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042c2:	4b8d      	ldr	r3, [pc, #564]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042c4:	61bb      	str	r3, [r7, #24]
      break;
 80042c6:	e10b      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042c8:	4b8c      	ldr	r3, [pc, #560]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042ca:	61bb      	str	r3, [r7, #24]
      break;
 80042cc:	e108      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ce:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042d8:	4b85      	ldr	r3, [pc, #532]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042e4:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042ee:	4b80      	ldr	r3, [pc, #512]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80e1 	beq.w	80044d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f000 8083 	beq.w	8004420 <HAL_RCC_GetSysClockFreq+0x204>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b02      	cmp	r3, #2
 800431e:	f200 80a1 	bhi.w	8004464 <HAL_RCC_GetSysClockFreq+0x248>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x114>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d056      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800432e:	e099      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004330:	4b6f      	ldr	r3, [pc, #444]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800433c:	4b6c      	ldr	r3, [pc, #432]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	4a6b      	ldr	r2, [pc, #428]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b62      	ldr	r3, [pc, #392]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a02 	vldr	s12, [r7, #8]
 800437a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004396:	e087      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b51      	ldr	r3, [pc, #324]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80043be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043da:	e065      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b40      	ldr	r3, [pc, #256]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004402:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800441e:	e043      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800450c <HAL_RCC_GetSysClockFreq+0x2f0>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b2f      	ldr	r3, [pc, #188]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a02 	vldr	s12, [r7, #8]
 8004446:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004462:	e021      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b1e      	ldr	r3, [pc, #120]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a02 	vldr	s12, [r7, #8]
 800448a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	0a5b      	lsrs	r3, r3, #9
 80044ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b2:	3301      	adds	r3, #1
 80044b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044cc:	ee17 3a90 	vmov	r3, s15
 80044d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044d2:	e005      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
      break;
 80044d8:	e002      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044da:	4b07      	ldr	r3, [pc, #28]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044dc:	61bb      	str	r3, [r7, #24]
      break;
 80044de:	bf00      	nop
  }

  return sysclockfreq;
 80044e0:	69bb      	ldr	r3, [r7, #24]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	@ 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	03d09000 	.word	0x03d09000
 80044f8:	003d0900 	.word	0x003d0900
 80044fc:	017d7840 	.word	0x017d7840
 8004500:	46000000 	.word	0x46000000
 8004504:	4c742400 	.word	0x4c742400
 8004508:	4a742400 	.word	0x4a742400
 800450c:	4bbebc20 	.word	0x4bbebc20

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004516:	f7ff fe81 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <HAL_RCC_GetHCLKFreq+0x50>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490f      	ldr	r1, [pc, #60]	@ (8004564 <HAL_RCC_GetHCLKFreq+0x54>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004534:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_RCC_GetHCLKFreq+0x50>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <HAL_RCC_GetHCLKFreq+0x54>)
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <HAL_RCC_GetHCLKFreq+0x58>)
 800454c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800454e:	4a07      	ldr	r2, [pc, #28]	@ (800456c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <HAL_RCC_GetHCLKFreq+0x58>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	08008dc4 	.word	0x08008dc4
 8004568:	24001018 	.word	0x24001018
 800456c:	24001014 	.word	0x24001014

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004574:	f7ff ffcc 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	58024400 	.word	0x58024400
 8004598:	08008dc4 	.word	0x08008dc4

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045a0:	f7ff ffb6 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	58024400 	.word	0x58024400
 80045c4:	08008dc4 	.word	0x08008dc4

080045c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b0ca      	sub	sp, #296	@ 0x128
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80045ec:	2500      	movs	r5, #0
 80045ee:	ea54 0305 	orrs.w	r3, r4, r5
 80045f2:	d049      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045fe:	d02f      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004604:	d828      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800460a:	d01a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800460c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004610:	d822      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800461a:	d007      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800461c:	e01c      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461e:	4bb8      	ldr	r3, [pc, #736]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	4ab7      	ldr	r2, [pc, #732]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800462a:	e01a      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	3308      	adds	r3, #8
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fc8f 	bl	8005f58 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	3328      	adds	r3, #40	@ 0x28
 8004648:	2102      	movs	r1, #2
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fd36 	bl	80060bc <RCCEx_PLL3_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800466a:	4ba5      	ldr	r3, [pc, #660]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004678:	4aa1      	ldr	r2, [pc, #644]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6513      	str	r3, [r2, #80]	@ 0x50
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004694:	f04f 0900 	mov.w	r9, #0
 8004698:	ea58 0309 	orrs.w	r3, r8, r9
 800469c:	d047      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d82a      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c5 	.word	0x080046c5
 80046b4:	080046d3 	.word	0x080046d3
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	08004707 	.word	0x08004707
 80046c0:	08004707 	.word	0x08004707
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	4a8d      	ldr	r2, [pc, #564]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046d0:	e01a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fc3c 	bl	8005f58 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046e6:	e00f      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	3328      	adds	r3, #40	@ 0x28
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fce3 	bl	80060bc <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4b7b      	ldr	r3, [pc, #492]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004714:	f023 0107 	bic.w	r1, r3, #7
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	4a78      	ldr	r2, [pc, #480]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004720:	430b      	orrs	r3, r1
 8004722:	6513      	str	r3, [r2, #80]	@ 0x50
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800473a:	f04f 0b00 	mov.w	fp, #0
 800473e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004742:	d04c      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474e:	d030      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004754:	d829      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004756:	2bc0      	cmp	r3, #192	@ 0xc0
 8004758:	d02d      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800475a:	2bc0      	cmp	r3, #192	@ 0xc0
 800475c:	d825      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800475e:	2b80      	cmp	r3, #128	@ 0x80
 8004760:	d018      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004762:	2b80      	cmp	r3, #128	@ 0x80
 8004764:	d821      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d007      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800476e:	e01c      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4b63      	ldr	r3, [pc, #396]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4a62      	ldr	r2, [pc, #392]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800477c:	e01c      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	3308      	adds	r3, #8
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fbe6 	bl	8005f58 <RCCEx_PLL2_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	3328      	adds	r3, #40	@ 0x28
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f001 fc8d 	bl	80060bc <RCCEx_PLL3_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047a8:	e006      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80047ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80047f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d053      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800480a:	d035      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800480c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004810:	d82e      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004812:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004816:	d031      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004818:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800481c:	d828      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004822:	d01a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004828:	d822      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800482e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004832:	d007      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004834:	e01c      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004836:	4b32      	ldr	r3, [pc, #200]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	4a31      	ldr	r2, [pc, #196]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800483c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004842:	e01c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	3308      	adds	r3, #8
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fb83 	bl	8005f58 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004858:	e011      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fc2a 	bl	80060bc <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800486e:	e006      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	e002      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800487c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004896:	4a1a      	ldr	r2, [pc, #104]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004898:	430b      	orrs	r3, r1
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048b6:	2300      	movs	r3, #0
 80048b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80048c0:	460b      	mov	r3, r1
 80048c2:	4313      	orrs	r3, r2
 80048c4:	d056      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d2:	d038      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80048d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d8:	d831      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048de:	d034      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80048e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048e4:	d82b      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048ea:	d01d      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80048ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048f0:	d825      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80048f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048fc:	e01f      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004904:	4ba2      	ldr	r3, [pc, #648]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	4aa1      	ldr	r2, [pc, #644]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004910:	e01c      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	3308      	adds	r3, #8
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fb1c 	bl	8005f58 <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004926:	e011      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	3328      	adds	r3, #40	@ 0x28
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fbc3 	bl	80060bc <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800494a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004954:	4b8e      	ldr	r3, [pc, #568]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004964:	4a8a      	ldr	r2, [pc, #552]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004966:	430b      	orrs	r3, r1
 8004968:	6593      	str	r3, [r2, #88]	@ 0x58
 800496a:	e003      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800498a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800498e:	460b      	mov	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	d03a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	2b30      	cmp	r3, #48	@ 0x30
 800499c:	d01f      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800499e:	2b30      	cmp	r3, #48	@ 0x30
 80049a0:	d819      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d00c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d815      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d019      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d111      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4b77      	ldr	r3, [pc, #476]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4a76      	ldr	r2, [pc, #472]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	3308      	adds	r3, #8
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fac5 	bl	8005f58 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049ec:	4b68      	ldr	r3, [pc, #416]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fa:	4a65      	ldr	r2, [pc, #404]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d051      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a34:	d035      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a3a:	d82e      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a40:	d031      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a46:	d828      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4c:	d01a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a52:	d822      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5c:	d007      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a60:	4b4b      	ldr	r3, [pc, #300]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	4a4a      	ldr	r2, [pc, #296]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	3308      	adds	r3, #8
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 fa6e 	bl	8005f58 <RCCEx_PLL2_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a82:	e011      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3328      	adds	r3, #40	@ 0x28
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fb15 	bl	80060bc <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aa0:	e002      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abe:	4a34      	ldr	r2, [pc, #208]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ac4:	e003      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ae4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d056      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af8:	d033      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004afa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004afe:	d82c      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b04:	d02f      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b0a:	d826      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b10:	d02b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b16:	d820      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b1c:	d012      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b22:	d81a      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d022      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d115      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	3308      	adds	r3, #8
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fa0e 	bl	8005f58 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b42:	e015      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fab5 	bl	80060bc <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b58:	e00a      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b62:	bf00      	nop
 8004b64:	e004      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b66:	bf00      	nop
 8004b68:	e002      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b86:	4a02      	ldr	r2, [pc, #8]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bb2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	d055      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bc8:	d033      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bce:	d82c      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd4:	d02f      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d826      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004be0:	d02b      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004be6:	d820      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bec:	d012      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bf2:	d81a      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d022      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bfc:	d115      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	3308      	adds	r3, #8
 8004c04:	2101      	movs	r1, #1
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 f9a6 	bl	8005f58 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c12:	e015      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	3328      	adds	r3, #40	@ 0x28
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fa4d 	bl	80060bc <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c28:	e00a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c30:	e006      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c32:	bf00      	nop
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c48:	4ba3      	ldr	r3, [pc, #652]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c58:	4a9f      	ldr	r2, [pc, #636]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c5e:	e003      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d037      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c92:	d00e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c98:	d816      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ca2:	d111      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	4a8b      	ldr	r2, [pc, #556]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 f94c 	bl	8005f58 <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cda:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce8:	4a7b      	ldr	r2, [pc, #492]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	d039      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d81c      	bhi.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d65 	.word	0x08004d65
 8004d2c:	08004d39 	.word	0x08004d39
 8004d30:	08004d47 	.word	0x08004d47
 8004d34:	08004d65 	.word	0x08004d65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d38:	4b67      	ldr	r3, [pc, #412]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	4a66      	ldr	r2, [pc, #408]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d44:	e00f      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f902 	bl	8005f58 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d5a:	e004      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d62:	e000      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d72:	f023 0103 	bic.w	r1, r3, #3
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7c:	4a56      	ldr	r2, [pc, #344]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d82:	e003      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004da2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004da6:	460b      	mov	r3, r1
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f000 809f 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dae:	4b4b      	ldr	r3, [pc, #300]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4a      	ldr	r2, [pc, #296]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dba:	f7fc feff 	bl	8001bbc <HAL_GetTick>
 8004dbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc4:	f7fc fefa 	bl	8001bbc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b64      	cmp	r3, #100	@ 0x64
 8004dd2:	d903      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dda:	e005      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ed      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d179      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004df0:	4b39      	ldr	r3, [pc, #228]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dfc:	4053      	eors	r3, r2
 8004dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e12:	4b31      	ldr	r3, [pc, #196]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	4a30      	ldr	r2, [pc, #192]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e22:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3e:	d118      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fc febc 	bl	8001bbc <HAL_GetTick>
 8004e44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e48:	e00d      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fc feb7 	bl	8001bbc <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d903      	bls.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004e64:	e005      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e66:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0eb      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d129      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e8a:	d10e      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e9c:	091a      	lsrs	r2, r3, #4
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6113      	str	r3, [r2, #16]
 8004ea8:	e005      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004eb4:	6113      	str	r3, [r2, #16]
 8004eb6:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec6:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ecc:	e00e      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004ed6:	e009      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	58024800 	.word	0x58024800
 8004ee0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f002 0301 	and.w	r3, r2, #1
 8004ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f000 8089 	beq.w	8005020 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f14:	2b28      	cmp	r3, #40	@ 0x28
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004ff9 	.word	0x08004ff9
 8004f24:	08004ff1 	.word	0x08004ff1
 8004f28:	08004ff1 	.word	0x08004ff1
 8004f2c:	08004ff1 	.word	0x08004ff1
 8004f30:	08004ff1 	.word	0x08004ff1
 8004f34:	08004ff1 	.word	0x08004ff1
 8004f38:	08004ff1 	.word	0x08004ff1
 8004f3c:	08004ff1 	.word	0x08004ff1
 8004f40:	08004fc5 	.word	0x08004fc5
 8004f44:	08004ff1 	.word	0x08004ff1
 8004f48:	08004ff1 	.word	0x08004ff1
 8004f4c:	08004ff1 	.word	0x08004ff1
 8004f50:	08004ff1 	.word	0x08004ff1
 8004f54:	08004ff1 	.word	0x08004ff1
 8004f58:	08004ff1 	.word	0x08004ff1
 8004f5c:	08004ff1 	.word	0x08004ff1
 8004f60:	08004fdb 	.word	0x08004fdb
 8004f64:	08004ff1 	.word	0x08004ff1
 8004f68:	08004ff1 	.word	0x08004ff1
 8004f6c:	08004ff1 	.word	0x08004ff1
 8004f70:	08004ff1 	.word	0x08004ff1
 8004f74:	08004ff1 	.word	0x08004ff1
 8004f78:	08004ff1 	.word	0x08004ff1
 8004f7c:	08004ff1 	.word	0x08004ff1
 8004f80:	08004ff9 	.word	0x08004ff9
 8004f84:	08004ff1 	.word	0x08004ff1
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004ff1 	.word	0x08004ff1
 8004f90:	08004ff1 	.word	0x08004ff1
 8004f94:	08004ff1 	.word	0x08004ff1
 8004f98:	08004ff1 	.word	0x08004ff1
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004ff1 	.word	0x08004ff1
 8004fac:	08004ff1 	.word	0x08004ff1
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08004ff9 	.word	0x08004ff9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	3308      	adds	r3, #8
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 ffc3 	bl	8005f58 <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00f      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	3328      	adds	r3, #40	@ 0x28
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 f86a 	bl	80060bc <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fee:	e004      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005002:	4bbf      	ldr	r3, [pc, #764]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005010:	4abb      	ldr	r2, [pc, #748]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005012:	430b      	orrs	r3, r1
 8005014:	6553      	str	r3, [r2, #84]	@ 0x54
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f002 0302 	and.w	r3, r2, #2
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005030:	2300      	movs	r3, #0
 8005032:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005036:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d041      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005046:	2b05      	cmp	r3, #5
 8005048:	d824      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	0800509d 	.word	0x0800509d
 8005054:	08005069 	.word	0x08005069
 8005058:	0800507f 	.word	0x0800507f
 800505c:	0800509d 	.word	0x0800509d
 8005060:	0800509d 	.word	0x0800509d
 8005064:	0800509d 	.word	0x0800509d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	3308      	adds	r3, #8
 800506e:	2101      	movs	r1, #1
 8005070:	4618      	mov	r0, r3
 8005072:	f000 ff71 	bl	8005f58 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800507c:	e00f      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	3328      	adds	r3, #40	@ 0x28
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f818 	bl	80060bc <RCCEx_PLL3_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005092:	e004      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800509c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050a6:	4b96      	ldr	r3, [pc, #600]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	f023 0107 	bic.w	r1, r3, #7
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b4:	4a92      	ldr	r2, [pc, #584]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 0304 	and.w	r3, r2, #4
 80050d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d044      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d825      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005145 	.word	0x08005145
 80050fc:	08005111 	.word	0x08005111
 8005100:	08005127 	.word	0x08005127
 8005104:	08005145 	.word	0x08005145
 8005108:	08005145 	.word	0x08005145
 800510c:	08005145 	.word	0x08005145
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	3308      	adds	r3, #8
 8005116:	2101      	movs	r1, #1
 8005118:	4618      	mov	r0, r3
 800511a:	f000 ff1d 	bl	8005f58 <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005124:	e00f      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	3328      	adds	r3, #40	@ 0x28
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 ffc4 	bl	80060bc <RCCEx_PLL3_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800513a:	e004      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800514e:	4b6c      	ldr	r3, [pc, #432]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	f023 0107 	bic.w	r1, r3, #7
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515e:	4a68      	ldr	r2, [pc, #416]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005160:	430b      	orrs	r3, r1
 8005162:	6593      	str	r3, [r2, #88]	@ 0x58
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f002 0320 	and.w	r3, r2, #32
 800517a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d055      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800519a:	d033      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d82c      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a6:	d02f      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ac:	d826      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051b2:	d02b      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80051b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051b8:	d820      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051be:	d012      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80051c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051c4:	d81a      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d022      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80051ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ce:	d115      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	3308      	adds	r3, #8
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 febd 	bl	8005f58 <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051e4:	e015      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	3328      	adds	r3, #40	@ 0x28
 80051ec:	2102      	movs	r1, #2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff64 	bl	80060bc <RCCEx_PLL3_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051fa:	e00a      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005202:	e006      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005204:	bf00      	nop
 8005206:	e004      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521a:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800521c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522a:	4a35      	ldr	r2, [pc, #212]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800522c:	430b      	orrs	r3, r1
 800522e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005250:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d058      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005262:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005266:	d033      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005268:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800526c:	d82c      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	d02f      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005278:	d826      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800527a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800527e:	d02b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005280:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005284:	d820      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528a:	d012      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005290:	d81a      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d022      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d115      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a0:	3308      	adds	r3, #8
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fe57 	bl	8005f58 <RCCEx_PLL2_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052b0:	e015      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	3328      	adds	r3, #40	@ 0x28
 80052b8:	2102      	movs	r1, #2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fefe 	bl	80060bc <RCCEx_PLL3_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052c6:	e00a      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ce:	e006      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052d0:	bf00      	nop
 80052d2:	e004      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052d4:	bf00      	nop
 80052d6:	e002      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10e      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f6:	4a02      	ldr	r2, [pc, #8]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fc:	e006      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005322:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005326:	460b      	mov	r3, r1
 8005328:	4313      	orrs	r3, r2
 800532a:	d055      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005334:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005338:	d033      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800533a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800533e:	d82c      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005344:	d02f      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800534a:	d826      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800534c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005350:	d02b      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005352:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005356:	d820      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800535c:	d012      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800535e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005362:	d81a      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d022      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536c:	d115      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	3308      	adds	r3, #8
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fdee 	bl	8005f58 <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005382:	e015      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005388:	3328      	adds	r3, #40	@ 0x28
 800538a:	2102      	movs	r1, #2
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fe95 	bl	80060bc <RCCEx_PLL3_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005398:	e00a      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a0:	e006      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053a2:	bf00      	nop
 80053a4:	e004      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053a6:	bf00      	nop
 80053a8:	e002      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053c8:	4a9d      	ldr	r2, [pc, #628]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ce:	e003      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f002 0308 	and.w	r3, r2, #8
 80053e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80053f2:	460b      	mov	r3, r1
 80053f4:	4313      	orrs	r3, r2
 80053f6:	d01e      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005404:	d10c      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	3328      	adds	r3, #40	@ 0x28
 800540c:	2102      	movs	r1, #2
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fe54 	bl	80060bc <RCCEx_PLL3_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005420:	4b87      	ldr	r3, [pc, #540]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	4a83      	ldr	r2, [pc, #524]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005432:	430b      	orrs	r3, r1
 8005434:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f002 0310 	and.w	r3, r2, #16
 8005442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800544c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d01e      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d10c      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005468:	3328      	adds	r3, #40	@ 0x28
 800546a:	2102      	movs	r1, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fe25 	bl	80060bc <RCCEx_PLL3_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800547e:	4b70      	ldr	r3, [pc, #448]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800548e:	4a6c      	ldr	r2, [pc, #432]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d03e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054c0:	d022      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80054c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054c6:	d81b      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d0:	d00b      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80054d2:	e015      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	3308      	adds	r3, #8
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd3b 	bl	8005f58 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	3328      	adds	r3, #40	@ 0x28
 80054f0:	2102      	movs	r1, #2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fde2 	bl	80060bc <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005512:	4b4b      	ldr	r3, [pc, #300]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005522:	4a47      	ldr	r2, [pc, #284]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800553e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005540:	2300      	movs	r3, #0
 8005542:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005544:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800555a:	d01f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800555c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005560:	d818      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005566:	d003      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005568:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800556c:	d007      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800556e:	e011      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4b33      	ldr	r3, [pc, #204]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	4a32      	ldr	r2, [pc, #200]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005582:	3328      	adds	r3, #40	@ 0x28
 8005584:	2101      	movs	r1, #1
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fd98 	bl	80060bc <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005592:	e004      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800559c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055a6:	4b26      	ldr	r3, [pc, #152]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	4a22      	ldr	r2, [pc, #136]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b8:	430b      	orrs	r3, r1
 80055ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80055bc:	e003      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80055d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80055d4:	2300      	movs	r3, #0
 80055d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80055d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d034      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f0:	d007      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80055f2:	e011      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4a11      	ldr	r2, [pc, #68]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005600:	e00e      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	3308      	adds	r3, #8
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fca4 	bl	8005f58 <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005616:	e003      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005636:	4a02      	ldr	r2, [pc, #8]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005638:	430b      	orrs	r3, r1
 800563a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800563c:	e006      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800565a:	2300      	movs	r3, #0
 800565c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800565e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005662:	460b      	mov	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	d00c      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2102      	movs	r1, #2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fd23 	bl	80060bc <RCCEx_PLL3_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800568e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005690:	2300      	movs	r3, #0
 8005692:	667b      	str	r3, [r7, #100]	@ 0x64
 8005694:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005698:	460b      	mov	r3, r1
 800569a:	4313      	orrs	r3, r2
 800569c:	d038      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056aa:	d018      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b0:	d811      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b6:	d014      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056bc:	d80b      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c6:	d106      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c8:	4bc3      	ldr	r3, [pc, #780]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4ac2      	ldr	r2, [pc, #776]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80056d4:	e008      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f0:	4bb9      	ldr	r3, [pc, #740]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005700:	4ab5      	ldr	r2, [pc, #724]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005702:	430b      	orrs	r3, r1
 8005704:	6553      	str	r3, [r2, #84]	@ 0x54
 8005706:	e003      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800570c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800571c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800571e:	2300      	movs	r3, #0
 8005720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005722:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005726:	460b      	mov	r3, r1
 8005728:	4313      	orrs	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800572c:	4baa      	ldr	r3, [pc, #680]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573a:	4aa7      	ldr	r2, [pc, #668]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573c:	430b      	orrs	r3, r1
 800573e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800574c:	653b      	str	r3, [r7, #80]	@ 0x50
 800574e:	2300      	movs	r3, #0
 8005750:	657b      	str	r3, [r7, #84]	@ 0x54
 8005752:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005756:	460b      	mov	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800575c:	4b9e      	ldr	r3, [pc, #632]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005768:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800576c:	4a9a      	ldr	r2, [pc, #616]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800577e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005780:	2300      	movs	r3, #0
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005784:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800578e:	4b92      	ldr	r3, [pc, #584]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579c:	4a8e      	ldr	r2, [pc, #568]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b0:	2300      	movs	r3, #0
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057b8:	460b      	mov	r3, r1
 80057ba:	4313      	orrs	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057be:	4b86      	ldr	r3, [pc, #536]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a85      	ldr	r2, [pc, #532]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057c8:	6113      	str	r3, [r2, #16]
 80057ca:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057cc:	6919      	ldr	r1, [r3, #16]
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057d6:	4a80      	ldr	r2, [pc, #512]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80057e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d009      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057f8:	4b77      	ldr	r3, [pc, #476]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	4a74      	ldr	r2, [pc, #464]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005808:	430b      	orrs	r3, r1
 800580a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005818:	633b      	str	r3, [r7, #48]	@ 0x30
 800581a:	2300      	movs	r3, #0
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34
 800581e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005822:	460b      	mov	r3, r1
 8005824:	4313      	orrs	r3, r2
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005828:	4b6b      	ldr	r3, [pc, #428]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005838:	4a67      	ldr	r2, [pc, #412]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	2100      	movs	r1, #0
 8005848:	62b9      	str	r1, [r7, #40]	@ 0x28
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005850:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005854:	460b      	mov	r3, r1
 8005856:	4313      	orrs	r3, r2
 8005858:	d011      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	3308      	adds	r3, #8
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fb78 	bl	8005f58 <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	2100      	movs	r1, #0
 8005888:	6239      	str	r1, [r7, #32]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005890:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	d011      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589e:	3308      	adds	r3, #8
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fb58 	bl	8005f58 <RCCEx_PLL2_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	2100      	movs	r1, #0
 80058c8:	61b9      	str	r1, [r7, #24]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d011      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3308      	adds	r3, #8
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fb38 	bl	8005f58 <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	2100      	movs	r1, #0
 8005908:	6139      	str	r1, [r7, #16]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005914:	460b      	mov	r3, r1
 8005916:	4313      	orrs	r3, r2
 8005918:	d011      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	3328      	adds	r3, #40	@ 0x28
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fbca 	bl	80060bc <RCCEx_PLL3_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	2100      	movs	r1, #0
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d011      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	3328      	adds	r3, #40	@ 0x28
 8005960:	2101      	movs	r1, #1
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fbaa 	bl	80060bc <RCCEx_PLL3_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	2100      	movs	r1, #0
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d011      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	3328      	adds	r3, #40	@ 0x28
 80059a0:	2102      	movs	r1, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fb8a 	bl	80060bc <RCCEx_PLL3_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80059be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80059d2:	46bd      	mov	sp, r7
 80059d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d8:	58024400 	.word	0x58024400

080059dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059e0:	f7fe fd96 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	4904      	ldr	r1, [pc, #16]	@ (8005a04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059f2:	5ccb      	ldrb	r3, [r1, r3]
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	58024400 	.word	0x58024400
 8005a04:	08008dc4 	.word	0x08008dc4

08005a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	@ 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a10:	4ba1      	ldr	r3, [pc, #644]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	0b1b      	lsrs	r3, r3, #12
 8005a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a26:	4b9c      	ldr	r3, [pc, #624]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a32:	4b99      	ldr	r3, [pc, #612]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8111 	beq.w	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	f000 8083 	beq.w	8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	f200 80a1 	bhi.w	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d056      	beq.n	8005b20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a72:	e099      	b.n	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a74:	4b88      	ldr	r3, [pc, #544]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02d      	beq.n	8005adc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a80:	4b85      	ldr	r3, [pc, #532]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	08db      	lsrs	r3, r3, #3
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	4a84      	ldr	r2, [pc, #528]	@ (8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	ee07 3a90 	vmov	s15, r3
 8005a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005abe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ada:	e087      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aee:	4b6a      	ldr	r3, [pc, #424]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b1e:	e065      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b32:	4b59      	ldr	r3, [pc, #356]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b62:	e043      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b76:	4b48      	ldr	r3, [pc, #288]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ba6:	e021      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bba:	4b37      	ldr	r3, [pc, #220]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bec:	4b2a      	ldr	r3, [pc, #168]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	0a5b      	lsrs	r3, r3, #9
 8005bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c12:	ee17 2a90 	vmov	r2, s15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c40:	ee17 2a90 	vmov	r2, s15
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	0e1b      	lsrs	r3, r3, #24
 8005c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6e:	ee17 2a90 	vmov	r2, s15
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c76:	e008      	b.n	8005c8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
}
 8005c8a:	bf00      	nop
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	03d09000 	.word	0x03d09000
 8005ca0:	46000000 	.word	0x46000000
 8005ca4:	4c742400 	.word	0x4c742400
 8005ca8:	4a742400 	.word	0x4a742400
 8005cac:	4bbebc20 	.word	0x4bbebc20

08005cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	@ 0x24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	0d1b      	lsrs	r3, r3, #20
 8005cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ccc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cce:	4b9c      	ldr	r3, [pc, #624]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cda:	4b99      	ldr	r3, [pc, #612]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	08db      	lsrs	r3, r3, #3
 8005ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8111 	beq.w	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	f000 8083 	beq.w	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	f200 80a1 	bhi.w	8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d056      	beq.n	8005dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d1a:	e099      	b.n	8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d1c:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02d      	beq.n	8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d28:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	08db      	lsrs	r3, r3, #3
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	4a84      	ldr	r2, [pc, #528]	@ (8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b7b      	ldr	r3, [pc, #492]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d82:	e087      	b.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b6a      	ldr	r3, [pc, #424]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc6:	e065      	b.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b59      	ldr	r3, [pc, #356]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e0a:	e043      	b.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b48      	ldr	r3, [pc, #288]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4e:	e021      	b.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b37      	ldr	r3, [pc, #220]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e94:	4b2a      	ldr	r3, [pc, #168]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e98:	0a5b      	lsrs	r3, r3, #9
 8005e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eba:	ee17 2a90 	vmov	r2, s15
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	0e1b      	lsrs	r3, r3, #24
 8005ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f16:	ee17 2a90 	vmov	r2, s15
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f1e:	e008      	b.n	8005f32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	609a      	str	r2, [r3, #8]
}
 8005f32:	bf00      	nop
 8005f34:	3724      	adds	r7, #36	@ 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	58024400 	.word	0x58024400
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	46000000 	.word	0x46000000
 8005f4c:	4c742400 	.word	0x4c742400
 8005f50:	4a742400 	.word	0x4a742400
 8005f54:	4bbebc20 	.word	0x4bbebc20

08005f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f66:	4b53      	ldr	r3, [pc, #332]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d101      	bne.n	8005f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e099      	b.n	80060aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f76:	4b4f      	ldr	r3, [pc, #316]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f82:	f7fb fe1b 	bl	8001bbc <HAL_GetTick>
 8005f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f88:	e008      	b.n	8005f9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f8a:	f7fb fe17 	bl	8001bbc <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e086      	b.n	80060aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f9c:	4b45      	ldr	r3, [pc, #276]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005fa8:	4b42      	ldr	r3, [pc, #264]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	493f      	ldr	r1, [pc, #252]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	025b      	lsls	r3, r3, #9
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fec:	4931      	ldr	r1, [pc, #196]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ff2:	4b30      	ldr	r3, [pc, #192]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	492d      	ldr	r1, [pc, #180]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006004:	4b2b      	ldr	r3, [pc, #172]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	f023 0220 	bic.w	r2, r3, #32
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4928      	ldr	r1, [pc, #160]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006016:	4b27      	ldr	r3, [pc, #156]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	4a26      	ldr	r2, [pc, #152]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800601c:	f023 0310 	bic.w	r3, r3, #16
 8006020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006022:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006026:	4b24      	ldr	r3, [pc, #144]	@ (80060b8 <RCCEx_PLL2_Config+0x160>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	69d2      	ldr	r2, [r2, #28]
 800602e:	00d2      	lsls	r2, r2, #3
 8006030:	4920      	ldr	r1, [pc, #128]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006036:	4b1f      	ldr	r3, [pc, #124]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	4a1e      	ldr	r2, [pc, #120]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800603c:	f043 0310 	orr.w	r3, r3, #16
 8006040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006048:	4b1a      	ldr	r3, [pc, #104]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	4a19      	ldr	r2, [pc, #100]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800604e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006054:	e00f      	b.n	8006076 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d106      	bne.n	800606a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800605c:	4b15      	ldr	r3, [pc, #84]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	4a14      	ldr	r2, [pc, #80]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006068:	e005      	b.n	8006076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800606a:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006074:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006076:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a0e      	ldr	r2, [pc, #56]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800607c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006082:	f7fb fd9b 	bl	8001bbc <HAL_GetTick>
 8006086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006088:	e008      	b.n	800609c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800608a:	f7fb fd97 	bl	8001bbc <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e006      	b.n	80060aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <RCCEx_PLL2_Config+0x15c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
 80060b8:	ffff0007 	.word	0xffff0007

080060bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ca:	4b53      	ldr	r3, [pc, #332]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d101      	bne.n	80060da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e099      	b.n	800620e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060da:	4b4f      	ldr	r3, [pc, #316]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a4e      	ldr	r2, [pc, #312]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e6:	f7fb fd69 	bl	8001bbc <HAL_GetTick>
 80060ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060ec:	e008      	b.n	8006100 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060ee:	f7fb fd65 	bl	8001bbc <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e086      	b.n	800620e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006100:	4b45      	ldr	r3, [pc, #276]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f0      	bne.n	80060ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800610c:	4b42      	ldr	r3, [pc, #264]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	051b      	lsls	r3, r3, #20
 800611a:	493f      	ldr	r1, [pc, #252]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 800611c:	4313      	orrs	r3, r2
 800611e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	3b01      	subs	r3, #1
 8006126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	025b      	lsls	r3, r3, #9
 8006132:	b29b      	uxth	r3, r3
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	3b01      	subs	r3, #1
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006150:	4931      	ldr	r1, [pc, #196]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006152:	4313      	orrs	r3, r2
 8006154:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006156:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	492d      	ldr	r1, [pc, #180]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006164:	4313      	orrs	r3, r2
 8006166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006168:	4b2b      	ldr	r3, [pc, #172]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	4928      	ldr	r1, [pc, #160]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800617a:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618a:	4b24      	ldr	r3, [pc, #144]	@ (800621c <RCCEx_PLL3_Config+0x160>)
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	69d2      	ldr	r2, [r2, #28]
 8006192:	00d2      	lsls	r2, r2, #3
 8006194:	4920      	ldr	r1, [pc, #128]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800619a:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a1e      	ldr	r2, [pc, #120]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	4a19      	ldr	r2, [pc, #100]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061b8:	e00f      	b.n	80061da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d106      	bne.n	80061ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061c0:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a14      	ldr	r2, [pc, #80]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061cc:	e005      	b.n	80061da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80061ce:	4b12      	ldr	r3, [pc, #72]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	4a11      	ldr	r2, [pc, #68]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061da:	4b0f      	ldr	r3, [pc, #60]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a0e      	ldr	r2, [pc, #56]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e6:	f7fb fce9 	bl	8001bbc <HAL_GetTick>
 80061ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061ec:	e008      	b.n	8006200 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061ee:	f7fb fce5 	bl	8001bbc <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e006      	b.n	800620e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <RCCEx_PLL3_Config+0x15c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400
 800621c:	ffff0007 	.word	0xffff0007

08006220 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e10f      	b.n	8006452 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a87      	ldr	r2, [pc, #540]	@ (800645c <HAL_SPI_Init+0x23c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <HAL_SPI_Init+0x42>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a86      	ldr	r2, [pc, #536]	@ (8006460 <HAL_SPI_Init+0x240>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00a      	beq.n	8006262 <HAL_SPI_Init+0x42>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a84      	ldr	r2, [pc, #528]	@ (8006464 <HAL_SPI_Init+0x244>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d005      	beq.n	8006262 <HAL_SPI_Init+0x42>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b0f      	cmp	r3, #15
 800625c:	d901      	bls.n	8006262 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0f7      	b.n	8006452 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fe2e 	bl	8006ec4 <SPI_GetPacketSize>
 8006268:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a7b      	ldr	r2, [pc, #492]	@ (800645c <HAL_SPI_Init+0x23c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00c      	beq.n	800628e <HAL_SPI_Init+0x6e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a79      	ldr	r2, [pc, #484]	@ (8006460 <HAL_SPI_Init+0x240>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <HAL_SPI_Init+0x6e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a78      	ldr	r2, [pc, #480]	@ (8006464 <HAL_SPI_Init+0x244>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d002      	beq.n	800628e <HAL_SPI_Init+0x6e>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b08      	cmp	r3, #8
 800628c:	d811      	bhi.n	80062b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006292:	4a72      	ldr	r2, [pc, #456]	@ (800645c <HAL_SPI_Init+0x23c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a70      	ldr	r2, [pc, #448]	@ (8006460 <HAL_SPI_Init+0x240>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_SPI_Init+0x8c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a6f      	ldr	r2, [pc, #444]	@ (8006464 <HAL_SPI_Init+0x244>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d104      	bne.n	80062b6 <HAL_SPI_Init+0x96>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d901      	bls.n	80062b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0cd      	b.n	8006452 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f952 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80062f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062fc:	d119      	bne.n	8006332 <HAL_SPI_Init+0x112>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006306:	d103      	bne.n	8006310 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10c      	bne.n	8006332 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006320:	d107      	bne.n	8006332 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00f      	beq.n	800635e <HAL_SPI_Init+0x13e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b06      	cmp	r3, #6
 8006344:	d90b      	bls.n	800635e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e007      	b.n	800636e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800636c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	431a      	orrs	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	ea42 0103 	orr.w	r1, r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	ea42 0103 	orr.w	r1, r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d113      	bne.n	800640e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800640c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40013000 	.word	0x40013000
 8006460:	40003800 	.word	0x40003800
 8006464:	40003c00 	.word	0x40003c00

08006468 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3320      	adds	r3, #32
 800647e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006480:	f7fb fb9c 	bl	8001bbc <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006492:	2302      	movs	r3, #2
 8006494:	e1d1      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_SPI_Transmit+0x3a>
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e1c9      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_SPI_Transmit+0x4c>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e1c2      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800650c:	d108      	bne.n	8006520 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e009      	b.n	8006534 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006532:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	4b96      	ldr	r3, [pc, #600]	@ (8006794 <HAL_SPI_Transmit+0x32c>)
 800653c:	4013      	ands	r3, r2
 800653e:	88f9      	ldrh	r1, [r7, #6]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	430b      	orrs	r3, r1
 8006546:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006560:	d107      	bne.n	8006572 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d947      	bls.n	800660a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800657a:	e03f      	b.n	80065fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d114      	bne.n	80065b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659a:	1d1a      	adds	r2, r3, #4
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065b2:	e023      	b.n	80065fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b4:	f7fb fb02 	bl	8001bbc <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d803      	bhi.n	80065cc <HAL_SPI_Transmit+0x164>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Transmit+0x16a>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d114      	bne.n	80065fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fba8 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e11e      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1b9      	bne.n	800657c <HAL_SPI_Transmit+0x114>
 8006608:	e0f1      	b.n	80067ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2b07      	cmp	r3, #7
 8006610:	f240 80e6 	bls.w	80067e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006614:	e05d      	b.n	80066d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b02      	cmp	r3, #2
 8006622:	d132      	bne.n	800668a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d918      	bls.n	8006662 <HAL_SPI_Transmit+0x1fa>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d014      	beq.n	8006662 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b02      	subs	r3, #2
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006660:	e037      	b.n	80066d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	1c9a      	adds	r2, r3, #2
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006688:	e023      	b.n	80066d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668a:	f7fb fa97 	bl	8001bbc <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d803      	bhi.n	80066a2 <HAL_SPI_Transmit+0x23a>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d102      	bne.n	80066a8 <HAL_SPI_Transmit+0x240>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d114      	bne.n	80066d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fb3d 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0b3      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d19b      	bne.n	8006616 <HAL_SPI_Transmit+0x1ae>
 80066de:	e086      	b.n	80067ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d154      	bne.n	8006798 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d918      	bls.n	800672c <HAL_SPI_Transmit+0x2c4>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fe:	2b40      	cmp	r3, #64	@ 0x40
 8006700:	d914      	bls.n	800672c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b04      	subs	r3, #4
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800672a:	e059      	b.n	80067e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d917      	bls.n	8006768 <HAL_SPI_Transmit+0x300>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	1c9a      	adds	r2, r3, #2
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b02      	subs	r3, #2
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006766:	e03b      	b.n	80067e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3320      	adds	r3, #32
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006792:	e025      	b.n	80067e0 <HAL_SPI_Transmit+0x378>
 8006794:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006798:	f7fb fa10 	bl	8001bbc <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d803      	bhi.n	80067b0 <HAL_SPI_Transmit+0x348>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d102      	bne.n	80067b6 <HAL_SPI_Transmit+0x34e>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d114      	bne.n	80067e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fab6 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e02c      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f af79 	bne.w	80066e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2108      	movs	r1, #8
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb35 	bl	8006e68 <SPI_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fa87 	bl	8006d28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006838:	2300      	movs	r3, #0
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	b29b      	uxth	r3, r3
 800685c:	3301      	adds	r3, #1
 800685e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3330      	adds	r3, #48	@ 0x30
 8006866:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006868:	f7fb f9a8 	bl	8001bbc <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800687a:	2302      	movs	r3, #2
 800687c:	e250      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_SPI_Receive+0x46>
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e248      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_SPI_Receive+0x58>
 8006898:	2302      	movs	r3, #2
 800689a:	e241      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	88fa      	ldrh	r2, [r7, #6]
 80068c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068f4:	d108      	bne.n	8006908 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e009      	b.n	800691c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800691a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	4b95      	ldr	r3, [pc, #596]	@ (8006b78 <HAL_SPI_Receive+0x334>)
 8006924:	4013      	ands	r3, r2
 8006926:	88f9      	ldrh	r1, [r7, #6]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	430b      	orrs	r3, r1
 800692e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006948:	d107      	bne.n	800695a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006958:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d96c      	bls.n	8006a3c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006962:	e064      	b.n	8006a2e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d114      	bne.n	80069a4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006982:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006984:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069a2:	e044      	b.n	8006a2e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8bfa      	ldrh	r2, [r7, #30]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d919      	bls.n	80069e6 <HAL_SPI_Receive+0x1a2>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d014      	beq.n	80069e6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069c6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069e4:	e023      	b.n	8006a2e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e6:	f7fb f8e9 	bl	8001bbc <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d803      	bhi.n	80069fe <HAL_SPI_Receive+0x1ba>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d102      	bne.n	8006a04 <HAL_SPI_Receive+0x1c0>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d114      	bne.n	8006a2e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f98f 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e178      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d194      	bne.n	8006964 <HAL_SPI_Receive+0x120>
 8006a3a:	e15e      	b.n	8006cfa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b07      	cmp	r3, #7
 8006a42:	f240 8153 	bls.w	8006cec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006a46:	e08f      	b.n	8006b68 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d114      	bne.n	8006a88 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	b292      	uxth	r2, r2
 8006a68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a6e:	1c9a      	adds	r2, r3, #2
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a86:	e06f      	b.n	8006b68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	8bfa      	ldrh	r2, [r7, #30]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d924      	bls.n	8006ae0 <HAL_SPI_Receive+0x29c>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01f      	beq.n	8006ae0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	b292      	uxth	r2, r2
 8006aaa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	8812      	ldrh	r2, [r2, #0]
 8006abe:	b292      	uxth	r2, r2
 8006ac0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ac6:	1c9a      	adds	r2, r3, #2
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b02      	subs	r3, #2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ade:	e043      	b.n	8006b68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d119      	bne.n	8006b20 <HAL_SPI_Receive+0x2dc>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d014      	beq.n	8006b20 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	8812      	ldrh	r2, [r2, #0]
 8006afe:	b292      	uxth	r2, r2
 8006b00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b1e:	e023      	b.n	8006b68 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b20:	f7fb f84c 	bl	8001bbc <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d803      	bhi.n	8006b38 <HAL_SPI_Receive+0x2f4>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Receive+0x2fa>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d114      	bne.n	8006b68 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f8f2 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0db      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f af69 	bne.w	8006a48 <HAL_SPI_Receive+0x204>
 8006b76:	e0c0      	b.n	8006cfa <HAL_SPI_Receive+0x4b6>
 8006b78:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d117      	bne.n	8006bc2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9e:	7812      	ldrb	r2, [r2, #0]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bc0:	e094      	b.n	8006cec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8bfa      	ldrh	r2, [r7, #30]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d946      	bls.n	8006c5e <HAL_SPI_Receive+0x41a>
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d041      	beq.n	8006c5e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b04      	subs	r3, #4
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c5c:	e046      	b.n	8006cec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d81c      	bhi.n	8006ca4 <HAL_SPI_Receive+0x460>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d017      	beq.n	8006ca4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ca2:	e023      	b.n	8006cec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca4:	f7fa ff8a 	bl	8001bbc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d803      	bhi.n	8006cbc <HAL_SPI_Receive+0x478>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Receive+0x47e>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d114      	bne.n	8006cec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f830 	bl	8006d28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e019      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f af41 	bne.w	8006b7c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f814 	bl	8006d28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0208 	orr.w	r2, r2, #8
 8006d46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0210 	orr.w	r2, r2, #16
 8006d56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6919      	ldr	r1, [r3, #16]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b3c      	ldr	r3, [pc, #240]	@ (8006e64 <SPI_CloseTransfer+0x13c>)
 8006d74:	400b      	ands	r3, r1
 8006d76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d014      	beq.n	8006dbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00f      	beq.n	8006dbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0220 	orr.w	r2, r2, #32
 8006dbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d014      	beq.n	8006df4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00f      	beq.n	8006df4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dda:	f043 0204 	orr.w	r2, r3, #4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006df2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00f      	beq.n	8006e1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e04:	f043 0201 	orr.w	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00f      	beq.n	8006e48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e2e:	f043 0208 	orr.w	r2, r3, #8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006e58:	bf00      	nop
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	fffffc90 	.word	0xfffffc90

08006e68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e78:	e010      	b.n	8006e9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7a:	f7fa fe9f 	bl	8001bbc <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d803      	bhi.n	8006e92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d102      	bne.n	8006e98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e00f      	b.n	8006ebc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d0df      	beq.n	8006e7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e042      	b.n	8006f92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa fb90 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fee7 	bl	8007d18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f97c 	bl	8007248 <UART_SetConfig>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01b      	b.n	8006f92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 ff66 	bl	8007e5c <UART_CheckIdleState>
 8006f90:	4603      	mov	r3, r0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b08a      	sub	sp, #40	@ 0x28
 8006f9e:	af02      	add	r7, sp, #8
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d17b      	bne.n	80070ac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_UART_Transmit+0x26>
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e074      	b.n	80070ae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2221      	movs	r2, #33	@ 0x21
 8006fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fd4:	f7fa fdf2 	bl	8001bbc <HAL_GetTick>
 8006fd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff2:	d108      	bne.n	8007006 <HAL_UART_Transmit+0x6c>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	e003      	b.n	800700e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800700e:	e030      	b.n	8007072 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2200      	movs	r2, #0
 8007018:	2180      	movs	r1, #128	@ 0x80
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 ffc8 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e03d      	b.n	80070ae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007046:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	3302      	adds	r3, #2
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	e007      	b.n	8007060 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1c8      	bne.n	8007010 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	2140      	movs	r1, #64	@ 0x40
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 ff91 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e006      	b.n	80070ae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e000      	b.n	80070ae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070ac:	2302      	movs	r3, #2
  }
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b08a      	sub	sp, #40	@ 0x28
 80070ba:	af02      	add	r7, sp, #8
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	603b      	str	r3, [r7, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	f040 80b5 	bne.w	800723c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_UART_Receive+0x28>
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e0ad      	b.n	800723e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2222      	movs	r2, #34	@ 0x22
 80070ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f8:	f7fa fd60 	bl	8001bbc <HAL_GetTick>
 80070fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007116:	d10e      	bne.n	8007136 <HAL_UART_Receive+0x80>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <HAL_UART_Receive+0x76>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007126:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800712a:	e02d      	b.n	8007188 <HAL_UART_Receive+0xd2>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	22ff      	movs	r2, #255	@ 0xff
 8007130:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007134:	e028      	b.n	8007188 <HAL_UART_Receive+0xd2>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10d      	bne.n	800715a <HAL_UART_Receive+0xa4>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <HAL_UART_Receive+0x9a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	22ff      	movs	r2, #255	@ 0xff
 800714a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800714e:	e01b      	b.n	8007188 <HAL_UART_Receive+0xd2>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	227f      	movs	r2, #127	@ 0x7f
 8007154:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007158:	e016      	b.n	8007188 <HAL_UART_Receive+0xd2>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007162:	d10d      	bne.n	8007180 <HAL_UART_Receive+0xca>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <HAL_UART_Receive+0xc0>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	227f      	movs	r2, #127	@ 0x7f
 8007170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007174:	e008      	b.n	8007188 <HAL_UART_Receive+0xd2>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	223f      	movs	r2, #63	@ 0x3f
 800717a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800717e:	e003      	b.n	8007188 <HAL_UART_Receive+0xd2>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800718e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007198:	d108      	bne.n	80071ac <HAL_UART_Receive+0xf6>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	e003      	b.n	80071b4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071b4:	e036      	b.n	8007224 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	2120      	movs	r1, #32
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fef5 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e032      	b.n	800723e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10c      	bne.n	80071f8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	8a7b      	ldrh	r3, [r7, #18]
 80071e8:	4013      	ands	r3, r2
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	3302      	adds	r3, #2
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	e00c      	b.n	8007212 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	8a7b      	ldrh	r3, [r7, #18]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	4013      	ands	r3, r2
 8007206:	b2da      	uxtb	r2, r3
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1c2      	bne.n	80071b6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800724c:	b092      	sub	sp, #72	@ 0x48
 800724e:	af00      	add	r7, sp, #0
 8007250:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	431a      	orrs	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	4313      	orrs	r3, r2
 800726e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4bbe      	ldr	r3, [pc, #760]	@ (8007570 <UART_SetConfig+0x328>)
 8007278:	4013      	ands	r3, r2
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007280:	430b      	orrs	r3, r1
 8007282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4ab3      	ldr	r2, [pc, #716]	@ (8007574 <UART_SetConfig+0x32c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b0:	4313      	orrs	r3, r2
 80072b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	4baf      	ldr	r3, [pc, #700]	@ (8007578 <UART_SetConfig+0x330>)
 80072bc:	4013      	ands	r3, r2
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	f023 010f 	bic.w	r1, r3, #15
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4aa6      	ldr	r2, [pc, #664]	@ (800757c <UART_SetConfig+0x334>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d177      	bne.n	80073d8 <UART_SetConfig+0x190>
 80072e8:	4ba5      	ldr	r3, [pc, #660]	@ (8007580 <UART_SetConfig+0x338>)
 80072ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072f0:	2b28      	cmp	r3, #40	@ 0x28
 80072f2:	d86d      	bhi.n	80073d0 <UART_SetConfig+0x188>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0xb4>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	080073a1 	.word	0x080073a1
 8007300:	080073d1 	.word	0x080073d1
 8007304:	080073d1 	.word	0x080073d1
 8007308:	080073d1 	.word	0x080073d1
 800730c:	080073d1 	.word	0x080073d1
 8007310:	080073d1 	.word	0x080073d1
 8007314:	080073d1 	.word	0x080073d1
 8007318:	080073d1 	.word	0x080073d1
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073d1 	.word	0x080073d1
 8007324:	080073d1 	.word	0x080073d1
 8007328:	080073d1 	.word	0x080073d1
 800732c:	080073d1 	.word	0x080073d1
 8007330:	080073d1 	.word	0x080073d1
 8007334:	080073d1 	.word	0x080073d1
 8007338:	080073d1 	.word	0x080073d1
 800733c:	080073b1 	.word	0x080073b1
 8007340:	080073d1 	.word	0x080073d1
 8007344:	080073d1 	.word	0x080073d1
 8007348:	080073d1 	.word	0x080073d1
 800734c:	080073d1 	.word	0x080073d1
 8007350:	080073d1 	.word	0x080073d1
 8007354:	080073d1 	.word	0x080073d1
 8007358:	080073d1 	.word	0x080073d1
 800735c:	080073b9 	.word	0x080073b9
 8007360:	080073d1 	.word	0x080073d1
 8007364:	080073d1 	.word	0x080073d1
 8007368:	080073d1 	.word	0x080073d1
 800736c:	080073d1 	.word	0x080073d1
 8007370:	080073d1 	.word	0x080073d1
 8007374:	080073d1 	.word	0x080073d1
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073c1 	.word	0x080073c1
 8007380:	080073d1 	.word	0x080073d1
 8007384:	080073d1 	.word	0x080073d1
 8007388:	080073d1 	.word	0x080073d1
 800738c:	080073d1 	.word	0x080073d1
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d1 	.word	0x080073d1
 8007398:	080073d1 	.word	0x080073d1
 800739c:	080073c9 	.word	0x080073c9
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e222      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073a8:	2304      	movs	r3, #4
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e21e      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073b0:	2308      	movs	r3, #8
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e21a      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073b8:	2310      	movs	r3, #16
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073be:	e216      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073c0:	2320      	movs	r3, #32
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c6:	e212      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073c8:	2340      	movs	r3, #64	@ 0x40
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e20e      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073d0:	2380      	movs	r3, #128	@ 0x80
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e20a      	b.n	80077ee <UART_SetConfig+0x5a6>
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a69      	ldr	r2, [pc, #420]	@ (8007584 <UART_SetConfig+0x33c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d130      	bne.n	8007444 <UART_SetConfig+0x1fc>
 80073e2:	4b67      	ldr	r3, [pc, #412]	@ (8007580 <UART_SetConfig+0x338>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d826      	bhi.n	800743c <UART_SetConfig+0x1f4>
 80073ee:	a201      	add	r2, pc, #4	@ (adr r2, 80073f4 <UART_SetConfig+0x1ac>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	08007415 	.word	0x08007415
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	08007425 	.word	0x08007425
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007435 	.word	0x08007435
 800740c:	2300      	movs	r3, #0
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e1ec      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e1e8      	b.n	80077ee <UART_SetConfig+0x5a6>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e1e4      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742a:	e1e0      	b.n	80077ee <UART_SetConfig+0x5a6>
 800742c:	2320      	movs	r3, #32
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007432:	e1dc      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007434:	2340      	movs	r3, #64	@ 0x40
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e1d8      	b.n	80077ee <UART_SetConfig+0x5a6>
 800743c:	2380      	movs	r3, #128	@ 0x80
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e1d4      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a4f      	ldr	r2, [pc, #316]	@ (8007588 <UART_SetConfig+0x340>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d130      	bne.n	80074b0 <UART_SetConfig+0x268>
 800744e:	4b4c      	ldr	r3, [pc, #304]	@ (8007580 <UART_SetConfig+0x338>)
 8007450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b05      	cmp	r3, #5
 8007458:	d826      	bhi.n	80074a8 <UART_SetConfig+0x260>
 800745a:	a201      	add	r2, pc, #4	@ (adr r2, 8007460 <UART_SetConfig+0x218>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007479 	.word	0x08007479
 8007464:	08007481 	.word	0x08007481
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e1b6      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007480:	2304      	movs	r3, #4
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e1b2      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007488:	2308      	movs	r3, #8
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e1ae      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007490:	2310      	movs	r3, #16
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007496:	e1aa      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007498:	2320      	movs	r3, #32
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749e:	e1a6      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074a0:	2340      	movs	r3, #64	@ 0x40
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e1a2      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074a8:	2380      	movs	r3, #128	@ 0x80
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e19e      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a35      	ldr	r2, [pc, #212]	@ (800758c <UART_SetConfig+0x344>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d130      	bne.n	800751c <UART_SetConfig+0x2d4>
 80074ba:	4b31      	ldr	r3, [pc, #196]	@ (8007580 <UART_SetConfig+0x338>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d826      	bhi.n	8007514 <UART_SetConfig+0x2cc>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <UART_SetConfig+0x284>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ea:	e180      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e17c      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e178      	b.n	80077ee <UART_SetConfig+0x5a6>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007502:	e174      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750a:	e170      	b.n	80077ee <UART_SetConfig+0x5a6>
 800750c:	2340      	movs	r3, #64	@ 0x40
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e16c      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e168      	b.n	80077ee <UART_SetConfig+0x5a6>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1b      	ldr	r2, [pc, #108]	@ (8007590 <UART_SetConfig+0x348>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d142      	bne.n	80075ac <UART_SetConfig+0x364>
 8007526:	4b16      	ldr	r3, [pc, #88]	@ (8007580 <UART_SetConfig+0x338>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b05      	cmp	r3, #5
 8007530:	d838      	bhi.n	80075a4 <UART_SetConfig+0x35c>
 8007532:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <UART_SetConfig+0x2f0>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007551 	.word	0x08007551
 800753c:	08007559 	.word	0x08007559
 8007540:	08007561 	.word	0x08007561
 8007544:	08007569 	.word	0x08007569
 8007548:	08007595 	.word	0x08007595
 800754c:	0800759d 	.word	0x0800759d
 8007550:	2300      	movs	r3, #0
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e14a      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e146      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e142      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e13e      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007570:	cfff69f3 	.word	0xcfff69f3
 8007574:	58000c00 	.word	0x58000c00
 8007578:	11fff4ff 	.word	0x11fff4ff
 800757c:	40011000 	.word	0x40011000
 8007580:	58024400 	.word	0x58024400
 8007584:	40004400 	.word	0x40004400
 8007588:	40004800 	.word	0x40004800
 800758c:	40004c00 	.word	0x40004c00
 8007590:	40005000 	.word	0x40005000
 8007594:	2320      	movs	r3, #32
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e128      	b.n	80077ee <UART_SetConfig+0x5a6>
 800759c:	2340      	movs	r3, #64	@ 0x40
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e124      	b.n	80077ee <UART_SetConfig+0x5a6>
 80075a4:	2380      	movs	r3, #128	@ 0x80
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e120      	b.n	80077ee <UART_SetConfig+0x5a6>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4acb      	ldr	r2, [pc, #812]	@ (80078e0 <UART_SetConfig+0x698>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d176      	bne.n	80076a4 <UART_SetConfig+0x45c>
 80075b6:	4bcb      	ldr	r3, [pc, #812]	@ (80078e4 <UART_SetConfig+0x69c>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075be:	2b28      	cmp	r3, #40	@ 0x28
 80075c0:	d86c      	bhi.n	800769c <UART_SetConfig+0x454>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <UART_SetConfig+0x380>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	0800766d 	.word	0x0800766d
 80075cc:	0800769d 	.word	0x0800769d
 80075d0:	0800769d 	.word	0x0800769d
 80075d4:	0800769d 	.word	0x0800769d
 80075d8:	0800769d 	.word	0x0800769d
 80075dc:	0800769d 	.word	0x0800769d
 80075e0:	0800769d 	.word	0x0800769d
 80075e4:	0800769d 	.word	0x0800769d
 80075e8:	08007675 	.word	0x08007675
 80075ec:	0800769d 	.word	0x0800769d
 80075f0:	0800769d 	.word	0x0800769d
 80075f4:	0800769d 	.word	0x0800769d
 80075f8:	0800769d 	.word	0x0800769d
 80075fc:	0800769d 	.word	0x0800769d
 8007600:	0800769d 	.word	0x0800769d
 8007604:	0800769d 	.word	0x0800769d
 8007608:	0800767d 	.word	0x0800767d
 800760c:	0800769d 	.word	0x0800769d
 8007610:	0800769d 	.word	0x0800769d
 8007614:	0800769d 	.word	0x0800769d
 8007618:	0800769d 	.word	0x0800769d
 800761c:	0800769d 	.word	0x0800769d
 8007620:	0800769d 	.word	0x0800769d
 8007624:	0800769d 	.word	0x0800769d
 8007628:	08007685 	.word	0x08007685
 800762c:	0800769d 	.word	0x0800769d
 8007630:	0800769d 	.word	0x0800769d
 8007634:	0800769d 	.word	0x0800769d
 8007638:	0800769d 	.word	0x0800769d
 800763c:	0800769d 	.word	0x0800769d
 8007640:	0800769d 	.word	0x0800769d
 8007644:	0800769d 	.word	0x0800769d
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800769d 	.word	0x0800769d
 8007650:	0800769d 	.word	0x0800769d
 8007654:	0800769d 	.word	0x0800769d
 8007658:	0800769d 	.word	0x0800769d
 800765c:	0800769d 	.word	0x0800769d
 8007660:	0800769d 	.word	0x0800769d
 8007664:	0800769d 	.word	0x0800769d
 8007668:	08007695 	.word	0x08007695
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e0bc      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e0b8      	b.n	80077ee <UART_SetConfig+0x5a6>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e0b4      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e0b0      	b.n	80077ee <UART_SetConfig+0x5a6>
 800768c:	2320      	movs	r3, #32
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e0ac      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007694:	2340      	movs	r3, #64	@ 0x40
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e0a8      	b.n	80077ee <UART_SetConfig+0x5a6>
 800769c:	2380      	movs	r3, #128	@ 0x80
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e0a4      	b.n	80077ee <UART_SetConfig+0x5a6>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a8f      	ldr	r2, [pc, #572]	@ (80078e8 <UART_SetConfig+0x6a0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d130      	bne.n	8007710 <UART_SetConfig+0x4c8>
 80076ae:	4b8d      	ldr	r3, [pc, #564]	@ (80078e4 <UART_SetConfig+0x69c>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d826      	bhi.n	8007708 <UART_SetConfig+0x4c0>
 80076ba:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x478>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d9 	.word	0x080076d9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	08007701 	.word	0x08007701
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e086      	b.n	80077ee <UART_SetConfig+0x5a6>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e082      	b.n	80077ee <UART_SetConfig+0x5a6>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e07e      	b.n	80077ee <UART_SetConfig+0x5a6>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e07a      	b.n	80077ee <UART_SetConfig+0x5a6>
 80076f8:	2320      	movs	r3, #32
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e076      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007700:	2340      	movs	r3, #64	@ 0x40
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e072      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007708:	2380      	movs	r3, #128	@ 0x80
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e06e      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a75      	ldr	r2, [pc, #468]	@ (80078ec <UART_SetConfig+0x6a4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d130      	bne.n	800777c <UART_SetConfig+0x534>
 800771a:	4b72      	ldr	r3, [pc, #456]	@ (80078e4 <UART_SetConfig+0x69c>)
 800771c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b05      	cmp	r3, #5
 8007724:	d826      	bhi.n	8007774 <UART_SetConfig+0x52c>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <UART_SetConfig+0x4e4>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007745 	.word	0x08007745
 8007730:	0800774d 	.word	0x0800774d
 8007734:	08007755 	.word	0x08007755
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	2300      	movs	r3, #0
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e050      	b.n	80077ee <UART_SetConfig+0x5a6>
 800774c:	2304      	movs	r3, #4
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e04c      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007754:	2308      	movs	r3, #8
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e048      	b.n	80077ee <UART_SetConfig+0x5a6>
 800775c:	2310      	movs	r3, #16
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e044      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007764:	2320      	movs	r3, #32
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e040      	b.n	80077ee <UART_SetConfig+0x5a6>
 800776c:	2340      	movs	r3, #64	@ 0x40
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e03c      	b.n	80077ee <UART_SetConfig+0x5a6>
 8007774:	2380      	movs	r3, #128	@ 0x80
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e038      	b.n	80077ee <UART_SetConfig+0x5a6>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5b      	ldr	r2, [pc, #364]	@ (80078f0 <UART_SetConfig+0x6a8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d130      	bne.n	80077e8 <UART_SetConfig+0x5a0>
 8007786:	4b57      	ldr	r3, [pc, #348]	@ (80078e4 <UART_SetConfig+0x69c>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b05      	cmp	r3, #5
 8007790:	d826      	bhi.n	80077e0 <UART_SetConfig+0x598>
 8007792:	a201      	add	r2, pc, #4	@ (adr r2, 8007798 <UART_SetConfig+0x550>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077b1 	.word	0x080077b1
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e01a      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e016      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e012      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077c8:	2310      	movs	r3, #16
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e00e      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077d0:	2320      	movs	r3, #32
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e00a      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077d8:	2340      	movs	r3, #64	@ 0x40
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e006      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077e0:	2380      	movs	r3, #128	@ 0x80
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e002      	b.n	80077ee <UART_SetConfig+0x5a6>
 80077e8:	2380      	movs	r3, #128	@ 0x80
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a3f      	ldr	r2, [pc, #252]	@ (80078f0 <UART_SetConfig+0x6a8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	f040 80f8 	bne.w	80079ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077fe:	2b20      	cmp	r3, #32
 8007800:	dc46      	bgt.n	8007890 <UART_SetConfig+0x648>
 8007802:	2b02      	cmp	r3, #2
 8007804:	f2c0 8082 	blt.w	800790c <UART_SetConfig+0x6c4>
 8007808:	3b02      	subs	r3, #2
 800780a:	2b1e      	cmp	r3, #30
 800780c:	d87e      	bhi.n	800790c <UART_SetConfig+0x6c4>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <UART_SetConfig+0x5cc>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007897 	.word	0x08007897
 8007818:	0800790d 	.word	0x0800790d
 800781c:	0800789f 	.word	0x0800789f
 8007820:	0800790d 	.word	0x0800790d
 8007824:	0800790d 	.word	0x0800790d
 8007828:	0800790d 	.word	0x0800790d
 800782c:	080078af 	.word	0x080078af
 8007830:	0800790d 	.word	0x0800790d
 8007834:	0800790d 	.word	0x0800790d
 8007838:	0800790d 	.word	0x0800790d
 800783c:	0800790d 	.word	0x0800790d
 8007840:	0800790d 	.word	0x0800790d
 8007844:	0800790d 	.word	0x0800790d
 8007848:	0800790d 	.word	0x0800790d
 800784c:	080078bf 	.word	0x080078bf
 8007850:	0800790d 	.word	0x0800790d
 8007854:	0800790d 	.word	0x0800790d
 8007858:	0800790d 	.word	0x0800790d
 800785c:	0800790d 	.word	0x0800790d
 8007860:	0800790d 	.word	0x0800790d
 8007864:	0800790d 	.word	0x0800790d
 8007868:	0800790d 	.word	0x0800790d
 800786c:	0800790d 	.word	0x0800790d
 8007870:	0800790d 	.word	0x0800790d
 8007874:	0800790d 	.word	0x0800790d
 8007878:	0800790d 	.word	0x0800790d
 800787c:	0800790d 	.word	0x0800790d
 8007880:	0800790d 	.word	0x0800790d
 8007884:	0800790d 	.word	0x0800790d
 8007888:	0800790d 	.word	0x0800790d
 800788c:	080078ff 	.word	0x080078ff
 8007890:	2b40      	cmp	r3, #64	@ 0x40
 8007892:	d037      	beq.n	8007904 <UART_SetConfig+0x6bc>
 8007894:	e03a      	b.n	800790c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007896:	f7fe f8a1 	bl	80059dc <HAL_RCCEx_GetD3PCLK1Freq>
 800789a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800789c:	e03c      	b.n	8007918 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe f8b0 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e034      	b.n	8007918 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe f9fc 	bl	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078bc:	e02c      	b.n	8007918 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078be:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <UART_SetConfig+0x69c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d016      	beq.n	80078f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ca:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <UART_SetConfig+0x69c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	08db      	lsrs	r3, r3, #3
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	4a07      	ldr	r2, [pc, #28]	@ (80078f4 <UART_SetConfig+0x6ac>)
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078dc:	e01c      	b.n	8007918 <UART_SetConfig+0x6d0>
 80078de:	bf00      	nop
 80078e0:	40011400 	.word	0x40011400
 80078e4:	58024400 	.word	0x58024400
 80078e8:	40007800 	.word	0x40007800
 80078ec:	40007c00 	.word	0x40007c00
 80078f0:	58000c00 	.word	0x58000c00
 80078f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b9d      	ldr	r3, [pc, #628]	@ (8007b70 <UART_SetConfig+0x928>)
 80078fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fc:	e00c      	b.n	8007918 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078fe:	4b9d      	ldr	r3, [pc, #628]	@ (8007b74 <UART_SetConfig+0x92c>)
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007902:	e009      	b.n	8007918 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790a:	e005      	b.n	8007918 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007916:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 81de 	beq.w	8007cdc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	4a94      	ldr	r2, [pc, #592]	@ (8007b78 <UART_SetConfig+0x930>)
 8007926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800792a:	461a      	mov	r2, r3
 800792c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007932:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007940:	429a      	cmp	r2, r3
 8007942:	d305      	bcc.n	8007950 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800794a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800794c:	429a      	cmp	r2, r3
 800794e:	d903      	bls.n	8007958 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007956:	e1c1      	b.n	8007cdc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795a:	2200      	movs	r2, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	60fa      	str	r2, [r7, #12]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	4a84      	ldr	r2, [pc, #528]	@ (8007b78 <UART_SetConfig+0x930>)
 8007966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796a:	b29b      	uxth	r3, r3
 800796c:	2200      	movs	r2, #0
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800797a:	f7f8 fd09 	bl	8000390 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	020b      	lsls	r3, r1, #8
 8007990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007994:	0202      	lsls	r2, r0, #8
 8007996:	6979      	ldr	r1, [r7, #20]
 8007998:	6849      	ldr	r1, [r1, #4]
 800799a:	0849      	lsrs	r1, r1, #1
 800799c:	2000      	movs	r0, #0
 800799e:	460c      	mov	r4, r1
 80079a0:	4605      	mov	r5, r0
 80079a2:	eb12 0804 	adds.w	r8, r2, r4
 80079a6:	eb43 0905 	adc.w	r9, r3, r5
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	469a      	mov	sl, r3
 80079b2:	4693      	mov	fp, r2
 80079b4:	4652      	mov	r2, sl
 80079b6:	465b      	mov	r3, fp
 80079b8:	4640      	mov	r0, r8
 80079ba:	4649      	mov	r1, r9
 80079bc:	f7f8 fce8 	bl	8000390 <__aeabi_uldivmod>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4613      	mov	r3, r2
 80079c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ce:	d308      	bcc.n	80079e2 <UART_SetConfig+0x79a>
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079d6:	d204      	bcs.n	80079e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079de:	60da      	str	r2, [r3, #12]
 80079e0:	e17c      	b.n	8007cdc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079e8:	e178      	b.n	8007cdc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079f2:	f040 80c5 	bne.w	8007b80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80079f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	dc48      	bgt.n	8007a90 <UART_SetConfig+0x848>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	db7b      	blt.n	8007afa <UART_SetConfig+0x8b2>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d879      	bhi.n	8007afa <UART_SetConfig+0x8b2>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <UART_SetConfig+0x7c4>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a97 	.word	0x08007a97
 8007a10:	08007a9f 	.word	0x08007a9f
 8007a14:	08007afb 	.word	0x08007afb
 8007a18:	08007afb 	.word	0x08007afb
 8007a1c:	08007aa7 	.word	0x08007aa7
 8007a20:	08007afb 	.word	0x08007afb
 8007a24:	08007afb 	.word	0x08007afb
 8007a28:	08007afb 	.word	0x08007afb
 8007a2c:	08007ab7 	.word	0x08007ab7
 8007a30:	08007afb 	.word	0x08007afb
 8007a34:	08007afb 	.word	0x08007afb
 8007a38:	08007afb 	.word	0x08007afb
 8007a3c:	08007afb 	.word	0x08007afb
 8007a40:	08007afb 	.word	0x08007afb
 8007a44:	08007afb 	.word	0x08007afb
 8007a48:	08007afb 	.word	0x08007afb
 8007a4c:	08007ac7 	.word	0x08007ac7
 8007a50:	08007afb 	.word	0x08007afb
 8007a54:	08007afb 	.word	0x08007afb
 8007a58:	08007afb 	.word	0x08007afb
 8007a5c:	08007afb 	.word	0x08007afb
 8007a60:	08007afb 	.word	0x08007afb
 8007a64:	08007afb 	.word	0x08007afb
 8007a68:	08007afb 	.word	0x08007afb
 8007a6c:	08007afb 	.word	0x08007afb
 8007a70:	08007afb 	.word	0x08007afb
 8007a74:	08007afb 	.word	0x08007afb
 8007a78:	08007afb 	.word	0x08007afb
 8007a7c:	08007afb 	.word	0x08007afb
 8007a80:	08007afb 	.word	0x08007afb
 8007a84:	08007afb 	.word	0x08007afb
 8007a88:	08007afb 	.word	0x08007afb
 8007a8c:	08007aed 	.word	0x08007aed
 8007a90:	2b40      	cmp	r3, #64	@ 0x40
 8007a92:	d02e      	beq.n	8007af2 <UART_SetConfig+0x8aa>
 8007a94:	e031      	b.n	8007afa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a96:	f7fc fd6b 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007a9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a9c:	e033      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9e:	f7fc fd7d 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8007aa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007aa4:	e02f      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fd ffac 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e027      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab6:	f107 0318 	add.w	r3, r7, #24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe f8f8 	bl	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac4:	e01f      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b7c <UART_SetConfig+0x934>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b7c <UART_SetConfig+0x934>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <UART_SetConfig+0x928>)
 8007ade:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae4:	e00f      	b.n	8007b06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ae6:	4b22      	ldr	r3, [pc, #136]	@ (8007b70 <UART_SetConfig+0x928>)
 8007ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aea:	e00c      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aec:	4b21      	ldr	r3, [pc, #132]	@ (8007b74 <UART_SetConfig+0x92c>)
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af0:	e009      	b.n	8007b06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af8:	e005      	b.n	8007b06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 80e7 	beq.w	8007cdc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b12:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <UART_SetConfig+0x930>)
 8007b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b20:	005a      	lsls	r2, r3, #1
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	441a      	add	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d916      	bls.n	8007b68 <UART_SetConfig+0x920>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b40:	d212      	bcs.n	8007b68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f023 030f 	bic.w	r3, r3, #15
 8007b4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	e0b9      	b.n	8007cdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b6e:	e0b5      	b.n	8007cdc <UART_SetConfig+0xa94>
 8007b70:	03d09000 	.word	0x03d09000
 8007b74:	003d0900 	.word	0x003d0900
 8007b78:	08008de4 	.word	0x08008de4
 8007b7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	dc49      	bgt.n	8007c1c <UART_SetConfig+0x9d4>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db7c      	blt.n	8007c86 <UART_SetConfig+0xa3e>
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d87a      	bhi.n	8007c86 <UART_SetConfig+0xa3e>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <UART_SetConfig+0x950>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007c23 	.word	0x08007c23
 8007b9c:	08007c2b 	.word	0x08007c2b
 8007ba0:	08007c87 	.word	0x08007c87
 8007ba4:	08007c87 	.word	0x08007c87
 8007ba8:	08007c33 	.word	0x08007c33
 8007bac:	08007c87 	.word	0x08007c87
 8007bb0:	08007c87 	.word	0x08007c87
 8007bb4:	08007c87 	.word	0x08007c87
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c87 	.word	0x08007c87
 8007bc0:	08007c87 	.word	0x08007c87
 8007bc4:	08007c87 	.word	0x08007c87
 8007bc8:	08007c87 	.word	0x08007c87
 8007bcc:	08007c87 	.word	0x08007c87
 8007bd0:	08007c87 	.word	0x08007c87
 8007bd4:	08007c87 	.word	0x08007c87
 8007bd8:	08007c53 	.word	0x08007c53
 8007bdc:	08007c87 	.word	0x08007c87
 8007be0:	08007c87 	.word	0x08007c87
 8007be4:	08007c87 	.word	0x08007c87
 8007be8:	08007c87 	.word	0x08007c87
 8007bec:	08007c87 	.word	0x08007c87
 8007bf0:	08007c87 	.word	0x08007c87
 8007bf4:	08007c87 	.word	0x08007c87
 8007bf8:	08007c87 	.word	0x08007c87
 8007bfc:	08007c87 	.word	0x08007c87
 8007c00:	08007c87 	.word	0x08007c87
 8007c04:	08007c87 	.word	0x08007c87
 8007c08:	08007c87 	.word	0x08007c87
 8007c0c:	08007c87 	.word	0x08007c87
 8007c10:	08007c87 	.word	0x08007c87
 8007c14:	08007c87 	.word	0x08007c87
 8007c18:	08007c79 	.word	0x08007c79
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	d02e      	beq.n	8007c7e <UART_SetConfig+0xa36>
 8007c20:	e031      	b.n	8007c86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c22:	f7fc fca5 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c28:	e033      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c2a:	f7fc fcb7 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8007c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c30:	e02f      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fee6 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c40:	e027      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c42:	f107 0318 	add.w	r3, r7, #24
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f832 	bl	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c50:	e01f      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c52:	4b2d      	ldr	r3, [pc, #180]	@ (8007d08 <UART_SetConfig+0xac0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d08 <UART_SetConfig+0xac0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	08db      	lsrs	r3, r3, #3
 8007c64:	f003 0303 	and.w	r3, r3, #3
 8007c68:	4a28      	ldr	r2, [pc, #160]	@ (8007d0c <UART_SetConfig+0xac4>)
 8007c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c70:	e00f      	b.n	8007c92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007c72:	4b26      	ldr	r3, [pc, #152]	@ (8007d0c <UART_SetConfig+0xac4>)
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c76:	e00c      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c78:	4b25      	ldr	r3, [pc, #148]	@ (8007d10 <UART_SetConfig+0xac8>)
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7c:	e009      	b.n	8007c92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c84:	e005      	b.n	8007c92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c90:	bf00      	nop
    }

    if (pclk != 0U)
 8007c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d021      	beq.n	8007cdc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d14 <UART_SetConfig+0xacc>)
 8007c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	441a      	add	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	2b0f      	cmp	r3, #15
 8007cc0:	d909      	bls.n	8007cd6 <UART_SetConfig+0xa8e>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc8:	d205      	bcs.n	8007cd6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	e002      	b.n	8007cdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cf8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3748      	adds	r7, #72	@ 0x48
 8007d00:	46bd      	mov	sp, r7
 8007d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d06:	bf00      	nop
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	003d0900 	.word	0x003d0900
 8007d14:	08008de4 	.word	0x08008de4

08007d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e16:	d10a      	bne.n	8007e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b098      	sub	sp, #96	@ 0x60
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e6c:	f7f9 fea6 	bl	8001bbc <HAL_GetTick>
 8007e70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d12f      	bne.n	8007ee0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f88e 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d022      	beq.n	8007ee0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e6      	bne.n	8007e9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e063      	b.n	8007fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	d149      	bne.n	8007f82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f857 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d03c      	beq.n	8007f82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	623b      	str	r3, [r7, #32]
   return(result);
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e6      	bne.n	8007f08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f5a:	61fa      	str	r2, [r7, #28]
 8007f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	617b      	str	r3, [r7, #20]
   return(result);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e012      	b.n	8007fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3758      	adds	r7, #88	@ 0x58
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc0:	e04f      	b.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d04b      	beq.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7f9 fdf7 	bl	8001bbc <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e04e      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d037      	beq.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b80      	cmp	r3, #128	@ 0x80
 8007ff6:	d034      	beq.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d031      	beq.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	2b08      	cmp	r3, #8
 800800a:	d110      	bne.n	800802e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2208      	movs	r2, #8
 8008012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f839 	bl	800808c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2208      	movs	r2, #8
 800801e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e029      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800803c:	d111      	bne.n	8008062 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f81f 	bl	800808c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e00f      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4013      	ands	r3, r2
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d0a0      	beq.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b095      	sub	sp, #84	@ 0x54
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80080b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e6      	bne.n	8008094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008154 <UART_EndRxTransfer+0xc8>)
 80080da:	4013      	ands	r3, r2
 80080dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e5      	bne.n	80080c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d118      	bne.n	8008134 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	647b      	str	r3, [r7, #68]	@ 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008120:	61bb      	str	r3, [r7, #24]
 8008122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6979      	ldr	r1, [r7, #20]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	613b      	str	r3, [r7, #16]
   return(result);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008148:	bf00      	nop
 800814a:	3754      	adds	r7, #84	@ 0x54
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	effffffe 	.word	0xeffffffe

08008158 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_UARTEx_DisableFifoMode+0x16>
 800816a:	2302      	movs	r3, #2
 800816c:	e027      	b.n	80081be <HAL_UARTEx_DisableFifoMode+0x66>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2224      	movs	r2, #36	@ 0x24
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0201 	bic.w	r2, r2, #1
 8008194:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800819c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081de:	2302      	movs	r3, #2
 80081e0:	e02d      	b.n	800823e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2224      	movs	r2, #36	@ 0x24
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f850 	bl	80082c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008256:	2b01      	cmp	r3, #1
 8008258:	d101      	bne.n	800825e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800825a:	2302      	movs	r3, #2
 800825c:	e02d      	b.n	80082ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2224      	movs	r2, #36	@ 0x24
 800826a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0201 	bic.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f812 	bl	80082c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d108      	bne.n	80082e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082e4:	e031      	b.n	800834a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082e6:	2310      	movs	r3, #16
 80082e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ea:	2310      	movs	r3, #16
 80082ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	0e5b      	lsrs	r3, r3, #25
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	0f5b      	lsrs	r3, r3, #29
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	7b3a      	ldrb	r2, [r7, #12]
 8008312:	4911      	ldr	r1, [pc, #68]	@ (8008358 <UARTEx_SetNbDataToProcess+0x94>)
 8008314:	5c8a      	ldrb	r2, [r1, r2]
 8008316:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800831a:	7b3a      	ldrb	r2, [r7, #12]
 800831c:	490f      	ldr	r1, [pc, #60]	@ (800835c <UARTEx_SetNbDataToProcess+0x98>)
 800831e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008320:	fb93 f3f2 	sdiv	r3, r3, r2
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	7b7a      	ldrb	r2, [r7, #13]
 8008330:	4909      	ldr	r1, [pc, #36]	@ (8008358 <UARTEx_SetNbDataToProcess+0x94>)
 8008332:	5c8a      	ldrb	r2, [r1, r2]
 8008334:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008338:	7b7a      	ldrb	r2, [r7, #13]
 800833a:	4908      	ldr	r1, [pc, #32]	@ (800835c <UARTEx_SetNbDataToProcess+0x98>)
 800833c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800833e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	08008dfc 	.word	0x08008dfc
 800835c:	08008e04 	.word	0x08008e04

08008360 <_vsniprintf_r>:
 8008360:	b530      	push	{r4, r5, lr}
 8008362:	4614      	mov	r4, r2
 8008364:	2c00      	cmp	r4, #0
 8008366:	b09b      	sub	sp, #108	@ 0x6c
 8008368:	4605      	mov	r5, r0
 800836a:	461a      	mov	r2, r3
 800836c:	da05      	bge.n	800837a <_vsniprintf_r+0x1a>
 800836e:	238b      	movs	r3, #139	@ 0x8b
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	b01b      	add	sp, #108	@ 0x6c
 8008378:	bd30      	pop	{r4, r5, pc}
 800837a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800837e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	9319      	str	r3, [sp, #100]	@ 0x64
 8008388:	bf14      	ite	ne
 800838a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800838e:	4623      	moveq	r3, r4
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	9305      	str	r3, [sp, #20]
 8008394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008398:	9100      	str	r1, [sp, #0]
 800839a:	9104      	str	r1, [sp, #16]
 800839c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80083a0:	4669      	mov	r1, sp
 80083a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80083a4:	f000 f9ae 	bl	8008704 <_svfiprintf_r>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	bfbc      	itt	lt
 80083ac:	238b      	movlt	r3, #139	@ 0x8b
 80083ae:	602b      	strlt	r3, [r5, #0]
 80083b0:	2c00      	cmp	r4, #0
 80083b2:	d0e0      	beq.n	8008376 <_vsniprintf_r+0x16>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e7dc      	b.n	8008376 <_vsniprintf_r+0x16>

080083bc <vsniprintf>:
 80083bc:	b507      	push	{r0, r1, r2, lr}
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	460a      	mov	r2, r1
 80083c4:	4601      	mov	r1, r0
 80083c6:	4803      	ldr	r0, [pc, #12]	@ (80083d4 <vsniprintf+0x18>)
 80083c8:	6800      	ldr	r0, [r0, #0]
 80083ca:	f7ff ffc9 	bl	8008360 <_vsniprintf_r>
 80083ce:	b003      	add	sp, #12
 80083d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80083d4:	24001024 	.word	0x24001024

080083d8 <memset>:
 80083d8:	4402      	add	r2, r0
 80083da:	4603      	mov	r3, r0
 80083dc:	4293      	cmp	r3, r2
 80083de:	d100      	bne.n	80083e2 <memset+0xa>
 80083e0:	4770      	bx	lr
 80083e2:	f803 1b01 	strb.w	r1, [r3], #1
 80083e6:	e7f9      	b.n	80083dc <memset+0x4>

080083e8 <__errno>:
 80083e8:	4b01      	ldr	r3, [pc, #4]	@ (80083f0 <__errno+0x8>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	24001024 	.word	0x24001024

080083f4 <__libc_init_array>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4d0d      	ldr	r5, [pc, #52]	@ (800842c <__libc_init_array+0x38>)
 80083f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008430 <__libc_init_array+0x3c>)
 80083fa:	1b64      	subs	r4, r4, r5
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	2600      	movs	r6, #0
 8008400:	42a6      	cmp	r6, r4
 8008402:	d109      	bne.n	8008418 <__libc_init_array+0x24>
 8008404:	4d0b      	ldr	r5, [pc, #44]	@ (8008434 <__libc_init_array+0x40>)
 8008406:	4c0c      	ldr	r4, [pc, #48]	@ (8008438 <__libc_init_array+0x44>)
 8008408:	f000 fc64 	bl	8008cd4 <_init>
 800840c:	1b64      	subs	r4, r4, r5
 800840e:	10a4      	asrs	r4, r4, #2
 8008410:	2600      	movs	r6, #0
 8008412:	42a6      	cmp	r6, r4
 8008414:	d105      	bne.n	8008422 <__libc_init_array+0x2e>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f855 3b04 	ldr.w	r3, [r5], #4
 800841c:	4798      	blx	r3
 800841e:	3601      	adds	r6, #1
 8008420:	e7ee      	b.n	8008400 <__libc_init_array+0xc>
 8008422:	f855 3b04 	ldr.w	r3, [r5], #4
 8008426:	4798      	blx	r3
 8008428:	3601      	adds	r6, #1
 800842a:	e7f2      	b.n	8008412 <__libc_init_array+0x1e>
 800842c:	08008e48 	.word	0x08008e48
 8008430:	08008e48 	.word	0x08008e48
 8008434:	08008e48 	.word	0x08008e48
 8008438:	08008e4c 	.word	0x08008e4c

0800843c <__retarget_lock_acquire_recursive>:
 800843c:	4770      	bx	lr

0800843e <__retarget_lock_release_recursive>:
 800843e:	4770      	bx	lr

08008440 <memcpy>:
 8008440:	440a      	add	r2, r1
 8008442:	4291      	cmp	r1, r2
 8008444:	f100 33ff 	add.w	r3, r0, #4294967295
 8008448:	d100      	bne.n	800844c <memcpy+0xc>
 800844a:	4770      	bx	lr
 800844c:	b510      	push	{r4, lr}
 800844e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008456:	4291      	cmp	r1, r2
 8008458:	d1f9      	bne.n	800844e <memcpy+0xe>
 800845a:	bd10      	pop	{r4, pc}

0800845c <_free_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	2900      	cmp	r1, #0
 8008462:	d041      	beq.n	80084e8 <_free_r+0x8c>
 8008464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008468:	1f0c      	subs	r4, r1, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfb8      	it	lt
 800846e:	18e4      	addlt	r4, r4, r3
 8008470:	f000 f8e0 	bl	8008634 <__malloc_lock>
 8008474:	4a1d      	ldr	r2, [pc, #116]	@ (80084ec <_free_r+0x90>)
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	b933      	cbnz	r3, 8008488 <_free_r+0x2c>
 800847a:	6063      	str	r3, [r4, #4]
 800847c:	6014      	str	r4, [r2, #0]
 800847e:	4628      	mov	r0, r5
 8008480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008484:	f000 b8dc 	b.w	8008640 <__malloc_unlock>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d908      	bls.n	800849e <_free_r+0x42>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	1821      	adds	r1, r4, r0
 8008490:	428b      	cmp	r3, r1
 8008492:	bf01      	itttt	eq
 8008494:	6819      	ldreq	r1, [r3, #0]
 8008496:	685b      	ldreq	r3, [r3, #4]
 8008498:	1809      	addeq	r1, r1, r0
 800849a:	6021      	streq	r1, [r4, #0]
 800849c:	e7ed      	b.n	800847a <_free_r+0x1e>
 800849e:	461a      	mov	r2, r3
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	b10b      	cbz	r3, 80084a8 <_free_r+0x4c>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d9fa      	bls.n	800849e <_free_r+0x42>
 80084a8:	6811      	ldr	r1, [r2, #0]
 80084aa:	1850      	adds	r0, r2, r1
 80084ac:	42a0      	cmp	r0, r4
 80084ae:	d10b      	bne.n	80084c8 <_free_r+0x6c>
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	4401      	add	r1, r0
 80084b4:	1850      	adds	r0, r2, r1
 80084b6:	4283      	cmp	r3, r0
 80084b8:	6011      	str	r1, [r2, #0]
 80084ba:	d1e0      	bne.n	800847e <_free_r+0x22>
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	6053      	str	r3, [r2, #4]
 80084c2:	4408      	add	r0, r1
 80084c4:	6010      	str	r0, [r2, #0]
 80084c6:	e7da      	b.n	800847e <_free_r+0x22>
 80084c8:	d902      	bls.n	80084d0 <_free_r+0x74>
 80084ca:	230c      	movs	r3, #12
 80084cc:	602b      	str	r3, [r5, #0]
 80084ce:	e7d6      	b.n	800847e <_free_r+0x22>
 80084d0:	6820      	ldr	r0, [r4, #0]
 80084d2:	1821      	adds	r1, r4, r0
 80084d4:	428b      	cmp	r3, r1
 80084d6:	bf04      	itt	eq
 80084d8:	6819      	ldreq	r1, [r3, #0]
 80084da:	685b      	ldreq	r3, [r3, #4]
 80084dc:	6063      	str	r3, [r4, #4]
 80084de:	bf04      	itt	eq
 80084e0:	1809      	addeq	r1, r1, r0
 80084e2:	6021      	streq	r1, [r4, #0]
 80084e4:	6054      	str	r4, [r2, #4]
 80084e6:	e7ca      	b.n	800847e <_free_r+0x22>
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	24001410 	.word	0x24001410

080084f0 <sbrk_aligned>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008530 <sbrk_aligned+0x40>)
 80084f4:	460c      	mov	r4, r1
 80084f6:	6831      	ldr	r1, [r6, #0]
 80084f8:	4605      	mov	r5, r0
 80084fa:	b911      	cbnz	r1, 8008502 <sbrk_aligned+0x12>
 80084fc:	f000 fba4 	bl	8008c48 <_sbrk_r>
 8008500:	6030      	str	r0, [r6, #0]
 8008502:	4621      	mov	r1, r4
 8008504:	4628      	mov	r0, r5
 8008506:	f000 fb9f 	bl	8008c48 <_sbrk_r>
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	d103      	bne.n	8008516 <sbrk_aligned+0x26>
 800850e:	f04f 34ff 	mov.w	r4, #4294967295
 8008512:	4620      	mov	r0, r4
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	1cc4      	adds	r4, r0, #3
 8008518:	f024 0403 	bic.w	r4, r4, #3
 800851c:	42a0      	cmp	r0, r4
 800851e:	d0f8      	beq.n	8008512 <sbrk_aligned+0x22>
 8008520:	1a21      	subs	r1, r4, r0
 8008522:	4628      	mov	r0, r5
 8008524:	f000 fb90 	bl	8008c48 <_sbrk_r>
 8008528:	3001      	adds	r0, #1
 800852a:	d1f2      	bne.n	8008512 <sbrk_aligned+0x22>
 800852c:	e7ef      	b.n	800850e <sbrk_aligned+0x1e>
 800852e:	bf00      	nop
 8008530:	2400140c 	.word	0x2400140c

08008534 <_malloc_r>:
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008538:	1ccd      	adds	r5, r1, #3
 800853a:	f025 0503 	bic.w	r5, r5, #3
 800853e:	3508      	adds	r5, #8
 8008540:	2d0c      	cmp	r5, #12
 8008542:	bf38      	it	cc
 8008544:	250c      	movcc	r5, #12
 8008546:	2d00      	cmp	r5, #0
 8008548:	4606      	mov	r6, r0
 800854a:	db01      	blt.n	8008550 <_malloc_r+0x1c>
 800854c:	42a9      	cmp	r1, r5
 800854e:	d904      	bls.n	800855a <_malloc_r+0x26>
 8008550:	230c      	movs	r3, #12
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	2000      	movs	r0, #0
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008630 <_malloc_r+0xfc>
 800855e:	f000 f869 	bl	8008634 <__malloc_lock>
 8008562:	f8d8 3000 	ldr.w	r3, [r8]
 8008566:	461c      	mov	r4, r3
 8008568:	bb44      	cbnz	r4, 80085bc <_malloc_r+0x88>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff ffbf 	bl	80084f0 <sbrk_aligned>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	4604      	mov	r4, r0
 8008576:	d158      	bne.n	800862a <_malloc_r+0xf6>
 8008578:	f8d8 4000 	ldr.w	r4, [r8]
 800857c:	4627      	mov	r7, r4
 800857e:	2f00      	cmp	r7, #0
 8008580:	d143      	bne.n	800860a <_malloc_r+0xd6>
 8008582:	2c00      	cmp	r4, #0
 8008584:	d04b      	beq.n	800861e <_malloc_r+0xea>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	4639      	mov	r1, r7
 800858a:	4630      	mov	r0, r6
 800858c:	eb04 0903 	add.w	r9, r4, r3
 8008590:	f000 fb5a 	bl	8008c48 <_sbrk_r>
 8008594:	4581      	cmp	r9, r0
 8008596:	d142      	bne.n	800861e <_malloc_r+0xea>
 8008598:	6821      	ldr	r1, [r4, #0]
 800859a:	1a6d      	subs	r5, r5, r1
 800859c:	4629      	mov	r1, r5
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ffa6 	bl	80084f0 <sbrk_aligned>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d03a      	beq.n	800861e <_malloc_r+0xea>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	442b      	add	r3, r5
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	f8d8 3000 	ldr.w	r3, [r8]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	bb62      	cbnz	r2, 8008610 <_malloc_r+0xdc>
 80085b6:	f8c8 7000 	str.w	r7, [r8]
 80085ba:	e00f      	b.n	80085dc <_malloc_r+0xa8>
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	1b52      	subs	r2, r2, r5
 80085c0:	d420      	bmi.n	8008604 <_malloc_r+0xd0>
 80085c2:	2a0b      	cmp	r2, #11
 80085c4:	d917      	bls.n	80085f6 <_malloc_r+0xc2>
 80085c6:	1961      	adds	r1, r4, r5
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	6025      	str	r5, [r4, #0]
 80085cc:	bf18      	it	ne
 80085ce:	6059      	strne	r1, [r3, #4]
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	bf08      	it	eq
 80085d4:	f8c8 1000 	streq.w	r1, [r8]
 80085d8:	5162      	str	r2, [r4, r5]
 80085da:	604b      	str	r3, [r1, #4]
 80085dc:	4630      	mov	r0, r6
 80085de:	f000 f82f 	bl	8008640 <__malloc_unlock>
 80085e2:	f104 000b 	add.w	r0, r4, #11
 80085e6:	1d23      	adds	r3, r4, #4
 80085e8:	f020 0007 	bic.w	r0, r0, #7
 80085ec:	1ac2      	subs	r2, r0, r3
 80085ee:	bf1c      	itt	ne
 80085f0:	1a1b      	subne	r3, r3, r0
 80085f2:	50a3      	strne	r3, [r4, r2]
 80085f4:	e7af      	b.n	8008556 <_malloc_r+0x22>
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	bf0c      	ite	eq
 80085fc:	f8c8 2000 	streq.w	r2, [r8]
 8008600:	605a      	strne	r2, [r3, #4]
 8008602:	e7eb      	b.n	80085dc <_malloc_r+0xa8>
 8008604:	4623      	mov	r3, r4
 8008606:	6864      	ldr	r4, [r4, #4]
 8008608:	e7ae      	b.n	8008568 <_malloc_r+0x34>
 800860a:	463c      	mov	r4, r7
 800860c:	687f      	ldr	r7, [r7, #4]
 800860e:	e7b6      	b.n	800857e <_malloc_r+0x4a>
 8008610:	461a      	mov	r2, r3
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	d1fb      	bne.n	8008610 <_malloc_r+0xdc>
 8008618:	2300      	movs	r3, #0
 800861a:	6053      	str	r3, [r2, #4]
 800861c:	e7de      	b.n	80085dc <_malloc_r+0xa8>
 800861e:	230c      	movs	r3, #12
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	4630      	mov	r0, r6
 8008624:	f000 f80c 	bl	8008640 <__malloc_unlock>
 8008628:	e794      	b.n	8008554 <_malloc_r+0x20>
 800862a:	6005      	str	r5, [r0, #0]
 800862c:	e7d6      	b.n	80085dc <_malloc_r+0xa8>
 800862e:	bf00      	nop
 8008630:	24001410 	.word	0x24001410

08008634 <__malloc_lock>:
 8008634:	4801      	ldr	r0, [pc, #4]	@ (800863c <__malloc_lock+0x8>)
 8008636:	f7ff bf01 	b.w	800843c <__retarget_lock_acquire_recursive>
 800863a:	bf00      	nop
 800863c:	24001408 	.word	0x24001408

08008640 <__malloc_unlock>:
 8008640:	4801      	ldr	r0, [pc, #4]	@ (8008648 <__malloc_unlock+0x8>)
 8008642:	f7ff befc 	b.w	800843e <__retarget_lock_release_recursive>
 8008646:	bf00      	nop
 8008648:	24001408 	.word	0x24001408

0800864c <__ssputs_r>:
 800864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008650:	688e      	ldr	r6, [r1, #8]
 8008652:	461f      	mov	r7, r3
 8008654:	42be      	cmp	r6, r7
 8008656:	680b      	ldr	r3, [r1, #0]
 8008658:	4682      	mov	sl, r0
 800865a:	460c      	mov	r4, r1
 800865c:	4690      	mov	r8, r2
 800865e:	d82d      	bhi.n	80086bc <__ssputs_r+0x70>
 8008660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008668:	d026      	beq.n	80086b8 <__ssputs_r+0x6c>
 800866a:	6965      	ldr	r5, [r4, #20]
 800866c:	6909      	ldr	r1, [r1, #16]
 800866e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008672:	eba3 0901 	sub.w	r9, r3, r1
 8008676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800867a:	1c7b      	adds	r3, r7, #1
 800867c:	444b      	add	r3, r9
 800867e:	106d      	asrs	r5, r5, #1
 8008680:	429d      	cmp	r5, r3
 8008682:	bf38      	it	cc
 8008684:	461d      	movcc	r5, r3
 8008686:	0553      	lsls	r3, r2, #21
 8008688:	d527      	bpl.n	80086da <__ssputs_r+0x8e>
 800868a:	4629      	mov	r1, r5
 800868c:	f7ff ff52 	bl	8008534 <_malloc_r>
 8008690:	4606      	mov	r6, r0
 8008692:	b360      	cbz	r0, 80086ee <__ssputs_r+0xa2>
 8008694:	6921      	ldr	r1, [r4, #16]
 8008696:	464a      	mov	r2, r9
 8008698:	f7ff fed2 	bl	8008440 <memcpy>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	6126      	str	r6, [r4, #16]
 80086aa:	6165      	str	r5, [r4, #20]
 80086ac:	444e      	add	r6, r9
 80086ae:	eba5 0509 	sub.w	r5, r5, r9
 80086b2:	6026      	str	r6, [r4, #0]
 80086b4:	60a5      	str	r5, [r4, #8]
 80086b6:	463e      	mov	r6, r7
 80086b8:	42be      	cmp	r6, r7
 80086ba:	d900      	bls.n	80086be <__ssputs_r+0x72>
 80086bc:	463e      	mov	r6, r7
 80086be:	6820      	ldr	r0, [r4, #0]
 80086c0:	4632      	mov	r2, r6
 80086c2:	4641      	mov	r1, r8
 80086c4:	f000 faa6 	bl	8008c14 <memmove>
 80086c8:	68a3      	ldr	r3, [r4, #8]
 80086ca:	1b9b      	subs	r3, r3, r6
 80086cc:	60a3      	str	r3, [r4, #8]
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	4433      	add	r3, r6
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	2000      	movs	r0, #0
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	462a      	mov	r2, r5
 80086dc:	f000 fac4 	bl	8008c68 <_realloc_r>
 80086e0:	4606      	mov	r6, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d1e0      	bne.n	80086a8 <__ssputs_r+0x5c>
 80086e6:	6921      	ldr	r1, [r4, #16]
 80086e8:	4650      	mov	r0, sl
 80086ea:	f7ff feb7 	bl	800845c <_free_r>
 80086ee:	230c      	movs	r3, #12
 80086f0:	f8ca 3000 	str.w	r3, [sl]
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	e7e9      	b.n	80086d6 <__ssputs_r+0x8a>
	...

08008704 <_svfiprintf_r>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	4698      	mov	r8, r3
 800870a:	898b      	ldrh	r3, [r1, #12]
 800870c:	061b      	lsls	r3, r3, #24
 800870e:	b09d      	sub	sp, #116	@ 0x74
 8008710:	4607      	mov	r7, r0
 8008712:	460d      	mov	r5, r1
 8008714:	4614      	mov	r4, r2
 8008716:	d510      	bpl.n	800873a <_svfiprintf_r+0x36>
 8008718:	690b      	ldr	r3, [r1, #16]
 800871a:	b973      	cbnz	r3, 800873a <_svfiprintf_r+0x36>
 800871c:	2140      	movs	r1, #64	@ 0x40
 800871e:	f7ff ff09 	bl	8008534 <_malloc_r>
 8008722:	6028      	str	r0, [r5, #0]
 8008724:	6128      	str	r0, [r5, #16]
 8008726:	b930      	cbnz	r0, 8008736 <_svfiprintf_r+0x32>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b01d      	add	sp, #116	@ 0x74
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	2340      	movs	r3, #64	@ 0x40
 8008738:	616b      	str	r3, [r5, #20]
 800873a:	2300      	movs	r3, #0
 800873c:	9309      	str	r3, [sp, #36]	@ 0x24
 800873e:	2320      	movs	r3, #32
 8008740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008744:	f8cd 800c 	str.w	r8, [sp, #12]
 8008748:	2330      	movs	r3, #48	@ 0x30
 800874a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088e8 <_svfiprintf_r+0x1e4>
 800874e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008752:	f04f 0901 	mov.w	r9, #1
 8008756:	4623      	mov	r3, r4
 8008758:	469a      	mov	sl, r3
 800875a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875e:	b10a      	cbz	r2, 8008764 <_svfiprintf_r+0x60>
 8008760:	2a25      	cmp	r2, #37	@ 0x25
 8008762:	d1f9      	bne.n	8008758 <_svfiprintf_r+0x54>
 8008764:	ebba 0b04 	subs.w	fp, sl, r4
 8008768:	d00b      	beq.n	8008782 <_svfiprintf_r+0x7e>
 800876a:	465b      	mov	r3, fp
 800876c:	4622      	mov	r2, r4
 800876e:	4629      	mov	r1, r5
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ff6b 	bl	800864c <__ssputs_r>
 8008776:	3001      	adds	r0, #1
 8008778:	f000 80a7 	beq.w	80088ca <_svfiprintf_r+0x1c6>
 800877c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800877e:	445a      	add	r2, fp
 8008780:	9209      	str	r2, [sp, #36]	@ 0x24
 8008782:	f89a 3000 	ldrb.w	r3, [sl]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 809f 	beq.w	80088ca <_svfiprintf_r+0x1c6>
 800878c:	2300      	movs	r3, #0
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008796:	f10a 0a01 	add.w	sl, sl, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	9307      	str	r3, [sp, #28]
 800879e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80087a4:	4654      	mov	r4, sl
 80087a6:	2205      	movs	r2, #5
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	484e      	ldr	r0, [pc, #312]	@ (80088e8 <_svfiprintf_r+0x1e4>)
 80087ae:	f7f7 fd9f 	bl	80002f0 <memchr>
 80087b2:	9a04      	ldr	r2, [sp, #16]
 80087b4:	b9d8      	cbnz	r0, 80087ee <_svfiprintf_r+0xea>
 80087b6:	06d0      	lsls	r0, r2, #27
 80087b8:	bf44      	itt	mi
 80087ba:	2320      	movmi	r3, #32
 80087bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087c0:	0711      	lsls	r1, r2, #28
 80087c2:	bf44      	itt	mi
 80087c4:	232b      	movmi	r3, #43	@ 0x2b
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ca:	f89a 3000 	ldrb.w	r3, [sl]
 80087ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80087d0:	d015      	beq.n	80087fe <_svfiprintf_r+0xfa>
 80087d2:	9a07      	ldr	r2, [sp, #28]
 80087d4:	4654      	mov	r4, sl
 80087d6:	2000      	movs	r0, #0
 80087d8:	f04f 0c0a 	mov.w	ip, #10
 80087dc:	4621      	mov	r1, r4
 80087de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e2:	3b30      	subs	r3, #48	@ 0x30
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d94b      	bls.n	8008880 <_svfiprintf_r+0x17c>
 80087e8:	b1b0      	cbz	r0, 8008818 <_svfiprintf_r+0x114>
 80087ea:	9207      	str	r2, [sp, #28]
 80087ec:	e014      	b.n	8008818 <_svfiprintf_r+0x114>
 80087ee:	eba0 0308 	sub.w	r3, r0, r8
 80087f2:	fa09 f303 	lsl.w	r3, r9, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	46a2      	mov	sl, r4
 80087fc:	e7d2      	b.n	80087a4 <_svfiprintf_r+0xa0>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	1d19      	adds	r1, r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	9103      	str	r1, [sp, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfbb      	ittet	lt
 800880a:	425b      	neglt	r3, r3
 800880c:	f042 0202 	orrlt.w	r2, r2, #2
 8008810:	9307      	strge	r3, [sp, #28]
 8008812:	9307      	strlt	r3, [sp, #28]
 8008814:	bfb8      	it	lt
 8008816:	9204      	strlt	r2, [sp, #16]
 8008818:	7823      	ldrb	r3, [r4, #0]
 800881a:	2b2e      	cmp	r3, #46	@ 0x2e
 800881c:	d10a      	bne.n	8008834 <_svfiprintf_r+0x130>
 800881e:	7863      	ldrb	r3, [r4, #1]
 8008820:	2b2a      	cmp	r3, #42	@ 0x2a
 8008822:	d132      	bne.n	800888a <_svfiprintf_r+0x186>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	1d1a      	adds	r2, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008830:	3402      	adds	r4, #2
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088f8 <_svfiprintf_r+0x1f4>
 8008838:	7821      	ldrb	r1, [r4, #0]
 800883a:	2203      	movs	r2, #3
 800883c:	4650      	mov	r0, sl
 800883e:	f7f7 fd57 	bl	80002f0 <memchr>
 8008842:	b138      	cbz	r0, 8008854 <_svfiprintf_r+0x150>
 8008844:	9b04      	ldr	r3, [sp, #16]
 8008846:	eba0 000a 	sub.w	r0, r0, sl
 800884a:	2240      	movs	r2, #64	@ 0x40
 800884c:	4082      	lsls	r2, r0
 800884e:	4313      	orrs	r3, r2
 8008850:	3401      	adds	r4, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008858:	4824      	ldr	r0, [pc, #144]	@ (80088ec <_svfiprintf_r+0x1e8>)
 800885a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800885e:	2206      	movs	r2, #6
 8008860:	f7f7 fd46 	bl	80002f0 <memchr>
 8008864:	2800      	cmp	r0, #0
 8008866:	d036      	beq.n	80088d6 <_svfiprintf_r+0x1d2>
 8008868:	4b21      	ldr	r3, [pc, #132]	@ (80088f0 <_svfiprintf_r+0x1ec>)
 800886a:	bb1b      	cbnz	r3, 80088b4 <_svfiprintf_r+0x1b0>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	3307      	adds	r3, #7
 8008870:	f023 0307 	bic.w	r3, r3, #7
 8008874:	3308      	adds	r3, #8
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887a:	4433      	add	r3, r6
 800887c:	9309      	str	r3, [sp, #36]	@ 0x24
 800887e:	e76a      	b.n	8008756 <_svfiprintf_r+0x52>
 8008880:	fb0c 3202 	mla	r2, ip, r2, r3
 8008884:	460c      	mov	r4, r1
 8008886:	2001      	movs	r0, #1
 8008888:	e7a8      	b.n	80087dc <_svfiprintf_r+0xd8>
 800888a:	2300      	movs	r3, #0
 800888c:	3401      	adds	r4, #1
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	4619      	mov	r1, r3
 8008892:	f04f 0c0a 	mov.w	ip, #10
 8008896:	4620      	mov	r0, r4
 8008898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800889c:	3a30      	subs	r2, #48	@ 0x30
 800889e:	2a09      	cmp	r2, #9
 80088a0:	d903      	bls.n	80088aa <_svfiprintf_r+0x1a6>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0c6      	beq.n	8008834 <_svfiprintf_r+0x130>
 80088a6:	9105      	str	r1, [sp, #20]
 80088a8:	e7c4      	b.n	8008834 <_svfiprintf_r+0x130>
 80088aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ae:	4604      	mov	r4, r0
 80088b0:	2301      	movs	r3, #1
 80088b2:	e7f0      	b.n	8008896 <_svfiprintf_r+0x192>
 80088b4:	ab03      	add	r3, sp, #12
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	462a      	mov	r2, r5
 80088ba:	4b0e      	ldr	r3, [pc, #56]	@ (80088f4 <_svfiprintf_r+0x1f0>)
 80088bc:	a904      	add	r1, sp, #16
 80088be:	4638      	mov	r0, r7
 80088c0:	f3af 8000 	nop.w
 80088c4:	1c42      	adds	r2, r0, #1
 80088c6:	4606      	mov	r6, r0
 80088c8:	d1d6      	bne.n	8008878 <_svfiprintf_r+0x174>
 80088ca:	89ab      	ldrh	r3, [r5, #12]
 80088cc:	065b      	lsls	r3, r3, #25
 80088ce:	f53f af2d 	bmi.w	800872c <_svfiprintf_r+0x28>
 80088d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088d4:	e72c      	b.n	8008730 <_svfiprintf_r+0x2c>
 80088d6:	ab03      	add	r3, sp, #12
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	462a      	mov	r2, r5
 80088dc:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <_svfiprintf_r+0x1f0>)
 80088de:	a904      	add	r1, sp, #16
 80088e0:	4638      	mov	r0, r7
 80088e2:	f000 f879 	bl	80089d8 <_printf_i>
 80088e6:	e7ed      	b.n	80088c4 <_svfiprintf_r+0x1c0>
 80088e8:	08008e0c 	.word	0x08008e0c
 80088ec:	08008e16 	.word	0x08008e16
 80088f0:	00000000 	.word	0x00000000
 80088f4:	0800864d 	.word	0x0800864d
 80088f8:	08008e12 	.word	0x08008e12

080088fc <_printf_common>:
 80088fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008900:	4616      	mov	r6, r2
 8008902:	4698      	mov	r8, r3
 8008904:	688a      	ldr	r2, [r1, #8]
 8008906:	690b      	ldr	r3, [r1, #16]
 8008908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800890c:	4293      	cmp	r3, r2
 800890e:	bfb8      	it	lt
 8008910:	4613      	movlt	r3, r2
 8008912:	6033      	str	r3, [r6, #0]
 8008914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008918:	4607      	mov	r7, r0
 800891a:	460c      	mov	r4, r1
 800891c:	b10a      	cbz	r2, 8008922 <_printf_common+0x26>
 800891e:	3301      	adds	r3, #1
 8008920:	6033      	str	r3, [r6, #0]
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	0699      	lsls	r1, r3, #26
 8008926:	bf42      	ittt	mi
 8008928:	6833      	ldrmi	r3, [r6, #0]
 800892a:	3302      	addmi	r3, #2
 800892c:	6033      	strmi	r3, [r6, #0]
 800892e:	6825      	ldr	r5, [r4, #0]
 8008930:	f015 0506 	ands.w	r5, r5, #6
 8008934:	d106      	bne.n	8008944 <_printf_common+0x48>
 8008936:	f104 0a19 	add.w	sl, r4, #25
 800893a:	68e3      	ldr	r3, [r4, #12]
 800893c:	6832      	ldr	r2, [r6, #0]
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	42ab      	cmp	r3, r5
 8008942:	dc26      	bgt.n	8008992 <_printf_common+0x96>
 8008944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	3b00      	subs	r3, #0
 800894c:	bf18      	it	ne
 800894e:	2301      	movne	r3, #1
 8008950:	0692      	lsls	r2, r2, #26
 8008952:	d42b      	bmi.n	80089ac <_printf_common+0xb0>
 8008954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008958:	4641      	mov	r1, r8
 800895a:	4638      	mov	r0, r7
 800895c:	47c8      	blx	r9
 800895e:	3001      	adds	r0, #1
 8008960:	d01e      	beq.n	80089a0 <_printf_common+0xa4>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	f003 0306 	and.w	r3, r3, #6
 800896a:	2b04      	cmp	r3, #4
 800896c:	bf02      	ittt	eq
 800896e:	68e5      	ldreq	r5, [r4, #12]
 8008970:	6833      	ldreq	r3, [r6, #0]
 8008972:	1aed      	subeq	r5, r5, r3
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	bf0c      	ite	eq
 8008978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800897c:	2500      	movne	r5, #0
 800897e:	4293      	cmp	r3, r2
 8008980:	bfc4      	itt	gt
 8008982:	1a9b      	subgt	r3, r3, r2
 8008984:	18ed      	addgt	r5, r5, r3
 8008986:	2600      	movs	r6, #0
 8008988:	341a      	adds	r4, #26
 800898a:	42b5      	cmp	r5, r6
 800898c:	d11a      	bne.n	80089c4 <_printf_common+0xc8>
 800898e:	2000      	movs	r0, #0
 8008990:	e008      	b.n	80089a4 <_printf_common+0xa8>
 8008992:	2301      	movs	r3, #1
 8008994:	4652      	mov	r2, sl
 8008996:	4641      	mov	r1, r8
 8008998:	4638      	mov	r0, r7
 800899a:	47c8      	blx	r9
 800899c:	3001      	adds	r0, #1
 800899e:	d103      	bne.n	80089a8 <_printf_common+0xac>
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a8:	3501      	adds	r5, #1
 80089aa:	e7c6      	b.n	800893a <_printf_common+0x3e>
 80089ac:	18e1      	adds	r1, r4, r3
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	2030      	movs	r0, #48	@ 0x30
 80089b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089b6:	4422      	add	r2, r4
 80089b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089c0:	3302      	adds	r3, #2
 80089c2:	e7c7      	b.n	8008954 <_printf_common+0x58>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4622      	mov	r2, r4
 80089c8:	4641      	mov	r1, r8
 80089ca:	4638      	mov	r0, r7
 80089cc:	47c8      	blx	r9
 80089ce:	3001      	adds	r0, #1
 80089d0:	d0e6      	beq.n	80089a0 <_printf_common+0xa4>
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7d9      	b.n	800898a <_printf_common+0x8e>
	...

080089d8 <_printf_i>:
 80089d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	7e0f      	ldrb	r7, [r1, #24]
 80089de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089e0:	2f78      	cmp	r7, #120	@ 0x78
 80089e2:	4691      	mov	r9, r2
 80089e4:	4680      	mov	r8, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	469a      	mov	sl, r3
 80089ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089ee:	d807      	bhi.n	8008a00 <_printf_i+0x28>
 80089f0:	2f62      	cmp	r7, #98	@ 0x62
 80089f2:	d80a      	bhi.n	8008a0a <_printf_i+0x32>
 80089f4:	2f00      	cmp	r7, #0
 80089f6:	f000 80d1 	beq.w	8008b9c <_printf_i+0x1c4>
 80089fa:	2f58      	cmp	r7, #88	@ 0x58
 80089fc:	f000 80b8 	beq.w	8008b70 <_printf_i+0x198>
 8008a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a08:	e03a      	b.n	8008a80 <_printf_i+0xa8>
 8008a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a0e:	2b15      	cmp	r3, #21
 8008a10:	d8f6      	bhi.n	8008a00 <_printf_i+0x28>
 8008a12:	a101      	add	r1, pc, #4	@ (adr r1, 8008a18 <_printf_i+0x40>)
 8008a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a18:	08008a71 	.word	0x08008a71
 8008a1c:	08008a85 	.word	0x08008a85
 8008a20:	08008a01 	.word	0x08008a01
 8008a24:	08008a01 	.word	0x08008a01
 8008a28:	08008a01 	.word	0x08008a01
 8008a2c:	08008a01 	.word	0x08008a01
 8008a30:	08008a85 	.word	0x08008a85
 8008a34:	08008a01 	.word	0x08008a01
 8008a38:	08008a01 	.word	0x08008a01
 8008a3c:	08008a01 	.word	0x08008a01
 8008a40:	08008a01 	.word	0x08008a01
 8008a44:	08008b83 	.word	0x08008b83
 8008a48:	08008aaf 	.word	0x08008aaf
 8008a4c:	08008b3d 	.word	0x08008b3d
 8008a50:	08008a01 	.word	0x08008a01
 8008a54:	08008a01 	.word	0x08008a01
 8008a58:	08008ba5 	.word	0x08008ba5
 8008a5c:	08008a01 	.word	0x08008a01
 8008a60:	08008aaf 	.word	0x08008aaf
 8008a64:	08008a01 	.word	0x08008a01
 8008a68:	08008a01 	.word	0x08008a01
 8008a6c:	08008b45 	.word	0x08008b45
 8008a70:	6833      	ldr	r3, [r6, #0]
 8008a72:	1d1a      	adds	r2, r3, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6032      	str	r2, [r6, #0]
 8008a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a80:	2301      	movs	r3, #1
 8008a82:	e09c      	b.n	8008bbe <_printf_i+0x1e6>
 8008a84:	6833      	ldr	r3, [r6, #0]
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	1d19      	adds	r1, r3, #4
 8008a8a:	6031      	str	r1, [r6, #0]
 8008a8c:	0606      	lsls	r6, r0, #24
 8008a8e:	d501      	bpl.n	8008a94 <_printf_i+0xbc>
 8008a90:	681d      	ldr	r5, [r3, #0]
 8008a92:	e003      	b.n	8008a9c <_printf_i+0xc4>
 8008a94:	0645      	lsls	r5, r0, #25
 8008a96:	d5fb      	bpl.n	8008a90 <_printf_i+0xb8>
 8008a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	da03      	bge.n	8008aa8 <_printf_i+0xd0>
 8008aa0:	232d      	movs	r3, #45	@ 0x2d
 8008aa2:	426d      	negs	r5, r5
 8008aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aa8:	4858      	ldr	r0, [pc, #352]	@ (8008c0c <_printf_i+0x234>)
 8008aaa:	230a      	movs	r3, #10
 8008aac:	e011      	b.n	8008ad2 <_printf_i+0xfa>
 8008aae:	6821      	ldr	r1, [r4, #0]
 8008ab0:	6833      	ldr	r3, [r6, #0]
 8008ab2:	0608      	lsls	r0, r1, #24
 8008ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ab8:	d402      	bmi.n	8008ac0 <_printf_i+0xe8>
 8008aba:	0649      	lsls	r1, r1, #25
 8008abc:	bf48      	it	mi
 8008abe:	b2ad      	uxthmi	r5, r5
 8008ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ac2:	4852      	ldr	r0, [pc, #328]	@ (8008c0c <_printf_i+0x234>)
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	bf14      	ite	ne
 8008ac8:	230a      	movne	r3, #10
 8008aca:	2308      	moveq	r3, #8
 8008acc:	2100      	movs	r1, #0
 8008ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ad2:	6866      	ldr	r6, [r4, #4]
 8008ad4:	60a6      	str	r6, [r4, #8]
 8008ad6:	2e00      	cmp	r6, #0
 8008ad8:	db05      	blt.n	8008ae6 <_printf_i+0x10e>
 8008ada:	6821      	ldr	r1, [r4, #0]
 8008adc:	432e      	orrs	r6, r5
 8008ade:	f021 0104 	bic.w	r1, r1, #4
 8008ae2:	6021      	str	r1, [r4, #0]
 8008ae4:	d04b      	beq.n	8008b7e <_printf_i+0x1a6>
 8008ae6:	4616      	mov	r6, r2
 8008ae8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008aec:	fb03 5711 	mls	r7, r3, r1, r5
 8008af0:	5dc7      	ldrb	r7, [r0, r7]
 8008af2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008af6:	462f      	mov	r7, r5
 8008af8:	42bb      	cmp	r3, r7
 8008afa:	460d      	mov	r5, r1
 8008afc:	d9f4      	bls.n	8008ae8 <_printf_i+0x110>
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	d10b      	bne.n	8008b1a <_printf_i+0x142>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	07df      	lsls	r7, r3, #31
 8008b06:	d508      	bpl.n	8008b1a <_printf_i+0x142>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	6861      	ldr	r1, [r4, #4]
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	bfde      	ittt	le
 8008b10:	2330      	movle	r3, #48	@ 0x30
 8008b12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b1a:	1b92      	subs	r2, r2, r6
 8008b1c:	6122      	str	r2, [r4, #16]
 8008b1e:	f8cd a000 	str.w	sl, [sp]
 8008b22:	464b      	mov	r3, r9
 8008b24:	aa03      	add	r2, sp, #12
 8008b26:	4621      	mov	r1, r4
 8008b28:	4640      	mov	r0, r8
 8008b2a:	f7ff fee7 	bl	80088fc <_printf_common>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d14a      	bne.n	8008bc8 <_printf_i+0x1f0>
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	b004      	add	sp, #16
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	f043 0320 	orr.w	r3, r3, #32
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	4832      	ldr	r0, [pc, #200]	@ (8008c10 <_printf_i+0x238>)
 8008b46:	2778      	movs	r7, #120	@ 0x78
 8008b48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	6831      	ldr	r1, [r6, #0]
 8008b50:	061f      	lsls	r7, r3, #24
 8008b52:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b56:	d402      	bmi.n	8008b5e <_printf_i+0x186>
 8008b58:	065f      	lsls	r7, r3, #25
 8008b5a:	bf48      	it	mi
 8008b5c:	b2ad      	uxthmi	r5, r5
 8008b5e:	6031      	str	r1, [r6, #0]
 8008b60:	07d9      	lsls	r1, r3, #31
 8008b62:	bf44      	itt	mi
 8008b64:	f043 0320 	orrmi.w	r3, r3, #32
 8008b68:	6023      	strmi	r3, [r4, #0]
 8008b6a:	b11d      	cbz	r5, 8008b74 <_printf_i+0x19c>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	e7ad      	b.n	8008acc <_printf_i+0xf4>
 8008b70:	4826      	ldr	r0, [pc, #152]	@ (8008c0c <_printf_i+0x234>)
 8008b72:	e7e9      	b.n	8008b48 <_printf_i+0x170>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	f023 0320 	bic.w	r3, r3, #32
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	e7f6      	b.n	8008b6c <_printf_i+0x194>
 8008b7e:	4616      	mov	r6, r2
 8008b80:	e7bd      	b.n	8008afe <_printf_i+0x126>
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	6961      	ldr	r1, [r4, #20]
 8008b88:	1d18      	adds	r0, r3, #4
 8008b8a:	6030      	str	r0, [r6, #0]
 8008b8c:	062e      	lsls	r6, r5, #24
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	d501      	bpl.n	8008b96 <_printf_i+0x1be>
 8008b92:	6019      	str	r1, [r3, #0]
 8008b94:	e002      	b.n	8008b9c <_printf_i+0x1c4>
 8008b96:	0668      	lsls	r0, r5, #25
 8008b98:	d5fb      	bpl.n	8008b92 <_printf_i+0x1ba>
 8008b9a:	8019      	strh	r1, [r3, #0]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	e7bc      	b.n	8008b1e <_printf_i+0x146>
 8008ba4:	6833      	ldr	r3, [r6, #0]
 8008ba6:	1d1a      	adds	r2, r3, #4
 8008ba8:	6032      	str	r2, [r6, #0]
 8008baa:	681e      	ldr	r6, [r3, #0]
 8008bac:	6862      	ldr	r2, [r4, #4]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7f7 fb9d 	bl	80002f0 <memchr>
 8008bb6:	b108      	cbz	r0, 8008bbc <_printf_i+0x1e4>
 8008bb8:	1b80      	subs	r0, r0, r6
 8008bba:	6060      	str	r0, [r4, #4]
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bc6:	e7aa      	b.n	8008b1e <_printf_i+0x146>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	4632      	mov	r2, r6
 8008bcc:	4649      	mov	r1, r9
 8008bce:	4640      	mov	r0, r8
 8008bd0:	47d0      	blx	sl
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	d0ad      	beq.n	8008b32 <_printf_i+0x15a>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	079b      	lsls	r3, r3, #30
 8008bda:	d413      	bmi.n	8008c04 <_printf_i+0x22c>
 8008bdc:	68e0      	ldr	r0, [r4, #12]
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	4298      	cmp	r0, r3
 8008be2:	bfb8      	it	lt
 8008be4:	4618      	movlt	r0, r3
 8008be6:	e7a6      	b.n	8008b36 <_printf_i+0x15e>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4632      	mov	r2, r6
 8008bec:	4649      	mov	r1, r9
 8008bee:	4640      	mov	r0, r8
 8008bf0:	47d0      	blx	sl
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d09d      	beq.n	8008b32 <_printf_i+0x15a>
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	68e3      	ldr	r3, [r4, #12]
 8008bfa:	9903      	ldr	r1, [sp, #12]
 8008bfc:	1a5b      	subs	r3, r3, r1
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	dcf2      	bgt.n	8008be8 <_printf_i+0x210>
 8008c02:	e7eb      	b.n	8008bdc <_printf_i+0x204>
 8008c04:	2500      	movs	r5, #0
 8008c06:	f104 0619 	add.w	r6, r4, #25
 8008c0a:	e7f5      	b.n	8008bf8 <_printf_i+0x220>
 8008c0c:	08008e1d 	.word	0x08008e1d
 8008c10:	08008e2e 	.word	0x08008e2e

08008c14 <memmove>:
 8008c14:	4288      	cmp	r0, r1
 8008c16:	b510      	push	{r4, lr}
 8008c18:	eb01 0402 	add.w	r4, r1, r2
 8008c1c:	d902      	bls.n	8008c24 <memmove+0x10>
 8008c1e:	4284      	cmp	r4, r0
 8008c20:	4623      	mov	r3, r4
 8008c22:	d807      	bhi.n	8008c34 <memmove+0x20>
 8008c24:	1e43      	subs	r3, r0, #1
 8008c26:	42a1      	cmp	r1, r4
 8008c28:	d008      	beq.n	8008c3c <memmove+0x28>
 8008c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c32:	e7f8      	b.n	8008c26 <memmove+0x12>
 8008c34:	4402      	add	r2, r0
 8008c36:	4601      	mov	r1, r0
 8008c38:	428a      	cmp	r2, r1
 8008c3a:	d100      	bne.n	8008c3e <memmove+0x2a>
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c46:	e7f7      	b.n	8008c38 <memmove+0x24>

08008c48 <_sbrk_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	@ (8008c64 <_sbrk_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fe12 	bl	800187c <_sbrk>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_sbrk_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_sbrk_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	24001404 	.word	0x24001404

08008c68 <_realloc_r>:
 8008c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	4614      	mov	r4, r2
 8008c70:	460d      	mov	r5, r1
 8008c72:	b921      	cbnz	r1, 8008c7e <_realloc_r+0x16>
 8008c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	4611      	mov	r1, r2
 8008c7a:	f7ff bc5b 	b.w	8008534 <_malloc_r>
 8008c7e:	b92a      	cbnz	r2, 8008c8c <_realloc_r+0x24>
 8008c80:	f7ff fbec 	bl	800845c <_free_r>
 8008c84:	4625      	mov	r5, r4
 8008c86:	4628      	mov	r0, r5
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	f000 f81a 	bl	8008cc4 <_malloc_usable_size_r>
 8008c90:	4284      	cmp	r4, r0
 8008c92:	4606      	mov	r6, r0
 8008c94:	d802      	bhi.n	8008c9c <_realloc_r+0x34>
 8008c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c9a:	d8f4      	bhi.n	8008c86 <_realloc_r+0x1e>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff fc48 	bl	8008534 <_malloc_r>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	b908      	cbnz	r0, 8008cac <_realloc_r+0x44>
 8008ca8:	4645      	mov	r5, r8
 8008caa:	e7ec      	b.n	8008c86 <_realloc_r+0x1e>
 8008cac:	42b4      	cmp	r4, r6
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	bf28      	it	cs
 8008cb4:	4632      	movcs	r2, r6
 8008cb6:	f7ff fbc3 	bl	8008440 <memcpy>
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff fbcd 	bl	800845c <_free_r>
 8008cc2:	e7f1      	b.n	8008ca8 <_realloc_r+0x40>

08008cc4 <_malloc_usable_size_r>:
 8008cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc8:	1f18      	subs	r0, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bfbc      	itt	lt
 8008cce:	580b      	ldrlt	r3, [r1, r0]
 8008cd0:	18c0      	addlt	r0, r0, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_init>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr

08008ce0 <_fini>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	bf00      	nop
 8008ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce6:	bc08      	pop	{r3}
 8008ce8:	469e      	mov	lr, r3
 8008cea:	4770      	bx	lr
