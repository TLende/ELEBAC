
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b664  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800b904  0800b904  0000c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba24  0800ba24  0000ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba2c  0800ba2c  0000ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ba30  0800ba30  0000ca30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800ba34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000159c  24000060  0800ba94  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240015fc  0800ba94  0000d5fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a93c  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f5  00000000  00000000  000279ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0002aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d7a  00000000  00000000  0002bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ed2  00000000  00000000  0002c9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001923d  00000000  00000000  00066884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a61a  00000000  00000000  0007fac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ea0db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ec0  00000000  00000000  001ea120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001eefe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b8ec 	.word	0x0800b8ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b8ec 	.word	0x0800b8ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c8:	70fb      	strb	r3, [r7, #3]
	CAM.Tx_Buffer[0] = CMD;
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	713b      	strb	r3, [r7, #4]
	CAM.Tx_Buffer[1] = CMD;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	f007 ff8a 	bl	80085f2 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006f6:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000706:	2208      	movs	r2, #8
 8000708:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <CAN_SendMessage+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <CAN_SendMessage+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <CAN_SendMessage+0x60>)
 800072a:	4906      	ldr	r1, [pc, #24]	@ (8000744 <CAN_SendMessage+0x5c>)
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <CAN_SendMessage+0x64>)
 800072e:	f003 f93e 	bl	80039ae <HAL_FDCAN_AddMessageToTxFifoQ>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <CAN_SendMessage+0x54>
        Error_Handler();
 8000738:	f001 fa50 	bl	8001bdc <Error_Handler>
    }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24001108 	.word	0x24001108
 8000748:	24000088 	.word	0x24000088
 800074c:	2400112c 	.word	0x2400112c

08000750 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800075a:	f000 fccf 	bl	80010fc <W25N_WaitForReady>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d012      	beq.n	800078a <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000764:	4b67      	ldr	r3, [pc, #412]	@ (8000904 <Flash_Init+0x1b4>)
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fadb 	bl	8000d24 <Read_Status_Register>
 800076e:	4603      	mov	r3, r0
 8000770:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000772:	7ebb      	ldrb	r3, [r7, #26]
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800077a:	4b62      	ldr	r3, [pc, #392]	@ (8000904 <Flash_Init+0x1b4>)
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	7eba      	ldrb	r2, [r7, #26]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fafe 	bl	8000d84 <Write_Status_Register>
 8000788:	e011      	b.n	80007ae <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800078a:	4b5e      	ldr	r3, [pc, #376]	@ (8000904 <Flash_Init+0x1b4>)
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fac8 	bl	8000d24 <Read_Status_Register>
 8000794:	4603      	mov	r3, r0
 8000796:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000798:	7efb      	ldrb	r3, [r7, #27]
 800079a:	f023 0308 	bic.w	r3, r3, #8
 800079e:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 80007a0:	4b58      	ldr	r3, [pc, #352]	@ (8000904 <Flash_Init+0x1b4>)
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	7efa      	ldrb	r2, [r7, #27]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 faeb 	bl	8000d84 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <Flash_Init+0x1b4>)
 80007b0:	78db      	ldrb	r3, [r3, #3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fab6 	bl	8000d24 <Read_Status_Register>
 80007b8:	4603      	mov	r3, r0
 80007ba:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 80007bc:	7e7b      	ldrb	r3, [r7, #25]
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 80007c4:	7e7b      	ldrb	r3, [r7, #25]
 80007c6:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007ca:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000904 <Flash_Init+0x1b4>)
 80007ce:	78db      	ldrb	r3, [r3, #3]
 80007d0:	7e7a      	ldrb	r2, [r7, #25]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fad5 	bl	8000d84 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007e8:	2300      	movs	r3, #0
 80007ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007f0:	e031      	b.n	8000856 <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007f2:	2300      	movs	r3, #0
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007fc:	2210      	movs	r2, #16
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f950 	bl	8000aa4 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	e013      	b.n	8000832 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 800080a:	f107 0208 	add.w	r2, r7, #8
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2bff      	cmp	r3, #255	@ 0xff
 8000816:	d109      	bne.n	800082c <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 8000818:	2201      	movs	r2, #1
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	b21a      	sxth	r2, r3
 8000822:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000826:	4313      	orrs	r3, r2
 8000828:	b21b      	sxth	r3, r3
 800082a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	3301      	adds	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	dde8      	ble.n	800080a <Flash_Init+0xba>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	4293      	cmp	r3, r2
 8000840:	d003      	beq.n	800084a <Flash_Init+0xfa>
			Temp_Page += 64;
 8000842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000844:	3340      	adds	r3, #64	@ 0x40
 8000846:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000848:	e005      	b.n	8000856 <Flash_Init+0x106>
		}
		else{
			if(Temp_Page == 0) break;
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <Flash_Init+0x112>
			else Temp_Page -= 64;
 8000850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000852:	3b40      	subs	r3, #64	@ 0x40
 8000854:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000856:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	4293      	cmp	r3, r2
 800085e:	d1c8      	bne.n	80007f2 <Flash_Init+0xa2>
 8000860:	e000      	b.n	8000864 <Flash_Init+0x114>
			if(Temp_Page == 0) break;
 8000862:	bf00      	nop
		}
	}
	Page_Bit=0x0000;
 8000864:	2300      	movs	r3, #0
 8000866:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000868:	e02a      	b.n	80008c0 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800086e:	f107 0108 	add.w	r1, r7, #8
 8000872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000874:	2210      	movs	r2, #16
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f914 	bl	8000aa4 <Read_Data>

		for(int i = 0; i < 16; i++){
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	e013      	b.n	80008aa <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000882:	f107 0208 	add.w	r2, r7, #8
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2bff      	cmp	r3, #255	@ 0xff
 800088e:	d109      	bne.n	80008a4 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	b21a      	sxth	r2, r3
 800089a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	dde8      	ble.n	8000882 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 80008b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d002      	beq.n	80008c0 <Flash_Init+0x170>
			Temp_Page++;
 80008ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008bc:	3301      	adds	r3, #1
 80008be:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80008c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d1cf      	bne.n	800086a <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <Flash_Init+0x1b8>)
 80008cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d0:	461a      	mov	r2, r3
 80008d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008d4:	8093      	strh	r3, [r2, #4]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <Flash_Init+0x1b8>)
 80008d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <Flash_Init+0x1b8>)
 80008e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e8:	805a      	strh	r2, [r3, #2]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <Flash_Init+0x1b8>)
 80008ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f0:	889b      	ldrh	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <Flash_Init+0x1bc>)
 80008f6:	f000 fbdb 	bl	80010b0 <USART3_Printf>
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240000a4 	.word	0x240000a4
 8000908:	240000ac 	.word	0x240000ac
 800090c:	0800b904 	.word	0x0800b904

08000910 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	463b      	mov	r3, r7
 8000918:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fa00 	bl	8000d24 <Read_Status_Register>
 8000924:	4603      	mov	r3, r0
 8000926:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 8000928:	2064      	movs	r0, #100	@ 0x64
 800092a:	f000 fb97 	bl	800105c <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f9f7 	bl	8000d24 <Read_Status_Register>
 8000936:	4603      	mov	r3, r0
 8000938:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800093a:	2064      	movs	r0, #100	@ 0x64
 800093c:	f000 fb8e 	bl	800105c <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f9ee 	bl	8000d24 <Read_Status_Register>
 8000948:	4603      	mov	r3, r0
 800094a:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 800094c:	2064      	movs	r0, #100	@ 0x64
 800094e:	f000 fb85 	bl	800105c <delay_ns>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <Write_Data+0x94>)
 800096a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <Write_Data+0x2a>
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <Write_Data+0x94>)
 8000976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097a:	88db      	ldrh	r3, [r3, #6]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <Write_Data+0x2a>
		Block_Erase(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fb37 	bl	8000ff4 <Block_Erase>
	}
	uint16_t count=0;
 8000986:	2300      	movs	r3, #0
 8000988:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800098a:	e028      	b.n	80009de <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <Write_Data+0x94>)
 800098e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <Write_Data+0x94>)
 800099c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <Write_Data+0x94>)
 80009a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80009aa:	60d3      	str	r3, [r2, #12]
		data++;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <Write_Data+0x94>)
 80009b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b8:	88db      	ldrh	r3, [r3, #6]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <Write_Data+0x94>)
 80009c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c4:	80da      	strh	r2, [r3, #6]
		count++;
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	3301      	adds	r3, #1
 80009ca:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <Write_Data+0x94>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	88db      	ldrh	r3, [r3, #6]
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009d8:	d301      	bcc.n	80009de <Write_Data+0x82>
			Write_to_page();
 80009da:	f000 f80b 	bl	80009f4 <Write_to_page>
	while(count<lenght){
 80009de:	89fa      	ldrh	r2, [r7, #14]
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3d2      	bcc.n	800098c <Write_Data+0x30>
		}
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	240000ac 	.word	0x240000ac

080009f4 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if(Flash.Buffer_Select==0){
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <Write_to_page+0xa8>)
 80009fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d116      	bne.n	8000a32 <Write_to_page+0x3e>
		Flash.Buffer_Select=1;
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <Write_to_page+0xa8>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_1;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <Write_to_page+0xa8>)
 8000a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <Write_to_page+0xac>)
 8000a18:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <Write_to_page+0xa8>)
 8000a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a20:	2200      	movs	r2, #0
 8000a22:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 8000a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a28:	491c      	ldr	r1, [pc, #112]	@ (8000a9c <Write_to_page+0xa8>)
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 fa0c 	bl	8000e48 <Write_Data_Buffer>
 8000a30:	e015      	b.n	8000a5e <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_Select=0;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <Write_to_page+0xa8>)
 8000a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <Write_to_page+0xa8>)
 8000a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <Write_to_page+0xa8>)
 8000a46:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <Write_to_page+0xa8>)
 8000a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a4e:	2200      	movs	r2, #0
 8000a50:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a56:	4912      	ldr	r1, [pc, #72]	@ (8000aa0 <Write_to_page+0xac>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f9f5 	bl	8000e48 <Write_Data_Buffer>
	}
	Program_Page_Flash(Flash.Page_Index);
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <Write_to_page+0xa8>)
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fa2a 	bl	8000ec0 <Program_Page_Flash>
	Flash.Page_Index++;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <Write_to_page+0xa8>)
 8000a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a72:	889b      	ldrh	r3, [r3, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <Write_to_page+0xa8>)
 8000a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7e:	809a      	strh	r2, [r3, #4]
	Flash.Buffer_Index=0;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <Write_to_page+0xa8>)
 8000a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a86:	2200      	movs	r2, #0
 8000a88:	80da      	strh	r2, [r3, #6]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <Write_to_page+0xa8>)
 8000a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f81c 	bl	8000ad0 <Automatic_Block_Managment>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	240000ac 	.word	0x240000ac
 8000aa0:	240008ac 	.word	0x240008ac

08000aa4 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fa36 	bl	8000f28 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6838      	ldr	r0, [r7, #0]
 8000ac2:	f000 fa63 	bl	8000f8c <Read_Data_Buffer>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	099b      	lsrs	r3, r3, #6
 8000ade:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ae6:	885b      	ldrh	r3, [r3, #2]
 8000ae8:	89fa      	ldrh	r2, [r7, #14]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d00a      	beq.n	8000b04 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa7f 	bl	8000ff4 <Block_Erase>
		Flash.Block_Mem=Block;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000afc:	461a      	mov	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	8053      	strh	r3, [r2, #2]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000b02:	e005      	b.n	8000b10 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	8053      	strh	r3, [r2, #2]
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240000ac 	.word	0x240000ac

08000b1c <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	USART3_Printf("Sletter minne ...\r\n");
 8000b22:	4823      	ldr	r0, [pc, #140]	@ (8000bb0 <Chip_Erase+0x94>)
 8000b24:	f000 fac4 	bl	80010b0 <USART3_Printf>
	for(int i = 0; i <= 1024; i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e009      	b.n	8000b42 <Chip_Erase+0x26>
		Block_Erase(i*64);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	019b      	lsls	r3, r3, #6
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa5c 	bl	8000ff4 <Block_Erase>
	for(int i = 0; i <= 1024; i++){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b48:	ddf1      	ble.n	8000b2e <Chip_Erase+0x12>
	}
	Flash.Buffer_Index=0;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b50:	2200      	movs	r2, #0
 8000b52:	80da      	strh	r2, [r3, #6]
	Flash.Page_Index=0;
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	809a      	strh	r2, [r3, #4]
	Flash.Block_Mem=0;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b64:	2200      	movs	r2, #0
 8000b66:	805a      	strh	r2, [r3, #2]
	Flash.Buffer_Select=0;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	Flash.Buffer_p=Flash.Buffer_0;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b7c:	60d3      	str	r3, [r2, #12]

	Flash_Data* pointer = &Flash;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <Chip_Erase+0x98>)
 8000b80:	603b      	str	r3, [r7, #0]
	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b88:	21ff      	movs	r1, #255	@ 0xff
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00a fa30 	bl	800aff0 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b9a:	21ff      	movs	r1, #255	@ 0xff
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00a fa27 	bl	800aff0 <memset>
	USART3_Printf("Ferdig\r\n");
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <Chip_Erase+0x9c>)
 8000ba4:	f000 fa84 	bl	80010b0 <USART3_Printf>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	0800b91c 	.word	0x0800b91c
 8000bb4:	240000ac 	.word	0x240000ac
 8000bb8:	0800b930 	.word	0x0800b930

08000bbc <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc0:	b089      	sub	sp, #36	@ 0x24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	80fb      	strh	r3, [r7, #6]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f9ab 	bl	8000f28 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000bd2:	88f9      	ldrh	r1, [r7, #6]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	b28b      	uxth	r3, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4698      	mov	r8, r3
 8000be0:	4691      	mov	r9, r2
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf6:	b28b      	uxth	r3, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	00eb      	lsls	r3, r5, #3
 8000c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c0c:	00e2      	lsls	r2, r4, #3
 8000c0e:	460b      	mov	r3, r1
 8000c10:	3307      	adds	r3, #7
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	ebad 0d03 	sub.w	sp, sp, r3
 8000c1a:	466b      	mov	r3, sp
 8000c1c:	3300      	adds	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <Read_Data_Cont+0x118>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <Read_Data_Cont+0x118>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <Read_Data_Cont+0x118>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c32:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <Read_Data_Cont+0x118>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <Read_Data_Cont+0x11c>)
 8000c3e:	f003 ffb5 	bl	8004bac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	2204      	movs	r2, #4
 8000c46:	4923      	ldr	r1, [pc, #140]	@ (8000cd4 <Read_Data_Cont+0x118>)
 8000c48:	4824      	ldr	r0, [pc, #144]	@ (8000cdc <Read_Data_Cont+0x120>)
 8000c4a:	f006 ff39 	bl	8007ac0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	68f9      	ldr	r1, [r7, #12]
 8000c56:	4821      	ldr	r0, [pc, #132]	@ (8000cdc <Read_Data_Cont+0x120>)
 8000c58:	f007 f920 	bl	8007e9c <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3303      	adds	r3, #3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	330b      	adds	r3, #11
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[len-1]==0x0F)){
 8000c74:	e018      	b.n	8000ca8 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c76:	8bf9      	ldrh	r1, [r7, #30]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <Read_Data_Cont+0x124>)
 8000c7e:	f000 fa17 	bl	80010b0 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	68f9      	ldr	r1, [r7, #12]
 8000c8a:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <Read_Data_Cont+0x120>)
 8000c8c:	f007 f906 	bl	8007e9c <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	330b      	adds	r3, #11
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[len-1]==0x0F)){
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cae:	d105      	bne.n	8000cbc <Read_Data_Cont+0x100>
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d0dc      	beq.n	8000c76 <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <Read_Data_Cont+0x11c>)
 8000cc2:	f003 ff73 	bl	8004bac <HAL_GPIO_WritePin>
 8000cc6:	46b5      	mov	sp, r6
}
 8000cc8:	bf00      	nop
 8000cca:	3724      	adds	r7, #36	@ 0x24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cd2:	bf00      	nop
 8000cd4:	24000098 	.word	0x24000098
 8000cd8:	58020000 	.word	0x58020000
 8000cdc:	240011cc 	.word	0x240011cc
 8000ce0:	0800b93c 	.word	0x0800b93c

08000ce4 <Write_Enable>:
////////Low-level code for interfacing with Flash IC////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <Write_Enable+0x34>)
 8000cea:	2206      	movs	r2, #6
 8000cec:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <Write_Enable+0x38>)
 8000cf4:	f003 ff5a 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cf8:	2364      	movs	r3, #100	@ 0x64
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4906      	ldr	r1, [pc, #24]	@ (8000d18 <Write_Enable+0x34>)
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <Write_Enable+0x3c>)
 8000d00:	f006 fede 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8000d04:	2201      	movs	r2, #1
 8000d06:	2110      	movs	r1, #16
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <Write_Enable+0x38>)
 8000d0a:	f003 ff4f 	bl	8004bac <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d0e:	2064      	movs	r0, #100	@ 0x64
 8000d10:	f000 f9a4 	bl	800105c <delay_ns>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	24000098 	.word	0x24000098
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	240011cc 	.word	0x240011cc

08000d24 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <Read_Status_Register+0x50>)
 8000d30:	220f      	movs	r2, #15
 8000d32:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <Read_Status_Register+0x50>)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <Read_Status_Register+0x54>)
 8000d40:	f003 ff34 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d44:	2364      	movs	r3, #100	@ 0x64
 8000d46:	2202      	movs	r2, #2
 8000d48:	490a      	ldr	r1, [pc, #40]	@ (8000d74 <Read_Status_Register+0x50>)
 8000d4a:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <Read_Status_Register+0x58>)
 8000d4c:	f006 feb8 	bl	8007ac0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d50:	2364      	movs	r3, #100	@ 0x64
 8000d52:	2201      	movs	r2, #1
 8000d54:	490a      	ldr	r1, [pc, #40]	@ (8000d80 <Read_Status_Register+0x5c>)
 8000d56:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <Read_Status_Register+0x58>)
 8000d58:	f007 f8a0 	bl	8007e9c <HAL_SPI_Receive>
	csHIGH();
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <Read_Status_Register+0x54>)
 8000d62:	f003 ff23 	bl	8004bac <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d66:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <Read_Status_Register+0x50>)
 8000d68:	795b      	ldrb	r3, [r3, #5]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000098 	.word	0x24000098
 8000d78:	58020000 	.word	0x58020000
 8000d7c:	240011cc 	.word	0x240011cc
 8000d80:	2400009d 	.word	0x2400009d

08000d84 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <Write_Status_Register+0x50>)
 8000d96:	221f      	movs	r2, #31
 8000d98:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <Write_Status_Register+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <Write_Status_Register+0x50>)
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <Write_Status_Register+0x54>)
 8000dac:	f003 fefe 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	2203      	movs	r2, #3
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <Write_Status_Register+0x50>)
 8000db6:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <Write_Status_Register+0x58>)
 8000db8:	f006 fe82 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <Write_Status_Register+0x54>)
 8000dc2:	f003 fef3 	bl	8004bac <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dc6:	2064      	movs	r0, #100	@ 0x64
 8000dc8:	f000 f948 	bl	800105c <delay_ns>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24000098 	.word	0x24000098
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	240011cc 	.word	0x240011cc

08000de0 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <Read_ID+0x5c>)
 8000de8:	229f      	movs	r2, #159	@ 0x9f
 8000dea:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <Read_ID+0x5c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <Read_ID+0x60>)
 8000df8:	f003 fed8 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000dfc:	2364      	movs	r3, #100	@ 0x64
 8000dfe:	2202      	movs	r2, #2
 8000e00:	490e      	ldr	r1, [pc, #56]	@ (8000e3c <Read_ID+0x5c>)
 8000e02:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <Read_ID+0x64>)
 8000e04:	f006 fe5c 	bl	8007ac0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	2364      	movs	r3, #100	@ 0x64
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <Read_ID+0x64>)
 8000e10:	f007 f844 	bl	8007e9c <HAL_SPI_Receive>
	csHIGH();
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	4809      	ldr	r0, [pc, #36]	@ (8000e40 <Read_ID+0x60>)
 8000e1a:	f003 fec7 	bl	8004bac <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e1e:	2064      	movs	r0, #100	@ 0x64
 8000e20:	f000 f91c 	bl	800105c <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e24:	793b      	ldrb	r3, [r7, #4]
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	79b9      	ldrb	r1, [r7, #6]
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	4313      	orrs	r3, r2
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000098 	.word	0x24000098
 8000e40:	58020000 	.word	0x58020000
 8000e44:	240011cc 	.word	0x240011cc

08000e48 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e58:	f7ff ff44 	bl	8000ce4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <Write_Data_Buffer+0x6c>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <Write_Data_Buffer+0x6c>)
 8000e6c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <Write_Data_Buffer+0x6c>)
 8000e74:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e76:	2200      	movs	r2, #0
 8000e78:	2110      	movs	r1, #16
 8000e7a:	480f      	ldr	r0, [pc, #60]	@ (8000eb8 <Write_Data_Buffer+0x70>)
 8000e7c:	f003 fe96 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e80:	2364      	movs	r3, #100	@ 0x64
 8000e82:	2203      	movs	r2, #3
 8000e84:	490b      	ldr	r1, [pc, #44]	@ (8000eb4 <Write_Data_Buffer+0x6c>)
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <Write_Data_Buffer+0x74>)
 8000e88:	f006 fe1a 	bl	8007ac0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e8c:	88ba      	ldrh	r2, [r7, #4]
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <Write_Data_Buffer+0x74>)
 8000e96:	f006 fe13 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <Write_Data_Buffer+0x70>)
 8000ea0:	f003 fe84 	bl	8004bac <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ea4:	2064      	movs	r0, #100	@ 0x64
 8000ea6:	f000 f8d9 	bl	800105c <delay_ns>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000098 	.word	0x24000098
 8000eb8:	58020000 	.word	0x58020000
 8000ebc:	240011cc 	.word	0x240011cc

08000ec0 <Program_Page_Flash>:

//Program page with data in buffer
void Program_Page_Flash(uint16_t Page_Addr){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000eca:	f7ff ff0b 	bl	8000ce4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <Program_Page_Flash+0x5c>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <Program_Page_Flash+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <Program_Page_Flash+0x5c>)
 8000ee4:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <Program_Page_Flash+0x5c>)
 8000eec:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <Program_Page_Flash+0x60>)
 8000ef4:	f003 fe5a 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2204      	movs	r2, #4
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <Program_Page_Flash+0x5c>)
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <Program_Page_Flash+0x64>)
 8000f00:	f006 fdde 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <Program_Page_Flash+0x60>)
 8000f0a:	f003 fe4f 	bl	8004bac <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f0e:	f000 f8f5 	bl	80010fc <W25N_WaitForReady>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000098 	.word	0x24000098
 8000f20:	58020000 	.word	0x58020000
 8000f24:	240011cc 	.word	0x240011cc

08000f28 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <Select_Page_Read+0x58>)
 8000f34:	2213      	movs	r2, #19
 8000f36:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <Select_Page_Read+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <Select_Page_Read+0x58>)
 8000f48:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <Select_Page_Read+0x58>)
 8000f50:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <Select_Page_Read+0x5c>)
 8000f58:	f003 fe28 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <Select_Page_Read+0x58>)
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <Select_Page_Read+0x60>)
 8000f64:	f006 fdac 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <Select_Page_Read+0x5c>)
 8000f6e:	f003 fe1d 	bl	8004bac <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f72:	f000 f8c3 	bl	80010fc <W25N_WaitForReady>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000098 	.word	0x24000098
 8000f84:	58020000 	.word	0x58020000
 8000f88:	240011cc 	.word	0x240011cc

08000f8c <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <Read_Data_Buffer+0x5c>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <Read_Data_Buffer+0x5c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <Read_Data_Buffer+0x5c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <Read_Data_Buffer+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <Read_Data_Buffer+0x60>)
 8000fb6:	f003 fdf9 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	490a      	ldr	r1, [pc, #40]	@ (8000fe8 <Read_Data_Buffer+0x5c>)
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <Read_Data_Buffer+0x64>)
 8000fc2:	f006 fd7d 	bl	8007ac0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <Read_Data_Buffer+0x64>)
 8000fd0:	f006 ff64 	bl	8007e9c <HAL_SPI_Receive>
	csHIGH();
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <Read_Data_Buffer+0x60>)
 8000fda:	f003 fde7 	bl	8004bac <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24000098 	.word	0x24000098
 8000fec:	58020000 	.word	0x58020000
 8000ff0:	240011cc 	.word	0x240011cc

08000ff4 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000ffe:	f7ff fe71 	bl	8000ce4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <Block_Erase+0x5c>)
 8001004:	22d8      	movs	r2, #216	@ 0xd8
 8001006:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <Block_Erase+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <Block_Erase+0x5c>)
 8001018:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <Block_Erase+0x5c>)
 8001020:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <Block_Erase+0x60>)
 8001028:	f003 fdc0 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 800102c:	2364      	movs	r3, #100	@ 0x64
 800102e:	2204      	movs	r2, #4
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <Block_Erase+0x5c>)
 8001032:	4809      	ldr	r0, [pc, #36]	@ (8001058 <Block_Erase+0x64>)
 8001034:	f006 fd44 	bl	8007ac0 <HAL_SPI_Transmit>
	csHIGH();
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <Block_Erase+0x60>)
 800103e:	f003 fdb5 	bl	8004bac <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001042:	f000 f85b 	bl	80010fc <W25N_WaitForReady>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000098 	.word	0x24000098
 8001054:	58020000 	.word	0x58020000
 8001058:	240011cc 	.word	0x240011cc

0800105c <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <delay_ns+0x48>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0a5b      	lsrs	r3, r3, #9
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <delay_ns+0x4c>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	09db      	lsrs	r3, r3, #7
 8001072:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <delay_ns+0x50>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001084:	bf00      	nop
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <delay_ns+0x50>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f8      	bhi.n	8001086 <delay_ns+0x2a>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	24000000 	.word	0x24000000
 80010a8:	00044b83 	.word	0x00044b83
 80010ac:	e0001000 	.word	0xe0001000

080010b0 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010b0:	b40f      	push	{r0, r1, r2, r3}
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b0a2      	sub	sp, #136	@ 0x88
 80010b6:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010bc:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010be:	f107 0008 	add.w	r0, r7, #8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	f009 ff83 	bl	800afd4 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f904 	bl	80002e0 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f107 0108 	add.w	r1, r7, #8
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <USART3_Printf+0x48>)
 80010e6:	f007 fa84 	bl	80085f2 <HAL_UART_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3788      	adds	r7, #136	@ 0x88
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr
 80010f8:	24001410 	.word	0x24001410

080010fc <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f7ff ffab 	bl	800105c <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001106:	e002      	b.n	800110e <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f7ff ffa7 	bl	800105c <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <W25N_WaitForReady+0x2c>)
 8001110:	795b      	ldrb	r3, [r3, #5]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe06 	bl	8000d24 <Read_Status_Register>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f2      	bne.n	8001108 <W25N_WaitForReady+0xc>
    }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	240000a4 	.word	0x240000a4

0800112c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001130:	f3bf 8f4f 	dsb	sy
}
 8001134:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <__NVIC_SystemReset+0x24>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800113e:	4904      	ldr	r1, [pc, #16]	@ (8001150 <__NVIC_SystemReset+0x24>)
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_SystemReset+0x28>)
 8001142:	4313      	orrs	r3, r2
 8001144:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001146:	f3bf 8f4f 	dsb	sy
}
 800114a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <__NVIC_SystemReset+0x20>
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	05fa0004 	.word	0x05fa0004

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800115c:	f000 fd12 	bl	8001b84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f001 fa92 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f936 	bl	80013d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 8001168:	f000 fc98 	bl	8001a9c <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 fbbe 	bl	80018ec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001170:	f000 f9ac 	bl	80014cc <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001174:	f000 fa34 	bl	80015e0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001178:	f000 fb6c 	bl	8001854 <MX_USART3_UART_Init>
  MX_UART5_Init();
 800117c:	f000 fa86 	bl	800168c <MX_UART5_Init>
  MX_UART8_Init();
 8001180:	f000 fad0 	bl	8001724 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8001184:	f000 fb1a 	bl	80017bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 8001188:	4b85      	ldr	r3, [pc, #532]	@ (80013a0 <main+0x248>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2202      	movs	r2, #2
 800118e:	4985      	ldr	r1, [pc, #532]	@ (80013a4 <main+0x24c>)
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fb85 	bl	80088a0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8001196:	4b84      	ldr	r3, [pc, #528]	@ (80013a8 <main+0x250>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2202      	movs	r2, #2
 800119c:	4983      	ldr	r1, [pc, #524]	@ (80013ac <main+0x254>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 fb7e 	bl	80088a0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 80011a4:	4b82      	ldr	r3, [pc, #520]	@ (80013b0 <main+0x258>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2202      	movs	r2, #2
 80011aa:	4982      	ldr	r1, [pc, #520]	@ (80013b4 <main+0x25c>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f007 fb77 	bl	80088a0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff facc 	bl	8000750 <Flash_Init>
  Flash.ID=Read_ID();
 80011b8:	f7ff fe12 	bl	8000de0 <Read_ID>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a7e      	ldr	r2, [pc, #504]	@ (80013b8 <main+0x260>)
 80011c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011c4:	6093      	str	r3, [r2, #8]
  while (1)
  {
	  Read_Register(SR);
 80011c6:	4b7d      	ldr	r3, [pc, #500]	@ (80013bc <main+0x264>)
 80011c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011cc:	f7ff fba0 	bl	8000910 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 80011d0:	2364      	movs	r3, #100	@ 0x64
 80011d2:	2201      	movs	r2, #1
 80011d4:	497a      	ldr	r1, [pc, #488]	@ (80013c0 <main+0x268>)
 80011d6:	487b      	ldr	r0, [pc, #492]	@ (80013c4 <main+0x26c>)
 80011d8:	f007 fa99 	bl	800870e <HAL_UART_Receive>

	  //CAM to IDLE
	  if(command==0x41){
 80011dc:	4b78      	ldr	r3, [pc, #480]	@ (80013c0 <main+0x268>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b41      	cmp	r3, #65	@ 0x41
 80011e2:	d111      	bne.n	8001208 <main+0xb0>
		  command_cam(CAM1, IDLE);
 80011e4:	4a6e      	ldr	r2, [pc, #440]	@ (80013a0 <main+0x248>)
 80011e6:	2341      	movs	r3, #65	@ 0x41
 80011e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ea:	f7ff fa67 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 80011ee:	4a6e      	ldr	r2, [pc, #440]	@ (80013a8 <main+0x250>)
 80011f0:	2341      	movs	r3, #65	@ 0x41
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	f7ff fa62 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 80011f8:	4a6d      	ldr	r2, [pc, #436]	@ (80013b0 <main+0x258>)
 80011fa:	2341      	movs	r3, #65	@ 0x41
 80011fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fe:	f7ff fa5d 	bl	80006bc <command_cam>
		  command=0;
 8001202:	4b6f      	ldr	r3, [pc, #444]	@ (80013c0 <main+0x268>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x42){
 8001208:	4b6d      	ldr	r3, [pc, #436]	@ (80013c0 <main+0x268>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b42      	cmp	r3, #66	@ 0x42
 800120e:	d111      	bne.n	8001234 <main+0xdc>
		  command_cam(CAM1, REC);
 8001210:	4a63      	ldr	r2, [pc, #396]	@ (80013a0 <main+0x248>)
 8001212:	2342      	movs	r3, #66	@ 0x42
 8001214:	ca07      	ldmia	r2, {r0, r1, r2}
 8001216:	f7ff fa51 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 800121a:	4a63      	ldr	r2, [pc, #396]	@ (80013a8 <main+0x250>)
 800121c:	2342      	movs	r3, #66	@ 0x42
 800121e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001220:	f7ff fa4c 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 8001224:	4a62      	ldr	r2, [pc, #392]	@ (80013b0 <main+0x258>)
 8001226:	2342      	movs	r3, #66	@ 0x42
 8001228:	ca07      	ldmia	r2, {r0, r1, r2}
 800122a:	f7ff fa47 	bl	80006bc <command_cam>
		  command=0;
 800122e:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <main+0x268>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x43){
 8001234:	4b62      	ldr	r3, [pc, #392]	@ (80013c0 <main+0x268>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b43      	cmp	r3, #67	@ 0x43
 800123a:	d111      	bne.n	8001260 <main+0x108>
		  command_cam(CAM1, FORMAT);
 800123c:	4a58      	ldr	r2, [pc, #352]	@ (80013a0 <main+0x248>)
 800123e:	2343      	movs	r3, #67	@ 0x43
 8001240:	ca07      	ldmia	r2, {r0, r1, r2}
 8001242:	f7ff fa3b 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 8001246:	4a58      	ldr	r2, [pc, #352]	@ (80013a8 <main+0x250>)
 8001248:	2343      	movs	r3, #67	@ 0x43
 800124a:	ca07      	ldmia	r2, {r0, r1, r2}
 800124c:	f7ff fa36 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 8001250:	4a57      	ldr	r2, [pc, #348]	@ (80013b0 <main+0x258>)
 8001252:	2343      	movs	r3, #67	@ 0x43
 8001254:	ca07      	ldmia	r2, {r0, r1, r2}
 8001256:	f7ff fa31 	bl	80006bc <command_cam>
		  command=0;
 800125a:	4b59      	ldr	r3, [pc, #356]	@ (80013c0 <main+0x268>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x44){
 8001260:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <main+0x268>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b44      	cmp	r3, #68	@ 0x44
 8001266:	d111      	bne.n	800128c <main+0x134>
		  command_cam(CAM1, REBOOT);
 8001268:	4a4d      	ldr	r2, [pc, #308]	@ (80013a0 <main+0x248>)
 800126a:	2344      	movs	r3, #68	@ 0x44
 800126c:	ca07      	ldmia	r2, {r0, r1, r2}
 800126e:	f7ff fa25 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 8001272:	4a4d      	ldr	r2, [pc, #308]	@ (80013a8 <main+0x250>)
 8001274:	2344      	movs	r3, #68	@ 0x44
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	f7ff fa20 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 800127c:	4a4c      	ldr	r2, [pc, #304]	@ (80013b0 <main+0x258>)
 800127e:	2344      	movs	r3, #68	@ 0x44
 8001280:	ca07      	ldmia	r2, {r0, r1, r2}
 8001282:	f7ff fa1b 	bl	80006bc <command_cam>
		  command=0;
 8001286:	4b4e      	ldr	r3, [pc, #312]	@ (80013c0 <main+0x268>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x45){
 800128c:	4b4c      	ldr	r3, [pc, #304]	@ (80013c0 <main+0x268>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b45      	cmp	r3, #69	@ 0x45
 8001292:	d111      	bne.n	80012b8 <main+0x160>
		  command_cam(CAM1, DEB);
 8001294:	4a42      	ldr	r2, [pc, #264]	@ (80013a0 <main+0x248>)
 8001296:	2345      	movs	r3, #69	@ 0x45
 8001298:	ca07      	ldmia	r2, {r0, r1, r2}
 800129a:	f7ff fa0f 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 800129e:	4a42      	ldr	r2, [pc, #264]	@ (80013a8 <main+0x250>)
 80012a0:	2345      	movs	r3, #69	@ 0x45
 80012a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a4:	f7ff fa0a 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 80012a8:	4a41      	ldr	r2, [pc, #260]	@ (80013b0 <main+0x258>)
 80012aa:	2345      	movs	r3, #69	@ 0x45
 80012ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ae:	f7ff fa05 	bl	80006bc <command_cam>
		  command=0;
 80012b2:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <main+0x268>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	  }

	  //Reboot MCU
	  if(command==0x47){
 80012b8:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <main+0x268>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b47      	cmp	r3, #71	@ 0x47
 80012be:	d101      	bne.n	80012c4 <main+0x16c>
		  NVIC_SystemReset();
 80012c0:	f7ff ff34 	bl	800112c <__NVIC_SystemReset>
		  command=0;
	  }

	  //Start GoPro filming
	  if(command==0x48){
 80012c4:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <main+0x268>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b48      	cmp	r3, #72	@ 0x48
 80012ca:	d10b      	bne.n	80012e4 <main+0x18c>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d2:	483d      	ldr	r0, [pc, #244]	@ (80013c8 <main+0x270>)
 80012d4:	f003 fc6a 	bl	8004bac <HAL_GPIO_WritePin>
		  GoPro=1;
 80012d8:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <main+0x274>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
		  command=0;
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <main+0x268>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop GoPro filming
	  if(command==0x49){
 80012e4:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <main+0x268>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b49      	cmp	r3, #73	@ 0x49
 80012ea:	d10b      	bne.n	8001304 <main+0x1ac>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f2:	4835      	ldr	r0, [pc, #212]	@ (80013c8 <main+0x270>)
 80012f4:	f003 fc5a 	bl	8004bac <HAL_GPIO_WritePin>
		  GoPro=1;
 80012f8:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <main+0x274>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		  command=0;
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <main+0x268>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn on GoPro
	  if(command==0x4A){
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <main+0x268>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b4a      	cmp	r3, #74	@ 0x4a
 800130a:	d10b      	bne.n	8001324 <main+0x1cc>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001312:	482d      	ldr	r0, [pc, #180]	@ (80013c8 <main+0x270>)
 8001314:	f003 fc4a 	bl	8004bac <HAL_GPIO_WritePin>
		  GoPro=1;
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <main+0x274>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
		  command=0;
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <main+0x268>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn off GoPro
	  if(command==0x4B){
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <main+0x268>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b4b      	cmp	r3, #75	@ 0x4b
 800132a:	d10b      	bne.n	8001344 <main+0x1ec>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001332:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <main+0x270>)
 8001334:	f003 fc3a 	bl	8004bac <HAL_GPIO_WritePin>
		  GoPro=1;
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <main+0x274>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		  command=0;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <main+0x268>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase flight REC
	  if(command==0x4C){
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <main+0x268>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b4c      	cmp	r3, #76	@ 0x4c
 800134a:	d104      	bne.n	8001356 <main+0x1fe>
		  Chip_Erase();
 800134c:	f7ff fbe6 	bl	8000b1c <Chip_Erase>
		  command=0;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <main+0x268>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
	  }

	  //Start fligt REC
	  if(command==0x4D){
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <main+0x268>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b4d      	cmp	r3, #77	@ 0x4d
 800135c:	d109      	bne.n	8001372 <main+0x21a>
		  CAN_SendMessage(0x100);
 800135e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001362:	f7ff f9c1 	bl	80006e8 <CAN_SendMessage>
		  Start_Flight_Recording=1;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <main+0x278>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
		  command=0;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <main+0x268>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop flight REC
	  if(command==0x4E){
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <main+0x268>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b4e      	cmp	r3, #78	@ 0x4e
 8001378:	d105      	bne.n	8001386 <main+0x22e>
		  Start_Flight_Recording=0;
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <main+0x278>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <main+0x268>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
	  }

	  //Read flight REC
	  if(command==0x52){
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <main+0x268>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b52      	cmp	r3, #82	@ 0x52
 800138c:	f47f af1b 	bne.w	80011c6 <main+0x6e>
		  Read_Data_Cont(16);
 8001390:	2010      	movs	r0, #16
 8001392:	f7ff fc13 	bl	8000bbc <Read_Data_Cont>
		  command = 0;
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <main+0x268>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 800139c:	e713      	b.n	80011c6 <main+0x6e>
 800139e:	bf00      	nop
 80013a0:	240010bc 	.word	0x240010bc
 80013a4:	240010c0 	.word	0x240010c0
 80013a8:	240010c8 	.word	0x240010c8
 80013ac:	240010cc 	.word	0x240010cc
 80013b0:	240010d4 	.word	0x240010d4
 80013b4:	240010d8 	.word	0x240010d8
 80013b8:	240000ac 	.word	0x240000ac
 80013bc:	240000a4 	.word	0x240000a4
 80013c0:	2400007d 	.word	0x2400007d
 80013c4:	24001410 	.word	0x24001410
 80013c8:	58020c00 	.word	0x58020c00
 80013cc:	24000084 	.word	0x24000084
 80013d0:	2400007c 	.word	0x2400007c

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09c      	sub	sp, #112	@ 0x70
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	224c      	movs	r2, #76	@ 0x4c
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 fe04 	bl	800aff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2220      	movs	r2, #32
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f009 fdfe 	bl	800aff0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f003 fbf3 	bl	8004be0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <SystemClock_Config+0xf0>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <SystemClock_Config+0xf0>)
 8001404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <SystemClock_Config+0xf0>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <SystemClock_Config+0xf4>)
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	4a2b      	ldr	r2, [pc, #172]	@ (80014c8 <SystemClock_Config+0xf4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <SystemClock_Config+0xf4>)
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142c:	bf00      	nop
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <SystemClock_Config+0xf0>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800143a:	d1f8      	bne.n	800142e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001440:	2301      	movs	r3, #1
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2300      	movs	r3, #0
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001454:	233c      	movs	r3, #60	@ 0x3c
 8001456:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800145c:	230a      	movs	r3, #10
 800145e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001464:	230c      	movs	r3, #12
 8001466:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001468:	2300      	movs	r3, #0
 800146a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fbed 	bl	8004c54 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001480:	f000 fbac 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	233f      	movs	r3, #63	@ 0x3f
 8001486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2303      	movs	r3, #3
 800148a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001490:	2308      	movs	r3, #8
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800149c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2104      	movs	r1, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 f82c 	bl	8005508 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014b6:	f000 fb91 	bl	8001bdc <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3770      	adds	r7, #112	@ 0x70
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	58024800 	.word	0x58024800
 80014c8:	58000400 	.word	0x58000400

080014cc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <MX_FDCAN1_Init+0x108>)
 80014d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014d8:	4a3e      	ldr	r2, [pc, #248]	@ (80015d4 <MX_FDCAN1_Init+0x108>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80014e2:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <MX_FDCAN1_Init+0x108>)
 80014e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 80014f2:	4a3a      	ldr	r2, [pc, #232]	@ (80015dc <MX_FDCAN1_Init+0x110>)
 80014f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014fc:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001502:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001504:	2200      	movs	r2, #0
 8001506:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001510:	2200      	movs	r2, #0
 8001512:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001516:	2201      	movs	r2, #1
 8001518:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800151c:	2202      	movs	r2, #2
 800151e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001522:	2205      	movs	r2, #5
 8001524:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001526:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001528:	2202      	movs	r2, #2
 800152a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800152e:	2201      	movs	r2, #1
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001532:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001534:	2203      	movs	r2, #3
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800153a:	2204      	movs	r2, #4
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001540:	2203      	movs	r2, #3
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001544:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800154c:	2200      	movs	r2, #0
 800154e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001552:	2200      	movs	r2, #0
 8001554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800155e:	2204      	movs	r2, #4
 8001560:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001564:	2200      	movs	r2, #0
 8001566:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800156a:	2204      	movs	r2, #4
 800156c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001570:	2200      	movs	r2, #0
 8001572:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001576:	2204      	movs	r2, #4
 8001578:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800157c:	2200      	movs	r2, #0
 800157e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001582:	2200      	movs	r2, #0
 8001584:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001588:	2202      	movs	r2, #2
 800158a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800158e:	2200      	movs	r2, #0
 8001590:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 8001594:	2204      	movs	r2, #4
 8001596:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 800159a:	f001 ffff 	bl	800359c <HAL_FDCAN_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80015a4:	f000 fb1a 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80015a8:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 80015aa:	f002 f9d5 	bl	8003958 <HAL_FDCAN_Start>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80015b4:	f000 fb12 	bl	8001bdc <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_FDCAN1_Init+0x10c>)
 80015be:	f002 fbbd 	bl	8003d3c <HAL_FDCAN_ActivateNotification>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80015c8:	f000 fb08 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024400 	.word	0x58024400
 80015d8:	2400112c 	.word	0x2400112c
 80015dc:	4000a000 	.word	0x4000a000

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <MX_SPI1_Init+0xa4>)
 80015e6:	4a28      	ldr	r2, [pc, #160]	@ (8001688 <MX_SPI1_Init+0xa8>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_SPI1_Init+0xa4>)
 80015ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <MX_SPI1_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <MX_SPI1_Init+0xa4>)
 80015fa:	2207      	movs	r2, #7
 80015fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800160c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001640:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_SPI1_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_SPI1_Init+0xa4>)
 8001672:	f006 f901 	bl	8007878 <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800167c:	f000 faae 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240011cc 	.word	0x240011cc
 8001688:	40013000 	.word	0x40013000

0800168c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <MX_UART5_Init+0x90>)
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <MX_UART5_Init+0x94>)
 8001694:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <MX_UART5_Init+0x90>)
 8001698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800169c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <MX_UART5_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_UART5_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <MX_UART5_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_UART5_Init+0x90>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <MX_UART5_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <MX_UART5_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_UART5_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_UART5_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_UART5_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016d4:	4811      	ldr	r0, [pc, #68]	@ (800171c <MX_UART5_Init+0x90>)
 80016d6:	f006 ff3c 	bl	8008552 <HAL_UART_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80016e0:	f000 fa7c 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	480d      	ldr	r0, [pc, #52]	@ (800171c <MX_UART5_Init+0x90>)
 80016e8:	f009 fb7b 	bl	800ade2 <HAL_UARTEx_SetTxFifoThreshold>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80016f2:	f000 fa73 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4808      	ldr	r0, [pc, #32]	@ (800171c <MX_UART5_Init+0x90>)
 80016fa:	f009 fbb0 	bl	800ae5e <HAL_UARTEx_SetRxFifoThreshold>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 fa6a 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <MX_UART5_Init+0x90>)
 800170a:	f009 fb31 	bl	800ad70 <HAL_UARTEx_DisableFifoMode>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001714:	f000 fa62 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	24001254 	.word	0x24001254
 8001720:	40005000 	.word	0x40005000

08001724 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_UART8_Init+0x90>)
 800172a:	4a23      	ldr	r2, [pc, #140]	@ (80017b8 <MX_UART8_Init+0x94>)
 800172c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001730:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001734:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <MX_UART8_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_UART8_Init+0x90>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <MX_UART8_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800176c:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <MX_UART8_Init+0x90>)
 800176e:	f006 fef0 	bl	8008552 <HAL_UART_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001778:	f000 fa30 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001780:	f009 fb2f 	bl	800ade2 <HAL_UARTEx_SetTxFifoThreshold>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800178a:	f000 fa27 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <MX_UART8_Init+0x90>)
 8001792:	f009 fb64 	bl	800ae5e <HAL_UARTEx_SetRxFifoThreshold>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800179c:	f000 fa1e 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_UART8_Init+0x90>)
 80017a2:	f009 fae5 	bl	800ad70 <HAL_UARTEx_DisableFifoMode>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80017ac:	f000 fa16 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	240012e8 	.word	0x240012e8
 80017b8:	40007c00 	.word	0x40007c00

080017bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017c2:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <MX_USART2_UART_Init+0x94>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_USART2_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_USART2_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001804:	4811      	ldr	r0, [pc, #68]	@ (800184c <MX_USART2_UART_Init+0x90>)
 8001806:	f006 fea4 	bl	8008552 <HAL_UART_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001810:	f000 f9e4 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001814:	2100      	movs	r1, #0
 8001816:	480d      	ldr	r0, [pc, #52]	@ (800184c <MX_USART2_UART_Init+0x90>)
 8001818:	f009 fae3 	bl	800ade2 <HAL_UARTEx_SetTxFifoThreshold>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001822:	f000 f9db 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4808      	ldr	r0, [pc, #32]	@ (800184c <MX_USART2_UART_Init+0x90>)
 800182a:	f009 fb18 	bl	800ae5e <HAL_UARTEx_SetRxFifoThreshold>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001834:	f000 f9d2 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_USART2_UART_Init+0x90>)
 800183a:	f009 fa99 	bl	800ad70 <HAL_UARTEx_DisableFifoMode>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001844:	f000 f9ca 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2400137c 	.word	0x2400137c
 8001850:	40004400 	.word	0x40004400

08001854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 800185a:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <MX_USART3_UART_Init+0x94>)
 800185c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001860:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189c:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 800189e:	f006 fe58 	bl	8008552 <HAL_UART_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018a8:	f000 f998 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 80018b0:	f009 fa97 	bl	800ade2 <HAL_UARTEx_SetTxFifoThreshold>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018ba:	f000 f98f 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 80018c2:	f009 facc 	bl	800ae5e <HAL_UARTEx_SetRxFifoThreshold>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018cc:	f000 f986 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <MX_USART3_UART_Init+0x90>)
 80018d2:	f009 fa4d 	bl	800ad70 <HAL_UARTEx_DisableFifoMode>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018dc:	f000 f97e 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	24001410 	.word	0x24001410
 80018e8:	40004800 	.word	0x40004800

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	4b5f      	ldr	r3, [pc, #380]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	4a5d      	ldr	r2, [pc, #372]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001920:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001930:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b50      	ldr	r3, [pc, #320]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	4a4e      	ldr	r2, [pc, #312]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800194e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	4a47      	ldr	r2, [pc, #284]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196c:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001980:	4a3f      	ldr	r2, [pc, #252]	@ (8001a80 <MX_GPIO_Init+0x194>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <MX_GPIO_Init+0x194>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199e:	4a38      	ldr	r2, [pc, #224]	@ (8001a80 <MX_GPIO_Init+0x194>)
 80019a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a8:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <MX_GPIO_Init+0x194>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2110      	movs	r1, #16
 80019ba:	4832      	ldr	r0, [pc, #200]	@ (8001a84 <MX_GPIO_Init+0x198>)
 80019bc:	f003 f8f6 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019c6:	4830      	ldr	r0, [pc, #192]	@ (8001a88 <MX_GPIO_Init+0x19c>)
 80019c8:	f003 f8f0 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2118      	movs	r1, #24
 80019d0:	482e      	ldr	r0, [pc, #184]	@ (8001a8c <MX_GPIO_Init+0x1a0>)
 80019d2:	f003 f8eb 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4829      	ldr	r0, [pc, #164]	@ (8001a90 <MX_GPIO_Init+0x1a4>)
 80019ea:	f002 ff2f 	bl	800484c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4824      	ldr	r0, [pc, #144]	@ (8001a94 <MX_GPIO_Init+0x1a8>)
 8001a02:	f002 ff23 	bl	800484c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001a06:	2310      	movs	r3, #16
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4819      	ldr	r0, [pc, #100]	@ (8001a84 <MX_GPIO_Init+0x198>)
 8001a1e:	f002 ff15 	bl	800484c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 8001a22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4818      	ldr	r0, [pc, #96]	@ (8001a98 <MX_GPIO_Init+0x1ac>)
 8001a38:	f002 ff08 	bl	800484c <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 8001a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <MX_GPIO_Init+0x19c>)
 8001a56:	f002 fef9 	bl	800484c <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 8001a5a:	2318      	movs	r3, #24
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <MX_GPIO_Init+0x1a0>)
 8001a72:	f002 feeb 	bl	800484c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020000 	.word	0x58020000
 8001a88:	58020c00 	.word	0x58020c00
 8001a8c:	58021800 	.word	0x58021800
 8001a90:	58021000 	.word	0x58021000
 8001a94:	58020800 	.word	0x58020800
 8001a98:	58020400 	.word	0x58020400

08001a9c <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <init+0xc0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <init+0xc0>)
 8001aaa:	22a0      	movs	r2, #160	@ 0xa0
 8001aac:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <init+0xc0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001ab4:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <init+0xc0>)
 8001ab6:	22b0      	movs	r2, #176	@ 0xb0
 8001ab8:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <init+0xc0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001ac0:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <init+0xc0>)
 8001ac2:	22c0      	movs	r2, #192	@ 0xc0
 8001ac4:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <init+0xc4>)
 8001ac8:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ad0:	21ff      	movs	r1, #255	@ 0xff
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f009 fa8c 	bl	800aff0 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ae2:	21ff      	movs	r1, #255	@ 0xff
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f009 fa83 	bl	800aff0 <memset>
	Flash.Buffer_Index = 0;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <init+0xc4>)
 8001aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af0:	2200      	movs	r2, #0
 8001af2:	80da      	strh	r2, [r3, #6]
	Flash.Buffer_Select = 0;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <init+0xc4>)
 8001af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	Flash.Block_Mem = 0;
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <init+0xc4>)
 8001b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b04:	2200      	movs	r2, #0
 8001b06:	805a      	strh	r2, [r3, #2]
	Flash.Page_Index = 0;
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <init+0xc4>)
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b0e:	2200      	movs	r2, #0
 8001b10:	809a      	strh	r2, [r3, #4]
	Flash.ID = 0;
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <init+0xc4>)
 8001b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6093      	str	r3, [r2, #8]
	Flash.Buffer_p = Flash.Buffer_0;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <init+0xc4>)
 8001b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <init+0xc4>)
 8001b28:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <init+0xc8>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <init+0xc8>)
 8001b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b34:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <init+0xcc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <init+0xcc>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <init+0xd0>)
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <init+0xd4>)
 8001b46:	609a      	str	r2, [r3, #8]
	CAM2.huart = &huart8;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <init+0xd8>)
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <init+0xdc>)
 8001b4c:	609a      	str	r2, [r3, #8]
	CAM3.huart = &huart5;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <init+0xe0>)
 8001b50:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <init+0xe4>)
 8001b52:	609a      	str	r2, [r3, #8]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	240000a4 	.word	0x240000a4
 8001b60:	240000ac 	.word	0x240000ac
 8001b64:	e000edf0 	.word	0xe000edf0
 8001b68:	e0001000 	.word	0xe0001000
 8001b6c:	240010bc 	.word	0x240010bc
 8001b70:	2400137c 	.word	0x2400137c
 8001b74:	240010c8 	.word	0x240010c8
 8001b78:	240012e8 	.word	0x240012e8
 8001b7c:	240010d4 	.word	0x240010d4
 8001b80:	24001254 	.word	0x24001254

08001b84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b96:	f000 ff25 	bl	80029e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001baa:	2387      	movs	r3, #135	@ 0x87
 8001bac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 ff43 	bl	8002a54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001bce:	2004      	movs	r0, #4
 8001bd0:	f000 ff20 	bl	8002a14 <HAL_MPU_Enable>

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <Error_Handler+0x10>)
 8001be2:	f001 feb9 	bl	8003958 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2400112c 	.word	0x2400112c

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_MspInit+0x30>)
 8001bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bfc:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <HAL_MspInit+0x30>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_MspInit+0x30>)
 8001c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	58024400 	.word	0x58024400

08001c24 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0ba      	sub	sp, #232	@ 0xe8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	22c0      	movs	r2, #192	@ 0xc0
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 f9d3 	bl	800aff0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a33      	ldr	r2, [pc, #204]	@ (8001d1c <HAL_FDCAN_MspInit+0xf8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d15f      	bne.n	8001d14 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001c64:	230a      	movs	r3, #10
 8001c66:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001c6c:	2314      	movs	r3, #20
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c74:	23c0      	movs	r3, #192	@ 0xc0
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001c80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 ffc7 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001c98:	f7ff ffa0 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c9c:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001cae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc0:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_FDCAN_MspInit+0xfc>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4809      	ldr	r0, [pc, #36]	@ (8001d24 <HAL_FDCAN_MspInit+0x100>)
 8001d00:	f002 fda4 	bl	800484c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2013      	movs	r0, #19
 8001d0a:	f000 fe36 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d0e:	2013      	movs	r0, #19
 8001d10:	f000 fe4d 	bl	80029ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001d14:	bf00      	nop
 8001d16:	37e8      	adds	r7, #232	@ 0xe8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	4000a000 	.word	0x4000a000
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020400 	.word	0x58020400

08001d28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	22c0      	movs	r2, #192	@ 0xc0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f009 f951 	bl	800aff0 <memset>
  if(hspi->Instance==SPI1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a26      	ldr	r2, [pc, #152]	@ (8001dec <HAL_SPI_MspInit+0xc4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d144      	bne.n	8001de2 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 ff57 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001d78:	f7ff ff30 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d82:	4a1b      	ldr	r2, [pc, #108]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001d84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_SPI_MspInit+0xc8>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23e0      	movs	r3, #224	@ 0xe0
 8001dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_SPI_MspInit+0xcc>)
 8001dde:	f002 fd35 	bl	800484c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001de2:	bf00      	nop
 8001de4:	37e8      	adds	r7, #232	@ 0xe8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40013000 	.word	0x40013000
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58020000 	.word	0x58020000

08001df8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0c0      	sub	sp, #256	@ 0x100
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e14:	22c0      	movs	r2, #192	@ 0xc0
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f009 f8e9 	bl	800aff0 <memset>
  if(huart->Instance==UART5)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4aa6      	ldr	r2, [pc, #664]	@ (80020bc <HAL_UART_MspInit+0x2c4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d14f      	bne.n	8001ec8 <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e28:	f04f 0202 	mov.w	r2, #2
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 feee 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e4a:	f7ff fec7 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e4e:	4b9c      	ldr	r3, [pc, #624]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e54:	4a9a      	ldr	r2, [pc, #616]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e5e:	4b98      	ldr	r3, [pc, #608]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	4b94      	ldr	r3, [pc, #592]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e72:	4a93      	ldr	r2, [pc, #588]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7c:	4b90      	ldr	r3, [pc, #576]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001ea4:	230e      	movs	r3, #14
 8001ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4884      	ldr	r0, [pc, #528]	@ (80020c4 <HAL_UART_MspInit+0x2cc>)
 8001eb2:	f002 fccb 	bl	800484c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2035      	movs	r0, #53	@ 0x35
 8001ebc:	f000 fd5d 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ec0:	2035      	movs	r0, #53	@ 0x35
 8001ec2:	f000 fd74 	bl	80029ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ec6:	e0f3      	b.n	80020b0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==UART8)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7e      	ldr	r2, [pc, #504]	@ (80020c8 <HAL_UART_MspInit+0x2d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d14e      	bne.n	8001f70 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001ed2:	f04f 0202 	mov.w	r2, #2
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fe99 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001ef4:	f7ff fe72 	bl	8001bdc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ef8:	4b71      	ldr	r3, [pc, #452]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001efe:	4a70      	ldr	r2, [pc, #448]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001f00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f08:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f16:	4b6a      	ldr	r3, [pc, #424]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1c:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f26:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f52:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f56:	4619      	mov	r1, r3
 8001f58:	485c      	ldr	r0, [pc, #368]	@ (80020cc <HAL_UART_MspInit+0x2d4>)
 8001f5a:	f002 fc77 	bl	800484c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2053      	movs	r0, #83	@ 0x53
 8001f64:	f000 fd09 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f68:	2053      	movs	r0, #83	@ 0x53
 8001f6a:	f000 fd20 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 8001f6e:	e09f      	b.n	80020b0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a56      	ldr	r2, [pc, #344]	@ (80020d0 <HAL_UART_MspInit+0x2d8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d14e      	bne.n	8002018 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7a:	f04f 0202 	mov.w	r2, #2
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fe45 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001f9c:	f7ff fe1e 	bl	8001bdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa0:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa6:	4a46      	ldr	r2, [pc, #280]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fb0:	4b43      	ldr	r3, [pc, #268]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fce:	4b3c      	ldr	r3, [pc, #240]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8001fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001ffe:	4619      	mov	r1, r3
 8002000:	4834      	ldr	r0, [pc, #208]	@ (80020d4 <HAL_UART_MspInit+0x2dc>)
 8002002:	f002 fc23 	bl	800484c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2026      	movs	r0, #38	@ 0x26
 800200c:	f000 fcb5 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002010:	2026      	movs	r0, #38	@ 0x26
 8002012:	f000 fccc 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 8002016:	e04b      	b.n	80020b0 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_UART_MspInit+0x2e0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d146      	bne.n	80020b0 <HAL_UART_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002022:	f04f 0202 	mov.w	r2, #2
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fdf1 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8002044:	f7ff fdca 	bl	8001bdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002048:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 800204a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800204e:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002054:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 800205a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002076:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_UART_MspInit+0x2c8>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002084:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002088:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209e:	2307      	movs	r3, #7
 80020a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020a8:	4619      	mov	r1, r3
 80020aa:	480c      	ldr	r0, [pc, #48]	@ (80020dc <HAL_UART_MspInit+0x2e4>)
 80020ac:	f002 fbce 	bl	800484c <HAL_GPIO_Init>
}
 80020b0:	bf00      	nop
 80020b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40005000 	.word	0x40005000
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58020400 	.word	0x58020400
 80020c8:	40007c00 	.word	0x40007c00
 80020cc:	58021000 	.word	0x58021000
 80020d0:	40004400 	.word	0x40004400
 80020d4:	58020000 	.word	0x58020000
 80020d8:	40004800 	.word	0x40004800
 80020dc:	58020c00 	.word	0x58020c00

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <NMI_Handler+0x4>

080020e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <MemManage_Handler+0x4>

080020f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <UsageFault_Handler+0x4>

08002108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Local_Time++;
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <SysTick_Handler+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <SysTick_Handler+0x70>)
 8002140:	6013      	str	r3, [r2, #0]
	blink++;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <SysTick_Handler+0x74>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <SysTick_Handler+0x74>)
 800214c:	801a      	strh	r2, [r3, #0]
	if(blink>=500){
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <SysTick_Handler+0x74>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002156:	d308      	bcc.n	800216a <SysTick_Handler+0x36>
		GPIOG->ODR^=GPIO_PIN_3;
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <SysTick_Handler+0x78>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <SysTick_Handler+0x78>)
 800215e:	f083 0308 	eor.w	r3, r3, #8
 8002162:	6153      	str	r3, [r2, #20]
		blink=0;
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SysTick_Handler+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 faff 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if(GoPro){
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <SysTick_Handler+0x7c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d014      	beq.n	80021a0 <SysTick_Handler+0x6c>
	  GoPro_timer++;
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <SysTick_Handler+0x80>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <SysTick_Handler+0x80>)
 800217e:	6013      	str	r3, [r2, #0]
	  if(GoPro_timer>=GOPRO_MAX){
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <SysTick_Handler+0x80>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b63      	cmp	r3, #99	@ 0x63
 8002186:	d90b      	bls.n	80021a0 <SysTick_Handler+0x6c>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800218e:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <SysTick_Handler+0x84>)
 8002190:	f002 fd0c 	bl	8004bac <HAL_GPIO_WritePin>
		  GoPro_timer=0;
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <SysTick_Handler+0x80>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
		  GoPro=0;
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Handler+0x7c>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24000080 	.word	0x24000080
 80021a8:	240014a8 	.word	0x240014a8
 80021ac:	58021800 	.word	0x58021800
 80021b0:	24000084 	.word	0x24000084
 80021b4:	240014a4 	.word	0x240014a4
 80021b8:	58020c00 	.word	0x58020c00

080021bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80021c0:	4802      	ldr	r0, [pc, #8]	@ (80021cc <FDCAN1_IT0_IRQHandler+0x10>)
 80021c2:	f001 fe35 	bl	8003e30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2400112c 	.word	0x2400112c

080021d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <USART2_IRQHandler+0x10>)
 80021d6:	f006 fbaf 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2400137c 	.word	0x2400137c

080021e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <UART5_IRQHandler+0x10>)
 80021ea:	f006 fba5 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	24001254 	.word	0x24001254

080021f8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <UART8_IRQHandler+0x10>)
 80021fe:	f006 fb9b 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	240012e8 	.word	0x240012e8

0800220c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	@ 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002216:	e0bb      	b.n	8002390 <HAL_FDCAN_RxFifo0Callback+0x184>

		//CAN ID = 201 is CAN message with GNSS time from flight estimator used to update local time
		if(RxHeader.Identifier == 201){
 8002218:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2bc9      	cmp	r3, #201	@ 0xc9
 800221e:	d145      	bne.n	80022ac <HAL_FDCAN_RxFifo0Callback+0xa0>
			uint32_t GNSS_time = *(uint32_t*)&CAN.Rx_Buffer[0];
 8002220:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c

			uint32_t H = GNSS_time/10000000;
 8002226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002228:	4a63      	ldr	r2, [pc, #396]	@ (80023b8 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0d9b      	lsrs	r3, r3, #22
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
			uint32_t M = (GNSS_time/100000) % 100;
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	4a61      	ldr	r2, [pc, #388]	@ (80023bc <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	09db      	lsrs	r3, r3, #7
 800223e:	4a60      	ldr	r2, [pc, #384]	@ (80023c0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8002240:	fba2 1203 	umull	r1, r2, r2, r3
 8002244:	0952      	lsrs	r2, r2, #5
 8002246:	2164      	movs	r1, #100	@ 0x64
 8002248:	fb01 f202 	mul.w	r2, r1, r2
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
			uint32_t S = (GNSS_time/1000) % 100;
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	4a5c      	ldr	r2, [pc, #368]	@ (80023c4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	4a59      	ldr	r2, [pc, #356]	@ (80023c0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800225c:	fba2 1203 	umull	r1, r2, r2, r3
 8002260:	0952      	lsrs	r2, r2, #5
 8002262:	2164      	movs	r1, #100	@ 0x64
 8002264:	fb01 f202 	mul.w	r2, r1, r2
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	623b      	str	r3, [r7, #32]
			uint32_t MS = GNSS_time % 1000;
 800226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226e:	4a55      	ldr	r2, [pc, #340]	@ (80023c4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8002270:	fba2 1203 	umull	r1, r2, r2, r3
 8002274:	0992      	lsrs	r2, r2, #6
 8002276:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800227a:	fb01 f202 	mul.w	r2, r1, r2
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	61fb      	str	r3, [r7, #28]

			Local_Time = ((H*3600UL + M*60UL + S)*1000UL) + MS;
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002288:	fb02 f103 	mul.w	r1, r2, r3
 800228c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	18ca      	adds	r2, r1, r3
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	4413      	add	r3, r2
 800229c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022a0:	fb03 f202 	mul.w	r2, r3, r2
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a47      	ldr	r2, [pc, #284]	@ (80023c8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80022aa:	6013      	str	r3, [r2, #0]
		}
		//CAN ID = 401 is CAN message for commands to black box
		if(RxHeader.Identifier == 401){
 80022ac:	4b40      	ldr	r3, [pc, #256]	@ (80023b0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f240 1291 	movw	r2, #401	@ 0x191
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d109      	bne.n	80022cc <HAL_FDCAN_RxFifo0Callback+0xc0>
			if(CAN.Rx_Buffer[6] == CAN.Rx_Buffer[7]){
 80022b8:	4b44      	ldr	r3, [pc, #272]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80022ba:	7b9a      	ldrb	r2, [r3, #14]
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80022be:	7bdb      	ldrb	r3, [r3, #15]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d103      	bne.n	80022cc <HAL_FDCAN_RxFifo0Callback+0xc0>
				command = CAN.Rx_Buffer[6];
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80022c6:	7b9a      	ldrb	r2, [r3, #14]
 80022c8:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80022ca:	701a      	strb	r2, [r3, #0]
			}

		}
		//CAN ID = 402 is CAN message for manual update of current page
		if(RxHeader.Identifier == 402){
 80022cc:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80022d4:	d11c      	bne.n	8002310 <HAL_FDCAN_RxFifo0Callback+0x104>
			uint16_t Page = *(uint16_t*)&CAN.Rx_Buffer[6];
 80022d6:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	837b      	strh	r3, [r7, #26]

			Automatic_Block_Managment(Page);
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fbf6 	bl	8000ad0 <Automatic_Block_Managment>

			Flash.Buffer_Index=0;
 80022e4:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80022e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ea:	2200      	movs	r2, #0
 80022ec:	80da      	strh	r2, [r3, #6]
			Flash.Page_Index=Page;
 80022ee:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	8b7b      	ldrh	r3, [r7, #26]
 80022f8:	8093      	strh	r3, [r2, #4]
			Flash.Buffer_Select=0;
 80022fa:	4b37      	ldr	r3, [pc, #220]	@ (80023d8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80022fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
			Flash.Buffer_p=Flash.Buffer_0;
 8002304:	4b34      	ldr	r3, [pc, #208]	@ (80023d8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8002306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800230a:	461a      	mov	r2, r3
 800230c:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800230e:	60d3      	str	r3, [r2, #12]
		}

		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8002310:	23f0      	movs	r3, #240	@ 0xf0
 8002312:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	3301      	adds	r3, #1
 800231e:	b292      	uxth	r2, r2
 8002320:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 8002322:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002324:	7a1b      	ldrb	r3, [r3, #8]
 8002326:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800232a:	7a5b      	ldrb	r3, [r3, #9]
 800232c:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002330:	7a9b      	ldrb	r3, [r3, #10]
 8002332:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002336:	7adb      	ldrb	r3, [r3, #11]
 8002338:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800233c:	7b1b      	ldrb	r3, [r3, #12]
 800233e:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 8002340:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002342:	7b5b      	ldrb	r3, [r3, #13]
 8002344:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 8002346:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002348:	7b9b      	ldrb	r3, [r3, #14]
 800234a:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800234e:	7bdb      	ldrb	r3, [r3, #15]
 8002350:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(Local_Time);
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(Local_Time>>8);
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b2db      	uxtb	r3, r3
 8002362:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(Local_Time>>16);
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	b2db      	uxtb	r3, r3
 800236c:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(Local_Time>>24);
 800236e:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0e1b      	lsrs	r3, r3, #24
 8002374:	b2db      	uxtb	r3, r3
 8002376:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8002378:	230f      	movs	r3, #15
 800237a:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_FDCAN_RxFifo0Callback+0x184>
			Write_Data(Temp, sizeof(Temp));
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	2110      	movs	r1, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fae6 	bl	800095c <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8002392:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002394:	2140      	movs	r1, #64	@ 0x40
 8002396:	4812      	ldr	r0, [pc, #72]	@ (80023e0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8002398:	f001 fb64 	bl	8003a64 <HAL_FDCAN_GetRxMessage>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f43f af3a 	beq.w	8002218 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	@ 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	240010e0 	.word	0x240010e0
 80023b4:	24000090 	.word	0x24000090
 80023b8:	6b5fca6b 	.word	0x6b5fca6b
 80023bc:	0a7c5ac5 	.word	0x0a7c5ac5
 80023c0:	51eb851f 	.word	0x51eb851f
 80023c4:	10624dd3 	.word	0x10624dd3
 80023c8:	24000080 	.word	0x24000080
 80023cc:	24000088 	.word	0x24000088
 80023d0:	2400007d 	.word	0x2400007d
 80023d4:	24000096 	.word	0x24000096
 80023d8:	240000ac 	.word	0x240000ac
 80023dc:	2400007c 	.word	0x2400007c
 80023e0:	2400112c 	.word	0x2400112c

080023e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if(huart == CAM1.huart)HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 80023ec:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_UART_RxCpltCallback+0x58>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_UART_RxCpltCallback+0x20>
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_UART_RxCpltCallback+0x58>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4910      	ldr	r1, [pc, #64]	@ (8002440 <HAL_UART_RxCpltCallback+0x5c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f006 fa4e 	bl	80088a0 <HAL_UART_Receive_IT>
	if(huart == CAM2.huart)HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_UART_RxCpltCallback+0x60>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_UART_RxCpltCallback+0x38>
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <HAL_UART_RxCpltCallback+0x60>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2202      	movs	r2, #2
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <HAL_UART_RxCpltCallback+0x64>)
 8002416:	4618      	mov	r0, r3
 8002418:	f006 fa42 	bl	80088a0 <HAL_UART_Receive_IT>
	if(huart == CAM3.huart)HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_UART_RxCpltCallback+0x68>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d106      	bne.n	8002434 <HAL_UART_RxCpltCallback+0x50>
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_UART_RxCpltCallback+0x68>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2202      	movs	r2, #2
 800242c:	4908      	ldr	r1, [pc, #32]	@ (8002450 <HAL_UART_RxCpltCallback+0x6c>)
 800242e:	4618      	mov	r0, r3
 8002430:	f006 fa36 	bl	80088a0 <HAL_UART_Receive_IT>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	240010bc 	.word	0x240010bc
 8002440:	240010c0 	.word	0x240010c0
 8002444:	240010c8 	.word	0x240010c8
 8002448:	240010cc 	.word	0x240010cc
 800244c:	240010d4 	.word	0x240010d4
 8002450:	240010d8 	.word	0x240010d8

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f008 fdbc 	bl	800b000 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24080000 	.word	0x24080000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	240014ac 	.word	0x240014ac
 80024bc:	24001600 	.word	0x24001600

080024c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c4:	4b43      	ldr	r3, [pc, #268]	@ (80025d4 <SystemInit+0x114>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	4a42      	ldr	r2, [pc, #264]	@ (80025d4 <SystemInit+0x114>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024d4:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <SystemInit+0x118>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d807      	bhi.n	80024f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024e0:	4b3d      	ldr	r3, [pc, #244]	@ (80025d8 <SystemInit+0x118>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 030f 	bic.w	r3, r3, #15
 80024e8:	4a3b      	ldr	r2, [pc, #236]	@ (80025d8 <SystemInit+0x118>)
 80024ea:	f043 0307 	orr.w	r3, r3, #7
 80024ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024f0:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <SystemInit+0x11c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a39      	ldr	r2, [pc, #228]	@ (80025dc <SystemInit+0x11c>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024fc:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <SystemInit+0x11c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002502:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <SystemInit+0x11c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4935      	ldr	r1, [pc, #212]	@ (80025dc <SystemInit+0x11c>)
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <SystemInit+0x120>)
 800250a:	4013      	ands	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800250e:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <SystemInit+0x118>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800251a:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <SystemInit+0x118>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 030f 	bic.w	r3, r3, #15
 8002522:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <SystemInit+0x118>)
 8002524:	f043 0307 	orr.w	r3, r3, #7
 8002528:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800252a:	4b2c      	ldr	r3, [pc, #176]	@ (80025dc <SystemInit+0x11c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002530:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <SystemInit+0x11c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002536:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <SystemInit+0x11c>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800253c:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <SystemInit+0x11c>)
 800253e:	4a29      	ldr	r2, [pc, #164]	@ (80025e4 <SystemInit+0x124>)
 8002540:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002542:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <SystemInit+0x11c>)
 8002544:	4a28      	ldr	r2, [pc, #160]	@ (80025e8 <SystemInit+0x128>)
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002548:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <SystemInit+0x11c>)
 800254a:	4a28      	ldr	r2, [pc, #160]	@ (80025ec <SystemInit+0x12c>)
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800254e:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <SystemInit+0x11c>)
 8002550:	2200      	movs	r2, #0
 8002552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002554:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <SystemInit+0x11c>)
 8002556:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <SystemInit+0x12c>)
 8002558:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <SystemInit+0x11c>)
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002560:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <SystemInit+0x11c>)
 8002562:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <SystemInit+0x12c>)
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002566:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <SystemInit+0x11c>)
 8002568:	2200      	movs	r2, #0
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <SystemInit+0x11c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <SystemInit+0x11c>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002578:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <SystemInit+0x11c>)
 800257a:	2200      	movs	r2, #0
 800257c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800257e:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <SystemInit+0x130>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <SystemInit+0x134>)
 8002584:	4013      	ands	r3, r2
 8002586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800258a:	d202      	bcs.n	8002592 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800258c:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <SystemInit+0x138>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <SystemInit+0x11c>)
 8002594:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d113      	bne.n	80025c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <SystemInit+0x11c>)
 80025a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025a6:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <SystemInit+0x11c>)
 80025a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <SystemInit+0x13c>)
 80025b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <SystemInit+0x11c>)
 80025ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025be:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <SystemInit+0x11c>)
 80025c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00
 80025d8:	52002000 	.word	0x52002000
 80025dc:	58024400 	.word	0x58024400
 80025e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025e4:	02020200 	.word	0x02020200
 80025e8:	01ff0000 	.word	0x01ff0000
 80025ec:	01010280 	.word	0x01010280
 80025f0:	5c001000 	.word	0x5c001000
 80025f4:	ffff0000 	.word	0xffff0000
 80025f8:	51008108 	.word	0x51008108
 80025fc:	52004000 	.word	0x52004000

08002600 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <ExitRun0Mode+0x2c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <ExitRun0Mode+0x2c>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002610:	bf00      	nop
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <ExitRun0Mode+0x2c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f9      	beq.n	8002612 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	58024800 	.word	0x58024800

08002630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800266c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002634:	f7ff ffe4 	bl	8002600 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002638:	f7ff ff42 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	@ (8002674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	@ (8002680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002662:	f008 fcd3 	bl	800b00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7fe fd77 	bl	8001158 <main>
  bx  lr
 800266a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002670:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002674:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002678:	0800ba34 	.word	0x0800ba34
  ldr r2, =_sbss
 800267c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002680:	240015fc 	.word	0x240015fc

08002684 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC3_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268e:	2003      	movs	r0, #3
 8002690:	f000 f968 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002694:	f003 f8ee 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_Init+0x68>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	4913      	ldr	r1, [pc, #76]	@ (80026f4 <HAL_Init+0x6c>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026b2:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_Init+0x68>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <HAL_Init+0x6c>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	4a0b      	ldr	r2, [pc, #44]	@ (80026f8 <HAL_Init+0x70>)
 80026ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026cc:	4a0b      	ldr	r2, [pc, #44]	@ (80026fc <HAL_Init+0x74>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026d2:	200f      	movs	r0, #15
 80026d4:	f000 f814 	bl	8002700 <HAL_InitTick>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e002      	b.n	80026e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026e2:	f7ff fa85 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58024400 	.word	0x58024400
 80026f4:	0800b9a8 	.word	0x0800b9a8
 80026f8:	24000004 	.word	0x24000004
 80026fc:	24000000 	.word	0x24000000

08002700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002708:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_InitTick+0x60>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e021      	b.n	8002758 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_InitTick+0x64>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_InitTick+0x60>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f94d 	bl	80029ca <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 f917 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	@ (8002768 <HAL_InitTick+0x68>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2400000c 	.word	0x2400000c
 8002764:	24000000 	.word	0x24000000
 8002768:	24000008 	.word	0x24000008

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	2400000c 	.word	0x2400000c
 8002790:	240014b0 	.word	0x240014b0

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	240014b0 	.word	0x240014b0

080027ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <HAL_GetREVID+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0c1b      	lsrs	r3, r3, #16
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	5c001000 	.word	0x5c001000

080027c4 <__NVIC_SetPriorityGrouping>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <__NVIC_SetPriorityGrouping+0x40>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <__NVIC_SetPriorityGrouping+0x40>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	05fa0000 	.word	0x05fa0000

0800280c <__NVIC_GetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	@ (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	@ (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	@ (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff29 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff40 	bl	800280c <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff90 	bl	80028b8 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5f 	bl	8002864 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff33 	bl	8002828 <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffa4 	bl	8002920 <SysTick_Config>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029e8:	f3bf 8f5f 	dmb	sy
}
 80029ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <HAL_MPU_Disable+0x28>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_MPU_Disable+0x28>)
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_MPU_Disable+0x2c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00
 8002a10:	e000ed90 	.word	0xe000ed90

08002a14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_MPU_Enable+0x38>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_MPU_Enable+0x3c>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_MPU_Enable+0x3c>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
}
 8002a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a38:	f3bf 8f6f 	isb	sy
}
 8002a3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000ed90 	.word	0xe000ed90
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	785a      	ldrb	r2, [r3, #1]
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8002a62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002a70:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7b1b      	ldrb	r3, [r3, #12]
 8002a7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7adb      	ldrb	r3, [r3, #11]
 8002a82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7a9b      	ldrb	r3, [r3, #10]
 8002a8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7b5b      	ldrb	r3, [r3, #13]
 8002a92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7b9b      	ldrb	r3, [r3, #14]
 8002a9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7bdb      	ldrb	r3, [r3, #15]
 8002aa2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7a5b      	ldrb	r3, [r3, #9]
 8002aaa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7a1b      	ldrb	r3, [r3, #8]
 8002ab2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ab4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002abc:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002abe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ac0:	6113      	str	r3, [r2, #16]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed90 	.word	0xe000ed90

08002ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fe5a 	bl	8002794 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e2dc      	b.n	80030a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d008      	beq.n	8002b0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e2cd      	b.n	80030a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	@ (8002ce8 <HAL_DMA_Abort+0x214>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d04a      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a74      	ldr	r2, [pc, #464]	@ (8002cec <HAL_DMA_Abort+0x218>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d045      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	@ (8002cf0 <HAL_DMA_Abort+0x21c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d040      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a71      	ldr	r2, [pc, #452]	@ (8002cf4 <HAL_DMA_Abort+0x220>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d03b      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a70      	ldr	r2, [pc, #448]	@ (8002cf8 <HAL_DMA_Abort+0x224>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d036      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	@ (8002cfc <HAL_DMA_Abort+0x228>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d031      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002d00 <HAL_DMA_Abort+0x22c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d02c      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6b      	ldr	r2, [pc, #428]	@ (8002d04 <HAL_DMA_Abort+0x230>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d027      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002d08 <HAL_DMA_Abort+0x234>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d022      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a68      	ldr	r2, [pc, #416]	@ (8002d0c <HAL_DMA_Abort+0x238>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01d      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a67      	ldr	r2, [pc, #412]	@ (8002d10 <HAL_DMA_Abort+0x23c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d018      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_DMA_Abort+0x240>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a64      	ldr	r2, [pc, #400]	@ (8002d18 <HAL_DMA_Abort+0x244>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a62      	ldr	r2, [pc, #392]	@ (8002d1c <HAL_DMA_Abort+0x248>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a61      	ldr	r2, [pc, #388]	@ (8002d20 <HAL_DMA_Abort+0x24c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_DMA_Abort+0xd6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_DMA_Abort+0x250>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_DMA_Abort+0xda>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_DMA_Abort+0xdc>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 021e 	bic.w	r2, r2, #30
 8002bc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e00a      	b.n	8002bf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 020e 	bic.w	r2, r2, #14
 8002bea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce8 <HAL_DMA_Abort+0x214>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d072      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3a      	ldr	r2, [pc, #232]	@ (8002cec <HAL_DMA_Abort+0x218>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d06d      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a39      	ldr	r2, [pc, #228]	@ (8002cf0 <HAL_DMA_Abort+0x21c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d068      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a37      	ldr	r2, [pc, #220]	@ (8002cf4 <HAL_DMA_Abort+0x220>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d063      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a36      	ldr	r2, [pc, #216]	@ (8002cf8 <HAL_DMA_Abort+0x224>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d05e      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a34      	ldr	r2, [pc, #208]	@ (8002cfc <HAL_DMA_Abort+0x228>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d059      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a33      	ldr	r2, [pc, #204]	@ (8002d00 <HAL_DMA_Abort+0x22c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d054      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a31      	ldr	r2, [pc, #196]	@ (8002d04 <HAL_DMA_Abort+0x230>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04f      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a30      	ldr	r2, [pc, #192]	@ (8002d08 <HAL_DMA_Abort+0x234>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04a      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2e      	ldr	r2, [pc, #184]	@ (8002d0c <HAL_DMA_Abort+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d045      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d10 <HAL_DMA_Abort+0x23c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d040      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <HAL_DMA_Abort+0x240>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d03b      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002d18 <HAL_DMA_Abort+0x244>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d036      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <HAL_DMA_Abort+0x248>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a27      	ldr	r2, [pc, #156]	@ (8002d20 <HAL_DMA_Abort+0x24c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d02c      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a25      	ldr	r2, [pc, #148]	@ (8002d24 <HAL_DMA_Abort+0x250>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d027      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a24      	ldr	r2, [pc, #144]	@ (8002d28 <HAL_DMA_Abort+0x254>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	@ (8002d2c <HAL_DMA_Abort+0x258>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <HAL_DMA_Abort+0x25c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_DMA_Abort+0x260>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_DMA_Abort+0x264>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <HAL_DMA_Abort+0x268>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d40 <HAL_DMA_Abort+0x26c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_Abort+0x20e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <HAL_DMA_Abort+0x270>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d132      	bne.n	8002d48 <HAL_DMA_Abort+0x274>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e031      	b.n	8002d4a <HAL_DMA_Abort+0x276>
 8002ce6:	bf00      	nop
 8002ce8:	40020010 	.word	0x40020010
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	40020040 	.word	0x40020040
 8002cf4:	40020058 	.word	0x40020058
 8002cf8:	40020070 	.word	0x40020070
 8002cfc:	40020088 	.word	0x40020088
 8002d00:	400200a0 	.word	0x400200a0
 8002d04:	400200b8 	.word	0x400200b8
 8002d08:	40020410 	.word	0x40020410
 8002d0c:	40020428 	.word	0x40020428
 8002d10:	40020440 	.word	0x40020440
 8002d14:	40020458 	.word	0x40020458
 8002d18:	40020470 	.word	0x40020470
 8002d1c:	40020488 	.word	0x40020488
 8002d20:	400204a0 	.word	0x400204a0
 8002d24:	400204b8 	.word	0x400204b8
 8002d28:	58025408 	.word	0x58025408
 8002d2c:	5802541c 	.word	0x5802541c
 8002d30:	58025430 	.word	0x58025430
 8002d34:	58025444 	.word	0x58025444
 8002d38:	58025458 	.word	0x58025458
 8002d3c:	5802546c 	.word	0x5802546c
 8002d40:	58025480 	.word	0x58025480
 8002d44:	58025494 	.word	0x58025494
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6d      	ldr	r2, [pc, #436]	@ (8002f18 <HAL_DMA_Abort+0x444>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04a      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002f1c <HAL_DMA_Abort+0x448>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d045      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6a      	ldr	r2, [pc, #424]	@ (8002f20 <HAL_DMA_Abort+0x44c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d040      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a68      	ldr	r2, [pc, #416]	@ (8002f24 <HAL_DMA_Abort+0x450>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d03b      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a67      	ldr	r2, [pc, #412]	@ (8002f28 <HAL_DMA_Abort+0x454>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d036      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_DMA_Abort+0x458>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d031      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a64      	ldr	r2, [pc, #400]	@ (8002f30 <HAL_DMA_Abort+0x45c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d02c      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a62      	ldr	r2, [pc, #392]	@ (8002f34 <HAL_DMA_Abort+0x460>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d027      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a61      	ldr	r2, [pc, #388]	@ (8002f38 <HAL_DMA_Abort+0x464>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f3c <HAL_DMA_Abort+0x468>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01d      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f40 <HAL_DMA_Abort+0x46c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f44 <HAL_DMA_Abort+0x470>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5b      	ldr	r2, [pc, #364]	@ (8002f48 <HAL_DMA_Abort+0x474>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a59      	ldr	r2, [pc, #356]	@ (8002f4c <HAL_DMA_Abort+0x478>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a58      	ldr	r2, [pc, #352]	@ (8002f50 <HAL_DMA_Abort+0x47c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_DMA_Abort+0x32a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a56      	ldr	r2, [pc, #344]	@ (8002f54 <HAL_DMA_Abort+0x480>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <HAL_DMA_Abort+0x33c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e007      	b.n	8002e20 <HAL_DMA_Abort+0x34c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e20:	e013      	b.n	8002e4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff fcb7 	bl	8002794 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d90c      	bls.n	8002e4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e12d      	b.n	80030a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e5      	bne.n	8002e22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f18 <HAL_DMA_Abort+0x444>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2d      	ldr	r2, [pc, #180]	@ (8002f1c <HAL_DMA_Abort+0x448>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f20 <HAL_DMA_Abort+0x44c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <HAL_DMA_Abort+0x450>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a29      	ldr	r2, [pc, #164]	@ (8002f28 <HAL_DMA_Abort+0x454>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a27      	ldr	r2, [pc, #156]	@ (8002f2c <HAL_DMA_Abort+0x458>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a26      	ldr	r2, [pc, #152]	@ (8002f30 <HAL_DMA_Abort+0x45c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a24      	ldr	r2, [pc, #144]	@ (8002f34 <HAL_DMA_Abort+0x460>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a23      	ldr	r2, [pc, #140]	@ (8002f38 <HAL_DMA_Abort+0x464>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_DMA_Abort+0x468>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a20      	ldr	r2, [pc, #128]	@ (8002f40 <HAL_DMA_Abort+0x46c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <HAL_DMA_Abort+0x470>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_DMA_Abort+0x474>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <HAL_DMA_Abort+0x478>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_DMA_Abort+0x47c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_Abort+0x422>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <HAL_DMA_Abort+0x480>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_Abort+0x426>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_Abort+0x428>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02b      	beq.n	8002f58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	223f      	movs	r2, #63	@ 0x3f
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	e02a      	b.n	8002f6e <HAL_DMA_Abort+0x49a>
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2201      	movs	r2, #1
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4f      	ldr	r2, [pc, #316]	@ (80030b0 <HAL_DMA_Abort+0x5dc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d072      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80030b4 <HAL_DMA_Abort+0x5e0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d06d      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	@ (80030b8 <HAL_DMA_Abort+0x5e4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d068      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	@ (80030bc <HAL_DMA_Abort+0x5e8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d063      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a49      	ldr	r2, [pc, #292]	@ (80030c0 <HAL_DMA_Abort+0x5ec>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d05e      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a47      	ldr	r2, [pc, #284]	@ (80030c4 <HAL_DMA_Abort+0x5f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d059      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a46      	ldr	r2, [pc, #280]	@ (80030c8 <HAL_DMA_Abort+0x5f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d054      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a44      	ldr	r2, [pc, #272]	@ (80030cc <HAL_DMA_Abort+0x5f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04f      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a43      	ldr	r2, [pc, #268]	@ (80030d0 <HAL_DMA_Abort+0x5fc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04a      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a41      	ldr	r2, [pc, #260]	@ (80030d4 <HAL_DMA_Abort+0x600>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d045      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	@ (80030d8 <HAL_DMA_Abort+0x604>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d040      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80030dc <HAL_DMA_Abort+0x608>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d03b      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3d      	ldr	r2, [pc, #244]	@ (80030e0 <HAL_DMA_Abort+0x60c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d036      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <HAL_DMA_Abort+0x610>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d031      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_DMA_Abort+0x614>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d02c      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a38      	ldr	r2, [pc, #224]	@ (80030ec <HAL_DMA_Abort+0x618>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d027      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a37      	ldr	r2, [pc, #220]	@ (80030f0 <HAL_DMA_Abort+0x61c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a35      	ldr	r2, [pc, #212]	@ (80030f4 <HAL_DMA_Abort+0x620>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a34      	ldr	r2, [pc, #208]	@ (80030f8 <HAL_DMA_Abort+0x624>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d018      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a32      	ldr	r2, [pc, #200]	@ (80030fc <HAL_DMA_Abort+0x628>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a31      	ldr	r2, [pc, #196]	@ (8003100 <HAL_DMA_Abort+0x62c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00e      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2f      	ldr	r2, [pc, #188]	@ (8003104 <HAL_DMA_Abort+0x630>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2e      	ldr	r2, [pc, #184]	@ (8003108 <HAL_DMA_Abort+0x634>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_DMA_Abort+0x58a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2c      	ldr	r2, [pc, #176]	@ (800310c <HAL_DMA_Abort+0x638>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_DMA_Abort+0x58e>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_DMA_Abort+0x590>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003070:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003084:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003088:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003092:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
 80030f0:	58025408 	.word	0x58025408
 80030f4:	5802541c 	.word	0x5802541c
 80030f8:	58025430 	.word	0x58025430
 80030fc:	58025444 	.word	0x58025444
 8003100:	58025458 	.word	0x58025458
 8003104:	5802546c 	.word	0x5802546c
 8003108:	58025480 	.word	0x58025480
 800310c:	58025494 	.word	0x58025494

08003110 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e237      	b.n	8003592 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d004      	beq.n	8003138 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2280      	movs	r2, #128	@ 0x80
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e22c      	b.n	8003592 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5c      	ldr	r2, [pc, #368]	@ (80032b0 <HAL_DMA_Abort_IT+0x1a0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d04a      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5b      	ldr	r2, [pc, #364]	@ (80032b4 <HAL_DMA_Abort_IT+0x1a4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d045      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a59      	ldr	r2, [pc, #356]	@ (80032b8 <HAL_DMA_Abort_IT+0x1a8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d040      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a58      	ldr	r2, [pc, #352]	@ (80032bc <HAL_DMA_Abort_IT+0x1ac>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03b      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a56      	ldr	r2, [pc, #344]	@ (80032c0 <HAL_DMA_Abort_IT+0x1b0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a55      	ldr	r2, [pc, #340]	@ (80032c4 <HAL_DMA_Abort_IT+0x1b4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d031      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a53      	ldr	r2, [pc, #332]	@ (80032c8 <HAL_DMA_Abort_IT+0x1b8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a52      	ldr	r2, [pc, #328]	@ (80032cc <HAL_DMA_Abort_IT+0x1bc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d027      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a50      	ldr	r2, [pc, #320]	@ (80032d0 <HAL_DMA_Abort_IT+0x1c0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4f      	ldr	r2, [pc, #316]	@ (80032d4 <HAL_DMA_Abort_IT+0x1c4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01d      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4d      	ldr	r2, [pc, #308]	@ (80032d8 <HAL_DMA_Abort_IT+0x1c8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d018      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4c      	ldr	r2, [pc, #304]	@ (80032dc <HAL_DMA_Abort_IT+0x1cc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	@ (80032e0 <HAL_DMA_Abort_IT+0x1d0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a49      	ldr	r2, [pc, #292]	@ (80032e4 <HAL_DMA_Abort_IT+0x1d4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a47      	ldr	r2, [pc, #284]	@ (80032e8 <HAL_DMA_Abort_IT+0x1d8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xc8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a46      	ldr	r2, [pc, #280]	@ (80032ec <HAL_DMA_Abort_IT+0x1dc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Abort_IT+0xcc>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_DMA_Abort_IT+0xce>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8086 	beq.w	80032f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2204      	movs	r2, #4
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <HAL_DMA_Abort_IT+0x1a0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d04a      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2e      	ldr	r2, [pc, #184]	@ (80032b4 <HAL_DMA_Abort_IT+0x1a4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d045      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <HAL_DMA_Abort_IT+0x1a8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d040      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2b      	ldr	r2, [pc, #172]	@ (80032bc <HAL_DMA_Abort_IT+0x1ac>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d03b      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_DMA_Abort_IT+0x1b0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d036      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a28      	ldr	r2, [pc, #160]	@ (80032c4 <HAL_DMA_Abort_IT+0x1b4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d031      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_DMA_Abort_IT+0x1b8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02c      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a25      	ldr	r2, [pc, #148]	@ (80032cc <HAL_DMA_Abort_IT+0x1bc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d027      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_DMA_Abort_IT+0x1c0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <HAL_DMA_Abort_IT+0x1c4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01d      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a20      	ldr	r2, [pc, #128]	@ (80032d8 <HAL_DMA_Abort_IT+0x1c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <HAL_DMA_Abort_IT+0x1cc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <HAL_DMA_Abort_IT+0x1d0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1c      	ldr	r2, [pc, #112]	@ (80032e4 <HAL_DMA_Abort_IT+0x1d4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1a      	ldr	r2, [pc, #104]	@ (80032e8 <HAL_DMA_Abort_IT+0x1d8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_DMA_Abort_IT+0x17c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a19      	ldr	r2, [pc, #100]	@ (80032ec <HAL_DMA_Abort_IT+0x1dc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <HAL_DMA_Abort_IT+0x18e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e178      	b.n	8003590 <HAL_DMA_Abort_IT+0x480>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e16f      	b.n	8003590 <HAL_DMA_Abort_IT+0x480>
 80032b0:	40020010 	.word	0x40020010
 80032b4:	40020028 	.word	0x40020028
 80032b8:	40020040 	.word	0x40020040
 80032bc:	40020058 	.word	0x40020058
 80032c0:	40020070 	.word	0x40020070
 80032c4:	40020088 	.word	0x40020088
 80032c8:	400200a0 	.word	0x400200a0
 80032cc:	400200b8 	.word	0x400200b8
 80032d0:	40020410 	.word	0x40020410
 80032d4:	40020428 	.word	0x40020428
 80032d8:	40020440 	.word	0x40020440
 80032dc:	40020458 	.word	0x40020458
 80032e0:	40020470 	.word	0x40020470
 80032e4:	40020488 	.word	0x40020488
 80032e8:	400204a0 	.word	0x400204a0
 80032ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020e 	bic.w	r2, r2, #14
 80032fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6c      	ldr	r2, [pc, #432]	@ (80034b8 <HAL_DMA_Abort_IT+0x3a8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6b      	ldr	r2, [pc, #428]	@ (80034bc <HAL_DMA_Abort_IT+0x3ac>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a69      	ldr	r2, [pc, #420]	@ (80034c0 <HAL_DMA_Abort_IT+0x3b0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a68      	ldr	r2, [pc, #416]	@ (80034c4 <HAL_DMA_Abort_IT+0x3b4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <HAL_DMA_Abort_IT+0x3b8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a65      	ldr	r2, [pc, #404]	@ (80034cc <HAL_DMA_Abort_IT+0x3bc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a63      	ldr	r2, [pc, #396]	@ (80034d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a62      	ldr	r2, [pc, #392]	@ (80034d4 <HAL_DMA_Abort_IT+0x3c4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5f      	ldr	r2, [pc, #380]	@ (80034dc <HAL_DMA_Abort_IT+0x3cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5d      	ldr	r2, [pc, #372]	@ (80034e0 <HAL_DMA_Abort_IT+0x3d0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	@ (80034e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_DMA_Abort_IT+0x3d8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a59      	ldr	r2, [pc, #356]	@ (80034ec <HAL_DMA_Abort_IT+0x3dc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x290>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a56      	ldr	r2, [pc, #344]	@ (80034f4 <HAL_DMA_Abort_IT+0x3e4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <HAL_DMA_Abort_IT+0x2a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <HAL_DMA_Abort_IT+0x2b2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3c      	ldr	r2, [pc, #240]	@ (80034b8 <HAL_DMA_Abort_IT+0x3a8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d072      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3a      	ldr	r2, [pc, #232]	@ (80034bc <HAL_DMA_Abort_IT+0x3ac>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d06d      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a39      	ldr	r2, [pc, #228]	@ (80034c0 <HAL_DMA_Abort_IT+0x3b0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d068      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a37      	ldr	r2, [pc, #220]	@ (80034c4 <HAL_DMA_Abort_IT+0x3b4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d063      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a36      	ldr	r2, [pc, #216]	@ (80034c8 <HAL_DMA_Abort_IT+0x3b8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d05e      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a34      	ldr	r2, [pc, #208]	@ (80034cc <HAL_DMA_Abort_IT+0x3bc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d059      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a33      	ldr	r2, [pc, #204]	@ (80034d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d054      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a31      	ldr	r2, [pc, #196]	@ (80034d4 <HAL_DMA_Abort_IT+0x3c4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d04f      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a30      	ldr	r2, [pc, #192]	@ (80034d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2e      	ldr	r2, [pc, #184]	@ (80034dc <HAL_DMA_Abort_IT+0x3cc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <HAL_DMA_Abort_IT+0x3d0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2b      	ldr	r2, [pc, #172]	@ (80034e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2a      	ldr	r2, [pc, #168]	@ (80034e8 <HAL_DMA_Abort_IT+0x3d8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a28      	ldr	r2, [pc, #160]	@ (80034ec <HAL_DMA_Abort_IT+0x3dc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a27      	ldr	r2, [pc, #156]	@ (80034f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a25      	ldr	r2, [pc, #148]	@ (80034f4 <HAL_DMA_Abort_IT+0x3e4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a24      	ldr	r2, [pc, #144]	@ (80034f8 <HAL_DMA_Abort_IT+0x3e8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a22      	ldr	r2, [pc, #136]	@ (80034fc <HAL_DMA_Abort_IT+0x3ec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a21      	ldr	r2, [pc, #132]	@ (8003500 <HAL_DMA_Abort_IT+0x3f0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1f      	ldr	r2, [pc, #124]	@ (8003504 <HAL_DMA_Abort_IT+0x3f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <HAL_DMA_Abort_IT+0x3f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <HAL_DMA_Abort_IT+0x3fc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003510 <HAL_DMA_Abort_IT+0x400>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x3a2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	@ (8003514 <HAL_DMA_Abort_IT+0x404>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d132      	bne.n	8003518 <HAL_DMA_Abort_IT+0x408>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e031      	b.n	800351a <HAL_DMA_Abort_IT+0x40a>
 80034b6:	bf00      	nop
 80034b8:	40020010 	.word	0x40020010
 80034bc:	40020028 	.word	0x40020028
 80034c0:	40020040 	.word	0x40020040
 80034c4:	40020058 	.word	0x40020058
 80034c8:	40020070 	.word	0x40020070
 80034cc:	40020088 	.word	0x40020088
 80034d0:	400200a0 	.word	0x400200a0
 80034d4:	400200b8 	.word	0x400200b8
 80034d8:	40020410 	.word	0x40020410
 80034dc:	40020428 	.word	0x40020428
 80034e0:	40020440 	.word	0x40020440
 80034e4:	40020458 	.word	0x40020458
 80034e8:	40020470 	.word	0x40020470
 80034ec:	40020488 	.word	0x40020488
 80034f0:	400204a0 	.word	0x400204a0
 80034f4:	400204b8 	.word	0x400204b8
 80034f8:	58025408 	.word	0x58025408
 80034fc:	5802541c 	.word	0x5802541c
 8003500:	58025430 	.word	0x58025430
 8003504:	58025444 	.word	0x58025444
 8003508:	58025458 	.word	0x58025458
 800350c:	5802546c 	.word	0x5802546c
 8003510:	58025480 	.word	0x58025480
 8003514:	58025494 	.word	0x58025494
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d028      	beq.n	8003570 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2201      	movs	r2, #1
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800354c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003564:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800356e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop

0800359c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b098      	sub	sp, #96	@ 0x60
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80035a4:	4a84      	ldr	r2, [pc, #528]	@ (80037b8 <HAL_FDCAN_Init+0x21c>)
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4611      	mov	r1, r2
 80035ac:	224c      	movs	r2, #76	@ 0x4c
 80035ae:	4618      	mov	r0, r3
 80035b0:	f007 fd52 	bl	800b058 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1c6      	b.n	800394c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7e      	ldr	r2, [pc, #504]	@ (80037bc <HAL_FDCAN_Init+0x220>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d106      	bne.n	80035d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fb1a 	bl	8001c24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0210 	bic.w	r2, r2, #16
 80035fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003600:	f7ff f8c8 	bl	8002794 <HAL_GetTick>
 8003604:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003606:	e014      	b.n	8003632 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003608:	f7ff f8c4 	bl	8002794 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d90d      	bls.n	8003632 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e18c      	b.n	800394c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d0e3      	beq.n	8003608 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003650:	f7ff f8a0 	bl	8002794 <HAL_GetTick>
 8003654:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003656:	e014      	b.n	8003682 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003658:	f7ff f89c 	bl	8002794 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b0a      	cmp	r3, #10
 8003664:	d90d      	bls.n	8003682 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e164      	b.n	800394c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0e3      	beq.n	8003658 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0202 	orr.w	r2, r2, #2
 800369e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7c1b      	ldrb	r3, [r3, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b6:	619a      	str	r2, [r3, #24]
 80036b8:	e007      	b.n	80036ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7c5b      	ldrb	r3, [r3, #17]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d108      	bne.n	80036e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e0:	619a      	str	r2, [r3, #24]
 80036e2:	e007      	b.n	80036f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7c9b      	ldrb	r3, [r3, #18]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d108      	bne.n	800370e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800370a:	619a      	str	r2, [r3, #24]
 800370c:	e007      	b.n	800371e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800371c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003742:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d108      	bne.n	800376e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0204 	orr.w	r2, r2, #4
 800376a:	619a      	str	r2, [r3, #24]
 800376c:	e030      	b.n	80037d0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02c      	beq.n	80037d0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d020      	beq.n	80037c0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800378c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0210 	orr.w	r2, r2, #16
 800379c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d114      	bne.n	80037d0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	619a      	str	r2, [r3, #24]
 80037b6:	e00b      	b.n	80037d0 <HAL_FDCAN_Init+0x234>
 80037b8:	0800b95c 	.word	0x0800b95c
 80037bc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	3b01      	subs	r3, #1
 80037de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003804:	d115      	bne.n	8003832 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	3b01      	subs	r3, #1
 8003812:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003814:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	3b01      	subs	r3, #1
 800381c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800381e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	3b01      	subs	r3, #1
 8003828:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800382e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003830:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	4413      	add	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d011      	beq.n	8003882 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003866:	f023 0107 	bic.w	r1, r3, #7
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3360      	adds	r3, #96	@ 0x60
 8003872:	443b      	add	r3, r7
 8003874:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d011      	beq.n	80038ae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003892:	f023 0107 	bic.w	r1, r3, #7
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3360      	adds	r3, #96	@ 0x60
 800389e:	443b      	add	r3, r7
 80038a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038be:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3360      	adds	r3, #96	@ 0x60
 80038ca:	443b      	add	r3, r7
 80038cc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80038d0:	011a      	lsls	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038ec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3360      	adds	r3, #96	@ 0x60
 80038f8:	443b      	add	r3, r7
 80038fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a11      	ldr	r2, [pc, #68]	@ (8003954 <HAL_FDCAN_Init+0x3b8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d107      	bne.n	8003924 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f022 0203 	bic.w	r2, r2, #3
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fd81 	bl	8004444 <FDCAN_CalcultateRamBlockAddresses>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003948:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800394c:	4618      	mov	r0, r3
 800394e:	3760      	adds	r7, #96	@ 0x60
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	4000a000 	.word	0x4000a000

08003958 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d111      	bne.n	8003990 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e008      	b.n	80039a2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d141      	bne.n	8003a4a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039ce:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e038      	b.n	8003a5c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80039f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e026      	b.n	8003a5c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fe93 	bl	8004750 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e008      	b.n	8003a5c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a50:	f043 0208 	orr.w	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b08b      	sub	sp, #44	@ 0x2c
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003a7c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003a7e:	7efb      	ldrb	r3, [r7, #27]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f040 8149 	bne.w	8003d18 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	d14c      	bne.n	8003b26 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a94:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e13c      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ac6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e12a      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae4:	d10a      	bne.n	8003afc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af6:	d101      	bne.n	8003afc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	69f9      	ldr	r1, [r7, #28]
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b24:	e068      	b.n	8003bf8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b41      	cmp	r3, #65	@ 0x41
 8003b2a:	d14c      	bne.n	8003bc6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0ec      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0da      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b84:	d10a      	bne.n	8003b9c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b96:	d101      	bne.n	8003b9c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb8:	69f9      	ldr	r1, [r7, #28]
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc4:	e018      	b.n	8003bf8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d309      	bcc.n	8003be4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0a2      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0c9b      	lsrs	r3, r3, #18
 8003c12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e005      	b.n	8003c28 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	3304      	adds	r3, #4
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e1b      	lsrs	r3, r3, #24
 8003c7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0fda      	lsrs	r2, r3, #31
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	3304      	adds	r3, #4
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	e00a      	b.n	8003cb4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	440b      	add	r3, r1
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d3ec      	bcc.n	8003c9e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d105      	bne.n	8003cd6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003cd4:	e01e      	b.n	8003d14 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b41      	cmp	r3, #65	@ 0x41
 8003cda:	d105      	bne.n	8003ce8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003ce6:	e015      	b.n	8003d14 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b1f      	cmp	r3, #31
 8003cec:	d808      	bhi.n	8003d00 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003cfe:	e009      	b.n	8003d14 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 021f 	and.w	r2, r3, #31
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e008      	b.n	8003d2a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d1e:	f043 0208 	orr.w	r2, r3, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	372c      	adds	r7, #44	@ 0x2c
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	0800b9b8 	.word	0x0800b9b8

08003d3c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003d4e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <HAL_FDCAN_ActivateNotification+0x20>
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d155      	bne.n	8003e08 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d7a:	e014      	b.n	8003da6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d108      	bne.n	8003d9e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0202 	orr.w	r2, r2, #2
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d9c:	e003      	b.n	8003da6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2203      	movs	r2, #3
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <HAL_FDCAN_ActivateNotification+0xec>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	430b      	orrs	r3, r1
 8003df4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003df6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0f9b      	lsrs	r3, r3, #30
 8003dfe:	490b      	ldr	r1, [pc, #44]	@ (8003e2c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e008      	b.n	8003e1a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	3fcfffff 	.word	0x3fcfffff
 8003e2c:	4000a800 	.word	0x4000a800

08003e30 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b096      	sub	sp, #88	@ 0x58
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003e38:	4b9a      	ldr	r3, [pc, #616]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	079b      	lsls	r3, r3, #30
 8003e3e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003e40:	4b98      	ldr	r3, [pc, #608]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	079b      	lsls	r3, r3, #30
 8003e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e48:	4013      	ands	r3, r2
 8003e4a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e52:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e56:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e60:	4013      	ands	r3, r2
 8003e62:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e78:	4013      	ands	r3, r2
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e90:	4013      	ands	r3, r2
 8003e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ef4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa54 	bl	80043aa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f04:	0a9b      	lsrs	r3, r3, #10
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01d      	beq.n	8003f4a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f10:	0a9b      	lsrs	r3, r3, #10
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f2e:	4013      	ands	r3, r2
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f3c:	4b59      	ldr	r3, [pc, #356]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa07 	bl	8004358 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f56:	4b54      	ldr	r3, [pc, #336]	@ (80040a8 <HAL_FDCAN_IRQHandler+0x278>)
 8003f58:	400b      	ands	r3, r1
 8003f5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f5c:	4a51      	ldr	r2, [pc, #324]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f60:	0f9b      	lsrs	r3, r3, #30
 8003f62:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003f64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9c0 	bl	80042ec <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f78:	4b4b      	ldr	r3, [pc, #300]	@ (80040a8 <HAL_FDCAN_IRQHandler+0x278>)
 8003f7a:	400b      	ands	r3, r1
 8003f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f7e:	4a49      	ldr	r2, [pc, #292]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f82:	0f9b      	lsrs	r3, r3, #30
 8003f84:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f9ba 	bl	8004302 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003f9a:	4b43      	ldr	r3, [pc, #268]	@ (80040a8 <HAL_FDCAN_IRQHandler+0x278>)
 8003f9c:	400b      	ands	r3, r1
 8003f9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa0:	4a40      	ldr	r2, [pc, #256]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa4:	0f9b      	lsrs	r3, r3, #30
 8003fa6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003fa8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe f92e 	bl	800220c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80040a8 <HAL_FDCAN_IRQHandler+0x278>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fc2:	4a38      	ldr	r2, [pc, #224]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc6:	0f9b      	lsrs	r3, r3, #30
 8003fc8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003fca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f9a3 	bl	8004318 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	0adb      	lsrs	r3, r3, #11
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe0:	0adb      	lsrs	r3, r3, #11
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f997 	bl	800432e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	0a5b      	lsrs	r3, r3, #9
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01d      	beq.n	8004048 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800402a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402c:	4013      	ands	r3, r2
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004038:	651a      	str	r2, [r3, #80]	@ 0x50
 800403a:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004040:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f97d 	bl	8004342 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404a:	0cdb      	lsrs	r3, r3, #19
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	0cdb      	lsrs	r3, r3, #19
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
 800406a:	4b0e      	ldr	r3, [pc, #56]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f97c 	bl	800436e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d010      	beq.n	80040b0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004096:	651a      	str	r2, [r3, #80]	@ 0x50
 8004098:	4b02      	ldr	r3, [pc, #8]	@ (80040a4 <HAL_FDCAN_IRQHandler+0x274>)
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	e004      	b.n	80040ac <HAL_FDCAN_IRQHandler+0x27c>
 80040a2:	bf00      	nop
 80040a4:	4000a800 	.word	0x4000a800
 80040a8:	3fcfffff 	.word	0x3fcfffff
 80040ac:	f000 f969 	bl	8004382 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80040b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80040d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80040d2:	4b83      	ldr	r3, [pc, #524]	@ (80042e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f95c 	bl	8004396 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80040de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e0:	0c5b      	lsrs	r3, r3, #17
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	0c5b      	lsrs	r3, r3, #17
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004100:	4b77      	ldr	r3, [pc, #476]	@ (80042e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004124:	400b      	ands	r3, r1
 8004126:	6513      	str	r3, [r2, #80]	@ 0x50
 8004128:	4a6d      	ldr	r2, [pc, #436]	@ (80042e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800412a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412c:	0f9b      	lsrs	r3, r3, #30
 800412e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f94d 	bl	80043d2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004144:	4b67      	ldr	r3, [pc, #412]	@ (80042e4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004146:	400b      	ands	r3, r1
 8004148:	6513      	str	r3, [r2, #80]	@ 0x50
 800414a:	4a65      	ldr	r2, [pc, #404]	@ (80042e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800414c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414e:	0f9b      	lsrs	r3, r3, #30
 8004150:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a60      	ldr	r2, [pc, #384]	@ (80042e8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	f040 80ac 	bne.w	80042c6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a4 	beq.w	80042c6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	4013      	ands	r3, r2
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041aa:	4013      	ands	r3, r2
 80041ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c2:	4013      	ands	r3, r2
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80041d0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	4013      	ands	r3, r2
 80041dc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80041e8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004212:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8e6 	bl	80043e8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004228:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800422a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8e6 	bl	80043fe <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01a      	beq.n	8004274 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	099b      	lsrs	r3, r3, #6
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	b29b      	uxth	r3, r3
 8004254:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004260:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2240      	movs	r2, #64	@ 0x40
 8004268:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8d0 	bl	8004414 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004282:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8d1 	bl	800442c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f874 	bl	80043be <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80042d6:	bf00      	nop
 80042d8:	3758      	adds	r7, #88	@ 0x58
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	4000a800 	.word	0x4000a800
 80042e4:	3fcfffff 	.word	0x3fcfffff
 80042e8:	4000a000 	.word	0x4000a000

080042ec <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800445a:	4ba7      	ldr	r3, [pc, #668]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800445c:	4013      	ands	r3, r2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	0091      	lsls	r1, r2, #2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	430b      	orrs	r3, r1
 8004468:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004474:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4413      	add	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800449a:	4b97      	ldr	r3, [pc, #604]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800449c:	4013      	ands	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0091      	lsls	r1, r2, #2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	430b      	orrs	r3, r1
 80044a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	041a      	lsls	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80044dc:	4b86      	ldr	r3, [pc, #536]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044de:	4013      	ands	r3, r2
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	0091      	lsls	r1, r2, #2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044f6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	041a      	lsls	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004524:	4b74      	ldr	r3, [pc, #464]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004526:	4013      	ands	r3, r2
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	0091      	lsls	r1, r2, #2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800453e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004546:	041a      	lsls	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800455a:	fb02 f303 	mul.w	r3, r2, r3
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800456c:	4b62      	ldr	r3, [pc, #392]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	0091      	lsls	r1, r2, #2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004598:	4b57      	ldr	r3, [pc, #348]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800459a:	4013      	ands	r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	0091      	lsls	r1, r2, #2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	041a      	lsls	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	4413      	add	r3, r2
 80045d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80045da:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045dc:	4013      	ands	r3, r2
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	0091      	lsls	r1, r2, #2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	430b      	orrs	r3, r1
 80045e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045f4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	041a      	lsls	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004610:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004618:	061a      	lsls	r2, r3, #24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004628:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800462a:	4413      	add	r3, r2
 800462c:	009a      	lsls	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	4a04      	ldr	r2, [pc, #16]	@ (8004700 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d915      	bls.n	8004720 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80046f4:	e006      	b.n	8004704 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80046f6:	bf00      	nop
 80046f8:	ffff0003 	.word	0xffff0003
 80046fc:	10002b00 	.word	0x10002b00
 8004700:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e010      	b.n	8004742 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e005      	b.n	8004734 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3f3      	bcc.n	8004728 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop

08004750 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	@ 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800476e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004776:	4313      	orrs	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e00a      	b.n	8004792 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004784:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800478a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800478c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004790:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800479c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80047a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80047a8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3304      	adds	r3, #4
 80047d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	3304      	adds	r3, #4
 80047e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e020      	b.n	800482a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3303      	adds	r3, #3
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3302      	adds	r3, #2
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	440b      	add	r3, r1
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004800:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3301      	adds	r3, #1
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	440b      	add	r3, r1
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800480e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	440a      	add	r2, r1
 8004816:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004818:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3304      	adds	r3, #4
 8004822:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3304      	adds	r3, #4
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4a06      	ldr	r2, [pc, #24]	@ (8004848 <FDCAN_CopyMessageToRAM+0xf8>)
 8004830:	5cd3      	ldrb	r3, [r2, r3]
 8004832:	461a      	mov	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4293      	cmp	r3, r2
 8004838:	d3d6      	bcc.n	80047e8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3724      	adds	r7, #36	@ 0x24
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	0800b9b8 	.word	0x0800b9b8

0800484c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	@ 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800485a:	4b89      	ldr	r3, [pc, #548]	@ (8004a80 <HAL_GPIO_Init+0x234>)
 800485c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800485e:	e194      	b.n	8004b8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2101      	movs	r1, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8186 	beq.w	8004b84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d005      	beq.n	8004890 <HAL_GPIO_Init+0x44>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d130      	bne.n	80048f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048c6:	2201      	movs	r2, #1
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 0201 	and.w	r2, r3, #1
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d017      	beq.n	800492e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d123      	bne.n	8004982 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	08da      	lsrs	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3208      	adds	r2, #8
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0203 	and.w	r2, r3, #3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80e0 	beq.w	8004b84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a84 <HAL_GPIO_Init+0x238>)
 80049c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004a84 <HAL_GPIO_Init+0x238>)
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <HAL_GPIO_Init+0x238>)
 80049d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e2:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <HAL_GPIO_Init+0x23c>)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	3302      	adds	r3, #2
 80049ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	220f      	movs	r2, #15
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <HAL_GPIO_Init+0x240>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d052      	beq.n	8004ab4 <HAL_GPIO_Init+0x268>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <HAL_GPIO_Init+0x244>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_GPIO_Init+0x22e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1e      	ldr	r2, [pc, #120]	@ (8004a94 <HAL_GPIO_Init+0x248>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02b      	beq.n	8004a76 <HAL_GPIO_Init+0x22a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1d      	ldr	r2, [pc, #116]	@ (8004a98 <HAL_GPIO_Init+0x24c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d025      	beq.n	8004a72 <HAL_GPIO_Init+0x226>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_GPIO_Init+0x250>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01f      	beq.n	8004a6e <HAL_GPIO_Init+0x222>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa0 <HAL_GPIO_Init+0x254>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d019      	beq.n	8004a6a <HAL_GPIO_Init+0x21e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa4 <HAL_GPIO_Init+0x258>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_GPIO_Init+0x21a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <HAL_GPIO_Init+0x25c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00d      	beq.n	8004a62 <HAL_GPIO_Init+0x216>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_GPIO_Init+0x260>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <HAL_GPIO_Init+0x212>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a17      	ldr	r2, [pc, #92]	@ (8004ab0 <HAL_GPIO_Init+0x264>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_GPIO_Init+0x20e>
 8004a56:	2309      	movs	r3, #9
 8004a58:	e02d      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e02b      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	e029      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a62:	2307      	movs	r3, #7
 8004a64:	e027      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a66:	2306      	movs	r3, #6
 8004a68:	e025      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e023      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e021      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e01f      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e01d      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01b      	b.n	8004ab6 <HAL_GPIO_Init+0x26a>
 8004a7e:	bf00      	nop
 8004a80:	58000080 	.word	0x58000080
 8004a84:	58024400 	.word	0x58024400
 8004a88:	58000400 	.word	0x58000400
 8004a8c:	58020000 	.word	0x58020000
 8004a90:	58020400 	.word	0x58020400
 8004a94:	58020800 	.word	0x58020800
 8004a98:	58020c00 	.word	0x58020c00
 8004a9c:	58021000 	.word	0x58021000
 8004aa0:	58021400 	.word	0x58021400
 8004aa4:	58021800 	.word	0x58021800
 8004aa8:	58021c00 	.word	0x58021c00
 8004aac:	58022000 	.word	0x58022000
 8004ab0:	58022400 	.word	0x58022400
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	f002 0203 	and.w	r2, r2, #3
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	4093      	lsls	r3, r2
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ac6:	4938      	ldr	r1, [pc, #224]	@ (8004ba8 <HAL_GPIO_Init+0x35c>)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	3302      	adds	r3, #2
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004afa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	3301      	adds	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f47f ae63 	bne.w	8004860 <HAL_GPIO_Init+0x14>
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	3724      	adds	r7, #36	@ 0x24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	58000400 	.word	0x58000400

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc2:	887a      	ldrh	r2, [r7, #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bc8:	e003      	b.n	8004bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	041a      	lsls	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_PWREx_ConfigSupply+0x70>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d00a      	beq.n	8004c0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bf4:	4b16      	ldr	r3, [pc, #88]	@ (8004c50 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d001      	beq.n	8004c06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e01f      	b.n	8004c46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e01d      	b.n	8004c46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <HAL_PWREx_ConfigSupply+0x70>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f023 0207 	bic.w	r2, r3, #7
 8004c12:	490f      	ldr	r1, [pc, #60]	@ (8004c50 <HAL_PWREx_ConfigSupply+0x70>)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c1a:	f7fd fdbb 	bl	8002794 <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c20:	e009      	b.n	8004c36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c22:	f7fd fdb7 	bl	8002794 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c30:	d901      	bls.n	8004c36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e007      	b.n	8004c46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c36:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_PWREx_ConfigSupply+0x70>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c42:	d1ee      	bne.n	8004c22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024800 	.word	0x58024800

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	@ 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f000 bc48 	b.w	80054f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8088 	beq.w	8004d86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b99      	ldr	r3, [pc, #612]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c80:	4b96      	ldr	r3, [pc, #600]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d007      	beq.n	8004c9c <HAL_RCC_OscConfig+0x48>
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	2b18      	cmp	r3, #24
 8004c90:	d111      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x62>
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d06d      	beq.n	8004d84 <HAL_RCC_OscConfig+0x130>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d169      	bne.n	8004d84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f000 bc21 	b.w	80054f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x7a>
 8004cc0:	4b86      	ldr	r3, [pc, #536]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a85      	ldr	r2, [pc, #532]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e02e      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x9c>
 8004cd6:	4b81      	ldr	r3, [pc, #516]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a80      	ldr	r2, [pc, #512]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b7e      	ldr	r3, [pc, #504]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7d      	ldr	r2, [pc, #500]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e01d      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0xc0>
 8004cfa:	4b78      	ldr	r3, [pc, #480]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a77      	ldr	r2, [pc, #476]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b75      	ldr	r3, [pc, #468]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a74      	ldr	r2, [pc, #464]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCC_OscConfig+0xd8>
 8004d14:	4b71      	ldr	r3, [pc, #452]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a70      	ldr	r2, [pc, #448]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b6e      	ldr	r3, [pc, #440]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6d      	ldr	r2, [pc, #436]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fd2e 	bl	8002794 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fd2a 	bl	8002794 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e3d4      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d4e:	4b63      	ldr	r3, [pc, #396]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe8>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fd1a 	bl	8002794 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd fd16 	bl	8002794 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e3c0      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d76:	4b59      	ldr	r3, [pc, #356]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x110>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80ca 	beq.w	8004f28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d94:	4b51      	ldr	r3, [pc, #324]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_RCC_OscConfig+0x166>
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b18      	cmp	r3, #24
 8004dae:	d156      	bne.n	8004e5e <HAL_RCC_OscConfig+0x20a>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d151      	bne.n	8004e5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dba:	4b48      	ldr	r3, [pc, #288]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x17e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e392      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dd2:	4b42      	ldr	r3, [pc, #264]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0219 	bic.w	r2, r3, #25
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	493f      	ldr	r1, [pc, #252]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd fcd6 	bl	8002794 <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fd fcd2 	bl	8002794 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e37c      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfe:	4b37      	ldr	r3, [pc, #220]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0a:	f7fd fccf 	bl	80027ac <HAL_GetREVID>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d817      	bhi.n	8004e48 <HAL_RCC_OscConfig+0x1f4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b40      	cmp	r3, #64	@ 0x40
 8004e1e:	d108      	bne.n	8004e32 <HAL_RCC_OscConfig+0x1de>
 8004e20:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e28:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e30:	e07a      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b2a      	ldr	r3, [pc, #168]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	031b      	lsls	r3, r3, #12
 8004e40:	4926      	ldr	r1, [pc, #152]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e46:	e06f      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	4921      	ldr	r1, [pc, #132]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5c:	e064      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d047      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 0219 	bic.w	r2, r3, #25
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	491a      	ldr	r1, [pc, #104]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd fc8c 	bl	8002794 <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fd fc88 	bl	8002794 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e332      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e92:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	f7fd fc85 	bl	80027ac <HAL_GetREVID>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d819      	bhi.n	8004ee0 <HAL_RCC_OscConfig+0x28c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d108      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x272>
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ebc:	4a07      	ldr	r2, [pc, #28]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec2:	6053      	str	r3, [r2, #4]
 8004ec4:	e030      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	4901      	ldr	r1, [pc, #4]	@ (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
 8004eda:	e025      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	4b9a      	ldr	r3, [pc, #616]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	061b      	lsls	r3, r3, #24
 8004eee:	4997      	ldr	r1, [pc, #604]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	e018      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef6:	4b95      	ldr	r3, [pc, #596]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a94      	ldr	r2, [pc, #592]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fd fc47 	bl	8002794 <HAL_GetTick>
 8004f06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0a:	f7fd fc43 	bl	8002794 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e2ed      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f1c:	4b8b      	ldr	r3, [pc, #556]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a9 	beq.w	8005088 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f36:	4b85      	ldr	r3, [pc, #532]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f40:	4b82      	ldr	r3, [pc, #520]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCC_OscConfig+0x308>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b18      	cmp	r3, #24
 8004f50:	d13a      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x374>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d135      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_OscConfig+0x320>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b80      	cmp	r3, #128	@ 0x80
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e2c1      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f74:	f7fd fc1a 	bl	80027ac <HAL_GetREVID>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d817      	bhi.n	8004fb2 <HAL_RCC_OscConfig+0x35e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d108      	bne.n	8004f9c <HAL_RCC_OscConfig+0x348>
 8004f8a:	4b70      	ldr	r3, [pc, #448]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f92:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f9a:	e075      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	069b      	lsls	r3, r3, #26
 8004faa:	4968      	ldr	r1, [pc, #416]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb0:	e06a      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb2:	4b66      	ldr	r3, [pc, #408]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	4962      	ldr	r1, [pc, #392]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fc6:	e05f      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d042      	beq.n	8005056 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fbda 	bl	8002794 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fbd6 	bl	8002794 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e280      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff6:	4b55      	ldr	r3, [pc, #340]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005002:	f7fd fbd3 	bl	80027ac <HAL_GetREVID>
 8005006:	4603      	mov	r3, r0
 8005008:	f241 0203 	movw	r2, #4099	@ 0x1003
 800500c:	4293      	cmp	r3, r2
 800500e:	d817      	bhi.n	8005040 <HAL_RCC_OscConfig+0x3ec>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	2b20      	cmp	r3, #32
 8005016:	d108      	bne.n	800502a <HAL_RCC_OscConfig+0x3d6>
 8005018:	4b4c      	ldr	r3, [pc, #304]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005020:	4a4a      	ldr	r2, [pc, #296]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005026:	6053      	str	r3, [r2, #4]
 8005028:	e02e      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
 800502a:	4b48      	ldr	r3, [pc, #288]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	069b      	lsls	r3, r3, #26
 8005038:	4944      	ldr	r1, [pc, #272]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	604b      	str	r3, [r1, #4]
 800503e:	e023      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
 8005040:	4b42      	ldr	r3, [pc, #264]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	493f      	ldr	r1, [pc, #252]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
 8005054:	e018      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005056:	4b3d      	ldr	r3, [pc, #244]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3c      	ldr	r2, [pc, #240]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800505c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fd fb97 	bl	8002794 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800506a:	f7fd fb93 	bl	8002794 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e23d      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800507c:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d036      	beq.n	8005102 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509c:	4b2b      	ldr	r3, [pc, #172]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a0:	4a2a      	ldr	r2, [pc, #168]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd fb74 	bl	8002794 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fd fb70 	bl	8002794 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e21a      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050c2:	4b22      	ldr	r3, [pc, #136]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x45c>
 80050ce:	e018      	b.n	8005102 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d0:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050dc:	f7fd fb5a 	bl	8002794 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e4:	f7fd fb56 	bl	8002794 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e200      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050f6:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d039      	beq.n	8005182 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01c      	beq.n	8005150 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0c      	ldr	r2, [pc, #48]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800511c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005120:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005122:	f7fd fb37 	bl	8002794 <HAL_GetTick>
 8005126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512a:	f7fd fb33 	bl	8002794 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1dd      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800513c:	4b03      	ldr	r3, [pc, #12]	@ (800514c <HAL_RCC_OscConfig+0x4f8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x4d6>
 8005148:	e01b      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005150:	4b9b      	ldr	r3, [pc, #620]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a9a      	ldr	r2, [pc, #616]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800515c:	f7fd fb1a 	bl	8002794 <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005164:	f7fd fb16 	bl	8002794 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1c0      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005176:	4b92      	ldr	r3, [pc, #584]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8081 	beq.w	8005292 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005190:	4b8c      	ldr	r3, [pc, #560]	@ (80053c4 <HAL_RCC_OscConfig+0x770>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a8b      	ldr	r2, [pc, #556]	@ (80053c4 <HAL_RCC_OscConfig+0x770>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519c:	f7fd fafa 	bl	8002794 <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a4:	f7fd faf6 	bl	8002794 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1a0      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b6:	4b83      	ldr	r3, [pc, #524]	@ (80053c4 <HAL_RCC_OscConfig+0x770>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d106      	bne.n	80051d8 <HAL_RCC_OscConfig+0x584>
 80051ca:	4b7d      	ldr	r3, [pc, #500]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	4a7c      	ldr	r2, [pc, #496]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d6:	e02d      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10c      	bne.n	80051fa <HAL_RCC_OscConfig+0x5a6>
 80051e0:	4b77      	ldr	r3, [pc, #476]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a76      	ldr	r2, [pc, #472]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ec:	4b74      	ldr	r3, [pc, #464]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a73      	ldr	r2, [pc, #460]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x5c8>
 8005202:	4b6f      	ldr	r3, [pc, #444]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a6e      	ldr	r2, [pc, #440]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	@ 0x70
 800520e:	4b6c      	ldr	r3, [pc, #432]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a6b      	ldr	r2, [pc, #428]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 800521c:	4b68      	ldr	r3, [pc, #416]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	4a67      	ldr	r2, [pc, #412]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	@ 0x70
 8005228:	4b65      	ldr	r3, [pc, #404]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a64      	ldr	r2, [pc, #400]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fd faaa 	bl	8002794 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fd faa6 	bl	8002794 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e14e      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800525a:	4b59      	ldr	r3, [pc, #356]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x5f0>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fd fa94 	bl	8002794 <HAL_GetTick>
 800526c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fd fa90 	bl	8002794 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e138      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005286:	4b4e      	ldr	r3, [pc, #312]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 812d 	beq.w	80054f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800529c:	4b48      	ldr	r3, [pc, #288]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a4:	2b18      	cmp	r3, #24
 80052a6:	f000 80bd 	beq.w	8005424 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	f040 809e 	bne.w	80053f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b4:	4b42      	ldr	r3, [pc, #264]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a41      	ldr	r2, [pc, #260]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fa68 	bl	8002794 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd fa64 	bl	8002794 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e10e      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e6:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ea:	4b37      	ldr	r3, [pc, #220]	@ (80053c8 <HAL_RCC_OscConfig+0x774>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052f6:	0112      	lsls	r2, r2, #4
 80052f8:	430a      	orrs	r2, r1
 80052fa:	4931      	ldr	r1, [pc, #196]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	3b01      	subs	r3, #1
 8005306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	3b01      	subs	r3, #1
 8005310:	025b      	lsls	r3, r3, #9
 8005312:	b29b      	uxth	r3, r3
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	3b01      	subs	r3, #1
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	3b01      	subs	r3, #1
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005330:	4923      	ldr	r1, [pc, #140]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005336:	4b22      	ldr	r3, [pc, #136]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005342:	4b1f      	ldr	r3, [pc, #124]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005346:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <HAL_RCC_OscConfig+0x778>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800534e:	00d2      	lsls	r2, r2, #3
 8005350:	491b      	ldr	r1, [pc, #108]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005356:	4b1a      	ldr	r3, [pc, #104]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	f023 020c 	bic.w	r2, r3, #12
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	4917      	ldr	r1, [pc, #92]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	f023 0202 	bic.w	r2, r3, #2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	4912      	ldr	r1, [pc, #72]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800537a:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a10      	ldr	r2, [pc, #64]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005386:	4b0e      	ldr	r3, [pc, #56]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a0d      	ldr	r2, [pc, #52]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800538c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005392:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800539c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800539e:	4b08      	ldr	r3, [pc, #32]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4a07      	ldr	r2, [pc, #28]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053aa:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fd f9ed 	bl	8002794 <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053bc:	e011      	b.n	80053e2 <HAL_RCC_OscConfig+0x78e>
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
 80053c4:	58024800 	.word	0x58024800
 80053c8:	fffffc0c 	.word	0xfffffc0c
 80053cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd f9e0 	bl	8002794 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e08a      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053e2:	4b47      	ldr	r3, [pc, #284]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x77c>
 80053ee:	e082      	b.n	80054f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f0:	4b43      	ldr	r3, [pc, #268]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a42      	ldr	r2, [pc, #264]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80053f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd f9ca 	bl	8002794 <HAL_GetTick>
 8005400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005404:	f7fd f9c6 	bl	8002794 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e070      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005416:	4b3a      	ldr	r3, [pc, #232]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x7b0>
 8005422:	e068      	b.n	80054f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005424:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800542a:	4b35      	ldr	r3, [pc, #212]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	2b01      	cmp	r3, #1
 8005436:	d031      	beq.n	800549c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d12a      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d122      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d11a      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005472:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d111      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d108      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	0e1b      	lsrs	r3, r3, #24
 800548e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e02b      	b.n	80054f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054a0:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d01f      	beq.n	80054f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054b6:	4b12      	ldr	r3, [pc, #72]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4a11      	ldr	r2, [pc, #68]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054c2:	f7fd f967 	bl	8002794 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054c8:	bf00      	nop
 80054ca:	f7fd f963 	bl	8002794 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d0f9      	beq.n	80054ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054da:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <HAL_RCC_OscConfig+0x8b0>)
 80054dc:	4013      	ands	r3, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054e2:	00d2      	lsls	r2, r2, #3
 80054e4:	4906      	ldr	r1, [pc, #24]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054ea:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <HAL_RCC_OscConfig+0x8ac>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3730      	adds	r7, #48	@ 0x30
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	58024400 	.word	0x58024400
 8005504:	ffff0007 	.word	0xffff0007

08005508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e19c      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b8a      	ldr	r3, [pc, #552]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d910      	bls.n	800554c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b87      	ldr	r3, [pc, #540]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 020f 	bic.w	r2, r3, #15
 8005532:	4985      	ldr	r1, [pc, #532]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b83      	ldr	r3, [pc, #524]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e184      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d010      	beq.n	800557a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	4b7b      	ldr	r3, [pc, #492]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005564:	429a      	cmp	r2, r3
 8005566:	d908      	bls.n	800557a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005568:	4b78      	ldr	r3, [pc, #480]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	4975      	ldr	r1, [pc, #468]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005576:	4313      	orrs	r3, r2
 8005578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d010      	beq.n	80055a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	4b70      	ldr	r3, [pc, #448]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005592:	429a      	cmp	r2, r3
 8005594:	d908      	bls.n	80055a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005596:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	496a      	ldr	r1, [pc, #424]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d010      	beq.n	80055d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	4b64      	ldr	r3, [pc, #400]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d908      	bls.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c4:	4b61      	ldr	r3, [pc, #388]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	495e      	ldr	r1, [pc, #376]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	4b59      	ldr	r3, [pc, #356]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d908      	bls.n	8005604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055f2:	4b56      	ldr	r3, [pc, #344]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4953      	ldr	r1, [pc, #332]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005600:	4313      	orrs	r3, r2
 8005602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b4d      	ldr	r3, [pc, #308]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	429a      	cmp	r2, r3
 800561e:	d908      	bls.n	8005632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b4a      	ldr	r3, [pc, #296]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f023 020f 	bic.w	r2, r3, #15
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4947      	ldr	r1, [pc, #284]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800562e:	4313      	orrs	r3, r2
 8005630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d055      	beq.n	80056ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800563e:	4b43      	ldr	r3, [pc, #268]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4940      	ldr	r1, [pc, #256]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800564c:	4313      	orrs	r3, r2
 800564e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d107      	bne.n	8005668 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005658:	4b3c      	ldr	r3, [pc, #240]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d121      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0f6      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d107      	bne.n	8005680 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005670:	4b36      	ldr	r3, [pc, #216]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d115      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0ea      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d107      	bne.n	8005698 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005688:	4b30      	ldr	r3, [pc, #192]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0de      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005698:	4b2c      	ldr	r3, [pc, #176]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0d6      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056a8:	4b28      	ldr	r3, [pc, #160]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f023 0207 	bic.w	r2, r3, #7
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4925      	ldr	r1, [pc, #148]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ba:	f7fd f86b 	bl	8002794 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c2:	f7fd f867 	bl	8002794 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0be      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d8:	4b1c      	ldr	r3, [pc, #112]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d1eb      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	4b14      	ldr	r3, [pc, #80]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	429a      	cmp	r2, r3
 8005704:	d208      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005706:	4b11      	ldr	r3, [pc, #68]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f023 020f 	bic.w	r2, r3, #15
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	490e      	ldr	r1, [pc, #56]	@ (800574c <HAL_RCC_ClockConfig+0x244>)
 8005714:	4313      	orrs	r3, r2
 8005716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d214      	bcs.n	8005750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 020f 	bic.w	r2, r3, #15
 800572e:	4906      	ldr	r1, [pc, #24]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e086      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
 8005748:	52002000 	.word	0x52002000
 800574c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	4b3f      	ldr	r3, [pc, #252]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005768:	429a      	cmp	r2, r3
 800576a:	d208      	bcs.n	800577e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800576c:	4b3c      	ldr	r3, [pc, #240]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	4939      	ldr	r1, [pc, #228]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 800577a:	4313      	orrs	r3, r2
 800577c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005796:	429a      	cmp	r2, r3
 8005798:	d208      	bcs.n	80057ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800579a:	4b31      	ldr	r3, [pc, #196]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	492e      	ldr	r1, [pc, #184]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	4b28      	ldr	r3, [pc, #160]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d208      	bcs.n	80057da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057c8:	4b25      	ldr	r3, [pc, #148]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	4922      	ldr	r1, [pc, #136]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d208      	bcs.n	8005808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4917      	ldr	r1, [pc, #92]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005804:	4313      	orrs	r3, r2
 8005806:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005808:	f000 f834 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	4912      	ldr	r1, [pc, #72]	@ (8005864 <HAL_RCC_ClockConfig+0x35c>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005826:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	4a0d      	ldr	r2, [pc, #52]	@ (8005864 <HAL_RCC_ClockConfig+0x35c>)
 8005830:	5cd3      	ldrb	r3, [r2, r3]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	4a0a      	ldr	r2, [pc, #40]	@ (8005868 <HAL_RCC_ClockConfig+0x360>)
 800583e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005840:	4a0a      	ldr	r2, [pc, #40]	@ (800586c <HAL_RCC_ClockConfig+0x364>)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <HAL_RCC_ClockConfig+0x368>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc ff58 	bl	8002700 <HAL_InitTick>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	0800b9a8 	.word	0x0800b9a8
 8005868:	24000004 	.word	0x24000004
 800586c:	24000000 	.word	0x24000000
 8005870:	24000008 	.word	0x24000008

08005874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	@ 0x24
 8005878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587a:	4bb3      	ldr	r3, [pc, #716]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005882:	2b18      	cmp	r3, #24
 8005884:	f200 8155 	bhi.w	8005b32 <HAL_RCC_GetSysClockFreq+0x2be>
 8005888:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058f5 	.word	0x080058f5
 8005894:	08005b33 	.word	0x08005b33
 8005898:	08005b33 	.word	0x08005b33
 800589c:	08005b33 	.word	0x08005b33
 80058a0:	08005b33 	.word	0x08005b33
 80058a4:	08005b33 	.word	0x08005b33
 80058a8:	08005b33 	.word	0x08005b33
 80058ac:	08005b33 	.word	0x08005b33
 80058b0:	0800591b 	.word	0x0800591b
 80058b4:	08005b33 	.word	0x08005b33
 80058b8:	08005b33 	.word	0x08005b33
 80058bc:	08005b33 	.word	0x08005b33
 80058c0:	08005b33 	.word	0x08005b33
 80058c4:	08005b33 	.word	0x08005b33
 80058c8:	08005b33 	.word	0x08005b33
 80058cc:	08005b33 	.word	0x08005b33
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005b33 	.word	0x08005b33
 80058d8:	08005b33 	.word	0x08005b33
 80058dc:	08005b33 	.word	0x08005b33
 80058e0:	08005b33 	.word	0x08005b33
 80058e4:	08005b33 	.word	0x08005b33
 80058e8:	08005b33 	.word	0x08005b33
 80058ec:	08005b33 	.word	0x08005b33
 80058f0:	08005927 	.word	0x08005927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f4:	4b94      	ldr	r3, [pc, #592]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005900:	4b91      	ldr	r3, [pc, #580]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	4a90      	ldr	r2, [pc, #576]	@ (8005b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005912:	e111      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005914:	4b8d      	ldr	r3, [pc, #564]	@ (8005b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005916:	61bb      	str	r3, [r7, #24]
      break;
 8005918:	e10e      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800591a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800591c:	61bb      	str	r3, [r7, #24]
      break;
 800591e:	e10b      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005920:	4b8c      	ldr	r3, [pc, #560]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005922:	61bb      	str	r3, [r7, #24]
      break;
 8005924:	e108      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005926:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005930:	4b85      	ldr	r3, [pc, #532]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800593a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800593c:	4b82      	ldr	r3, [pc, #520]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005946:	4b80      	ldr	r3, [pc, #512]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80e1 	beq.w	8005b2c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b02      	cmp	r3, #2
 800596e:	f000 8083 	beq.w	8005a78 <HAL_RCC_GetSysClockFreq+0x204>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f200 80a1 	bhi.w	8005abc <HAL_RCC_GetSysClockFreq+0x248>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x114>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d056      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005986:	e099      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b6f      	ldr	r3, [pc, #444]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02d      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005994:	4b6c      	ldr	r3, [pc, #432]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a6b      	ldr	r2, [pc, #428]	@ (8005b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b62      	ldr	r3, [pc, #392]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059ee:	e087      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b5c <HAL_RCC_GetSysClockFreq+0x2e8>
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b51      	ldr	r3, [pc, #324]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a32:	e065      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b40      	ldr	r3, [pc, #256]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a76:	e043      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aba:	e021      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b1e      	ldr	r3, [pc, #120]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b24:	ee17 3a90 	vmov	r3, s15
 8005b28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b2a:	e005      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
      break;
 8005b30:	e002      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b34:	61bb      	str	r3, [r7, #24]
      break;
 8005b36:	bf00      	nop
  }

  return sysclockfreq;
 8005b38:	69bb      	ldr	r3, [r7, #24]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3724      	adds	r7, #36	@ 0x24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	03d09000 	.word	0x03d09000
 8005b50:	003d0900 	.word	0x003d0900
 8005b54:	017d7840 	.word	0x017d7840
 8005b58:	46000000 	.word	0x46000000
 8005b5c:	4c742400 	.word	0x4c742400
 8005b60:	4a742400 	.word	0x4a742400
 8005b64:	4bbebc20 	.word	0x4bbebc20

08005b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b6e:	f7ff fe81 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	490f      	ldr	r1, [pc, #60]	@ (8005bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8005b80:	5ccb      	ldrb	r3, [r1, r3]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	4a09      	ldr	r2, [pc, #36]	@ (8005bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ba4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ba6:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bac:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	0800b9a8 	.word	0x0800b9a8
 8005bc0:	24000004 	.word	0x24000004
 8005bc4:	24000000 	.word	0x24000000

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bcc:	f7ff ffcc 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4904      	ldr	r1, [pc, #16]	@ (8005bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	0800b9a8 	.word	0x0800b9a8

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bf8:	f7ff ffb6 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	0800b9a8 	.word	0x0800b9a8

08005c20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c24:	b0ca      	sub	sp, #296	@ 0x128
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c44:	2500      	movs	r5, #0
 8005c46:	ea54 0305 	orrs.w	r3, r4, r5
 8005c4a:	d049      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c56:	d02f      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c5c:	d828      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c62:	d01a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c68:	d822      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c72:	d007      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c74:	e01c      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c76:	4bb8      	ldr	r3, [pc, #736]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	4ab7      	ldr	r2, [pc, #732]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c82:	e01a      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	3308      	adds	r3, #8
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fc8f 	bl	80075b0 <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c98:	e00f      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	3328      	adds	r3, #40	@ 0x28
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fd36 	bl	8007714 <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cae:	e004      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cc2:	4ba5      	ldr	r3, [pc, #660]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cd0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cec:	f04f 0900 	mov.w	r9, #0
 8005cf0:	ea58 0309 	orrs.w	r3, r8, r9
 8005cf4:	d047      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d82a      	bhi.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d00:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d1d 	.word	0x08005d1d
 8005d0c:	08005d2b 	.word	0x08005d2b
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d5f 	.word	0x08005d5f
 8005d18:	08005d5f 	.word	0x08005d5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4a8d      	ldr	r2, [pc, #564]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d28:	e01a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	3308      	adds	r3, #8
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 fc3c 	bl	80075b0 <RCCEx_PLL2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3e:	e00f      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d44:	3328      	adds	r3, #40	@ 0x28
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 fce3 	bl	8007714 <RCCEx_PLL3_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d54:	e004      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d68:	4b7b      	ldr	r3, [pc, #492]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6c:	f023 0107 	bic.w	r1, r3, #7
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d76:	4a78      	ldr	r2, [pc, #480]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d7c:	e003      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d92:	f04f 0b00 	mov.w	fp, #0
 8005d96:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d9a:	d04c      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da6:	d030      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dac:	d829      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005db0:	d02d      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005db4:	d825      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005db6:	2b80      	cmp	r3, #128	@ 0x80
 8005db8:	d018      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005dba:	2b80      	cmp	r3, #128	@ 0x80
 8005dbc:	d821      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005dc2:	2b40      	cmp	r3, #64	@ 0x40
 8005dc4:	d007      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005dc6:	e01c      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4b63      	ldr	r3, [pc, #396]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	4a62      	ldr	r2, [pc, #392]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dd4:	e01c      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	3308      	adds	r3, #8
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fbe6 	bl	80075b0 <RCCEx_PLL2_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	3328      	adds	r3, #40	@ 0x28
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fc8d 	bl	8007714 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e18:	4b4f      	ldr	r3, [pc, #316]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e26:	4a4c      	ldr	r2, [pc, #304]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e50:	460b      	mov	r3, r1
 8005e52:	4313      	orrs	r3, r2
 8005e54:	d053      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e62:	d035      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e68:	d82e      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e6e:	d031      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e74:	d828      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e7a:	d01a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e80:	d822      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e8a:	d007      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8e:	4b32      	ldr	r3, [pc, #200]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	4a31      	ldr	r2, [pc, #196]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e01c      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fb83 	bl	80075b0 <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e011      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fc2a 	bl	8007714 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e006      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ece:	e002      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ede:	4b1e      	ldr	r3, [pc, #120]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005eee:	4a1a      	ldr	r2, [pc, #104]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d056      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f2a:	d038      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f30:	d831      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f36:	d034      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f3c:	d82b      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f42:	d01d      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f48:	d825      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f54:	e01f      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4ba2      	ldr	r3, [pc, #648]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	4aa1      	ldr	r2, [pc, #644]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f68:	e01c      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	3308      	adds	r3, #8
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fb1c 	bl	80075b0 <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e011      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f84:	3328      	adds	r3, #40	@ 0x28
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fbc3 	bl	8007714 <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fac:	4b8e      	ldr	r3, [pc, #568]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fbc:	4a8a      	ldr	r2, [pc, #552]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fc2:	e003      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fe2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d03a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff2:	2b30      	cmp	r3, #48	@ 0x30
 8005ff4:	d01f      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ff6:	2b30      	cmp	r3, #48	@ 0x30
 8005ff8:	d819      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d815      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d019      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006006:	2b10      	cmp	r3, #16
 8006008:	d111      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600a:	4b77      	ldr	r3, [pc, #476]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	4a76      	ldr	r2, [pc, #472]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006016:	e011      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	3308      	adds	r3, #8
 800601e:	2102      	movs	r1, #2
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fac5 	bl	80075b0 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006034:	e002      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800603a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006044:	4b68      	ldr	r3, [pc, #416]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006048:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006052:	4a65      	ldr	r2, [pc, #404]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006054:	430b      	orrs	r3, r1
 8006056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800606e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006078:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d051      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006088:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800608c:	d035      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800608e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006092:	d82e      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006094:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006098:	d031      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800609a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800609e:	d828      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a4:	d01a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060aa:	d822      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b4:	d007      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060b6:	e01c      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b8:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a4a      	ldr	r2, [pc, #296]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060c4:	e01c      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	3308      	adds	r3, #8
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa6e 	bl	80075b0 <RCCEx_PLL2_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060da:	e011      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	3328      	adds	r3, #40	@ 0x28
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 fb15 	bl	8007714 <RCCEx_PLL3_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060f0:	e006      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006108:	4b37      	ldr	r3, [pc, #220]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006116:	4a34      	ldr	r2, [pc, #208]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6513      	str	r3, [r2, #80]	@ 0x50
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800613c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d056      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006150:	d033      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006152:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006156:	d82c      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006158:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800615c:	d02f      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800615e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006162:	d826      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006164:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006168:	d02b      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800616a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800616e:	d820      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006174:	d012      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800617a:	d81a      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006184:	d115      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	3308      	adds	r3, #8
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fa0e 	bl	80075b0 <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800619a:	e015      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	3328      	adds	r3, #40	@ 0x28
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fab5 	bl	8007714 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061b0:	e00a      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b8:	e006      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ba:	bf00      	nop
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10d      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061de:	4a02      	ldr	r2, [pc, #8]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800620a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d055      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006220:	d033      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006226:	d82c      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622c:	d02f      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006232:	d826      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006238:	d02b      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800623a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800623e:	d820      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006244:	d012      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800624a:	d81a      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d022      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006254:	d115      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625a:	3308      	adds	r3, #8
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f9a6 	bl	80075b0 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800626a:	e015      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	3328      	adds	r3, #40	@ 0x28
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fa4d 	bl	8007714 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006280:	e00a      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006288:	e006      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800628a:	bf00      	nop
 800628c:	e004      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062a0:	4ba3      	ldr	r3, [pc, #652]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b0:	4a9f      	ldr	r2, [pc, #636]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80062cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d037      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ea:	d00e      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f0:	d816      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80062f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062fa:	d111      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4b8c      	ldr	r3, [pc, #560]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a8b      	ldr	r2, [pc, #556]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006308:	e00f      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	3308      	adds	r3, #8
 8006310:	2101      	movs	r1, #1
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f94c 	bl	80075b0 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006332:	4b7f      	ldr	r3, [pc, #508]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006336:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006340:	4a7b      	ldr	r2, [pc, #492]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006342:	430b      	orrs	r3, r1
 8006344:	6513      	str	r3, [r2, #80]	@ 0x50
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006366:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	d039      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006376:	2b03      	cmp	r3, #3
 8006378:	d81c      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800637a:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063bd 	.word	0x080063bd
 8006384:	08006391 	.word	0x08006391
 8006388:	0800639f 	.word	0x0800639f
 800638c:	080063bd 	.word	0x080063bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b67      	ldr	r3, [pc, #412]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a66      	ldr	r2, [pc, #408]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800639c:	e00f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	3308      	adds	r3, #8
 80063a4:	2102      	movs	r1, #2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 f902 	bl	80075b0 <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063c6:	4b5a      	ldr	r3, [pc, #360]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ca:	f023 0103 	bic.w	r1, r3, #3
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d4:	4a56      	ldr	r2, [pc, #344]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	f000 809f 	beq.w	8006544 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006406:	4b4b      	ldr	r3, [pc, #300]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4a      	ldr	r2, [pc, #296]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006412:	f7fc f9bf 	bl	8002794 <HAL_GetTick>
 8006416:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800641a:	e00b      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641c:	f7fc f9ba 	bl	8002794 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	@ 0x64
 800642a:	d903      	bls.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006434:	4b3f      	ldr	r3, [pc, #252]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ed      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006444:	2b00      	cmp	r3, #0
 8006446:	d179      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006448:	4b39      	ldr	r3, [pc, #228]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800644a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006454:	4053      	eors	r3, r2
 8006456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d015      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645e:	4b34      	ldr	r3, [pc, #208]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006466:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800646a:	4b31      	ldr	r3, [pc, #196]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	4a30      	ldr	r2, [pc, #192]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006476:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a2d      	ldr	r2, [pc, #180]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006482:	4a2b      	ldr	r2, [pc, #172]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006488:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006496:	d118      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fc f97c 	bl	8002794 <HAL_GetTick>
 800649c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a0:	e00d      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fc f977 	bl	8002794 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064ac:	1ad2      	subs	r2, r2, r3
 80064ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d903      	bls.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80064bc:	e005      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064be:	4b1c      	ldr	r3, [pc, #112]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0eb      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d129      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e2:	d10e      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80064e4:	4b12      	ldr	r3, [pc, #72]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064f4:	091a      	lsrs	r2, r3, #4
 80064f6:	4b10      	ldr	r3, [pc, #64]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6113      	str	r3, [r2, #16]
 8006500:	e005      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006502:	4b0b      	ldr	r3, [pc, #44]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006508:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800650c:	6113      	str	r3, [r2, #16]
 800650e:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006510:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800651a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651e:	4a04      	ldr	r2, [pc, #16]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6713      	str	r3, [r2, #112]	@ 0x70
 8006524:	e00e      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800652e:	e009      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006530:	58024400 	.word	0x58024400
 8006534:	58024800 	.word	0x58024800
 8006538:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f002 0301 	and.w	r3, r2, #1
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800655a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800655e:	460b      	mov	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	f000 8089 	beq.w	8006678 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800656c:	2b28      	cmp	r3, #40	@ 0x28
 800656e:	d86b      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006570:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	08006651 	.word	0x08006651
 800657c:	08006649 	.word	0x08006649
 8006580:	08006649 	.word	0x08006649
 8006584:	08006649 	.word	0x08006649
 8006588:	08006649 	.word	0x08006649
 800658c:	08006649 	.word	0x08006649
 8006590:	08006649 	.word	0x08006649
 8006594:	08006649 	.word	0x08006649
 8006598:	0800661d 	.word	0x0800661d
 800659c:	08006649 	.word	0x08006649
 80065a0:	08006649 	.word	0x08006649
 80065a4:	08006649 	.word	0x08006649
 80065a8:	08006649 	.word	0x08006649
 80065ac:	08006649 	.word	0x08006649
 80065b0:	08006649 	.word	0x08006649
 80065b4:	08006649 	.word	0x08006649
 80065b8:	08006633 	.word	0x08006633
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006649 	.word	0x08006649
 80065c4:	08006649 	.word	0x08006649
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006649 	.word	0x08006649
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006651 	.word	0x08006651
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	08006649 	.word	0x08006649
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006651 	.word	0x08006651
 80065fc:	08006649 	.word	0x08006649
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	08006649 	.word	0x08006649
 8006610:	08006649 	.word	0x08006649
 8006614:	08006649 	.word	0x08006649
 8006618:	08006651 	.word	0x08006651
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	3308      	adds	r3, #8
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ffc3 	bl	80075b0 <RCCEx_PLL2_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006630:	e00f      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	3328      	adds	r3, #40	@ 0x28
 8006638:	2101      	movs	r1, #1
 800663a:	4618      	mov	r0, r3
 800663c:	f001 f86a 	bl	8007714 <RCCEx_PLL3_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006646:	e004      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800665a:	4bbf      	ldr	r3, [pc, #764]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800665c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006668:	4abb      	ldr	r2, [pc, #748]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800666a:	430b      	orrs	r3, r1
 800666c:	6553      	str	r3, [r2, #84]	@ 0x54
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f002 0302 	and.w	r3, r2, #2
 8006684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800668e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006692:	460b      	mov	r3, r1
 8006694:	4313      	orrs	r3, r2
 8006696:	d041      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d824      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066f5 	.word	0x080066f5
 80066ac:	080066c1 	.word	0x080066c1
 80066b0:	080066d7 	.word	0x080066d7
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	080066f5 	.word	0x080066f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	3308      	adds	r3, #8
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff71 	bl	80075b0 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066d4:	e00f      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	3328      	adds	r3, #40	@ 0x28
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 f818 	bl	8007714 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066fe:	4b96      	ldr	r3, [pc, #600]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006702:	f023 0107 	bic.w	r1, r3, #7
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800670c:	4a92      	ldr	r2, [pc, #584]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6553      	str	r3, [r2, #84]	@ 0x54
 8006712:	e003      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f002 0304 	and.w	r3, r2, #4
 8006728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006732:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d044      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006744:	2b05      	cmp	r3, #5
 8006746:	d825      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006748:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	0800679d 	.word	0x0800679d
 8006754:	08006769 	.word	0x08006769
 8006758:	0800677f 	.word	0x0800677f
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	3308      	adds	r3, #8
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ff1d 	bl	80075b0 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800677c:	e00f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3328      	adds	r3, #40	@ 0x28
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ffc4 	bl	8007714 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006792:	e004      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800679c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067aa:	f023 0107 	bic.w	r1, r3, #7
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b6:	4a68      	ldr	r2, [pc, #416]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80067bc:	e003      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f002 0320 	and.w	r3, r2, #32
 80067d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067e0:	460b      	mov	r3, r1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	d055      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067f2:	d033      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80067f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067f8:	d82c      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fe:	d02f      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006804:	d826      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800680a:	d02b      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800680c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006810:	d820      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006816:	d012      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681c:	d81a      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d022      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006826:	d115      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	3308      	adds	r3, #8
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 febd 	bl	80075b0 <RCCEx_PLL2_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800683c:	e015      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	3328      	adds	r3, #40	@ 0x28
 8006844:	2102      	movs	r1, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ff64 	bl	8007714 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006852:	e00a      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800685a:	e006      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006872:	4b39      	ldr	r3, [pc, #228]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006876:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	4a35      	ldr	r2, [pc, #212]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6553      	str	r3, [r2, #84]	@ 0x54
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800689e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4313      	orrs	r3, r2
 80068b0:	d058      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068be:	d033      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80068c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068c4:	d82c      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ca:	d02f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80068cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d0:	d826      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068d6:	d02b      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80068d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068dc:	d820      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e2:	d012      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e8:	d81a      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d022      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f2:	d115      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	3308      	adds	r3, #8
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fe57 	bl	80075b0 <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006908:	e015      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	3328      	adds	r3, #40	@ 0x28
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fefe 	bl	8007714 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800691e:	e00a      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006926:	e006      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006928:	bf00      	nop
 800692a:	e004      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800692c:	bf00      	nop
 800692e:	e002      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006930:	bf00      	nop
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10e      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800693e:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800694e:	4a02      	ldr	r2, [pc, #8]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6593      	str	r3, [r2, #88]	@ 0x58
 8006954:	e006      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800697a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d055      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800698c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006990:	d033      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006992:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006996:	d82c      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699c:	d02f      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a2:	d826      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069a8:	d02b      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069ae:	d820      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b4:	d012      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ba:	d81a      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d022      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c4:	d115      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ca:	3308      	adds	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fdee 	bl	80075b0 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069da:	e015      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	3328      	adds	r3, #40	@ 0x28
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fe95 	bl	8007714 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069f0:	e00a      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f8:	e006      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069fa:	bf00      	nop
 80069fc:	e004      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a10:	4ba1      	ldr	r3, [pc, #644]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a20:	4a9d      	ldr	r2, [pc, #628]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a22:	430b      	orrs	r3, r1
 8006a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f002 0308 	and.w	r3, r2, #8
 8006a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d01e      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	3328      	adds	r3, #40	@ 0x28
 8006a64:	2102      	movs	r1, #2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fe54 	bl	8007714 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a78:	4b87      	ldr	r3, [pc, #540]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a88:	4a83      	ldr	r2, [pc, #524]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f002 0310 	and.w	r3, r2, #16
 8006a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006aa4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d01e      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	3328      	adds	r3, #40	@ 0x28
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fe25 	bl	8007714 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ad6:	4b70      	ldr	r3, [pc, #448]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ada:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ae6:	4a6c      	ldr	r2, [pc, #432]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b06:	460b      	mov	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	d03e      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b18:	d022      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1e:	d81b      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b28:	d00b      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b2a:	e015      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	3308      	adds	r3, #8
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fd3b 	bl	80075b0 <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b40:	e00f      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	3328      	adds	r3, #40	@ 0x28
 8006b48:	2102      	movs	r1, #2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fde2 	bl	8007714 <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b56:	e004      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b5e:	e000      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b7a:	4a47      	ldr	r2, [pc, #284]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b80:	e003      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b98:	2300      	movs	r3, #0
 8006b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	d03b      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb2:	d01f      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb8:	d818      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bc4:	d007      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006bc6:	e011      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4b33      	ldr	r3, [pc, #204]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	4a32      	ldr	r2, [pc, #200]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bd4:	e00f      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	3328      	adds	r3, #40	@ 0x28
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fd98 	bl	8007714 <RCCEx_PLL3_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bfe:	4b26      	ldr	r3, [pc, #152]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0e:	4a22      	ldr	r2, [pc, #136]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d034      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c48:	d007      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c4a:	e011      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4c:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	4a11      	ldr	r2, [pc, #68]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c58:	e00e      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	3308      	adds	r3, #8
 8006c60:	2102      	movs	r1, #2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fca4 	bl	80075b0 <RCCEx_PLL2_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c6e:	e003      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c8e:	4a02      	ldr	r2, [pc, #8]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c90:	430b      	orrs	r3, r1
 8006c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c94:	e006      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d00c      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	3328      	adds	r3, #40	@ 0x28
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fd23 	bl	8007714 <RCCEx_PLL3_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ce8:	2300      	movs	r3, #0
 8006cea:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	d038      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d02:	d018      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d08:	d811      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d0e:	d014      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d14:	d80b      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d011      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d20:	4bc3      	ldr	r3, [pc, #780]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	4ac2      	ldr	r2, [pc, #776]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d2c:	e008      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d34:	e004      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d36:	bf00      	nop
 8006d38:	e002      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d48:	4bb9      	ldr	r3, [pc, #740]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d58:	4ab5      	ldr	r2, [pc, #724]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d5e:	e003      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d76:	2300      	movs	r3, #0
 8006d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d009      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d84:	4baa      	ldr	r3, [pc, #680]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d92:	4aa7      	ldr	r2, [pc, #668]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da6:	2300      	movs	r3, #0
 8006da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006daa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006db4:	4b9e      	ldr	r3, [pc, #632]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006dc4:	4a9a      	ldr	r2, [pc, #616]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	2300      	movs	r3, #0
 8006dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ddc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006de6:	4b92      	ldr	r3, [pc, #584]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006df4:	4a8e      	ldr	r2, [pc, #568]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e08:	2300      	movs	r3, #0
 8006e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e10:	460b      	mov	r3, r1
 8006e12:	4313      	orrs	r3, r2
 8006e14:	d00e      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e16:	4b86      	ldr	r3, [pc, #536]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	4a85      	ldr	r2, [pc, #532]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e20:	6113      	str	r3, [r2, #16]
 8006e22:	4b83      	ldr	r3, [pc, #524]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e24:	6919      	ldr	r1, [r3, #16]
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e2e:	4a80      	ldr	r2, [pc, #512]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e50:	4b77      	ldr	r3, [pc, #476]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5e:	4a74      	ldr	r2, [pc, #464]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e60:	430b      	orrs	r3, r1
 8006e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e72:	2300      	movs	r3, #0
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e80:	4b6b      	ldr	r3, [pc, #428]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e90:	4a67      	ldr	r2, [pc, #412]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d011      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fb78 	bl	80075b0 <RCCEx_PLL2_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6239      	str	r1, [r7, #32]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006eec:	460b      	mov	r3, r1
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	d011      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fb58 	bl	80075b0 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	2100      	movs	r1, #0
 8006f20:	61b9      	str	r1, [r7, #24]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d011      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	3308      	adds	r3, #8
 8006f38:	2102      	movs	r1, #2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb38 	bl	80075b0 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6139      	str	r1, [r7, #16]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	d011      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	3328      	adds	r3, #40	@ 0x28
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fbca 	bl	8007714 <RCCEx_PLL3_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d011      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	3328      	adds	r3, #40	@ 0x28
 8006fb8:	2101      	movs	r1, #1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fbaa 	bl	8007714 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d011      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	3328      	adds	r3, #40	@ 0x28
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fb8a 	bl	8007714 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007016:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800702a:	46bd      	mov	sp, r7
 800702c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007030:	58024400 	.word	0x58024400

08007034 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007038:	f7fe fd96 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 800703c:	4602      	mov	r2, r0
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	091b      	lsrs	r3, r3, #4
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	4904      	ldr	r1, [pc, #16]	@ (800705c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800704a:	5ccb      	ldrb	r3, [r1, r3]
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	58024400 	.word	0x58024400
 800705c:	0800b9a8 	.word	0x0800b9a8

08007060 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	@ 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007068:	4ba1      	ldr	r3, [pc, #644]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007072:	4b9f      	ldr	r3, [pc, #636]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	0b1b      	lsrs	r3, r3, #12
 8007078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800707c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800707e:	4b9c      	ldr	r3, [pc, #624]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800708a:	4b99      	ldr	r3, [pc, #612]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8111 	beq.w	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f000 8083 	beq.w	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	f200 80a1 	bhi.w	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d056      	beq.n	8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070ca:	e099      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070cc:	4b88      	ldr	r3, [pc, #544]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02d      	beq.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d8:	4b85      	ldr	r3, [pc, #532]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a84      	ldr	r2, [pc, #528]	@ (80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b7b      	ldr	r3, [pc, #492]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a03 	vldr	s12, [r7, #12]
 8007116:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007132:	e087      	b.n	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b6a      	ldr	r3, [pc, #424]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a03 	vldr	s12, [r7, #12]
 800715a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007176:	e065      	b.n	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b59      	ldr	r3, [pc, #356]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a03 	vldr	s12, [r7, #12]
 800719e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ba:	e043      	b.n	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b48      	ldr	r3, [pc, #288]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fe:	e021      	b.n	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b37      	ldr	r3, [pc, #220]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007242:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007244:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	0a5b      	lsrs	r3, r3, #9
 800724a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800725a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800725e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726a:	ee17 2a90 	vmov	r2, s15
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007272:	4b1f      	ldr	r3, [pc, #124]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072a0:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072ce:	e008      	b.n	80072e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
}
 80072e2:	bf00      	nop
 80072e4:	3724      	adds	r7, #36	@ 0x24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
 80072f4:	03d09000 	.word	0x03d09000
 80072f8:	46000000 	.word	0x46000000
 80072fc:	4c742400 	.word	0x4c742400
 8007300:	4a742400 	.word	0x4a742400
 8007304:	4bbebc20 	.word	0x4bbebc20

08007308 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	@ 0x24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007310:	4ba1      	ldr	r3, [pc, #644]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800731a:	4b9f      	ldr	r3, [pc, #636]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	0d1b      	lsrs	r3, r3, #20
 8007320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007324:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007326:	4b9c      	ldr	r3, [pc, #624]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007332:	4b99      	ldr	r3, [pc, #612]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007336:	08db      	lsrs	r3, r3, #3
 8007338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8111 	beq.w	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b02      	cmp	r3, #2
 800735a:	f000 8083 	beq.w	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b02      	cmp	r3, #2
 8007362:	f200 80a1 	bhi.w	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d056      	beq.n	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007372:	e099      	b.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007374:	4b88      	ldr	r3, [pc, #544]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d02d      	beq.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007380:	4b85      	ldr	r3, [pc, #532]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	4a84      	ldr	r2, [pc, #528]	@ (800759c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073da:	e087      	b.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007402:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741e:	e065      	b.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007462:	e043      	b.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b48      	ldr	r3, [pc, #288]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a6:	e021      	b.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b37      	ldr	r3, [pc, #220]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80074ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	0a5b      	lsrs	r3, r3, #9
 80074f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007506:	edd7 6a07 	vldr	s13, [r7, #28]
 800750a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800750e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007512:	ee17 2a90 	vmov	r2, s15
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800751a:	4b1f      	ldr	r3, [pc, #124]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	0c1b      	lsrs	r3, r3, #16
 8007520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007534:	edd7 6a07 	vldr	s13, [r7, #28]
 8007538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800753c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007540:	ee17 2a90 	vmov	r2, s15
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007548:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800755e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007562:	edd7 6a07 	vldr	s13, [r7, #28]
 8007566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756e:	ee17 2a90 	vmov	r2, s15
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007576:	e008      	b.n	800758a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
}
 800758a:	bf00      	nop
 800758c:	3724      	adds	r7, #36	@ 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
 800759c:	03d09000 	.word	0x03d09000
 80075a0:	46000000 	.word	0x46000000
 80075a4:	4c742400 	.word	0x4c742400
 80075a8:	4a742400 	.word	0x4a742400
 80075ac:	4bbebc20 	.word	0x4bbebc20

080075b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075be:	4b53      	ldr	r3, [pc, #332]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d101      	bne.n	80075ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e099      	b.n	8007702 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075ce:	4b4f      	ldr	r3, [pc, #316]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a4e      	ldr	r2, [pc, #312]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80075d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075da:	f7fb f8db 	bl	8002794 <HAL_GetTick>
 80075de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075e0:	e008      	b.n	80075f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075e2:	f7fb f8d7 	bl	8002794 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e086      	b.n	8007702 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f4:	4b45      	ldr	r3, [pc, #276]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007600:	4b42      	ldr	r3, [pc, #264]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	031b      	lsls	r3, r3, #12
 800760e:	493f      	ldr	r1, [pc, #252]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007610:	4313      	orrs	r3, r2
 8007612:	628b      	str	r3, [r1, #40]	@ 0x28
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	3b01      	subs	r3, #1
 800761a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	3b01      	subs	r3, #1
 8007624:	025b      	lsls	r3, r3, #9
 8007626:	b29b      	uxth	r3, r3
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	3b01      	subs	r3, #1
 8007630:	041b      	lsls	r3, r3, #16
 8007632:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	3b01      	subs	r3, #1
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007644:	4931      	ldr	r1, [pc, #196]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800764a:	4b30      	ldr	r3, [pc, #192]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	492d      	ldr	r1, [pc, #180]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007658:	4313      	orrs	r3, r2
 800765a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800765c:	4b2b      	ldr	r3, [pc, #172]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	f023 0220 	bic.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	4928      	ldr	r1, [pc, #160]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 800766a:	4313      	orrs	r3, r2
 800766c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800766e:	4b27      	ldr	r3, [pc, #156]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007672:	4a26      	ldr	r2, [pc, #152]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007674:	f023 0310 	bic.w	r3, r3, #16
 8007678:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800767a:	4b24      	ldr	r3, [pc, #144]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 800767c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800767e:	4b24      	ldr	r3, [pc, #144]	@ (8007710 <RCCEx_PLL2_Config+0x160>)
 8007680:	4013      	ands	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	69d2      	ldr	r2, [r2, #28]
 8007686:	00d2      	lsls	r2, r2, #3
 8007688:	4920      	ldr	r1, [pc, #128]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800768e:	4b1f      	ldr	r3, [pc, #124]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	4a1e      	ldr	r2, [pc, #120]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 8007694:	f043 0310 	orr.w	r3, r3, #16
 8007698:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076a0:	4b1a      	ldr	r3, [pc, #104]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	4a19      	ldr	r2, [pc, #100]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076ac:	e00f      	b.n	80076ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d106      	bne.n	80076c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076b4:	4b15      	ldr	r3, [pc, #84]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	4a14      	ldr	r2, [pc, #80]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076c0:	e005      	b.n	80076ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076c2:	4b12      	ldr	r3, [pc, #72]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	4a11      	ldr	r2, [pc, #68]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076ce:	4b0f      	ldr	r3, [pc, #60]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a0e      	ldr	r2, [pc, #56]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076da:	f7fb f85b 	bl	8002794 <HAL_GetTick>
 80076de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076e0:	e008      	b.n	80076f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076e2:	f7fb f857 	bl	8002794 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e006      	b.n	8007702 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <RCCEx_PLL2_Config+0x15c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
 8007710:	ffff0007 	.word	0xffff0007

08007714 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007722:	4b53      	ldr	r3, [pc, #332]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b03      	cmp	r3, #3
 800772c:	d101      	bne.n	8007732 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e099      	b.n	8007866 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007732:	4b4f      	ldr	r3, [pc, #316]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4e      	ldr	r2, [pc, #312]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800773c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773e:	f7fb f829 	bl	8002794 <HAL_GetTick>
 8007742:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007744:	e008      	b.n	8007758 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007746:	f7fb f825 	bl	8002794 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e086      	b.n	8007866 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007758:	4b45      	ldr	r3, [pc, #276]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f0      	bne.n	8007746 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007764:	4b42      	ldr	r3, [pc, #264]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	051b      	lsls	r3, r3, #20
 8007772:	493f      	ldr	r1, [pc, #252]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	628b      	str	r3, [r1, #40]	@ 0x28
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	3b01      	subs	r3, #1
 800777e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	025b      	lsls	r3, r3, #9
 800778a:	b29b      	uxth	r3, r3
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	3b01      	subs	r3, #1
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	061b      	lsls	r3, r3, #24
 80077a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077a8:	4931      	ldr	r1, [pc, #196]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077ae:	4b30      	ldr	r3, [pc, #192]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	492d      	ldr	r1, [pc, #180]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	4928      	ldr	r1, [pc, #160]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077d2:	4b27      	ldr	r3, [pc, #156]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d6:	4a26      	ldr	r2, [pc, #152]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077de:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077e2:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <RCCEx_PLL3_Config+0x160>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	69d2      	ldr	r2, [r2, #28]
 80077ea:	00d2      	lsls	r2, r2, #3
 80077ec:	4920      	ldr	r1, [pc, #128]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 80077f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	4a19      	ldr	r2, [pc, #100]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800780a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800780e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007810:	e00f      	b.n	8007832 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d106      	bne.n	8007826 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007818:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	4a14      	ldr	r2, [pc, #80]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800781e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007824:	e005      	b.n	8007832 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007826:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a11      	ldr	r2, [pc, #68]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800782c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007830:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007832:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a0e      	ldr	r2, [pc, #56]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 8007838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800783c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783e:	f7fa ffa9 	bl	8002794 <HAL_GetTick>
 8007842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007844:	e008      	b.n	8007858 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007846:	f7fa ffa5 	bl	8002794 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e006      	b.n	8007866 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <RCCEx_PLL3_Config+0x15c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400
 8007874:	ffff0007 	.word	0xffff0007

08007878 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e10f      	b.n	8007aaa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a87      	ldr	r2, [pc, #540]	@ (8007ab4 <HAL_SPI_Init+0x23c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <HAL_SPI_Init+0x42>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a86      	ldr	r2, [pc, #536]	@ (8007ab8 <HAL_SPI_Init+0x240>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00a      	beq.n	80078ba <HAL_SPI_Init+0x42>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a84      	ldr	r2, [pc, #528]	@ (8007abc <HAL_SPI_Init+0x244>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d005      	beq.n	80078ba <HAL_SPI_Init+0x42>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d901      	bls.n	80078ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0f7      	b.n	8007aaa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fe2e 	bl	800851c <SPI_GetPacketSize>
 80078c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ab4 <HAL_SPI_Init+0x23c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00c      	beq.n	80078e6 <HAL_SPI_Init+0x6e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a79      	ldr	r2, [pc, #484]	@ (8007ab8 <HAL_SPI_Init+0x240>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_Init+0x6e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a78      	ldr	r2, [pc, #480]	@ (8007abc <HAL_SPI_Init+0x244>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_Init+0x6e>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d811      	bhi.n	800790a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078ea:	4a72      	ldr	r2, [pc, #456]	@ (8007ab4 <HAL_SPI_Init+0x23c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a70      	ldr	r2, [pc, #448]	@ (8007ab8 <HAL_SPI_Init+0x240>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_SPI_Init+0x8c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a6f      	ldr	r2, [pc, #444]	@ (8007abc <HAL_SPI_Init+0x244>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d104      	bne.n	800790e <HAL_SPI_Init+0x96>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b10      	cmp	r3, #16
 8007908:	d901      	bls.n	800790e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0cd      	b.n	8007aaa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fa fa00 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800794a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007954:	d119      	bne.n	800798a <HAL_SPI_Init+0x112>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800795e:	d103      	bne.n	8007968 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10c      	bne.n	800798a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007978:	d107      	bne.n	800798a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007988:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <HAL_SPI_Init+0x13e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b06      	cmp	r3, #6
 800799c:	d90b      	bls.n	80079b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e007      	b.n	80079c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ce:	431a      	orrs	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	ea42 0103 	orr.w	r1, r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a26:	ea42 0103 	orr.w	r1, r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d113      	bne.n	8007a66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40013000 	.word	0x40013000
 8007ab8:	40003800 	.word	0x40003800
 8007abc:	40003c00 	.word	0x40003c00

08007ac0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3320      	adds	r3, #32
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ad8:	f7fa fe5c 	bl	8002794 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d001      	beq.n	8007aee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
 8007aec:	e1d1      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_SPI_Transmit+0x3a>
 8007af4:	88fb      	ldrh	r3, [r7, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e1c9      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_SPI_Transmit+0x4c>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e1c2      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2203      	movs	r2, #3
 8007b18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	88fa      	ldrh	r2, [r7, #6]
 8007b36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007b64:	d108      	bne.n	8007b78 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e009      	b.n	8007b8c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007b8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4b96      	ldr	r3, [pc, #600]	@ (8007dec <HAL_SPI_Transmit+0x32c>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	88f9      	ldrh	r1, [r7, #6]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bb8:	d107      	bne.n	8007bca <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d947      	bls.n	8007c62 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007bd2:	e03f      	b.n	8007c54 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d114      	bne.n	8007c0c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c0a:	e023      	b.n	8007c54 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c0c:	f7fa fdc2 	bl	8002794 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d803      	bhi.n	8007c24 <HAL_SPI_Transmit+0x164>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d102      	bne.n	8007c2a <HAL_SPI_Transmit+0x16a>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d114      	bne.n	8007c54 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fba8 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e11e      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1b9      	bne.n	8007bd4 <HAL_SPI_Transmit+0x114>
 8007c60:	e0f1      	b.n	8007e46 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b07      	cmp	r3, #7
 8007c68:	f240 80e6 	bls.w	8007e38 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c6c:	e05d      	b.n	8007d2a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d132      	bne.n	8007ce2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d918      	bls.n	8007cba <HAL_SPI_Transmit+0x1fa>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d014      	beq.n	8007cba <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b02      	subs	r3, #2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007cb8:	e037      	b.n	8007d2a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbe:	881a      	ldrh	r2, [r3, #0]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc8:	1c9a      	adds	r2, r3, #2
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007ce0:	e023      	b.n	8007d2a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce2:	f7fa fd57 	bl	8002794 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d803      	bhi.n	8007cfa <HAL_SPI_Transmit+0x23a>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d102      	bne.n	8007d00 <HAL_SPI_Transmit+0x240>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d114      	bne.n	8007d2a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fb3d 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e0b3      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d19b      	bne.n	8007c6e <HAL_SPI_Transmit+0x1ae>
 8007d36:	e086      	b.n	8007e46 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d154      	bne.n	8007df0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d918      	bls.n	8007d84 <HAL_SPI_Transmit+0x2c4>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	2b40      	cmp	r3, #64	@ 0x40
 8007d58:	d914      	bls.n	8007d84 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d6a:	1d1a      	adds	r2, r3, #4
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d82:	e059      	b.n	8007e38 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d917      	bls.n	8007dc0 <HAL_SPI_Transmit+0x300>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d013      	beq.n	8007dc0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b02      	subs	r3, #2
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007dbe:	e03b      	b.n	8007e38 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3320      	adds	r3, #32
 8007dca:	7812      	ldrb	r2, [r2, #0]
 8007dcc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007dea:	e025      	b.n	8007e38 <HAL_SPI_Transmit+0x378>
 8007dec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df0:	f7fa fcd0 	bl	8002794 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d803      	bhi.n	8007e08 <HAL_SPI_Transmit+0x348>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d102      	bne.n	8007e0e <HAL_SPI_Transmit+0x34e>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d114      	bne.n	8007e38 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fab6 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e02c      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f47f af79 	bne.w	8007d38 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2108      	movs	r1, #8
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fb35 	bl	80084c0 <SPI_WaitOnFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fa87 	bl	8008380 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop

08007e9c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3330      	adds	r3, #48	@ 0x30
 8007ebe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec0:	f7fa fc68 	bl	8002794 <HAL_GetTick>
 8007ec4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d001      	beq.n	8007ed6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e250      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_SPI_Receive+0x46>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e248      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_SPI_Receive+0x58>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e241      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2204      	movs	r2, #4
 8007f00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007f4c:	d108      	bne.n	8007f60 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e009      	b.n	8007f74 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007f72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	4b95      	ldr	r3, [pc, #596]	@ (80081d0 <HAL_SPI_Receive+0x334>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	88f9      	ldrh	r1, [r7, #6]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fa0:	d107      	bne.n	8007fb2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b0f      	cmp	r3, #15
 8007fb8:	d96c      	bls.n	8008094 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007fba:	e064      	b.n	8008086 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d114      	bne.n	8007ffc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007fdc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe2:	1d1a      	adds	r2, r3, #4
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ffa:	e044      	b.n	8008086 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008002:	b29b      	uxth	r3, r3
 8008004:	8bfa      	ldrh	r2, [r7, #30]
 8008006:	429a      	cmp	r2, r3
 8008008:	d919      	bls.n	800803e <HAL_SPI_Receive+0x1a2>
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d014      	beq.n	800803e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800801c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800801e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800803c:	e023      	b.n	8008086 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800803e:	f7fa fba9 	bl	8002794 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d803      	bhi.n	8008056 <HAL_SPI_Receive+0x1ba>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d102      	bne.n	800805c <HAL_SPI_Receive+0x1c0>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d114      	bne.n	8008086 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f98f 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008068:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e178      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d194      	bne.n	8007fbc <HAL_SPI_Receive+0x120>
 8008092:	e15e      	b.n	8008352 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	2b07      	cmp	r3, #7
 800809a:	f240 8153 	bls.w	8008344 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800809e:	e08f      	b.n	80081c0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d114      	bne.n	80080e0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	8812      	ldrh	r2, [r2, #0]
 80080be:	b292      	uxth	r2, r2
 80080c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080de:	e06f      	b.n	80081c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8bfa      	ldrh	r2, [r7, #30]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d924      	bls.n	8008138 <HAL_SPI_Receive+0x29c>
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01f      	beq.n	8008138 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	8812      	ldrh	r2, [r2, #0]
 8008100:	b292      	uxth	r2, r2
 8008102:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	8812      	ldrh	r2, [r2, #0]
 8008116:	b292      	uxth	r2, r2
 8008118:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800811e:	1c9a      	adds	r2, r3, #2
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b02      	subs	r3, #2
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008136:	e043      	b.n	80081c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d119      	bne.n	8008178 <HAL_SPI_Receive+0x2dc>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d014      	beq.n	8008178 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	8812      	ldrh	r2, [r2, #0]
 8008156:	b292      	uxth	r2, r2
 8008158:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008176:	e023      	b.n	80081c0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008178:	f7fa fb0c 	bl	8002794 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d803      	bhi.n	8008190 <HAL_SPI_Receive+0x2f4>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d102      	bne.n	8008196 <HAL_SPI_Receive+0x2fa>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d114      	bne.n	80081c0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f8f2 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e0db      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f47f af69 	bne.w	80080a0 <HAL_SPI_Receive+0x204>
 80081ce:	e0c0      	b.n	8008352 <HAL_SPI_Receive+0x4b6>
 80081d0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d117      	bne.n	800821a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008218:	e094      	b.n	8008344 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008220:	b29b      	uxth	r3, r3
 8008222:	8bfa      	ldrh	r2, [r7, #30]
 8008224:	429a      	cmp	r2, r3
 8008226:	d946      	bls.n	80082b6 <HAL_SPI_Receive+0x41a>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d041      	beq.n	80082b6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008292:	7812      	ldrb	r2, [r2, #0]
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b04      	subs	r3, #4
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082b4:	e046      	b.n	8008344 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d81c      	bhi.n	80082fc <HAL_SPI_Receive+0x460>
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d017      	beq.n	80082fc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d8:	7812      	ldrb	r2, [r2, #0]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082fa:	e023      	b.n	8008344 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082fc:	f7fa fa4a 	bl	8002794 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d803      	bhi.n	8008314 <HAL_SPI_Receive+0x478>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d102      	bne.n	800831a <HAL_SPI_Receive+0x47e>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d114      	bne.n	8008344 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f830 	bl	8008380 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008326:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e019      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	f47f af41 	bne.w	80081d4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f814 	bl	8008380 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008376:	2300      	movs	r3, #0
  }
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0208 	orr.w	r2, r2, #8
 800839e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0210 	orr.w	r2, r2, #16
 80083ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6919      	ldr	r1, [r3, #16]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b3c      	ldr	r3, [pc, #240]	@ (80084bc <SPI_CloseTransfer+0x13c>)
 80083cc:	400b      	ands	r3, r1
 80083ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80083de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d014      	beq.n	8008416 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0220 	orr.w	r2, r2, #32
 8008414:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d014      	beq.n	800844c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008432:	f043 0204 	orr.w	r2, r3, #4
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800844a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800845c:	f043 0201 	orr.w	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699a      	ldr	r2, [r3, #24]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008474:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008486:	f043 0208 	orr.w	r2, r3, #8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699a      	ldr	r2, [r3, #24]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800849e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	fffffc90 	.word	0xfffffc90

080084c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084d0:	e010      	b.n	80084f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084d2:	f7fa f95f 	bl	8002794 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d803      	bhi.n	80084ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e8:	d102      	bne.n	80084f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e00f      	b.n	8008514 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695a      	ldr	r2, [r3, #20]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4013      	ands	r3, r2
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	429a      	cmp	r2, r3
 8008502:	bf0c      	ite	eq
 8008504:	2301      	moveq	r3, #1
 8008506:	2300      	movne	r3, #0
 8008508:	b2db      	uxtb	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	429a      	cmp	r2, r3
 8008510:	d0df      	beq.n	80084d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3307      	adds	r3, #7
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e042      	b.n	80085ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 fc3e 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2224      	movs	r2, #36	@ 0x24
 8008580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 fb29 	bl	8009bf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fdbe 	bl	8009124 <UART_SetConfig>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e01b      	b.n	80085ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0201 	orr.w	r2, r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fba8 	bl	8009d38 <UART_CheckIdleState>
 80085e8:	4603      	mov	r3, r0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b08a      	sub	sp, #40	@ 0x28
 80085f6:	af02      	add	r7, sp, #8
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008608:	2b20      	cmp	r3, #32
 800860a:	d17b      	bne.n	8008704 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_UART_Transmit+0x26>
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e074      	b.n	8008706 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2221      	movs	r2, #33	@ 0x21
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800862c:	f7fa f8b2 	bl	8002794 <HAL_GetTick>
 8008630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	88fa      	ldrh	r2, [r7, #6]
 800863e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	d108      	bne.n	800865e <HAL_UART_Transmit+0x6c>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e003      	b.n	8008666 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008666:	e030      	b.n	80086ca <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2200      	movs	r2, #0
 8008670:	2180      	movs	r1, #128	@ 0x80
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f001 fc0a 	bl	8009e8c <UART_WaitOnFlagUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e03d      	b.n	8008706 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10b      	bne.n	80086a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800869e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	3302      	adds	r3, #2
 80086a4:	61bb      	str	r3, [r7, #24]
 80086a6:	e007      	b.n	80086b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3301      	adds	r3, #1
 80086b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1c8      	bne.n	8008668 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2200      	movs	r2, #0
 80086de:	2140      	movs	r1, #64	@ 0x40
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f001 fbd3 	bl	8009e8c <UART_WaitOnFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	e000      	b.n	8008706 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b08a      	sub	sp, #40	@ 0x28
 8008712:	af02      	add	r7, sp, #8
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	4613      	mov	r3, r2
 800871c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008724:	2b20      	cmp	r3, #32
 8008726:	f040 80b5 	bne.w	8008894 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HAL_UART_Receive+0x28>
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0ad      	b.n	8008896 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2222      	movs	r2, #34	@ 0x22
 8008746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008750:	f7fa f820 	bl	8002794 <HAL_GetTick>
 8008754:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876e:	d10e      	bne.n	800878e <HAL_UART_Receive+0x80>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <HAL_UART_Receive+0x76>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800877e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008782:	e02d      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	22ff      	movs	r2, #255	@ 0xff
 8008788:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800878c:	e028      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <HAL_UART_Receive+0xa4>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <HAL_UART_Receive+0x9a>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	22ff      	movs	r2, #255	@ 0xff
 80087a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087a6:	e01b      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	227f      	movs	r2, #127	@ 0x7f
 80087ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087b0:	e016      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ba:	d10d      	bne.n	80087d8 <HAL_UART_Receive+0xca>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <HAL_UART_Receive+0xc0>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	227f      	movs	r2, #127	@ 0x7f
 80087c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087cc:	e008      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	223f      	movs	r2, #63	@ 0x3f
 80087d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087d6:	e003      	b.n	80087e0 <HAL_UART_Receive+0xd2>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f0:	d108      	bne.n	8008804 <HAL_UART_Receive+0xf6>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	e003      	b.n	800880c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008808:	2300      	movs	r3, #0
 800880a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800880c:	e036      	b.n	800887c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	2120      	movs	r1, #32
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f001 fb37 	bl	8009e8c <UART_WaitOnFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e032      	b.n	8008896 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	b29a      	uxth	r2, r3
 800883e:	8a7b      	ldrh	r3, [r7, #18]
 8008840:	4013      	ands	r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	3302      	adds	r3, #2
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	e00c      	b.n	800886a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	b2da      	uxtb	r2, r3
 8008858:	8a7b      	ldrh	r3, [r7, #18]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4013      	ands	r3, r2
 800885e:	b2da      	uxtb	r2, r3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	3301      	adds	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1c2      	bne.n	800880e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	e000      	b.n	8008896 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008894:	2302      	movs	r3, #2
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	@ 0x28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d137      	bne.n	8008928 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <HAL_UART_Receive_IT+0x24>
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e030      	b.n	800892a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a18      	ldr	r2, [pc, #96]	@ (8008934 <HAL_UART_Receive_IT+0x94>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d01f      	beq.n	8008918 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d018      	beq.n	8008918 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	613b      	str	r3, [r7, #16]
   return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	623b      	str	r3, [r7, #32]
 8008906:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	61bb      	str	r3, [r7, #24]
   return(result);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	461a      	mov	r2, r3
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f001 fb22 	bl	8009f68 <UART_Start_Receive_IT>
 8008924:	4603      	mov	r3, r0
 8008926:	e000      	b.n	800892a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3728      	adds	r7, #40	@ 0x28
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	58000c00 	.word	0x58000c00

08008938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b0ba      	sub	sp, #232	@ 0xe8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800895e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008962:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008966:	4013      	ands	r3, r2
 8008968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800896c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11b      	bne.n	80089ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d015      	beq.n	80089ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d105      	bne.n	8008998 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800898c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8393 	beq.w	80090c8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
      }
      return;
 80089aa:	e38d      	b.n	80090c8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8123 	beq.w	8008bfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089ba:	4b8d      	ldr	r3, [pc, #564]	@ (8008bf0 <HAL_UART_IRQHandler+0x2b8>)
 80089bc:	4013      	ands	r3, r2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089c6:	4b8b      	ldr	r3, [pc, #556]	@ (8008bf4 <HAL_UART_IRQHandler+0x2bc>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8116 	beq.w	8008bfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d011      	beq.n	8008a00 <HAL_UART_IRQHandler+0xc8>
 80089dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2201      	movs	r2, #1
 80089ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f6:	f043 0201 	orr.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d011      	beq.n	8008a30 <HAL_UART_IRQHandler+0xf8>
 8008a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a26:	f043 0204 	orr.w	r2, r3, #4
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d011      	beq.n	8008a60 <HAL_UART_IRQHandler+0x128>
 8008a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a56:	f043 0202 	orr.w	r2, r3, #2
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d017      	beq.n	8008a9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	f003 0320 	and.w	r3, r3, #32
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d105      	bne.n	8008a84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf0 <HAL_UART_IRQHandler+0x2b8>)
 8008a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2208      	movs	r2, #8
 8008a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a92:	f043 0208 	orr.w	r2, r3, #8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d012      	beq.n	8008ace <HAL_UART_IRQHandler+0x196>
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00c      	beq.n	8008ace <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac4:	f043 0220 	orr.w	r2, r3, #32
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 82f9 	beq.w	80090cc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d013      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	d005      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d054      	beq.n	8008bdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fb3a 	bl	800a1ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b42:	2b40      	cmp	r3, #64	@ 0x40
 8008b44:	d146      	bne.n	8008bd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1d9      	bne.n	8008b46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d017      	beq.n	8008bcc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba2:	4a15      	ldr	r2, [pc, #84]	@ (8008bf8 <HAL_UART_IRQHandler+0x2c0>)
 8008ba4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa faaf 	bl	8003110 <HAL_DMA_Abort_IT>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d019      	beq.n	8008bec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bca:	e00f      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fa93 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd2:	e00b      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa8f 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bda:	e007      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fa8b 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008bea:	e26f      	b.n	80090cc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	bf00      	nop
    return;
 8008bee:	e26d      	b.n	80090cc <HAL_UART_IRQHandler+0x794>
 8008bf0:	10000001 	.word	0x10000001
 8008bf4:	04000120 	.word	0x04000120
 8008bf8:	0800a279 	.word	0x0800a279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f040 8203 	bne.w	800900c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 81fc 	beq.w	800900c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 81f5 	beq.w	800900c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c34:	2b40      	cmp	r3, #64	@ 0x40
 8008c36:	f040 816d 	bne.w	8008f14 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4aa4      	ldr	r2, [pc, #656]	@ (8008ed4 <HAL_UART_IRQHandler+0x59c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d068      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4aa1      	ldr	r2, [pc, #644]	@ (8008ed8 <HAL_UART_IRQHandler+0x5a0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d061      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a9f      	ldr	r2, [pc, #636]	@ (8008edc <HAL_UART_IRQHandler+0x5a4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d05a      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a9c      	ldr	r2, [pc, #624]	@ (8008ee0 <HAL_UART_IRQHandler+0x5a8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d053      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a9a      	ldr	r2, [pc, #616]	@ (8008ee4 <HAL_UART_IRQHandler+0x5ac>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d04c      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a97      	ldr	r2, [pc, #604]	@ (8008ee8 <HAL_UART_IRQHandler+0x5b0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d045      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a95      	ldr	r2, [pc, #596]	@ (8008eec <HAL_UART_IRQHandler+0x5b4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d03e      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a92      	ldr	r2, [pc, #584]	@ (8008ef0 <HAL_UART_IRQHandler+0x5b8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d037      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a90      	ldr	r2, [pc, #576]	@ (8008ef4 <HAL_UART_IRQHandler+0x5bc>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d030      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a8d      	ldr	r2, [pc, #564]	@ (8008ef8 <HAL_UART_IRQHandler+0x5c0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d029      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a8b      	ldr	r2, [pc, #556]	@ (8008efc <HAL_UART_IRQHandler+0x5c4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d022      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a88      	ldr	r2, [pc, #544]	@ (8008f00 <HAL_UART_IRQHandler+0x5c8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01b      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a86      	ldr	r2, [pc, #536]	@ (8008f04 <HAL_UART_IRQHandler+0x5cc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d014      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a83      	ldr	r2, [pc, #524]	@ (8008f08 <HAL_UART_IRQHandler+0x5d0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00d      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a81      	ldr	r2, [pc, #516]	@ (8008f0c <HAL_UART_IRQHandler+0x5d4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d006      	beq.n	8008d1a <HAL_UART_IRQHandler+0x3e2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a7e      	ldr	r2, [pc, #504]	@ (8008f10 <HAL_UART_IRQHandler+0x5d8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d106      	bne.n	8008d28 <HAL_UART_IRQHandler+0x3f0>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	e005      	b.n	8008d34 <HAL_UART_IRQHandler+0x3fc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80ad 	beq.w	8008e9c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	f080 80a5 	bcs.w	8008e9c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d68:	f000 8087 	beq.w	8008e7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1da      	bne.n	8008d6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008dda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e1      	bne.n	8008db6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3308      	adds	r3, #8
 8008e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e3      	bne.n	8008df2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e48:	f023 0310 	bic.w	r3, r3, #16
 8008e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e4      	bne.n	8008e38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f9 fe2d 	bl	8002ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f939 	bl	800910c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008e9a:	e119      	b.n	80090d0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	f040 8112 	bne.w	80090d0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb8:	f040 810a 	bne.w	80090d0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f91e 	bl	800910c <HAL_UARTEx_RxEventCallback>
      return;
 8008ed0:	e0fe      	b.n	80090d0 <HAL_UART_IRQHandler+0x798>
 8008ed2:	bf00      	nop
 8008ed4:	40020010 	.word	0x40020010
 8008ed8:	40020028 	.word	0x40020028
 8008edc:	40020040 	.word	0x40020040
 8008ee0:	40020058 	.word	0x40020058
 8008ee4:	40020070 	.word	0x40020070
 8008ee8:	40020088 	.word	0x40020088
 8008eec:	400200a0 	.word	0x400200a0
 8008ef0:	400200b8 	.word	0x400200b8
 8008ef4:	40020410 	.word	0x40020410
 8008ef8:	40020428 	.word	0x40020428
 8008efc:	40020440 	.word	0x40020440
 8008f00:	40020458 	.word	0x40020458
 8008f04:	40020470 	.word	0x40020470
 8008f08:	40020488 	.word	0x40020488
 8008f0c:	400204a0 	.word	0x400204a0
 8008f10:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80cf 	beq.w	80090d4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 80ca 	beq.w	80090d4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e4      	bne.n	8008f40 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	623b      	str	r3, [r7, #32]
   return(result);
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	4b55      	ldr	r3, [pc, #340]	@ (80090e0 <HAL_UART_IRQHandler+0x7a8>)
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e3      	bne.n	8008f76 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0310 	bic.w	r3, r3, #16
 8008fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	69b9      	ldr	r1, [r7, #24]
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e4      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f881 	bl	800910c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800900a:	e063      	b.n	80090d4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800900c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00e      	beq.n	8009036 <HAL_UART_IRQHandler+0x6fe>
 8009018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800901c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800902c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fe80 	bl	800ad34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009034:	e051      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800904e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800905e:	2b00      	cmp	r3, #0
 8009060:	d03a      	beq.n	80090d8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
    }
    return;
 800906a:	e035      	b.n	80090d8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800906c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <HAL_UART_IRQHandler+0x754>
 8009078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f909 	bl	800a29c <UART_EndTransmit_IT>
    return;
 800908a:	e026      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800908c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d009      	beq.n	80090ac <HAL_UART_IRQHandler+0x774>
 8009098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800909c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 fe59 	bl	800ad5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090aa:	e016      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d010      	beq.n	80090da <HAL_UART_IRQHandler+0x7a2>
 80090b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da0c      	bge.n	80090da <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fe41 	bl	800ad48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090c6:	e008      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
      return;
 80090c8:	bf00      	nop
 80090ca:	e006      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
    return;
 80090cc:	bf00      	nop
 80090ce:	e004      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
      return;
 80090d0:	bf00      	nop
 80090d2:	e002      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
      return;
 80090d4:	bf00      	nop
 80090d6:	e000      	b.n	80090da <HAL_UART_IRQHandler+0x7a2>
    return;
 80090d8:	bf00      	nop
  }
}
 80090da:	37e8      	adds	r7, #232	@ 0xe8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	effffffe 	.word	0xeffffffe

080090e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009128:	b092      	sub	sp, #72	@ 0x48
 800912a:	af00      	add	r7, sp, #0
 800912c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	431a      	orrs	r2, r3
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	431a      	orrs	r2, r3
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	4313      	orrs	r3, r2
 800914a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4bbe      	ldr	r3, [pc, #760]	@ (800944c <UART_SetConfig+0x328>)
 8009154:	4013      	ands	r3, r2
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800915c:	430b      	orrs	r3, r1
 800915e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4ab3      	ldr	r2, [pc, #716]	@ (8009450 <UART_SetConfig+0x32c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800918c:	4313      	orrs	r3, r2
 800918e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	4baf      	ldr	r3, [pc, #700]	@ (8009454 <UART_SetConfig+0x330>)
 8009198:	4013      	ands	r3, r2
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	f023 010f 	bic.w	r1, r3, #15
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4aa6      	ldr	r2, [pc, #664]	@ (8009458 <UART_SetConfig+0x334>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d177      	bne.n	80092b4 <UART_SetConfig+0x190>
 80091c4:	4ba5      	ldr	r3, [pc, #660]	@ (800945c <UART_SetConfig+0x338>)
 80091c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091cc:	2b28      	cmp	r3, #40	@ 0x28
 80091ce:	d86d      	bhi.n	80092ac <UART_SetConfig+0x188>
 80091d0:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <UART_SetConfig+0xb4>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	0800927d 	.word	0x0800927d
 80091dc:	080092ad 	.word	0x080092ad
 80091e0:	080092ad 	.word	0x080092ad
 80091e4:	080092ad 	.word	0x080092ad
 80091e8:	080092ad 	.word	0x080092ad
 80091ec:	080092ad 	.word	0x080092ad
 80091f0:	080092ad 	.word	0x080092ad
 80091f4:	080092ad 	.word	0x080092ad
 80091f8:	08009285 	.word	0x08009285
 80091fc:	080092ad 	.word	0x080092ad
 8009200:	080092ad 	.word	0x080092ad
 8009204:	080092ad 	.word	0x080092ad
 8009208:	080092ad 	.word	0x080092ad
 800920c:	080092ad 	.word	0x080092ad
 8009210:	080092ad 	.word	0x080092ad
 8009214:	080092ad 	.word	0x080092ad
 8009218:	0800928d 	.word	0x0800928d
 800921c:	080092ad 	.word	0x080092ad
 8009220:	080092ad 	.word	0x080092ad
 8009224:	080092ad 	.word	0x080092ad
 8009228:	080092ad 	.word	0x080092ad
 800922c:	080092ad 	.word	0x080092ad
 8009230:	080092ad 	.word	0x080092ad
 8009234:	080092ad 	.word	0x080092ad
 8009238:	08009295 	.word	0x08009295
 800923c:	080092ad 	.word	0x080092ad
 8009240:	080092ad 	.word	0x080092ad
 8009244:	080092ad 	.word	0x080092ad
 8009248:	080092ad 	.word	0x080092ad
 800924c:	080092ad 	.word	0x080092ad
 8009250:	080092ad 	.word	0x080092ad
 8009254:	080092ad 	.word	0x080092ad
 8009258:	0800929d 	.word	0x0800929d
 800925c:	080092ad 	.word	0x080092ad
 8009260:	080092ad 	.word	0x080092ad
 8009264:	080092ad 	.word	0x080092ad
 8009268:	080092ad 	.word	0x080092ad
 800926c:	080092ad 	.word	0x080092ad
 8009270:	080092ad 	.word	0x080092ad
 8009274:	080092ad 	.word	0x080092ad
 8009278:	080092a5 	.word	0x080092a5
 800927c:	2301      	movs	r3, #1
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e222      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e21e      	b.n	80096ca <UART_SetConfig+0x5a6>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009292:	e21a      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e216      	b.n	80096ca <UART_SetConfig+0x5a6>
 800929c:	2320      	movs	r3, #32
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e212      	b.n	80096ca <UART_SetConfig+0x5a6>
 80092a4:	2340      	movs	r3, #64	@ 0x40
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e20e      	b.n	80096ca <UART_SetConfig+0x5a6>
 80092ac:	2380      	movs	r3, #128	@ 0x80
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e20a      	b.n	80096ca <UART_SetConfig+0x5a6>
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a69      	ldr	r2, [pc, #420]	@ (8009460 <UART_SetConfig+0x33c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d130      	bne.n	8009320 <UART_SetConfig+0x1fc>
 80092be:	4b67      	ldr	r3, [pc, #412]	@ (800945c <UART_SetConfig+0x338>)
 80092c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d826      	bhi.n	8009318 <UART_SetConfig+0x1f4>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <UART_SetConfig+0x1ac>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092e9 	.word	0x080092e9
 80092d4:	080092f1 	.word	0x080092f1
 80092d8:	080092f9 	.word	0x080092f9
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009309 	.word	0x08009309
 80092e4:	08009311 	.word	0x08009311
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ee:	e1ec      	b.n	80096ca <UART_SetConfig+0x5a6>
 80092f0:	2304      	movs	r3, #4
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f6:	e1e8      	b.n	80096ca <UART_SetConfig+0x5a6>
 80092f8:	2308      	movs	r3, #8
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fe:	e1e4      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009300:	2310      	movs	r3, #16
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e1e0      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009308:	2320      	movs	r3, #32
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e1dc      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009310:	2340      	movs	r3, #64	@ 0x40
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e1d8      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e1d4      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a4f      	ldr	r2, [pc, #316]	@ (8009464 <UART_SetConfig+0x340>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d130      	bne.n	800938c <UART_SetConfig+0x268>
 800932a:	4b4c      	ldr	r3, [pc, #304]	@ (800945c <UART_SetConfig+0x338>)
 800932c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	2b05      	cmp	r3, #5
 8009334:	d826      	bhi.n	8009384 <UART_SetConfig+0x260>
 8009336:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <UART_SetConfig+0x218>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009355 	.word	0x08009355
 8009340:	0800935d 	.word	0x0800935d
 8009344:	08009365 	.word	0x08009365
 8009348:	0800936d 	.word	0x0800936d
 800934c:	08009375 	.word	0x08009375
 8009350:	0800937d 	.word	0x0800937d
 8009354:	2300      	movs	r3, #0
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935a:	e1b6      	b.n	80096ca <UART_SetConfig+0x5a6>
 800935c:	2304      	movs	r3, #4
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009362:	e1b2      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009364:	2308      	movs	r3, #8
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e1ae      	b.n	80096ca <UART_SetConfig+0x5a6>
 800936c:	2310      	movs	r3, #16
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e1aa      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009374:	2320      	movs	r3, #32
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e1a6      	b.n	80096ca <UART_SetConfig+0x5a6>
 800937c:	2340      	movs	r3, #64	@ 0x40
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e1a2      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009384:	2380      	movs	r3, #128	@ 0x80
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e19e      	b.n	80096ca <UART_SetConfig+0x5a6>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a35      	ldr	r2, [pc, #212]	@ (8009468 <UART_SetConfig+0x344>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d130      	bne.n	80093f8 <UART_SetConfig+0x2d4>
 8009396:	4b31      	ldr	r3, [pc, #196]	@ (800945c <UART_SetConfig+0x338>)
 8009398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	2b05      	cmp	r3, #5
 80093a0:	d826      	bhi.n	80093f0 <UART_SetConfig+0x2cc>
 80093a2:	a201      	add	r2, pc, #4	@ (adr r2, 80093a8 <UART_SetConfig+0x284>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	080093c1 	.word	0x080093c1
 80093ac:	080093c9 	.word	0x080093c9
 80093b0:	080093d1 	.word	0x080093d1
 80093b4:	080093d9 	.word	0x080093d9
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e180      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e17c      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e178      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e174      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e170      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093e8:	2340      	movs	r3, #64	@ 0x40
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e16c      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093f0:	2380      	movs	r3, #128	@ 0x80
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e168      	b.n	80096ca <UART_SetConfig+0x5a6>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a1b      	ldr	r2, [pc, #108]	@ (800946c <UART_SetConfig+0x348>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d142      	bne.n	8009488 <UART_SetConfig+0x364>
 8009402:	4b16      	ldr	r3, [pc, #88]	@ (800945c <UART_SetConfig+0x338>)
 8009404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b05      	cmp	r3, #5
 800940c:	d838      	bhi.n	8009480 <UART_SetConfig+0x35c>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <UART_SetConfig+0x2f0>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	0800942d 	.word	0x0800942d
 8009418:	08009435 	.word	0x08009435
 800941c:	0800943d 	.word	0x0800943d
 8009420:	08009445 	.word	0x08009445
 8009424:	08009471 	.word	0x08009471
 8009428:	08009479 	.word	0x08009479
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e14a      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e146      	b.n	80096ca <UART_SetConfig+0x5a6>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e142      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e13e      	b.n	80096ca <UART_SetConfig+0x5a6>
 800944c:	cfff69f3 	.word	0xcfff69f3
 8009450:	58000c00 	.word	0x58000c00
 8009454:	11fff4ff 	.word	0x11fff4ff
 8009458:	40011000 	.word	0x40011000
 800945c:	58024400 	.word	0x58024400
 8009460:	40004400 	.word	0x40004400
 8009464:	40004800 	.word	0x40004800
 8009468:	40004c00 	.word	0x40004c00
 800946c:	40005000 	.word	0x40005000
 8009470:	2320      	movs	r3, #32
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e128      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009478:	2340      	movs	r3, #64	@ 0x40
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947e:	e124      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009480:	2380      	movs	r3, #128	@ 0x80
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e120      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4acb      	ldr	r2, [pc, #812]	@ (80097bc <UART_SetConfig+0x698>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d176      	bne.n	8009580 <UART_SetConfig+0x45c>
 8009492:	4bcb      	ldr	r3, [pc, #812]	@ (80097c0 <UART_SetConfig+0x69c>)
 8009494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800949a:	2b28      	cmp	r3, #40	@ 0x28
 800949c:	d86c      	bhi.n	8009578 <UART_SetConfig+0x454>
 800949e:	a201      	add	r2, pc, #4	@ (adr r2, 80094a4 <UART_SetConfig+0x380>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	08009549 	.word	0x08009549
 80094a8:	08009579 	.word	0x08009579
 80094ac:	08009579 	.word	0x08009579
 80094b0:	08009579 	.word	0x08009579
 80094b4:	08009579 	.word	0x08009579
 80094b8:	08009579 	.word	0x08009579
 80094bc:	08009579 	.word	0x08009579
 80094c0:	08009579 	.word	0x08009579
 80094c4:	08009551 	.word	0x08009551
 80094c8:	08009579 	.word	0x08009579
 80094cc:	08009579 	.word	0x08009579
 80094d0:	08009579 	.word	0x08009579
 80094d4:	08009579 	.word	0x08009579
 80094d8:	08009579 	.word	0x08009579
 80094dc:	08009579 	.word	0x08009579
 80094e0:	08009579 	.word	0x08009579
 80094e4:	08009559 	.word	0x08009559
 80094e8:	08009579 	.word	0x08009579
 80094ec:	08009579 	.word	0x08009579
 80094f0:	08009579 	.word	0x08009579
 80094f4:	08009579 	.word	0x08009579
 80094f8:	08009579 	.word	0x08009579
 80094fc:	08009579 	.word	0x08009579
 8009500:	08009579 	.word	0x08009579
 8009504:	08009561 	.word	0x08009561
 8009508:	08009579 	.word	0x08009579
 800950c:	08009579 	.word	0x08009579
 8009510:	08009579 	.word	0x08009579
 8009514:	08009579 	.word	0x08009579
 8009518:	08009579 	.word	0x08009579
 800951c:	08009579 	.word	0x08009579
 8009520:	08009579 	.word	0x08009579
 8009524:	08009569 	.word	0x08009569
 8009528:	08009579 	.word	0x08009579
 800952c:	08009579 	.word	0x08009579
 8009530:	08009579 	.word	0x08009579
 8009534:	08009579 	.word	0x08009579
 8009538:	08009579 	.word	0x08009579
 800953c:	08009579 	.word	0x08009579
 8009540:	08009579 	.word	0x08009579
 8009544:	08009571 	.word	0x08009571
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e0bc      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009550:	2304      	movs	r3, #4
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e0b8      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009558:	2308      	movs	r3, #8
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e0b4      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009560:	2310      	movs	r3, #16
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e0b0      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009568:	2320      	movs	r3, #32
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e0ac      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009570:	2340      	movs	r3, #64	@ 0x40
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e0a8      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009578:	2380      	movs	r3, #128	@ 0x80
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e0a4      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a8f      	ldr	r2, [pc, #572]	@ (80097c4 <UART_SetConfig+0x6a0>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d130      	bne.n	80095ec <UART_SetConfig+0x4c8>
 800958a:	4b8d      	ldr	r3, [pc, #564]	@ (80097c0 <UART_SetConfig+0x69c>)
 800958c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	2b05      	cmp	r3, #5
 8009594:	d826      	bhi.n	80095e4 <UART_SetConfig+0x4c0>
 8009596:	a201      	add	r2, pc, #4	@ (adr r2, 800959c <UART_SetConfig+0x478>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095b5 	.word	0x080095b5
 80095a0:	080095bd 	.word	0x080095bd
 80095a4:	080095c5 	.word	0x080095c5
 80095a8:	080095cd 	.word	0x080095cd
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095dd 	.word	0x080095dd
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e086      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095bc:	2304      	movs	r3, #4
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e082      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095c4:	2308      	movs	r3, #8
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e07e      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095cc:	2310      	movs	r3, #16
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e07a      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095d4:	2320      	movs	r3, #32
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e076      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095dc:	2340      	movs	r3, #64	@ 0x40
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e072      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095e4:	2380      	movs	r3, #128	@ 0x80
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e06e      	b.n	80096ca <UART_SetConfig+0x5a6>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a75      	ldr	r2, [pc, #468]	@ (80097c8 <UART_SetConfig+0x6a4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d130      	bne.n	8009658 <UART_SetConfig+0x534>
 80095f6:	4b72      	ldr	r3, [pc, #456]	@ (80097c0 <UART_SetConfig+0x69c>)
 80095f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	2b05      	cmp	r3, #5
 8009600:	d826      	bhi.n	8009650 <UART_SetConfig+0x52c>
 8009602:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <UART_SetConfig+0x4e4>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009621 	.word	0x08009621
 800960c:	08009629 	.word	0x08009629
 8009610:	08009631 	.word	0x08009631
 8009614:	08009639 	.word	0x08009639
 8009618:	08009641 	.word	0x08009641
 800961c:	08009649 	.word	0x08009649
 8009620:	2300      	movs	r3, #0
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e050      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009628:	2304      	movs	r3, #4
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e04c      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009630:	2308      	movs	r3, #8
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e048      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009638:	2310      	movs	r3, #16
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e044      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009640:	2320      	movs	r3, #32
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e040      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009648:	2340      	movs	r3, #64	@ 0x40
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e03c      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009650:	2380      	movs	r3, #128	@ 0x80
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e038      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a5b      	ldr	r2, [pc, #364]	@ (80097cc <UART_SetConfig+0x6a8>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d130      	bne.n	80096c4 <UART_SetConfig+0x5a0>
 8009662:	4b57      	ldr	r3, [pc, #348]	@ (80097c0 <UART_SetConfig+0x69c>)
 8009664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b05      	cmp	r3, #5
 800966c:	d826      	bhi.n	80096bc <UART_SetConfig+0x598>
 800966e:	a201      	add	r2, pc, #4	@ (adr r2, 8009674 <UART_SetConfig+0x550>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	0800968d 	.word	0x0800968d
 8009678:	08009695 	.word	0x08009695
 800967c:	0800969d 	.word	0x0800969d
 8009680:	080096a5 	.word	0x080096a5
 8009684:	080096ad 	.word	0x080096ad
 8009688:	080096b5 	.word	0x080096b5
 800968c:	2302      	movs	r3, #2
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e01a      	b.n	80096ca <UART_SetConfig+0x5a6>
 8009694:	2304      	movs	r3, #4
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e016      	b.n	80096ca <UART_SetConfig+0x5a6>
 800969c:	2308      	movs	r3, #8
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e012      	b.n	80096ca <UART_SetConfig+0x5a6>
 80096a4:	2310      	movs	r3, #16
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e00e      	b.n	80096ca <UART_SetConfig+0x5a6>
 80096ac:	2320      	movs	r3, #32
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e00a      	b.n	80096ca <UART_SetConfig+0x5a6>
 80096b4:	2340      	movs	r3, #64	@ 0x40
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e006      	b.n	80096ca <UART_SetConfig+0x5a6>
 80096bc:	2380      	movs	r3, #128	@ 0x80
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e002      	b.n	80096ca <UART_SetConfig+0x5a6>
 80096c4:	2380      	movs	r3, #128	@ 0x80
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a3f      	ldr	r2, [pc, #252]	@ (80097cc <UART_SetConfig+0x6a8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	f040 80f8 	bne.w	80098c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096da:	2b20      	cmp	r3, #32
 80096dc:	dc46      	bgt.n	800976c <UART_SetConfig+0x648>
 80096de:	2b02      	cmp	r3, #2
 80096e0:	f2c0 8082 	blt.w	80097e8 <UART_SetConfig+0x6c4>
 80096e4:	3b02      	subs	r3, #2
 80096e6:	2b1e      	cmp	r3, #30
 80096e8:	d87e      	bhi.n	80097e8 <UART_SetConfig+0x6c4>
 80096ea:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <UART_SetConfig+0x5cc>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009773 	.word	0x08009773
 80096f4:	080097e9 	.word	0x080097e9
 80096f8:	0800977b 	.word	0x0800977b
 80096fc:	080097e9 	.word	0x080097e9
 8009700:	080097e9 	.word	0x080097e9
 8009704:	080097e9 	.word	0x080097e9
 8009708:	0800978b 	.word	0x0800978b
 800970c:	080097e9 	.word	0x080097e9
 8009710:	080097e9 	.word	0x080097e9
 8009714:	080097e9 	.word	0x080097e9
 8009718:	080097e9 	.word	0x080097e9
 800971c:	080097e9 	.word	0x080097e9
 8009720:	080097e9 	.word	0x080097e9
 8009724:	080097e9 	.word	0x080097e9
 8009728:	0800979b 	.word	0x0800979b
 800972c:	080097e9 	.word	0x080097e9
 8009730:	080097e9 	.word	0x080097e9
 8009734:	080097e9 	.word	0x080097e9
 8009738:	080097e9 	.word	0x080097e9
 800973c:	080097e9 	.word	0x080097e9
 8009740:	080097e9 	.word	0x080097e9
 8009744:	080097e9 	.word	0x080097e9
 8009748:	080097e9 	.word	0x080097e9
 800974c:	080097e9 	.word	0x080097e9
 8009750:	080097e9 	.word	0x080097e9
 8009754:	080097e9 	.word	0x080097e9
 8009758:	080097e9 	.word	0x080097e9
 800975c:	080097e9 	.word	0x080097e9
 8009760:	080097e9 	.word	0x080097e9
 8009764:	080097e9 	.word	0x080097e9
 8009768:	080097db 	.word	0x080097db
 800976c:	2b40      	cmp	r3, #64	@ 0x40
 800976e:	d037      	beq.n	80097e0 <UART_SetConfig+0x6bc>
 8009770:	e03a      	b.n	80097e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009772:	f7fd fc5f 	bl	8007034 <HAL_RCCEx_GetD3PCLK1Freq>
 8009776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009778:	e03c      	b.n	80097f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd fc6e 	bl	8007060 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e034      	b.n	80097f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	4618      	mov	r0, r3
 8009790:	f7fd fdba 	bl	8007308 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009798:	e02c      	b.n	80097f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800979a:	4b09      	ldr	r3, [pc, #36]	@ (80097c0 <UART_SetConfig+0x69c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0320 	and.w	r3, r3, #32
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d016      	beq.n	80097d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097a6:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <UART_SetConfig+0x69c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	4a07      	ldr	r2, [pc, #28]	@ (80097d0 <UART_SetConfig+0x6ac>)
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097b8:	e01c      	b.n	80097f4 <UART_SetConfig+0x6d0>
 80097ba:	bf00      	nop
 80097bc:	40011400 	.word	0x40011400
 80097c0:	58024400 	.word	0x58024400
 80097c4:	40007800 	.word	0x40007800
 80097c8:	40007c00 	.word	0x40007c00
 80097cc:	58000c00 	.word	0x58000c00
 80097d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80097d4:	4b9d      	ldr	r3, [pc, #628]	@ (8009a4c <UART_SetConfig+0x928>)
 80097d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d8:	e00c      	b.n	80097f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097da:	4b9d      	ldr	r3, [pc, #628]	@ (8009a50 <UART_SetConfig+0x92c>)
 80097dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097de:	e009      	b.n	80097f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e6:	e005      	b.n	80097f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 81de 	beq.w	8009bb8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009800:	4a94      	ldr	r2, [pc, #592]	@ (8009a54 <UART_SetConfig+0x930>)
 8009802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009806:	461a      	mov	r2, r3
 8009808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980a:	fbb3 f3f2 	udiv	r3, r3, r2
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	4613      	mov	r3, r2
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	4413      	add	r3, r2
 800981a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981c:	429a      	cmp	r2, r3
 800981e:	d305      	bcc.n	800982c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009828:	429a      	cmp	r2, r3
 800982a:	d903      	bls.n	8009834 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009832:	e1c1      	b.n	8009bb8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009836:	2200      	movs	r2, #0
 8009838:	60bb      	str	r3, [r7, #8]
 800983a:	60fa      	str	r2, [r7, #12]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009840:	4a84      	ldr	r2, [pc, #528]	@ (8009a54 <UART_SetConfig+0x930>)
 8009842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009846:	b29b      	uxth	r3, r3
 8009848:	2200      	movs	r2, #0
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009856:	f7f6 fd9b 	bl	8000390 <__aeabi_uldivmod>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	020b      	lsls	r3, r1, #8
 800986c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009870:	0202      	lsls	r2, r0, #8
 8009872:	6979      	ldr	r1, [r7, #20]
 8009874:	6849      	ldr	r1, [r1, #4]
 8009876:	0849      	lsrs	r1, r1, #1
 8009878:	2000      	movs	r0, #0
 800987a:	460c      	mov	r4, r1
 800987c:	4605      	mov	r5, r0
 800987e:	eb12 0804 	adds.w	r8, r2, r4
 8009882:	eb43 0905 	adc.w	r9, r3, r5
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	469a      	mov	sl, r3
 800988e:	4693      	mov	fp, r2
 8009890:	4652      	mov	r2, sl
 8009892:	465b      	mov	r3, fp
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7f6 fd7a 	bl	8000390 <__aeabi_uldivmod>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4613      	mov	r3, r2
 80098a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098aa:	d308      	bcc.n	80098be <UART_SetConfig+0x79a>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098b2:	d204      	bcs.n	80098be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098ba:	60da      	str	r2, [r3, #12]
 80098bc:	e17c      	b.n	8009bb8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80098c4:	e178      	b.n	8009bb8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098ce:	f040 80c5 	bne.w	8009a5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80098d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	dc48      	bgt.n	800996c <UART_SetConfig+0x848>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	db7b      	blt.n	80099d6 <UART_SetConfig+0x8b2>
 80098de:	2b20      	cmp	r3, #32
 80098e0:	d879      	bhi.n	80099d6 <UART_SetConfig+0x8b2>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <UART_SetConfig+0x7c4>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009973 	.word	0x08009973
 80098ec:	0800997b 	.word	0x0800997b
 80098f0:	080099d7 	.word	0x080099d7
 80098f4:	080099d7 	.word	0x080099d7
 80098f8:	08009983 	.word	0x08009983
 80098fc:	080099d7 	.word	0x080099d7
 8009900:	080099d7 	.word	0x080099d7
 8009904:	080099d7 	.word	0x080099d7
 8009908:	08009993 	.word	0x08009993
 800990c:	080099d7 	.word	0x080099d7
 8009910:	080099d7 	.word	0x080099d7
 8009914:	080099d7 	.word	0x080099d7
 8009918:	080099d7 	.word	0x080099d7
 800991c:	080099d7 	.word	0x080099d7
 8009920:	080099d7 	.word	0x080099d7
 8009924:	080099d7 	.word	0x080099d7
 8009928:	080099a3 	.word	0x080099a3
 800992c:	080099d7 	.word	0x080099d7
 8009930:	080099d7 	.word	0x080099d7
 8009934:	080099d7 	.word	0x080099d7
 8009938:	080099d7 	.word	0x080099d7
 800993c:	080099d7 	.word	0x080099d7
 8009940:	080099d7 	.word	0x080099d7
 8009944:	080099d7 	.word	0x080099d7
 8009948:	080099d7 	.word	0x080099d7
 800994c:	080099d7 	.word	0x080099d7
 8009950:	080099d7 	.word	0x080099d7
 8009954:	080099d7 	.word	0x080099d7
 8009958:	080099d7 	.word	0x080099d7
 800995c:	080099d7 	.word	0x080099d7
 8009960:	080099d7 	.word	0x080099d7
 8009964:	080099d7 	.word	0x080099d7
 8009968:	080099c9 	.word	0x080099c9
 800996c:	2b40      	cmp	r3, #64	@ 0x40
 800996e:	d02e      	beq.n	80099ce <UART_SetConfig+0x8aa>
 8009970:	e031      	b.n	80099d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009972:	f7fc f929 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8009976:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009978:	e033      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800997a:	f7fc f93b 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 800997e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009980:	e02f      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f7fd fb6a 	bl	8007060 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009990:	e027      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009992:	f107 0318 	add.w	r3, r7, #24
 8009996:	4618      	mov	r0, r3
 8009998:	f7fd fcb6 	bl	8007308 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a0:	e01f      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009a58 <UART_SetConfig+0x934>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d009      	beq.n	80099c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009a58 <UART_SetConfig+0x934>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	08db      	lsrs	r3, r3, #3
 80099b4:	f003 0303 	and.w	r3, r3, #3
 80099b8:	4a24      	ldr	r2, [pc, #144]	@ (8009a4c <UART_SetConfig+0x928>)
 80099ba:	fa22 f303 	lsr.w	r3, r2, r3
 80099be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099c0:	e00f      	b.n	80099e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80099c2:	4b22      	ldr	r3, [pc, #136]	@ (8009a4c <UART_SetConfig+0x928>)
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c6:	e00c      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099c8:	4b21      	ldr	r3, [pc, #132]	@ (8009a50 <UART_SetConfig+0x92c>)
 80099ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099cc:	e009      	b.n	80099e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d4:	e005      	b.n	80099e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80e7 	beq.w	8009bb8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	4a19      	ldr	r2, [pc, #100]	@ (8009a54 <UART_SetConfig+0x930>)
 80099f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f4:	461a      	mov	r2, r3
 80099f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099fc:	005a      	lsls	r2, r3, #1
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	441a      	add	r2, r3
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	d916      	bls.n	8009a44 <UART_SetConfig+0x920>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a1c:	d212      	bcs.n	8009a44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f023 030f 	bic.w	r3, r3, #15
 8009a26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a36:	4313      	orrs	r3, r2
 8009a38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009a40:	60da      	str	r2, [r3, #12]
 8009a42:	e0b9      	b.n	8009bb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a4a:	e0b5      	b.n	8009bb8 <UART_SetConfig+0xa94>
 8009a4c:	03d09000 	.word	0x03d09000
 8009a50:	003d0900 	.word	0x003d0900
 8009a54:	0800b9c8 	.word	0x0800b9c8
 8009a58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	dc49      	bgt.n	8009af8 <UART_SetConfig+0x9d4>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	db7c      	blt.n	8009b62 <UART_SetConfig+0xa3e>
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d87a      	bhi.n	8009b62 <UART_SetConfig+0xa3e>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x950>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009aff 	.word	0x08009aff
 8009a78:	08009b07 	.word	0x08009b07
 8009a7c:	08009b63 	.word	0x08009b63
 8009a80:	08009b63 	.word	0x08009b63
 8009a84:	08009b0f 	.word	0x08009b0f
 8009a88:	08009b63 	.word	0x08009b63
 8009a8c:	08009b63 	.word	0x08009b63
 8009a90:	08009b63 	.word	0x08009b63
 8009a94:	08009b1f 	.word	0x08009b1f
 8009a98:	08009b63 	.word	0x08009b63
 8009a9c:	08009b63 	.word	0x08009b63
 8009aa0:	08009b63 	.word	0x08009b63
 8009aa4:	08009b63 	.word	0x08009b63
 8009aa8:	08009b63 	.word	0x08009b63
 8009aac:	08009b63 	.word	0x08009b63
 8009ab0:	08009b63 	.word	0x08009b63
 8009ab4:	08009b2f 	.word	0x08009b2f
 8009ab8:	08009b63 	.word	0x08009b63
 8009abc:	08009b63 	.word	0x08009b63
 8009ac0:	08009b63 	.word	0x08009b63
 8009ac4:	08009b63 	.word	0x08009b63
 8009ac8:	08009b63 	.word	0x08009b63
 8009acc:	08009b63 	.word	0x08009b63
 8009ad0:	08009b63 	.word	0x08009b63
 8009ad4:	08009b63 	.word	0x08009b63
 8009ad8:	08009b63 	.word	0x08009b63
 8009adc:	08009b63 	.word	0x08009b63
 8009ae0:	08009b63 	.word	0x08009b63
 8009ae4:	08009b63 	.word	0x08009b63
 8009ae8:	08009b63 	.word	0x08009b63
 8009aec:	08009b63 	.word	0x08009b63
 8009af0:	08009b63 	.word	0x08009b63
 8009af4:	08009b55 	.word	0x08009b55
 8009af8:	2b40      	cmp	r3, #64	@ 0x40
 8009afa:	d02e      	beq.n	8009b5a <UART_SetConfig+0xa36>
 8009afc:	e031      	b.n	8009b62 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009afe:	f7fc f863 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8009b02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b04:	e033      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b06:	f7fc f875 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 8009b0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e02f      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fd faa4 	bl	8007060 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1c:	e027      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b1e:	f107 0318 	add.w	r3, r7, #24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd fbf0 	bl	8007308 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2c:	e01f      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8009be4 <UART_SetConfig+0xac0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8009be4 <UART_SetConfig+0xac0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	4a28      	ldr	r2, [pc, #160]	@ (8009be8 <UART_SetConfig+0xac4>)
 8009b46:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b4c:	e00f      	b.n	8009b6e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009b4e:	4b26      	ldr	r3, [pc, #152]	@ (8009be8 <UART_SetConfig+0xac4>)
 8009b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b52:	e00c      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b54:	4b25      	ldr	r3, [pc, #148]	@ (8009bec <UART_SetConfig+0xac8>)
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b58:	e009      	b.n	8009b6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b60:	e005      	b.n	8009b6e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d021      	beq.n	8009bb8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	4a1d      	ldr	r2, [pc, #116]	@ (8009bf0 <UART_SetConfig+0xacc>)
 8009b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	441a      	add	r2, r3
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	2b0f      	cmp	r3, #15
 8009b9c:	d909      	bls.n	8009bb2 <UART_SetConfig+0xa8e>
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ba4:	d205      	bcs.n	8009bb2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60da      	str	r2, [r3, #12]
 8009bb0:	e002      	b.n	8009bb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009bd4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3748      	adds	r7, #72	@ 0x48
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009be2:	bf00      	nop
 8009be4:	58024400 	.word	0x58024400
 8009be8:	03d09000 	.word	0x03d09000
 8009bec:	003d0900 	.word	0x003d0900
 8009bf0:	0800b9c8 	.word	0x0800b9c8

08009bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00a      	beq.n	8009c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c66:	f003 0304 	and.w	r3, r3, #4
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	f003 0310 	and.w	r3, r3, #16
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00a      	beq.n	8009ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	430a      	orrs	r2, r1
 8009cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01a      	beq.n	8009d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cf2:	d10a      	bne.n	8009d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	605a      	str	r2, [r3, #4]
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b098      	sub	sp, #96	@ 0x60
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d48:	f7f8 fd24 	bl	8002794 <HAL_GetTick>
 8009d4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d12f      	bne.n	8009dbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d64:	2200      	movs	r2, #0
 8009d66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f88e 	bl	8009e8c <UART_WaitOnFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d022      	beq.n	8009dbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e063      	b.n	8009e84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d149      	bne.n	8009e5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f857 	bl	8009e8c <UART_WaitOnFlagUntilTimeout>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d03c      	beq.n	8009e5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	623b      	str	r3, [r7, #32]
   return(result);
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e6      	bne.n	8009de4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f023 0301 	bic.w	r3, r3, #1
 8009e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e36:	61fa      	str	r2, [r7, #28]
 8009e38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	69b9      	ldr	r1, [r7, #24]
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	617b      	str	r3, [r7, #20]
   return(result);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e5      	bne.n	8009e16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e012      	b.n	8009e84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3758      	adds	r7, #88	@ 0x58
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e9c:	e04f      	b.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d04b      	beq.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea6:	f7f8 fc75 	bl	8002794 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e04e      	b.n	8009f5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0304 	and.w	r3, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d037      	beq.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b80      	cmp	r3, #128	@ 0x80
 8009ed2:	d034      	beq.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b40      	cmp	r3, #64	@ 0x40
 8009ed8:	d031      	beq.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d110      	bne.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2208      	movs	r2, #8
 8009eee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f95b 	bl	800a1ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2208      	movs	r2, #8
 8009efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e029      	b.n	8009f5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f18:	d111      	bne.n	8009f3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f941 	bl	800a1ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e00f      	b.n	8009f5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	4013      	ands	r3, r2
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	bf0c      	ite	eq
 8009f4e:	2301      	moveq	r3, #1
 8009f50:	2300      	movne	r3, #0
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d0a0      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b0a3      	sub	sp, #140	@ 0x8c
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	88fa      	ldrh	r2, [r7, #6]
 8009f80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	88fa      	ldrh	r2, [r7, #6]
 8009f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f9a:	d10e      	bne.n	8009fba <UART_Start_Receive_IT+0x52>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <UART_Start_Receive_IT+0x48>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009faa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fae:	e02d      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	22ff      	movs	r2, #255	@ 0xff
 8009fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fb8:	e028      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <UART_Start_Receive_IT+0x76>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <UART_Start_Receive_IT+0x6c>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	22ff      	movs	r2, #255	@ 0xff
 8009fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fd2:	e01b      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	227f      	movs	r2, #127	@ 0x7f
 8009fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009fdc:	e016      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fe6:	d10d      	bne.n	800a004 <UART_Start_Receive_IT+0x9c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <UART_Start_Receive_IT+0x92>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	227f      	movs	r2, #127	@ 0x7f
 8009ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ff8:	e008      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	223f      	movs	r2, #63	@ 0x3f
 8009ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a002:	e003      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2222      	movs	r2, #34	@ 0x22
 800a018:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3308      	adds	r3, #8
 800a022:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a02c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3308      	adds	r3, #8
 800a03c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a040:	673a      	str	r2, [r7, #112]	@ 0x70
 800a042:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a046:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a04e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e3      	bne.n	800a01c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05c:	d14f      	bne.n	800a0fe <UART_Start_Receive_IT+0x196>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a064:	88fa      	ldrh	r2, [r7, #6]
 800a066:	429a      	cmp	r2, r3
 800a068:	d349      	bcc.n	800a0fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a072:	d107      	bne.n	800a084 <UART_Start_Receive_IT+0x11c>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4a47      	ldr	r2, [pc, #284]	@ (800a19c <UART_Start_Receive_IT+0x234>)
 800a080:	675a      	str	r2, [r3, #116]	@ 0x74
 800a082:	e002      	b.n	800a08a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4a46      	ldr	r2, [pc, #280]	@ (800a1a0 <UART_Start_Receive_IT+0x238>)
 800a088:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01a      	beq.n	800a0c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a0c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e4      	bne.n	800a092 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a0e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a0ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e5      	bne.n	800a0c8 <UART_Start_Receive_IT+0x160>
 800a0fc:	e046      	b.n	800a18c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a106:	d107      	bne.n	800a118 <UART_Start_Receive_IT+0x1b0>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4a24      	ldr	r2, [pc, #144]	@ (800a1a4 <UART_Start_Receive_IT+0x23c>)
 800a114:	675a      	str	r2, [r3, #116]	@ 0x74
 800a116:	e002      	b.n	800a11e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a23      	ldr	r2, [pc, #140]	@ (800a1a8 <UART_Start_Receive_IT+0x240>)
 800a11c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d019      	beq.n	800a15a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a13a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
 800a146:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a14a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e6      	bne.n	800a126 <UART_Start_Receive_IT+0x1be>
 800a158:	e018      	b.n	800a18c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	613b      	str	r3, [r7, #16]
   return(result);
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f043 0320 	orr.w	r3, r3, #32
 800a16e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a178:	623b      	str	r3, [r7, #32]
 800a17a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	69f9      	ldr	r1, [r7, #28]
 800a17e:	6a3a      	ldr	r2, [r7, #32]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	61bb      	str	r3, [r7, #24]
   return(result);
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	378c      	adds	r7, #140	@ 0x8c
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	0800a9c9 	.word	0x0800a9c9
 800a1a0:	0800a665 	.word	0x0800a665
 800a1a4:	0800a4ad 	.word	0x0800a4ad
 800a1a8:	0800a2f5 	.word	0x0800a2f5

0800a1ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b095      	sub	sp, #84	@ 0x54
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f6:	69fa      	ldr	r2, [r7, #28]
 800a1f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a274 <UART_EndRxTransfer+0xc8>)
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3308      	adds	r3, #8
 800a204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a208:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e5      	bne.n	800a1e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d118      	bne.n	800a254 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f023 0310 	bic.w	r3, r3, #16
 800a236:	647b      	str	r3, [r7, #68]	@ 0x44
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a240:	61bb      	str	r3, [r7, #24]
 800a242:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	613b      	str	r3, [r7, #16]
   return(result);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e6      	bne.n	800a222 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a268:	bf00      	nop
 800a26a:	3754      	adds	r7, #84	@ 0x54
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	effffffe 	.word	0xeffffffe

0800a278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7fe ff32 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a294:	bf00      	nop
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6979      	ldr	r1, [r7, #20]
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e6      	bne.n	800a2a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7fe fefd 	bl	80090e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ea:	bf00      	nop
 800a2ec:	3720      	adds	r7, #32
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b09c      	sub	sp, #112	@ 0x70
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a302:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a30c:	2b22      	cmp	r3, #34	@ 0x22
 800a30e:	f040 80be 	bne.w	800a48e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a318:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a31c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a320:	b2d9      	uxtb	r1, r3
 800a322:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a326:	b2da      	uxtb	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a32c:	400a      	ands	r2, r1
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a342:	b29b      	uxth	r3, r3
 800a344:	3b01      	subs	r3, #1
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	f040 80a1 	bne.w	800a49e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a36a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a36c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a370:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a37a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a37c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e6      	bne.n	800a35c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a3ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e5      	bne.n	800a38e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a33      	ldr	r2, [pc, #204]	@ (800a4a8 <UART_RxISR_8BIT+0x1b4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d01f      	beq.n	800a420 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d018      	beq.n	800a420 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a402:	663b      	str	r3, [r7, #96]	@ 0x60
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	461a      	mov	r2, r3
 800a40a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a40c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a40e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e6      	bne.n	800a3ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a424:	2b01      	cmp	r3, #1
 800a426:	d12e      	bne.n	800a486 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0310 	bic.w	r3, r3, #16
 800a442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	461a      	mov	r2, r3
 800a44a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	69b9      	ldr	r1, [r7, #24]
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	617b      	str	r3, [r7, #20]
   return(result);
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e6      	bne.n	800a42e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	f003 0310 	and.w	r3, r3, #16
 800a46a:	2b10      	cmp	r3, #16
 800a46c:	d103      	bne.n	800a476 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2210      	movs	r2, #16
 800a474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7fe fe44 	bl	800910c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a484:	e00b      	b.n	800a49e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7f7 ffac 	bl	80023e4 <HAL_UART_RxCpltCallback>
}
 800a48c:	e007      	b.n	800a49e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	699a      	ldr	r2, [r3, #24]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0208 	orr.w	r2, r2, #8
 800a49c:	619a      	str	r2, [r3, #24]
}
 800a49e:	bf00      	nop
 800a4a0:	3770      	adds	r7, #112	@ 0x70
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	58000c00 	.word	0x58000c00

0800a4ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b09c      	sub	sp, #112	@ 0x70
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a4ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4c4:	2b22      	cmp	r3, #34	@ 0x22
 800a4c6:	f040 80be 	bne.w	800a646 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a4da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a4de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 80a1 	bne.w	800a656 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a528:	667b      	str	r3, [r7, #100]	@ 0x64
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a532:	657b      	str	r3, [r7, #84]	@ 0x54
 800a534:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a538:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e6      	bne.n	800a514 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3308      	adds	r3, #8
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	f023 0301 	bic.w	r3, r3, #1
 800a55c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3308      	adds	r3, #8
 800a564:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a566:	643a      	str	r2, [r7, #64]	@ 0x40
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a56c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e5      	bne.n	800a546 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a33      	ldr	r2, [pc, #204]	@ (800a660 <UART_RxISR_16BIT+0x1b4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d01f      	beq.n	800a5d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d018      	beq.n	800a5d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e6      	bne.n	800a5a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d12e      	bne.n	800a63e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f023 0310 	bic.w	r3, r3, #16
 800a5fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6979      	ldr	r1, [r7, #20]
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	613b      	str	r3, [r7, #16]
   return(result);
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	f003 0310 	and.w	r3, r3, #16
 800a622:	2b10      	cmp	r3, #16
 800a624:	d103      	bne.n	800a62e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2210      	movs	r2, #16
 800a62c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7fe fd68 	bl	800910c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a63c:	e00b      	b.n	800a656 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7f7 fed0 	bl	80023e4 <HAL_UART_RxCpltCallback>
}
 800a644:	e007      	b.n	800a656 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	699a      	ldr	r2, [r3, #24]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f042 0208 	orr.w	r2, r2, #8
 800a654:	619a      	str	r2, [r3, #24]
}
 800a656:	bf00      	nop
 800a658:	3770      	adds	r7, #112	@ 0x70
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	58000c00 	.word	0x58000c00

0800a664 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b0ac      	sub	sp, #176	@ 0xb0
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a672:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a69a:	2b22      	cmp	r3, #34	@ 0x22
 800a69c:	f040 8181 	bne.w	800a9a2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6aa:	e124      	b.n	800a8f6 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a6ba:	b2d9      	uxtb	r1, r3
 800a6bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c6:	400a      	ands	r2, r1
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a6f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d053      	beq.n	800a7a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d011      	beq.n	800a72e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a70a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2201      	movs	r2, #1
 800a71c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a724:	f043 0201 	orr.w	r2, r3, #1
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d011      	beq.n	800a75e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a73a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2202      	movs	r2, #2
 800a74c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a754:	f043 0204 	orr.w	r2, r3, #4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a75e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b00      	cmp	r3, #0
 800a768:	d011      	beq.n	800a78e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2204      	movs	r2, #4
 800a77c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a784:	f043 0202 	orr.w	r2, r3, #2
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a794:	2b00      	cmp	r3, #0
 800a796:	d006      	beq.n	800a7a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7fe fcad 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f040 80a1 	bne.w	800a8f6 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a7dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a7e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e4      	bne.n	800a7b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a7fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7fc:	4b6f      	ldr	r3, [pc, #444]	@ (800a9bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a7fe:	4013      	ands	r3, r2
 800a800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a80e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a810:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a814:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a81c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e3      	bne.n	800a7ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a61      	ldr	r2, [pc, #388]	@ (800a9c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d021      	beq.n	800a884 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d01a      	beq.n	800a884 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a85c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a85e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a870:	657b      	str	r3, [r7, #84]	@ 0x54
 800a872:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a876:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a87e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e4      	bne.n	800a84e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d130      	bne.n	800a8ee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	f023 0310 	bic.w	r3, r3, #16
 800a8a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8bc:	e841 2300 	strex	r3, r2, [r1]
 800a8c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1e4      	bne.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	f003 0310 	and.w	r3, r3, #16
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d103      	bne.n	800a8de <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2210      	movs	r2, #16
 800a8dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fe fc10 	bl	800910c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a8ec:	e00e      	b.n	800a90c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7f7 fd78 	bl	80023e4 <HAL_UART_RxCpltCallback>
        break;
 800a8f4:	e00a      	b.n	800a90c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8f6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d006      	beq.n	800a90c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	f47f aed0 	bne.w	800a6ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a912:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a916:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d049      	beq.n	800a9b2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a924:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a928:	429a      	cmp	r2, r3
 800a92a:	d242      	bcs.n	800a9b2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3308      	adds	r3, #8
 800a932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	e853 3f00 	ldrex	r3, [r3]
 800a93a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e3      	bne.n	800a92c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a17      	ldr	r2, [pc, #92]	@ (800a9c4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a968:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	60bb      	str	r3, [r7, #8]
   return(result);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f043 0320 	orr.w	r3, r3, #32
 800a97e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a98c:	61bb      	str	r3, [r7, #24]
 800a98e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6979      	ldr	r1, [r7, #20]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	613b      	str	r3, [r7, #16]
   return(result);
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e4      	bne.n	800a96a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9a0:	e007      	b.n	800a9b2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	699a      	ldr	r2, [r3, #24]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0208 	orr.w	r2, r2, #8
 800a9b0:	619a      	str	r2, [r3, #24]
}
 800a9b2:	bf00      	nop
 800a9b4:	37b0      	adds	r7, #176	@ 0xb0
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	effffffe 	.word	0xeffffffe
 800a9c0:	58000c00 	.word	0x58000c00
 800a9c4:	0800a2f5 	.word	0x0800a2f5

0800a9c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b0ae      	sub	sp, #184	@ 0xb8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9fe:	2b22      	cmp	r3, #34	@ 0x22
 800aa00:	f040 8185 	bne.w	800ad0e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa0e:	e128      	b.n	800ac62 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa16:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aa22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aa26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa38:	1c9a      	adds	r2, r3, #2
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	3b01      	subs	r3, #1
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d053      	beq.n	800ab0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d011      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800aa72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2201      	movs	r2, #1
 800aa84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa8c:	f043 0201 	orr.w	r2, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d011      	beq.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aaa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2202      	movs	r2, #2
 800aab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aabc:	f043 0204 	orr.w	r2, r3, #4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d011      	beq.n	800aaf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2204      	movs	r2, #4
 800aae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaec:	f043 0202 	orr.w	r2, r3, #2
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d006      	beq.n	800ab0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7fe faf9 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 80a3 	bne.w	800ac62 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e2      	bne.n	800ab1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab68:	4b6f      	ldr	r3, [pc, #444]	@ (800ad28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3308      	adds	r3, #8
 800ab76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ab7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e3      	bne.n	800ab56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a61      	ldr	r2, [pc, #388]	@ (800ad2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d021      	beq.n	800abf0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d01a      	beq.n	800abf0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abc2:	e853 3f00 	ldrex	r3, [r3]
 800abc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800abce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800abdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abde:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e4      	bne.n	800abba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d130      	bne.n	800ac5a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac0e:	f023 0310 	bic.w	r3, r3, #16
 800ac12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e4      	bne.n	800abfe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d103      	bne.n	800ac4a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2210      	movs	r2, #16
 800ac48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7fe fa5a 	bl	800910c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ac58:	e00e      	b.n	800ac78 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7f7 fbc2 	bl	80023e4 <HAL_UART_RxCpltCallback>
        break;
 800ac60:	e00a      	b.n	800ac78 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac62:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d006      	beq.n	800ac78 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800ac6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f47f aecc 	bne.w	800aa10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac7e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d049      	beq.n	800ad1e <UART_RxISR_16BIT_FIFOEN+0x356>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac90:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d242      	bcs.n	800ad1e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	e853 3f00 	ldrex	r3, [r3]
 800aca6:	623b      	str	r3, [r7, #32]
   return(result);
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3308      	adds	r3, #8
 800acb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800acbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800acbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e3      	bne.n	800ac98 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a17      	ldr	r2, [pc, #92]	@ (800ad30 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800acd4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f043 0320 	orr.w	r3, r3, #32
 800acea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	69b9      	ldr	r1, [r7, #24]
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	617b      	str	r3, [r7, #20]
   return(result);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e4      	bne.n	800acd6 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad0c:	e007      	b.n	800ad1e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f042 0208 	orr.w	r2, r2, #8
 800ad1c:	619a      	str	r2, [r3, #24]
}
 800ad1e:	bf00      	nop
 800ad20:	37b8      	adds	r7, #184	@ 0xb8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	effffffe 	.word	0xeffffffe
 800ad2c:	58000c00 	.word	0x58000c00
 800ad30:	0800a4ad 	.word	0x0800a4ad

0800ad34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad82:	2302      	movs	r3, #2
 800ad84:	e027      	b.n	800add6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2224      	movs	r2, #36	@ 0x24
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0201 	bic.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800adb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d101      	bne.n	800adfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800adf6:	2302      	movs	r3, #2
 800adf8:	e02d      	b.n	800ae56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2224      	movs	r2, #36	@ 0x24
 800ae06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0201 	bic.w	r2, r2, #1
 800ae20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f850 	bl	800aedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e02d      	b.n	800aed2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2224      	movs	r2, #36	@ 0x24
 800ae82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f022 0201 	bic.w	r2, r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f812 	bl	800aedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d108      	bne.n	800aefe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aefc:	e031      	b.n	800af62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aefe:	2310      	movs	r3, #16
 800af00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af02:	2310      	movs	r3, #16
 800af04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	0e5b      	lsrs	r3, r3, #25
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	0f5b      	lsrs	r3, r3, #29
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	7b3a      	ldrb	r2, [r7, #12]
 800af2a:	4911      	ldr	r1, [pc, #68]	@ (800af70 <UARTEx_SetNbDataToProcess+0x94>)
 800af2c:	5c8a      	ldrb	r2, [r1, r2]
 800af2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af32:	7b3a      	ldrb	r2, [r7, #12]
 800af34:	490f      	ldr	r1, [pc, #60]	@ (800af74 <UARTEx_SetNbDataToProcess+0x98>)
 800af36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af38:	fb93 f3f2 	sdiv	r3, r3, r2
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	7b7a      	ldrb	r2, [r7, #13]
 800af48:	4909      	ldr	r1, [pc, #36]	@ (800af70 <UARTEx_SetNbDataToProcess+0x94>)
 800af4a:	5c8a      	ldrb	r2, [r1, r2]
 800af4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af50:	7b7a      	ldrb	r2, [r7, #13]
 800af52:	4908      	ldr	r1, [pc, #32]	@ (800af74 <UARTEx_SetNbDataToProcess+0x98>)
 800af54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af56:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af62:	bf00      	nop
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	0800b9e0 	.word	0x0800b9e0
 800af74:	0800b9e8 	.word	0x0800b9e8

0800af78 <_vsniprintf_r>:
 800af78:	b530      	push	{r4, r5, lr}
 800af7a:	4614      	mov	r4, r2
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	b09b      	sub	sp, #108	@ 0x6c
 800af80:	4605      	mov	r5, r0
 800af82:	461a      	mov	r2, r3
 800af84:	da05      	bge.n	800af92 <_vsniprintf_r+0x1a>
 800af86:	238b      	movs	r3, #139	@ 0x8b
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	b01b      	add	sp, #108	@ 0x6c
 800af90:	bd30      	pop	{r4, r5, pc}
 800af92:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800af96:	f8ad 300c 	strh.w	r3, [sp, #12]
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	9319      	str	r3, [sp, #100]	@ 0x64
 800afa0:	bf14      	ite	ne
 800afa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afa6:	4623      	moveq	r3, r4
 800afa8:	9302      	str	r3, [sp, #8]
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afb0:	9100      	str	r1, [sp, #0]
 800afb2:	9104      	str	r1, [sp, #16]
 800afb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800afb8:	4669      	mov	r1, sp
 800afba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800afbc:	f000 f9ae 	bl	800b31c <_svfiprintf_r>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	bfbc      	itt	lt
 800afc4:	238b      	movlt	r3, #139	@ 0x8b
 800afc6:	602b      	strlt	r3, [r5, #0]
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d0e0      	beq.n	800af8e <_vsniprintf_r+0x16>
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	e7dc      	b.n	800af8e <_vsniprintf_r+0x16>

0800afd4 <vsniprintf>:
 800afd4:	b507      	push	{r0, r1, r2, lr}
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	4613      	mov	r3, r2
 800afda:	460a      	mov	r2, r1
 800afdc:	4601      	mov	r1, r0
 800afde:	4803      	ldr	r0, [pc, #12]	@ (800afec <vsniprintf+0x18>)
 800afe0:	6800      	ldr	r0, [r0, #0]
 800afe2:	f7ff ffc9 	bl	800af78 <_vsniprintf_r>
 800afe6:	b003      	add	sp, #12
 800afe8:	f85d fb04 	ldr.w	pc, [sp], #4
 800afec:	24000010 	.word	0x24000010

0800aff0 <memset>:
 800aff0:	4402      	add	r2, r0
 800aff2:	4603      	mov	r3, r0
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d100      	bne.n	800affa <memset+0xa>
 800aff8:	4770      	bx	lr
 800affa:	f803 1b01 	strb.w	r1, [r3], #1
 800affe:	e7f9      	b.n	800aff4 <memset+0x4>

0800b000 <__errno>:
 800b000:	4b01      	ldr	r3, [pc, #4]	@ (800b008 <__errno+0x8>)
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	24000010 	.word	0x24000010

0800b00c <__libc_init_array>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	4d0d      	ldr	r5, [pc, #52]	@ (800b044 <__libc_init_array+0x38>)
 800b010:	4c0d      	ldr	r4, [pc, #52]	@ (800b048 <__libc_init_array+0x3c>)
 800b012:	1b64      	subs	r4, r4, r5
 800b014:	10a4      	asrs	r4, r4, #2
 800b016:	2600      	movs	r6, #0
 800b018:	42a6      	cmp	r6, r4
 800b01a:	d109      	bne.n	800b030 <__libc_init_array+0x24>
 800b01c:	4d0b      	ldr	r5, [pc, #44]	@ (800b04c <__libc_init_array+0x40>)
 800b01e:	4c0c      	ldr	r4, [pc, #48]	@ (800b050 <__libc_init_array+0x44>)
 800b020:	f000 fc64 	bl	800b8ec <_init>
 800b024:	1b64      	subs	r4, r4, r5
 800b026:	10a4      	asrs	r4, r4, #2
 800b028:	2600      	movs	r6, #0
 800b02a:	42a6      	cmp	r6, r4
 800b02c:	d105      	bne.n	800b03a <__libc_init_array+0x2e>
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	f855 3b04 	ldr.w	r3, [r5], #4
 800b034:	4798      	blx	r3
 800b036:	3601      	adds	r6, #1
 800b038:	e7ee      	b.n	800b018 <__libc_init_array+0xc>
 800b03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b03e:	4798      	blx	r3
 800b040:	3601      	adds	r6, #1
 800b042:	e7f2      	b.n	800b02a <__libc_init_array+0x1e>
 800b044:	0800ba2c 	.word	0x0800ba2c
 800b048:	0800ba2c 	.word	0x0800ba2c
 800b04c:	0800ba2c 	.word	0x0800ba2c
 800b050:	0800ba30 	.word	0x0800ba30

0800b054 <__retarget_lock_acquire_recursive>:
 800b054:	4770      	bx	lr

0800b056 <__retarget_lock_release_recursive>:
 800b056:	4770      	bx	lr

0800b058 <memcpy>:
 800b058:	440a      	add	r2, r1
 800b05a:	4291      	cmp	r1, r2
 800b05c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b060:	d100      	bne.n	800b064 <memcpy+0xc>
 800b062:	4770      	bx	lr
 800b064:	b510      	push	{r4, lr}
 800b066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b06e:	4291      	cmp	r1, r2
 800b070:	d1f9      	bne.n	800b066 <memcpy+0xe>
 800b072:	bd10      	pop	{r4, pc}

0800b074 <_free_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4605      	mov	r5, r0
 800b078:	2900      	cmp	r1, #0
 800b07a:	d041      	beq.n	800b100 <_free_r+0x8c>
 800b07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b080:	1f0c      	subs	r4, r1, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfb8      	it	lt
 800b086:	18e4      	addlt	r4, r4, r3
 800b088:	f000 f8e0 	bl	800b24c <__malloc_lock>
 800b08c:	4a1d      	ldr	r2, [pc, #116]	@ (800b104 <_free_r+0x90>)
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	b933      	cbnz	r3, 800b0a0 <_free_r+0x2c>
 800b092:	6063      	str	r3, [r4, #4]
 800b094:	6014      	str	r4, [r2, #0]
 800b096:	4628      	mov	r0, r5
 800b098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b09c:	f000 b8dc 	b.w	800b258 <__malloc_unlock>
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	d908      	bls.n	800b0b6 <_free_r+0x42>
 800b0a4:	6820      	ldr	r0, [r4, #0]
 800b0a6:	1821      	adds	r1, r4, r0
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf01      	itttt	eq
 800b0ac:	6819      	ldreq	r1, [r3, #0]
 800b0ae:	685b      	ldreq	r3, [r3, #4]
 800b0b0:	1809      	addeq	r1, r1, r0
 800b0b2:	6021      	streq	r1, [r4, #0]
 800b0b4:	e7ed      	b.n	800b092 <_free_r+0x1e>
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	b10b      	cbz	r3, 800b0c0 <_free_r+0x4c>
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	d9fa      	bls.n	800b0b6 <_free_r+0x42>
 800b0c0:	6811      	ldr	r1, [r2, #0]
 800b0c2:	1850      	adds	r0, r2, r1
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d10b      	bne.n	800b0e0 <_free_r+0x6c>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	4401      	add	r1, r0
 800b0cc:	1850      	adds	r0, r2, r1
 800b0ce:	4283      	cmp	r3, r0
 800b0d0:	6011      	str	r1, [r2, #0]
 800b0d2:	d1e0      	bne.n	800b096 <_free_r+0x22>
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	6053      	str	r3, [r2, #4]
 800b0da:	4408      	add	r0, r1
 800b0dc:	6010      	str	r0, [r2, #0]
 800b0de:	e7da      	b.n	800b096 <_free_r+0x22>
 800b0e0:	d902      	bls.n	800b0e8 <_free_r+0x74>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	e7d6      	b.n	800b096 <_free_r+0x22>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	1821      	adds	r1, r4, r0
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	bf04      	itt	eq
 800b0f0:	6819      	ldreq	r1, [r3, #0]
 800b0f2:	685b      	ldreq	r3, [r3, #4]
 800b0f4:	6063      	str	r3, [r4, #4]
 800b0f6:	bf04      	itt	eq
 800b0f8:	1809      	addeq	r1, r1, r0
 800b0fa:	6021      	streq	r1, [r4, #0]
 800b0fc:	6054      	str	r4, [r2, #4]
 800b0fe:	e7ca      	b.n	800b096 <_free_r+0x22>
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	240015f8 	.word	0x240015f8

0800b108 <sbrk_aligned>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4e0f      	ldr	r6, [pc, #60]	@ (800b148 <sbrk_aligned+0x40>)
 800b10c:	460c      	mov	r4, r1
 800b10e:	6831      	ldr	r1, [r6, #0]
 800b110:	4605      	mov	r5, r0
 800b112:	b911      	cbnz	r1, 800b11a <sbrk_aligned+0x12>
 800b114:	f000 fba4 	bl	800b860 <_sbrk_r>
 800b118:	6030      	str	r0, [r6, #0]
 800b11a:	4621      	mov	r1, r4
 800b11c:	4628      	mov	r0, r5
 800b11e:	f000 fb9f 	bl	800b860 <_sbrk_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d103      	bne.n	800b12e <sbrk_aligned+0x26>
 800b126:	f04f 34ff 	mov.w	r4, #4294967295
 800b12a:	4620      	mov	r0, r4
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
 800b12e:	1cc4      	adds	r4, r0, #3
 800b130:	f024 0403 	bic.w	r4, r4, #3
 800b134:	42a0      	cmp	r0, r4
 800b136:	d0f8      	beq.n	800b12a <sbrk_aligned+0x22>
 800b138:	1a21      	subs	r1, r4, r0
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 fb90 	bl	800b860 <_sbrk_r>
 800b140:	3001      	adds	r0, #1
 800b142:	d1f2      	bne.n	800b12a <sbrk_aligned+0x22>
 800b144:	e7ef      	b.n	800b126 <sbrk_aligned+0x1e>
 800b146:	bf00      	nop
 800b148:	240015f4 	.word	0x240015f4

0800b14c <_malloc_r>:
 800b14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b150:	1ccd      	adds	r5, r1, #3
 800b152:	f025 0503 	bic.w	r5, r5, #3
 800b156:	3508      	adds	r5, #8
 800b158:	2d0c      	cmp	r5, #12
 800b15a:	bf38      	it	cc
 800b15c:	250c      	movcc	r5, #12
 800b15e:	2d00      	cmp	r5, #0
 800b160:	4606      	mov	r6, r0
 800b162:	db01      	blt.n	800b168 <_malloc_r+0x1c>
 800b164:	42a9      	cmp	r1, r5
 800b166:	d904      	bls.n	800b172 <_malloc_r+0x26>
 800b168:	230c      	movs	r3, #12
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	2000      	movs	r0, #0
 800b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b248 <_malloc_r+0xfc>
 800b176:	f000 f869 	bl	800b24c <__malloc_lock>
 800b17a:	f8d8 3000 	ldr.w	r3, [r8]
 800b17e:	461c      	mov	r4, r3
 800b180:	bb44      	cbnz	r4, 800b1d4 <_malloc_r+0x88>
 800b182:	4629      	mov	r1, r5
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff ffbf 	bl	800b108 <sbrk_aligned>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	4604      	mov	r4, r0
 800b18e:	d158      	bne.n	800b242 <_malloc_r+0xf6>
 800b190:	f8d8 4000 	ldr.w	r4, [r8]
 800b194:	4627      	mov	r7, r4
 800b196:	2f00      	cmp	r7, #0
 800b198:	d143      	bne.n	800b222 <_malloc_r+0xd6>
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d04b      	beq.n	800b236 <_malloc_r+0xea>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	eb04 0903 	add.w	r9, r4, r3
 800b1a8:	f000 fb5a 	bl	800b860 <_sbrk_r>
 800b1ac:	4581      	cmp	r9, r0
 800b1ae:	d142      	bne.n	800b236 <_malloc_r+0xea>
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	1a6d      	subs	r5, r5, r1
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa6 	bl	800b108 <sbrk_aligned>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d03a      	beq.n	800b236 <_malloc_r+0xea>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	442b      	add	r3, r5
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	bb62      	cbnz	r2, 800b228 <_malloc_r+0xdc>
 800b1ce:	f8c8 7000 	str.w	r7, [r8]
 800b1d2:	e00f      	b.n	800b1f4 <_malloc_r+0xa8>
 800b1d4:	6822      	ldr	r2, [r4, #0]
 800b1d6:	1b52      	subs	r2, r2, r5
 800b1d8:	d420      	bmi.n	800b21c <_malloc_r+0xd0>
 800b1da:	2a0b      	cmp	r2, #11
 800b1dc:	d917      	bls.n	800b20e <_malloc_r+0xc2>
 800b1de:	1961      	adds	r1, r4, r5
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	6025      	str	r5, [r4, #0]
 800b1e4:	bf18      	it	ne
 800b1e6:	6059      	strne	r1, [r3, #4]
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	bf08      	it	eq
 800b1ec:	f8c8 1000 	streq.w	r1, [r8]
 800b1f0:	5162      	str	r2, [r4, r5]
 800b1f2:	604b      	str	r3, [r1, #4]
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f000 f82f 	bl	800b258 <__malloc_unlock>
 800b1fa:	f104 000b 	add.w	r0, r4, #11
 800b1fe:	1d23      	adds	r3, r4, #4
 800b200:	f020 0007 	bic.w	r0, r0, #7
 800b204:	1ac2      	subs	r2, r0, r3
 800b206:	bf1c      	itt	ne
 800b208:	1a1b      	subne	r3, r3, r0
 800b20a:	50a3      	strne	r3, [r4, r2]
 800b20c:	e7af      	b.n	800b16e <_malloc_r+0x22>
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	42a3      	cmp	r3, r4
 800b212:	bf0c      	ite	eq
 800b214:	f8c8 2000 	streq.w	r2, [r8]
 800b218:	605a      	strne	r2, [r3, #4]
 800b21a:	e7eb      	b.n	800b1f4 <_malloc_r+0xa8>
 800b21c:	4623      	mov	r3, r4
 800b21e:	6864      	ldr	r4, [r4, #4]
 800b220:	e7ae      	b.n	800b180 <_malloc_r+0x34>
 800b222:	463c      	mov	r4, r7
 800b224:	687f      	ldr	r7, [r7, #4]
 800b226:	e7b6      	b.n	800b196 <_malloc_r+0x4a>
 800b228:	461a      	mov	r2, r3
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	d1fb      	bne.n	800b228 <_malloc_r+0xdc>
 800b230:	2300      	movs	r3, #0
 800b232:	6053      	str	r3, [r2, #4]
 800b234:	e7de      	b.n	800b1f4 <_malloc_r+0xa8>
 800b236:	230c      	movs	r3, #12
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f80c 	bl	800b258 <__malloc_unlock>
 800b240:	e794      	b.n	800b16c <_malloc_r+0x20>
 800b242:	6005      	str	r5, [r0, #0]
 800b244:	e7d6      	b.n	800b1f4 <_malloc_r+0xa8>
 800b246:	bf00      	nop
 800b248:	240015f8 	.word	0x240015f8

0800b24c <__malloc_lock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	@ (800b254 <__malloc_lock+0x8>)
 800b24e:	f7ff bf01 	b.w	800b054 <__retarget_lock_acquire_recursive>
 800b252:	bf00      	nop
 800b254:	240015f0 	.word	0x240015f0

0800b258 <__malloc_unlock>:
 800b258:	4801      	ldr	r0, [pc, #4]	@ (800b260 <__malloc_unlock+0x8>)
 800b25a:	f7ff befc 	b.w	800b056 <__retarget_lock_release_recursive>
 800b25e:	bf00      	nop
 800b260:	240015f0 	.word	0x240015f0

0800b264 <__ssputs_r>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	688e      	ldr	r6, [r1, #8]
 800b26a:	461f      	mov	r7, r3
 800b26c:	42be      	cmp	r6, r7
 800b26e:	680b      	ldr	r3, [r1, #0]
 800b270:	4682      	mov	sl, r0
 800b272:	460c      	mov	r4, r1
 800b274:	4690      	mov	r8, r2
 800b276:	d82d      	bhi.n	800b2d4 <__ssputs_r+0x70>
 800b278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b27c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b280:	d026      	beq.n	800b2d0 <__ssputs_r+0x6c>
 800b282:	6965      	ldr	r5, [r4, #20]
 800b284:	6909      	ldr	r1, [r1, #16]
 800b286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b28a:	eba3 0901 	sub.w	r9, r3, r1
 800b28e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b292:	1c7b      	adds	r3, r7, #1
 800b294:	444b      	add	r3, r9
 800b296:	106d      	asrs	r5, r5, #1
 800b298:	429d      	cmp	r5, r3
 800b29a:	bf38      	it	cc
 800b29c:	461d      	movcc	r5, r3
 800b29e:	0553      	lsls	r3, r2, #21
 800b2a0:	d527      	bpl.n	800b2f2 <__ssputs_r+0x8e>
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	f7ff ff52 	bl	800b14c <_malloc_r>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	b360      	cbz	r0, 800b306 <__ssputs_r+0xa2>
 800b2ac:	6921      	ldr	r1, [r4, #16]
 800b2ae:	464a      	mov	r2, r9
 800b2b0:	f7ff fed2 	bl	800b058 <memcpy>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	6126      	str	r6, [r4, #16]
 800b2c2:	6165      	str	r5, [r4, #20]
 800b2c4:	444e      	add	r6, r9
 800b2c6:	eba5 0509 	sub.w	r5, r5, r9
 800b2ca:	6026      	str	r6, [r4, #0]
 800b2cc:	60a5      	str	r5, [r4, #8]
 800b2ce:	463e      	mov	r6, r7
 800b2d0:	42be      	cmp	r6, r7
 800b2d2:	d900      	bls.n	800b2d6 <__ssputs_r+0x72>
 800b2d4:	463e      	mov	r6, r7
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	4632      	mov	r2, r6
 800b2da:	4641      	mov	r1, r8
 800b2dc:	f000 faa6 	bl	800b82c <memmove>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	1b9b      	subs	r3, r3, r6
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	4433      	add	r3, r6
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	f000 fac4 	bl	800b880 <_realloc_r>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d1e0      	bne.n	800b2c0 <__ssputs_r+0x5c>
 800b2fe:	6921      	ldr	r1, [r4, #16]
 800b300:	4650      	mov	r0, sl
 800b302:	f7ff feb7 	bl	800b074 <_free_r>
 800b306:	230c      	movs	r3, #12
 800b308:	f8ca 3000 	str.w	r3, [sl]
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	e7e9      	b.n	800b2ee <__ssputs_r+0x8a>
	...

0800b31c <_svfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	4698      	mov	r8, r3
 800b322:	898b      	ldrh	r3, [r1, #12]
 800b324:	061b      	lsls	r3, r3, #24
 800b326:	b09d      	sub	sp, #116	@ 0x74
 800b328:	4607      	mov	r7, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	d510      	bpl.n	800b352 <_svfiprintf_r+0x36>
 800b330:	690b      	ldr	r3, [r1, #16]
 800b332:	b973      	cbnz	r3, 800b352 <_svfiprintf_r+0x36>
 800b334:	2140      	movs	r1, #64	@ 0x40
 800b336:	f7ff ff09 	bl	800b14c <_malloc_r>
 800b33a:	6028      	str	r0, [r5, #0]
 800b33c:	6128      	str	r0, [r5, #16]
 800b33e:	b930      	cbnz	r0, 800b34e <_svfiprintf_r+0x32>
 800b340:	230c      	movs	r3, #12
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	b01d      	add	sp, #116	@ 0x74
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	2340      	movs	r3, #64	@ 0x40
 800b350:	616b      	str	r3, [r5, #20]
 800b352:	2300      	movs	r3, #0
 800b354:	9309      	str	r3, [sp, #36]	@ 0x24
 800b356:	2320      	movs	r3, #32
 800b358:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b35c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b360:	2330      	movs	r3, #48	@ 0x30
 800b362:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b500 <_svfiprintf_r+0x1e4>
 800b366:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b36a:	f04f 0901 	mov.w	r9, #1
 800b36e:	4623      	mov	r3, r4
 800b370:	469a      	mov	sl, r3
 800b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b376:	b10a      	cbz	r2, 800b37c <_svfiprintf_r+0x60>
 800b378:	2a25      	cmp	r2, #37	@ 0x25
 800b37a:	d1f9      	bne.n	800b370 <_svfiprintf_r+0x54>
 800b37c:	ebba 0b04 	subs.w	fp, sl, r4
 800b380:	d00b      	beq.n	800b39a <_svfiprintf_r+0x7e>
 800b382:	465b      	mov	r3, fp
 800b384:	4622      	mov	r2, r4
 800b386:	4629      	mov	r1, r5
 800b388:	4638      	mov	r0, r7
 800b38a:	f7ff ff6b 	bl	800b264 <__ssputs_r>
 800b38e:	3001      	adds	r0, #1
 800b390:	f000 80a7 	beq.w	800b4e2 <_svfiprintf_r+0x1c6>
 800b394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b396:	445a      	add	r2, fp
 800b398:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39a:	f89a 3000 	ldrb.w	r3, [sl]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 809f 	beq.w	800b4e2 <_svfiprintf_r+0x1c6>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ae:	f10a 0a01 	add.w	sl, sl, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3bc:	4654      	mov	r4, sl
 800b3be:	2205      	movs	r2, #5
 800b3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c4:	484e      	ldr	r0, [pc, #312]	@ (800b500 <_svfiprintf_r+0x1e4>)
 800b3c6:	f7f4 ff93 	bl	80002f0 <memchr>
 800b3ca:	9a04      	ldr	r2, [sp, #16]
 800b3cc:	b9d8      	cbnz	r0, 800b406 <_svfiprintf_r+0xea>
 800b3ce:	06d0      	lsls	r0, r2, #27
 800b3d0:	bf44      	itt	mi
 800b3d2:	2320      	movmi	r3, #32
 800b3d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3d8:	0711      	lsls	r1, r2, #28
 800b3da:	bf44      	itt	mi
 800b3dc:	232b      	movmi	r3, #43	@ 0x2b
 800b3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3e8:	d015      	beq.n	800b416 <_svfiprintf_r+0xfa>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fa:	3b30      	subs	r3, #48	@ 0x30
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	d94b      	bls.n	800b498 <_svfiprintf_r+0x17c>
 800b400:	b1b0      	cbz	r0, 800b430 <_svfiprintf_r+0x114>
 800b402:	9207      	str	r2, [sp, #28]
 800b404:	e014      	b.n	800b430 <_svfiprintf_r+0x114>
 800b406:	eba0 0308 	sub.w	r3, r0, r8
 800b40a:	fa09 f303 	lsl.w	r3, r9, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	46a2      	mov	sl, r4
 800b414:	e7d2      	b.n	800b3bc <_svfiprintf_r+0xa0>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	1d19      	adds	r1, r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	9103      	str	r1, [sp, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfbb      	ittet	lt
 800b422:	425b      	neglt	r3, r3
 800b424:	f042 0202 	orrlt.w	r2, r2, #2
 800b428:	9307      	strge	r3, [sp, #28]
 800b42a:	9307      	strlt	r3, [sp, #28]
 800b42c:	bfb8      	it	lt
 800b42e:	9204      	strlt	r2, [sp, #16]
 800b430:	7823      	ldrb	r3, [r4, #0]
 800b432:	2b2e      	cmp	r3, #46	@ 0x2e
 800b434:	d10a      	bne.n	800b44c <_svfiprintf_r+0x130>
 800b436:	7863      	ldrb	r3, [r4, #1]
 800b438:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43a:	d132      	bne.n	800b4a2 <_svfiprintf_r+0x186>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	1d1a      	adds	r2, r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	9203      	str	r2, [sp, #12]
 800b444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b448:	3402      	adds	r4, #2
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b510 <_svfiprintf_r+0x1f4>
 800b450:	7821      	ldrb	r1, [r4, #0]
 800b452:	2203      	movs	r2, #3
 800b454:	4650      	mov	r0, sl
 800b456:	f7f4 ff4b 	bl	80002f0 <memchr>
 800b45a:	b138      	cbz	r0, 800b46c <_svfiprintf_r+0x150>
 800b45c:	9b04      	ldr	r3, [sp, #16]
 800b45e:	eba0 000a 	sub.w	r0, r0, sl
 800b462:	2240      	movs	r2, #64	@ 0x40
 800b464:	4082      	lsls	r2, r0
 800b466:	4313      	orrs	r3, r2
 800b468:	3401      	adds	r4, #1
 800b46a:	9304      	str	r3, [sp, #16]
 800b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b470:	4824      	ldr	r0, [pc, #144]	@ (800b504 <_svfiprintf_r+0x1e8>)
 800b472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b476:	2206      	movs	r2, #6
 800b478:	f7f4 ff3a 	bl	80002f0 <memchr>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d036      	beq.n	800b4ee <_svfiprintf_r+0x1d2>
 800b480:	4b21      	ldr	r3, [pc, #132]	@ (800b508 <_svfiprintf_r+0x1ec>)
 800b482:	bb1b      	cbnz	r3, 800b4cc <_svfiprintf_r+0x1b0>
 800b484:	9b03      	ldr	r3, [sp, #12]
 800b486:	3307      	adds	r3, #7
 800b488:	f023 0307 	bic.w	r3, r3, #7
 800b48c:	3308      	adds	r3, #8
 800b48e:	9303      	str	r3, [sp, #12]
 800b490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b492:	4433      	add	r3, r6
 800b494:	9309      	str	r3, [sp, #36]	@ 0x24
 800b496:	e76a      	b.n	800b36e <_svfiprintf_r+0x52>
 800b498:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49c:	460c      	mov	r4, r1
 800b49e:	2001      	movs	r0, #1
 800b4a0:	e7a8      	b.n	800b3f4 <_svfiprintf_r+0xd8>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	3401      	adds	r4, #1
 800b4a6:	9305      	str	r3, [sp, #20]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f04f 0c0a 	mov.w	ip, #10
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b4:	3a30      	subs	r2, #48	@ 0x30
 800b4b6:	2a09      	cmp	r2, #9
 800b4b8:	d903      	bls.n	800b4c2 <_svfiprintf_r+0x1a6>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d0c6      	beq.n	800b44c <_svfiprintf_r+0x130>
 800b4be:	9105      	str	r1, [sp, #20]
 800b4c0:	e7c4      	b.n	800b44c <_svfiprintf_r+0x130>
 800b4c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e7f0      	b.n	800b4ae <_svfiprintf_r+0x192>
 800b4cc:	ab03      	add	r3, sp, #12
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	462a      	mov	r2, r5
 800b4d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b50c <_svfiprintf_r+0x1f0>)
 800b4d4:	a904      	add	r1, sp, #16
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	f3af 8000 	nop.w
 800b4dc:	1c42      	adds	r2, r0, #1
 800b4de:	4606      	mov	r6, r0
 800b4e0:	d1d6      	bne.n	800b490 <_svfiprintf_r+0x174>
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	065b      	lsls	r3, r3, #25
 800b4e6:	f53f af2d 	bmi.w	800b344 <_svfiprintf_r+0x28>
 800b4ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4ec:	e72c      	b.n	800b348 <_svfiprintf_r+0x2c>
 800b4ee:	ab03      	add	r3, sp, #12
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	4b05      	ldr	r3, [pc, #20]	@ (800b50c <_svfiprintf_r+0x1f0>)
 800b4f6:	a904      	add	r1, sp, #16
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f000 f879 	bl	800b5f0 <_printf_i>
 800b4fe:	e7ed      	b.n	800b4dc <_svfiprintf_r+0x1c0>
 800b500:	0800b9f0 	.word	0x0800b9f0
 800b504:	0800b9fa 	.word	0x0800b9fa
 800b508:	00000000 	.word	0x00000000
 800b50c:	0800b265 	.word	0x0800b265
 800b510:	0800b9f6 	.word	0x0800b9f6

0800b514 <_printf_common>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	4616      	mov	r6, r2
 800b51a:	4698      	mov	r8, r3
 800b51c:	688a      	ldr	r2, [r1, #8]
 800b51e:	690b      	ldr	r3, [r1, #16]
 800b520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b524:	4293      	cmp	r3, r2
 800b526:	bfb8      	it	lt
 800b528:	4613      	movlt	r3, r2
 800b52a:	6033      	str	r3, [r6, #0]
 800b52c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b530:	4607      	mov	r7, r0
 800b532:	460c      	mov	r4, r1
 800b534:	b10a      	cbz	r2, 800b53a <_printf_common+0x26>
 800b536:	3301      	adds	r3, #1
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	0699      	lsls	r1, r3, #26
 800b53e:	bf42      	ittt	mi
 800b540:	6833      	ldrmi	r3, [r6, #0]
 800b542:	3302      	addmi	r3, #2
 800b544:	6033      	strmi	r3, [r6, #0]
 800b546:	6825      	ldr	r5, [r4, #0]
 800b548:	f015 0506 	ands.w	r5, r5, #6
 800b54c:	d106      	bne.n	800b55c <_printf_common+0x48>
 800b54e:	f104 0a19 	add.w	sl, r4, #25
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	6832      	ldr	r2, [r6, #0]
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc26      	bgt.n	800b5aa <_printf_common+0x96>
 800b55c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	3b00      	subs	r3, #0
 800b564:	bf18      	it	ne
 800b566:	2301      	movne	r3, #1
 800b568:	0692      	lsls	r2, r2, #26
 800b56a:	d42b      	bmi.n	800b5c4 <_printf_common+0xb0>
 800b56c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b570:	4641      	mov	r1, r8
 800b572:	4638      	mov	r0, r7
 800b574:	47c8      	blx	r9
 800b576:	3001      	adds	r0, #1
 800b578:	d01e      	beq.n	800b5b8 <_printf_common+0xa4>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	6922      	ldr	r2, [r4, #16]
 800b57e:	f003 0306 	and.w	r3, r3, #6
 800b582:	2b04      	cmp	r3, #4
 800b584:	bf02      	ittt	eq
 800b586:	68e5      	ldreq	r5, [r4, #12]
 800b588:	6833      	ldreq	r3, [r6, #0]
 800b58a:	1aed      	subeq	r5, r5, r3
 800b58c:	68a3      	ldr	r3, [r4, #8]
 800b58e:	bf0c      	ite	eq
 800b590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b594:	2500      	movne	r5, #0
 800b596:	4293      	cmp	r3, r2
 800b598:	bfc4      	itt	gt
 800b59a:	1a9b      	subgt	r3, r3, r2
 800b59c:	18ed      	addgt	r5, r5, r3
 800b59e:	2600      	movs	r6, #0
 800b5a0:	341a      	adds	r4, #26
 800b5a2:	42b5      	cmp	r5, r6
 800b5a4:	d11a      	bne.n	800b5dc <_printf_common+0xc8>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e008      	b.n	800b5bc <_printf_common+0xa8>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	4641      	mov	r1, r8
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	47c8      	blx	r9
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d103      	bne.n	800b5c0 <_printf_common+0xac>
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	3501      	adds	r5, #1
 800b5c2:	e7c6      	b.n	800b552 <_printf_common+0x3e>
 800b5c4:	18e1      	adds	r1, r4, r3
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	2030      	movs	r0, #48	@ 0x30
 800b5ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ce:	4422      	add	r2, r4
 800b5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d8:	3302      	adds	r3, #2
 800b5da:	e7c7      	b.n	800b56c <_printf_common+0x58>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4622      	mov	r2, r4
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	47c8      	blx	r9
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	d0e6      	beq.n	800b5b8 <_printf_common+0xa4>
 800b5ea:	3601      	adds	r6, #1
 800b5ec:	e7d9      	b.n	800b5a2 <_printf_common+0x8e>
	...

0800b5f0 <_printf_i>:
 800b5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	7e0f      	ldrb	r7, [r1, #24]
 800b5f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f8:	2f78      	cmp	r7, #120	@ 0x78
 800b5fa:	4691      	mov	r9, r2
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	469a      	mov	sl, r3
 800b602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b606:	d807      	bhi.n	800b618 <_printf_i+0x28>
 800b608:	2f62      	cmp	r7, #98	@ 0x62
 800b60a:	d80a      	bhi.n	800b622 <_printf_i+0x32>
 800b60c:	2f00      	cmp	r7, #0
 800b60e:	f000 80d1 	beq.w	800b7b4 <_printf_i+0x1c4>
 800b612:	2f58      	cmp	r7, #88	@ 0x58
 800b614:	f000 80b8 	beq.w	800b788 <_printf_i+0x198>
 800b618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b61c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b620:	e03a      	b.n	800b698 <_printf_i+0xa8>
 800b622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b626:	2b15      	cmp	r3, #21
 800b628:	d8f6      	bhi.n	800b618 <_printf_i+0x28>
 800b62a:	a101      	add	r1, pc, #4	@ (adr r1, 800b630 <_printf_i+0x40>)
 800b62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b630:	0800b689 	.word	0x0800b689
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b619 	.word	0x0800b619
 800b63c:	0800b619 	.word	0x0800b619
 800b640:	0800b619 	.word	0x0800b619
 800b644:	0800b619 	.word	0x0800b619
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b619 	.word	0x0800b619
 800b650:	0800b619 	.word	0x0800b619
 800b654:	0800b619 	.word	0x0800b619
 800b658:	0800b619 	.word	0x0800b619
 800b65c:	0800b79b 	.word	0x0800b79b
 800b660:	0800b6c7 	.word	0x0800b6c7
 800b664:	0800b755 	.word	0x0800b755
 800b668:	0800b619 	.word	0x0800b619
 800b66c:	0800b619 	.word	0x0800b619
 800b670:	0800b7bd 	.word	0x0800b7bd
 800b674:	0800b619 	.word	0x0800b619
 800b678:	0800b6c7 	.word	0x0800b6c7
 800b67c:	0800b619 	.word	0x0800b619
 800b680:	0800b619 	.word	0x0800b619
 800b684:	0800b75d 	.word	0x0800b75d
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	1d1a      	adds	r2, r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6032      	str	r2, [r6, #0]
 800b690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b698:	2301      	movs	r3, #1
 800b69a:	e09c      	b.n	800b7d6 <_printf_i+0x1e6>
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6031      	str	r1, [r6, #0]
 800b6a4:	0606      	lsls	r6, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xbc>
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	e003      	b.n	800b6b4 <_printf_i+0xc4>
 800b6ac:	0645      	lsls	r5, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xb8>
 800b6b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	da03      	bge.n	800b6c0 <_printf_i+0xd0>
 800b6b8:	232d      	movs	r3, #45	@ 0x2d
 800b6ba:	426d      	negs	r5, r5
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c0:	4858      	ldr	r0, [pc, #352]	@ (800b824 <_printf_i+0x234>)
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	e011      	b.n	800b6ea <_printf_i+0xfa>
 800b6c6:	6821      	ldr	r1, [r4, #0]
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	0608      	lsls	r0, r1, #24
 800b6cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d0:	d402      	bmi.n	800b6d8 <_printf_i+0xe8>
 800b6d2:	0649      	lsls	r1, r1, #25
 800b6d4:	bf48      	it	mi
 800b6d6:	b2ad      	uxthmi	r5, r5
 800b6d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6da:	4852      	ldr	r0, [pc, #328]	@ (800b824 <_printf_i+0x234>)
 800b6dc:	6033      	str	r3, [r6, #0]
 800b6de:	bf14      	ite	ne
 800b6e0:	230a      	movne	r3, #10
 800b6e2:	2308      	moveq	r3, #8
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ea:	6866      	ldr	r6, [r4, #4]
 800b6ec:	60a6      	str	r6, [r4, #8]
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	db05      	blt.n	800b6fe <_printf_i+0x10e>
 800b6f2:	6821      	ldr	r1, [r4, #0]
 800b6f4:	432e      	orrs	r6, r5
 800b6f6:	f021 0104 	bic.w	r1, r1, #4
 800b6fa:	6021      	str	r1, [r4, #0]
 800b6fc:	d04b      	beq.n	800b796 <_printf_i+0x1a6>
 800b6fe:	4616      	mov	r6, r2
 800b700:	fbb5 f1f3 	udiv	r1, r5, r3
 800b704:	fb03 5711 	mls	r7, r3, r1, r5
 800b708:	5dc7      	ldrb	r7, [r0, r7]
 800b70a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b70e:	462f      	mov	r7, r5
 800b710:	42bb      	cmp	r3, r7
 800b712:	460d      	mov	r5, r1
 800b714:	d9f4      	bls.n	800b700 <_printf_i+0x110>
 800b716:	2b08      	cmp	r3, #8
 800b718:	d10b      	bne.n	800b732 <_printf_i+0x142>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	07df      	lsls	r7, r3, #31
 800b71e:	d508      	bpl.n	800b732 <_printf_i+0x142>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	6861      	ldr	r1, [r4, #4]
 800b724:	4299      	cmp	r1, r3
 800b726:	bfde      	ittt	le
 800b728:	2330      	movle	r3, #48	@ 0x30
 800b72a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b72e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b732:	1b92      	subs	r2, r2, r6
 800b734:	6122      	str	r2, [r4, #16]
 800b736:	f8cd a000 	str.w	sl, [sp]
 800b73a:	464b      	mov	r3, r9
 800b73c:	aa03      	add	r2, sp, #12
 800b73e:	4621      	mov	r1, r4
 800b740:	4640      	mov	r0, r8
 800b742:	f7ff fee7 	bl	800b514 <_printf_common>
 800b746:	3001      	adds	r0, #1
 800b748:	d14a      	bne.n	800b7e0 <_printf_i+0x1f0>
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295
 800b74e:	b004      	add	sp, #16
 800b750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	f043 0320 	orr.w	r3, r3, #32
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	4832      	ldr	r0, [pc, #200]	@ (800b828 <_printf_i+0x238>)
 800b75e:	2778      	movs	r7, #120	@ 0x78
 800b760:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	6831      	ldr	r1, [r6, #0]
 800b768:	061f      	lsls	r7, r3, #24
 800b76a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b76e:	d402      	bmi.n	800b776 <_printf_i+0x186>
 800b770:	065f      	lsls	r7, r3, #25
 800b772:	bf48      	it	mi
 800b774:	b2ad      	uxthmi	r5, r5
 800b776:	6031      	str	r1, [r6, #0]
 800b778:	07d9      	lsls	r1, r3, #31
 800b77a:	bf44      	itt	mi
 800b77c:	f043 0320 	orrmi.w	r3, r3, #32
 800b780:	6023      	strmi	r3, [r4, #0]
 800b782:	b11d      	cbz	r5, 800b78c <_printf_i+0x19c>
 800b784:	2310      	movs	r3, #16
 800b786:	e7ad      	b.n	800b6e4 <_printf_i+0xf4>
 800b788:	4826      	ldr	r0, [pc, #152]	@ (800b824 <_printf_i+0x234>)
 800b78a:	e7e9      	b.n	800b760 <_printf_i+0x170>
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	f023 0320 	bic.w	r3, r3, #32
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	e7f6      	b.n	800b784 <_printf_i+0x194>
 800b796:	4616      	mov	r6, r2
 800b798:	e7bd      	b.n	800b716 <_printf_i+0x126>
 800b79a:	6833      	ldr	r3, [r6, #0]
 800b79c:	6825      	ldr	r5, [r4, #0]
 800b79e:	6961      	ldr	r1, [r4, #20]
 800b7a0:	1d18      	adds	r0, r3, #4
 800b7a2:	6030      	str	r0, [r6, #0]
 800b7a4:	062e      	lsls	r6, r5, #24
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	d501      	bpl.n	800b7ae <_printf_i+0x1be>
 800b7aa:	6019      	str	r1, [r3, #0]
 800b7ac:	e002      	b.n	800b7b4 <_printf_i+0x1c4>
 800b7ae:	0668      	lsls	r0, r5, #25
 800b7b0:	d5fb      	bpl.n	800b7aa <_printf_i+0x1ba>
 800b7b2:	8019      	strh	r1, [r3, #0]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	e7bc      	b.n	800b736 <_printf_i+0x146>
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	1d1a      	adds	r2, r3, #4
 800b7c0:	6032      	str	r2, [r6, #0]
 800b7c2:	681e      	ldr	r6, [r3, #0]
 800b7c4:	6862      	ldr	r2, [r4, #4]
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7f4 fd91 	bl	80002f0 <memchr>
 800b7ce:	b108      	cbz	r0, 800b7d4 <_printf_i+0x1e4>
 800b7d0:	1b80      	subs	r0, r0, r6
 800b7d2:	6060      	str	r0, [r4, #4]
 800b7d4:	6863      	ldr	r3, [r4, #4]
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7de:	e7aa      	b.n	800b736 <_printf_i+0x146>
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	47d0      	blx	sl
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d0ad      	beq.n	800b74a <_printf_i+0x15a>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	079b      	lsls	r3, r3, #30
 800b7f2:	d413      	bmi.n	800b81c <_printf_i+0x22c>
 800b7f4:	68e0      	ldr	r0, [r4, #12]
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	4298      	cmp	r0, r3
 800b7fa:	bfb8      	it	lt
 800b7fc:	4618      	movlt	r0, r3
 800b7fe:	e7a6      	b.n	800b74e <_printf_i+0x15e>
 800b800:	2301      	movs	r3, #1
 800b802:	4632      	mov	r2, r6
 800b804:	4649      	mov	r1, r9
 800b806:	4640      	mov	r0, r8
 800b808:	47d0      	blx	sl
 800b80a:	3001      	adds	r0, #1
 800b80c:	d09d      	beq.n	800b74a <_printf_i+0x15a>
 800b80e:	3501      	adds	r5, #1
 800b810:	68e3      	ldr	r3, [r4, #12]
 800b812:	9903      	ldr	r1, [sp, #12]
 800b814:	1a5b      	subs	r3, r3, r1
 800b816:	42ab      	cmp	r3, r5
 800b818:	dcf2      	bgt.n	800b800 <_printf_i+0x210>
 800b81a:	e7eb      	b.n	800b7f4 <_printf_i+0x204>
 800b81c:	2500      	movs	r5, #0
 800b81e:	f104 0619 	add.w	r6, r4, #25
 800b822:	e7f5      	b.n	800b810 <_printf_i+0x220>
 800b824:	0800ba01 	.word	0x0800ba01
 800b828:	0800ba12 	.word	0x0800ba12

0800b82c <memmove>:
 800b82c:	4288      	cmp	r0, r1
 800b82e:	b510      	push	{r4, lr}
 800b830:	eb01 0402 	add.w	r4, r1, r2
 800b834:	d902      	bls.n	800b83c <memmove+0x10>
 800b836:	4284      	cmp	r4, r0
 800b838:	4623      	mov	r3, r4
 800b83a:	d807      	bhi.n	800b84c <memmove+0x20>
 800b83c:	1e43      	subs	r3, r0, #1
 800b83e:	42a1      	cmp	r1, r4
 800b840:	d008      	beq.n	800b854 <memmove+0x28>
 800b842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b84a:	e7f8      	b.n	800b83e <memmove+0x12>
 800b84c:	4402      	add	r2, r0
 800b84e:	4601      	mov	r1, r0
 800b850:	428a      	cmp	r2, r1
 800b852:	d100      	bne.n	800b856 <memmove+0x2a>
 800b854:	bd10      	pop	{r4, pc}
 800b856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b85a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b85e:	e7f7      	b.n	800b850 <memmove+0x24>

0800b860 <_sbrk_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	@ (800b87c <_sbrk_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f6 fdf2 	bl	8002454 <_sbrk>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_sbrk_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_sbrk_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	240015ec 	.word	0x240015ec

0800b880 <_realloc_r>:
 800b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	4607      	mov	r7, r0
 800b886:	4614      	mov	r4, r2
 800b888:	460d      	mov	r5, r1
 800b88a:	b921      	cbnz	r1, 800b896 <_realloc_r+0x16>
 800b88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	4611      	mov	r1, r2
 800b892:	f7ff bc5b 	b.w	800b14c <_malloc_r>
 800b896:	b92a      	cbnz	r2, 800b8a4 <_realloc_r+0x24>
 800b898:	f7ff fbec 	bl	800b074 <_free_r>
 800b89c:	4625      	mov	r5, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a4:	f000 f81a 	bl	800b8dc <_malloc_usable_size_r>
 800b8a8:	4284      	cmp	r4, r0
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	d802      	bhi.n	800b8b4 <_realloc_r+0x34>
 800b8ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8b2:	d8f4      	bhi.n	800b89e <_realloc_r+0x1e>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f7ff fc48 	bl	800b14c <_malloc_r>
 800b8bc:	4680      	mov	r8, r0
 800b8be:	b908      	cbnz	r0, 800b8c4 <_realloc_r+0x44>
 800b8c0:	4645      	mov	r5, r8
 800b8c2:	e7ec      	b.n	800b89e <_realloc_r+0x1e>
 800b8c4:	42b4      	cmp	r4, r6
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	bf28      	it	cs
 800b8cc:	4632      	movcs	r2, r6
 800b8ce:	f7ff fbc3 	bl	800b058 <memcpy>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	f7ff fbcd 	bl	800b074 <_free_r>
 800b8da:	e7f1      	b.n	800b8c0 <_realloc_r+0x40>

0800b8dc <_malloc_usable_size_r>:
 800b8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e0:	1f18      	subs	r0, r3, #4
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bfbc      	itt	lt
 800b8e6:	580b      	ldrlt	r3, [r1, r0]
 800b8e8:	18c0      	addlt	r0, r0, r3
 800b8ea:	4770      	bx	lr

0800b8ec <_init>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	bf00      	nop
 800b8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f2:	bc08      	pop	{r3}
 800b8f4:	469e      	mov	lr, r3
 800b8f6:	4770      	bx	lr

0800b8f8 <_fini>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr
