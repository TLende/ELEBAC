/*
 * Flash_driver.c
 *
 *  Created on: Feb 22, 2025
 *      Author: Thomas
 */
#include "main.h"
#include "Flash_driver.h"

extern SPI_HandleTypeDef hspi1;

#define Flash hspi1

//Variabler
uint8_t SR_1=0;
uint8_t SR_2=0;
uint8_t SR_3=0;
uint8_t write_data[2048]={[0 ... 2047] = 0xFF};
uint8_t Read_data[2048];
uint16_t Buffer_Index=0;
uint16_t Page_Index=0;
uint16_t Block_Mem=0;

//pointer
uint8_t* Buffer=&write_data[0];


//Buffer for Tx and Rx
uint8_t Tx_Buffer[5]={0};
uint8_t Rx_Buffer[5]={0};

//OPCODE FOR FLASH
uint8_t OP_Dev_Res = 0xFF;
uint8_t OP_JEDEC_ID[2] = {0x9F, 0x00};

//Register constants
uint8_t OP_Read_Register = 0x0F;
uint8_t OP_Write_Register = 0x1F;
uint8_t SR_1_Addr = 0xA0;
uint8_t SR_2_Addr = 0xB0;
uint8_t SR_3_Addr = 0xC0;

uint8_t OP_Write_Enable = 0x06;
uint8_t OP_Write_Disable = 0x04;
uint8_t OP_Block_Erase = 0xD8;
uint8_t OP_Load_Program_Data = 0x02;
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
	delay_ns(DELAY_NS);
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
    	delay_ns(DELAY_NS);  // Wait until flash is ready
    }
}

void Read_Register(void){
	SR_1 = Read_Status_Register(SR_1_Addr);
	delay_ns(DELAY_NS);
	SR_2 = Read_Status_Register(SR_2_Addr);
	delay_ns(DELAY_NS);
	SR_3 = Read_Status_Register(SR_3_Addr);
	delay_ns(DELAY_NS);
}

void Write_Data(uint8_t* data, uint16_t lenght){
	if((Page_Index==0)&&(Buffer_Index==0)){
		Block_Erase(0);
	}
	uint16_t count=0;
	while(count<lenght){
		*Buffer=*data;
		Buffer++;
		data++;
		Buffer_Index++;
		count++;
		if(Buffer_Index>=2048){
			Write_to_page();
		}
	}
}

void Write_to_page(void){
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
	Write_Data_Flash(Page_Index);
	Page_Index++;
	Buffer_Index=0;
	Buffer=&write_data[0];
	memset(write_data, 0xFF, sizeof(write_data));
	Automatic_Block_Managment(Page_Index);
}

void Read_Data(uint16_t page, uint8_t* data){
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

void Automatic_Block_Managment(uint16_t Page_Index){
	uint16_t Block=Page_Index/64;
	if(!(Block_Mem==Block)){
		Block_Erase(Page_Index);
		Block_Mem=Block;
	}
	else{
		Block_Mem=Block;
	}
}

void Chip_Erase(void){
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
	if(UART_buffer == 0x59){
		USART1_Printf("Sletter minne...\r\n");
		for(int i = 0; i <= 1024; i++){
			Block_Erase(i*64);
		}
		Buffer_Index=0;
		Page_Index=0;
		USART1_Printf("Ferdig\r\n");
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}


void Write_Enable(void){
	csLOW();
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Write_Disable(void){
	csLOW();
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
	HAL_Delay(1000);
	if(BUF){
		uint8_t data = Read_Status_Register(SR_2_Addr);
		data|=0x08;
		Write_Status_Register(SR_2_Addr, data);
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
		data&=0xF7;
		Write_Status_Register(SR_2_Addr, data);
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
	data|=0x02;
	data&=0x83;
	Write_Status_Register(SR_1_Addr, data);
}

uint8_t Read_Status_Register(uint8_t SR){
	Tx_Buffer[0]=OP_Read_Register;
	Tx_Buffer[1]=SR;
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
	csHIGH();
	return Rx_Buffer[0];
}

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
	Tx_Buffer[0]=OP_Write_Register;
	Tx_Buffer[1]=SR;
	Tx_Buffer[2]=REG_DATA;
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
	csHIGH();
}

uint32_t Read_ID(void){
	uint8_t Buffer[3]={0};
	csLOW();
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
	csHIGH();
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
}

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
	Write_Enable();
	Tx_Buffer[0]=OP_Load_Program_Data;
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Write_Data_Flash(uint16_t Page_Addr){
	Tx_Buffer[0]=OP_Program_Ex;
	Tx_Buffer[1]=0x00;
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
	csHIGH();
	W25N_WaitForReady();
}

void Select_Page_Read(uint16_t Page_Addr){
	Tx_Buffer[0]=OP_Page_Data_Read;
	Tx_Buffer[1]=0x00;
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	csHIGH();
	W25N_WaitForReady();
}

void Read_Data_Buffer(uint8_t *Data, uint16_t len){
	Tx_Buffer[0]=OP_Read_Data;
	Tx_Buffer[1]=0x00;
	Tx_Buffer[2]=0x00;
	Tx_Buffer[3]=0x00;
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
	csHIGH();
}

void Read_Data_Cont(uint16_t len){
	Select_Page_Read(0);
	uint8_t Data_Buffer[len];

	Tx_Buffer[0]=OP_Read_Data;
	Tx_Buffer[1]=0x00;
	Tx_Buffer[2]=0x00;
	Tx_Buffer[3]=0x00;
	csLOW();

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
	}
	csHIGH();
}

void Block_Erase(uint16_t Page_Addr){
	Write_Enable();
	Tx_Buffer[0]=OP_Block_Erase;
	Tx_Buffer[1]=0x00;
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
	csLOW();
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
	csHIGH();
	W25N_WaitForReady();
}
