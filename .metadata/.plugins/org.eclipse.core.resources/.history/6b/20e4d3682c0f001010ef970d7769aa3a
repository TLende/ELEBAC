/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32h7xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32h7xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Flash_Global.h"
#include "CAN.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

uint16_t Time = 0;
uint32_t CLK_SIM=0;		//CLK in ms

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern FDCAN_HandleTypeDef hfdcan1;
extern DMA_HandleTypeDef hdma_spi1_tx;
extern SPI_HandleTypeDef hspi1;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
	  CLK_SIM++;
	  Time++;
	  if(Time>=100){
	    	Write_To_Flightdata=1;
	    	Time=0;
	  }
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32H7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
		uint8_t Temp[16];

		Temp[0]=0xFF;

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;

		//8 bytes with CAN data
		Temp[3]=RxData[0];
		Temp[4]=RxData[1];
		Temp[5]=RxData[2];
		Temp[6]=RxData[3];
		Temp[7]=RxData[4];
		Temp[8]=RxData[5];
		Temp[9]=RxData[6];
		Temp[10]=RxData[7];

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
		Temp[12]=(uint8_t)(CLK_SIM>>8);
		Temp[13]=(uint8_t)(CLK_SIM>>16);
		Temp[14]=(uint8_t)(CLK_SIM>>24);
		Temp[15]=0x00;

		//Write to flash if when start
		if((Start_Flight_Recording==1)&&(Temp[1]==100)){
			Write_Data(Temp, sizeof(Temp));
		}
	}
}

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	if (huart->Instance == USART1){
//		uint8_t Temp[16];
//
//		Temp[0]=0xFF;
//		Temp[1]=Rx_buffer[0];
//		Temp[2]=Rx_buffer[1];
//		Temp[3]=Rx_buffer[2];
//		Temp[4]=Rx_buffer[3];
//		Temp[5]=Rx_buffer[4];
//		Temp[6]=Rx_buffer[5];
//		Temp[7]=Rx_buffer[6];
//		Temp[8]=Rx_buffer[7];
//		Temp[9]=Rx_buffer[8];
//		Temp[10]=Rx_buffer[9];
//		Temp[11]=(uint8_t)(CLK_SIM);
//		Temp[12]=(uint8_t)(CLK_SIM>>8);
//		Temp[13]=(uint8_t)(CLK_SIM>>16);
//		Temp[14]=(uint8_t)(CLK_SIM>>24);
//		Temp[15]=0x00;
//
//		if((Start_Flight_Recording==1)&&(Temp[1]==100)){
//			Write_Data(&Temp[0], sizeof(Temp));
//		}
//		else{
//			HAL_UART_AbortReceive(&huart1);
//			while(huart1.Instance->ISR&0x0020){
//				uint8_t trash = huart1.Instance->RDR;
//				trash = huart1.Instance->ISR;
//				(void)trash;
//			}
//		}
//
//		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
//		BSP_LED_Toggle(LED_RED);
//	}
//}

/* USART1 Error Callback */
//void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
//    if (huart->Instance == USART1) {
//        uint32_t error = HAL_UART_GetError(huart);
//
//        if (error & HAL_UART_ERROR_ORE) {
//            // Overrun error occurred
//            __HAL_UART_CLEAR_OREFLAG(huart);
//        }
//
//        if (error & HAL_UART_ERROR_NE) {
//            // Noise error occurred
//        }
//
//        if (error & HAL_UART_ERROR_FE) {
//            // Framing error occurred
//        }
//
//        if (error & HAL_UART_ERROR_PE) {
//            // Parity error occurred
//        }
//
//        // Restart USART1 DMA Reception in case of an error
//        memset(Rx_buffer, 0x00, sizeof(Rx_buffer));
//        HAL_UART_AbortReceive(&huart1); // Abort current RX DMA transfer
//        HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], sizeof(Rx_buffer));
//    }
//}

//void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
//	if(hspi->Instance == SPI1){
//		csHIGH();
//		SPI_BUSY = 0;
//		delay_ns(DELAY_NS);
//	}

/* USER CODE END 1 */
